# Output of experiment test in iteration 499.
# Total 365 items are tested.
BLEURT: 0.698073339955828
Bleu_4: 0.8285486010921856
CIDEr: 3.434140677484983
ROUGE_L: 0.782712668390881
correct: 0.0
dump:
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_00, R_00) R_02: *(N_02, R_00) R_03: -(R_01,
      R_02) R_04: =(N_01, R_03) R_05: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - &id001 !!python/name:builtins.list ''
    dictitems:
      N_00:
      - a number in the phrase " find
      N_01:
      - the value of the double the double the half of the number minus the half of
        the number
      N_02:
      - a number in the phrase " its half whose half than its half "
      X_00:
      - the value of the number
      X_01:
      - the half of the number
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the first multiplier of the number
      - the ratio of 45 greater than half the number to the number
      - the coefficients of the number whose double
      N_01:
      - the value of the first multiplication of the number minus the second multiplication
        of the number
      - the number added to half the number
      - the value of the number whose double minus its half
      N_02:
      - the second multiplier of the number
      - a number in the phrase " 45 greater than its half "
      - the coefficient of the half number
      X_00:
      - the value of the number
      - the number we want to get
      - the value of the number
  info:
    answers:
    - n: '30'
    item_id: 604cc853117d71c492a62c61
    numbers:
      N_00: '2'
      N_01: '45'
      N_02: '0.500000000000000'
    split: null
    variables:
    - n
  text:
    numbers:
      shape:
      - 23
      target: __ __ __ __ __  0 __  1 __ __ __  2  2 __ __ __ __ __ __ __ __ __ __
    raw: find the number whose double is 45 greater than its half ?
    snippets:
      shape:
      - 3
      - 7
      target:
      - the number whose double is 45 greater
      - whose double is 45 greater than its
      - greater than its half ?
    tokens:
      shape:
      - 23
      target: '[CLS] find the number whose double is 45 greater than its half ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(R_00, R_01) R_03: =(N_01,
      R_02) R_04: -(R_00, R_01) R_05: =(N_02, R_04) R_06: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the sum of the two numbers
      N_02:
      - the value of one number minus the other number
      X_00:
      - the value of one number
      X_01:
      - the value of the other number
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the sum of the two numbers
      - the sum of the first number and the second number
      - the sum of two numbers
      N_02:
      - the value of the first number minus the second number
      - the value of the first number minus the second number
      - the value of one number minus the other number
      X_00:
      - the first number
      - the value of the first number
      - the value of one number
      X_01:
      - the second number
      - the value of the second number
      - the value of the other number
  info:
    answers:
    - n1: '35'
      n2: '20'
    item_id: 604cc853117d71c492a62d0b
    numbers:
      N_00: '2'
      N_01: '55'
      N_02: '15'
    split: null
    variables:
    - n1
    - n2
  text:
    numbers:
      shape:
      - 23
      target: __ __  0 __ __ __ __  1 __ __ __ __  2 __ __ __ __ __ __ __ __ __ __
    raw: find two numbers whose sum is 55 and whose difference is 15 .
    snippets:
      shape:
      - 3
      - 7
      target:
      - find two numbers whose sum
      - whose sum is 55 and whose difference
      - whose difference is 15 .
    tokens:
      shape:
      - 23
      target: '[CLS] find two numbers whose sum is 55 and whose difference is 15 .
        [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(2, R_00) R_03: =(R_01,
      R_02) R_04: +(R_00, R_01) R_05: =(N_01, R_04) R_06: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the sum of consecutive odd integers
      X_00:
      - the value of the smaller integer
      X_01:
      - the value of the larger integer
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the sum of two consecutive odd integers
      - the sum of two consecutive odd integers
      - the sum of the two consecutive odd integers
      X_00:
      - the smaller odd integer
      - the value of the smaller integer
      - the smaller of the two consecutive odd integers
      X_01:
      - the larger odd integer
      - the value of the larger integer
      - the larger of the two consecutive odd integers
  info:
    answers:
    - l: '63'
      s: '61'
    item_id: 604cc853117d71c492a630fe
    numbers:
      N_00: '2'
      N_01: '124'
    split: null
    variables:
    - s
    - l
  text:
    numbers:
      shape:
      - 23
      target: __ __ __ __  0 __ __ __ __  1 __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: the sum of two consecutive odd integers in 124 . what are the integers ?
    snippets:
      shape:
      - 2
      - 7
      target:
      - the sum of two consecutive odd integers
      - odd integers in 124 . what are
    tokens:
      shape:
      - 23
      target: '[CLS] the sum of two consecutive odd integers in 124 . what are the
        integers ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: -(R_00, R_01) R_03: =(N_01,
      R_02) R_04: +(R_00, R_01) R_05: =(N_02, R_04) R_06: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the value of the second number minus the first number
      N_02:
      - the value of their sum
      X_00:
      - the value of another number
      X_01:
      - the value of another number
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the value of another number minus one number
      - the value of another number minus one number
      - the value of the other number minus one number
      N_02:
      - the sum of the two numbers
      - the value of their sum
      - the sum of the two numbers
      X_00:
      - the value of another number
      - the value of another number
      - the value of the other number
      X_01:
      - the value of one number
      - the value of the one number
      - the value of one number
  info:
    answers:
    - n1: '9'
      n2: '18'
    item_id: 604cc853117d71c492a630a3
    numbers:
      N_00: '1'
      N_01: '9'
      N_02: '27'
    split: null
    variables:
    - n2
    - n1
  text:
    numbers:
      shape:
      - 23
      target: __  0 __ __  1 __ __ __ __ __ __ __  2  2  2  2 __ __ __ __ __ __ __
    raw: one number is nine less than another . their sum is twenty - seven .
    snippets:
      shape:
      - 3
      - 7
      target:
      - one number is nine
      - one number is nine less than another
      - their sum is twenty - seven .
    tokens:
      shape:
      - 23
      target: '[CLS] one number is nine less than another . their sum is twenty -
        seven . [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_01, R_00) R_02: =(N_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the distance of strolling in kilometers
      N_01:
      - the speed of strolling in kilometers per hour
      X_00:
      - the length of time of strolling
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of kilometers traveled by jeremy
      - the distance of jeremy's strolling in kilometers
      - the total number of kilometers strolled
      N_01:
      - the speed of jeremy
      - the speed of jeremy's strolling in kilometers per hour
      - the number of kilometers strolled per hour
      X_00:
      - the number of hours traveled by jeremy
      - the length of jeremy's strolling time
      - the number of hours strolled
  info:
    answers:
    - h: '10'
    item_id: 60f9186c90be09b72239eadb
    numbers:
      N_00: '20'
      N_01: '2'
    split: null
    variables:
    - h
  text:
    numbers:
      shape:
      - 23
      target: __ __ __  0 __ __  1 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: jeremy strolled 20 kilometers at 2 kilometers per hour . how long did jeremy
      stroll ?
    snippets:
      shape:
      - 2
      - 7
      target:
      - jeremy strolled 20 kilometers at 2
      - 20 kilometers at 2 kilometers per hour
    tokens:
      shape:
      - 23
      target: '[CLS] jeremy strolled 20 kilometers at 2 kilometers per hour . how
        long did jeremy stroll ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: /(N_01, 100) R_02: *(R_00, R_01) R_03: =(N_00,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the value of 57. 00 number minus 57. 00 number
      N_01:
      - the percentage of what 57. 00. 00 % of what 5799 is
      X_00:
      - the unknown number
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the value of a number
      - the result of applying a percentage of a number
      - 61. 3 % of the original number
      N_01:
      - the 57. 009's percentage of one number
      - the percentage of the number
      - the percentage of the original number making the original number equal to
        57. 009
      X_00:
      - the value of the the one number
      - the number in question
      - the original number
  info:
    answers:
    - n: '93'
    item_id: 60f9186c90be09b72239f00a
    numbers:
      N_00: '57.0090000000000'
      N_01: '61.3000000000000'
    split: null
    variables:
    - n
  text:
    numbers:
      shape:
      - 23
      target: __  0  0  0  0 __  1  1  1 __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: '57 . 00 ##9 is 61 . 3 % of what number ?'
    snippets:
      shape:
      - 2
      - 7
      target:
      - '57 . 00 ##9'
      - '00 ##9 is 61 . 3 %'
    tokens:
      shape:
      - 23
      target: '[CLS] 57 . 00 ##9 is 61 . 3 % of what number ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of tim's books
      N_01:
      - the number of sam's books
      X_00:
      - the total number of books
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of books owned by tim
      - the number of tim's books
      - the number of books that tim has
      N_01:
      - the number of books owned by sam
      - the number of sam's books
      - the number of books that sam has
      X_00:
      - the total number of books
      - the number of all books
      - the number of books that they have
  info:
    answers:
    - b: '96'
    item_id: 60f9186c90be09b72239ee85
    numbers:
      N_00: '44'
      N_01: '52'
    split: null
    variables:
    - b
  text:
    numbers:
      shape:
      - 23
      target: __ __ __  0 __ __ __ __  1 __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: tim has 44 books . sam has 52 books . how many books do they have together
      ?
    snippets:
      shape:
      - 2
      - 7
      target:
      - tim has 44 books . sam
      - . sam has 52 books . how
    tokens:
      shape:
      - 23
      target: '[CLS] tim has 44 books . sam has 52 books . how many books do they
        have together ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: -(R_00, R_01) R_03: =(N_01,
      R_02) R_04: *(N_02, R_01) R_05: =(R_00, R_04) R_06: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the value of the larger number minus the smaller number
      N_02:
      - the ratio of the larger number to the smaller number
      X_00:
      - the value of the larger number
      X_01:
      - the value of the smaller number
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the value of the larger number minus the smaller number
      - the value of the larger number minus the smaller number
      - the value of the larger number minus the smaller number
      N_02:
      - the ratio of the larger number to the smaller number
      - the ratio of the larger number to the smaller number
      - the ratio of the larger number to the smaller number
      X_00:
      - the larger number
      - the value of the larger number
      - the value of the larger number
      X_01:
      - the smaller number
      - the value of the smaller number
      - the value of the smaller number
  info:
    answers:
    - l: '250'
      s: '50'
    item_id: 604cc853117d71c492a63058
    numbers:
      N_00: '2'
      N_01: '200'
      N_02: '5'
    split: null
    variables:
    - l
    - s
  text:
    numbers:
      shape:
      - 23
      target: __ __  0 __ __ __ __  1 __ __ __ __ __ __ __  2 __ __ __ __ __ __ __
    raw: find two numbers whose difference is 200 , such that the larger number is
      5 times the smaller .
    snippets:
      shape:
      - 3
      - 7
      target:
      - find two numbers whose difference
      - whose difference is 200 , such that
      - larger number is 5 times the smaller
    tokens:
      shape:
      - 23
      target: '[CLS] find two numbers whose difference is 200 , such that the larger
        number is 5 times the smaller . [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(R_00, R_01) R_03: =(N_01,
      R_02) R_04: -(R_00, R_01) R_05: =(N_02, R_04) R_06: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the sum of the two numbers
      N_02:
      - the value of one number minus the other number
      X_00:
      - the value of one number
      X_01:
      - the value of the other number
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the sum of the first number and the second number
      - the sum of two numbers
      - the sum of two numbers
      N_02:
      - the value of the first number minus the second number
      - the value of one number minus the other number
      - the value of the first number number minus the second number
      X_00:
      - the value of the first number
      - one number to be found
      - the value of the first number
      X_01:
      - the value of the second number
      - the other number to be found
      - the value of the second number
  info:
    answers:
    - n1: '29'
      n2: '23'
    item_id: 604cc853117d71c492a62d15
    numbers:
      N_00: '2'
      N_01: '52'
      N_02: '6'
    split: null
    variables:
    - n1
    - n2
  text:
    numbers:
      shape:
      - 23
      target: __ __ __ __  0 __ __  1 __ __ __ __ __  2 __ __ __ __ __ __ __ __ __
    raw: the sum of two numbers is 52 , and their difference is 6 . what are the numbers
      ?
    snippets:
      shape:
      - 3
      - 7
      target:
      - the sum of two numbers is 52
      - two numbers is 52 , and their
      - their difference is 6 . what are
    tokens:
      shape:
      - 23
      target: '[CLS] the sum of two numbers is 52 , and their difference is 6 . what
        are the numbers ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(7, R_00) R_02: =(N_01, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of hamburgers sold last week
      X_00:
      - the number of hamburgers sold on each day
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of sold hamburgers during last week
      - the number of hamburgers a restaurant sold last week
      - the number of hamburgers the restaurant sold last week
      X_00:
      - the ratio of sold hamburgers during last week to 7
      - the number of hamburgers sold each day on average
      - the number of hamburgers the restaurant sold on average each day
  info:
    answers:
    - e: '9'
    item_id: 60f9186c90be09b72239e97e
    numbers:
      N_00: '1'
      N_01: '63'
    split: null
    variables:
    - e
  text:
    numbers:
      shape:
      - 23
      target: __  0 __ __  1 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'a restaurant sold 63 hamburger ##s last week . how many hamburger ##s on
      average were sold each day ?'
    snippets:
      shape:
      - 2
      - 7
      target:
      - a restaurant sold 63
      - 'a restaurant sold 63 hamburger ##s last'
    tokens:
      shape:
      - 23
      target: '[CLS] a restaurant sold 63 hamburger ##s last week . how many hamburger
        ##s on average were sold each day ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: *(N_02, R_01) R_03: -(R_00,
      R_02) R_04: =(N_01, R_03) R_05: +(R_00, R_01) R_06: =(N_03, R_05) R_07: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the value of one number minus twice another number
      N_02:
      - a number in the phrase " twice another "
      N_03:
      - the sum of the two numbers
      X_00:
      - the value of one number
      X_01:
      - the value of another number
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the value of the first number minus twice the second number
      - the value of the first number minus 2 times the second number
      - the value of one number minus twice another number
      N_02:
      - a number in the phrase " twice another "
      - the multiplier for the second number
      - a number in the phrase " twice "
      N_03:
      - the sum of the two numbers
      - the sum of the first number and the second number
      - the sum of the two numbers
      X_00:
      - the first number
      - the value of the first number
      - the value of one number
      X_01:
      - the second number
      - the value of the second number
      - the value of another number
  info:
    answers:
    - n1: '16'
      n2: '4'
    item_id: 604cc853117d71c492a62f2a
    numbers:
      N_00: '1'
      N_01: '8'
      N_02: '2'
      N_03: '20'
    split: null
    variables:
    - n1
    - n2
  text:
    numbers:
      shape:
      - 23
      target: __  0 __ __  1 __ __  2 __ __ __ __ __ __  3 __ __ __ __ __ __ __ __
    raw: one number is eight more than twice another , and their sum is 20 . what
      are the numbers ?
    snippets:
      shape:
      - 4
      - 7
      target:
      - one number is eight
      - one number is eight more than twice
      - eight more than twice another , and
      - their sum is 20 . what are
    tokens:
      shape:
      - 23
      target: '[CLS] one number is eight more than twice another , and their sum is
        20 . what are the numbers ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: *(N_02, R_01) R_03: -(R_00,
      R_02) R_04: =(N_01, R_03) R_05: +(R_00, R_01) R_06: =(N_03, R_05) R_07: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the value of the first number minus 6 times the second number
      N_02:
      - a number in the phrase " four times another "
      N_03:
      - the sum of the two numbers
      X_00:
      - the second number
      X_01:
      - the first number
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the value of the one number minus 4 times the other number
      - the value of one number minus four times another number
      - the value of one number minus four times the other number
      N_02:
      - a number in the phrase " four times another "
      - the value of the multiplier for another number
      - a number in the phrase " four times another "
      N_03:
      - the sum of the two numbers
      - the value of their sum
      - the sum of the two numbers
      X_00:
      - the one number
      - the value of one number
      - the value of one number
      X_01:
      - the other number
      - the value of another number
      - the value of the other number
  info:
    answers:
    - n1: '29'
      n2: '6'
    item_id: 604cc853117d71c492a6309f
    numbers:
      N_00: '1'
      N_01: '5'
      N_02: '4'
      N_03: '35'
      N_04: '2'
    split: null
    variables:
    - n1
    - n2
  text:
    numbers:
      shape:
      - 23
      target: __  0 __ __  1 __ __  2 __ __ __ __ __ __  3 __ __ __  4 __ __ __ __
    raw: one number is five more than four times another . their sum is 35 . find
      the two numbers .
    snippets:
      shape:
      - 5
      - 7
      target:
      - one number is five
      - one number is five more than four
      - five more than four times another .
      - their sum is 35 . find the
      - . find the two numbers .
    tokens:
      shape:
      - 23
      target: '[CLS] one number is five more than four times another . their sum is
        35 . find the two numbers . [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_01, N_02) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of rows of rows of rows of rows
      N_02:
      - the number of columns of bean plans
      X_00:
      - the total number of plants
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of rows
      - number of rows
      - the number of rows of bean plants
      N_02:
      - the number of columns
      - number of columns
      - the number of columns of bean plants
      X_00:
      - the number of plants can be planted in the rows and columns
      - number of plants in the garden
      - the total number of plants
  info:
    answers:
    - p: '780'
    item_id: 60f9186c90be09b72239ed4f
    numbers:
      N_00: '1'
      N_01: '52'
      N_02: '15'
    split: null
    variables:
    - p
  text:
    numbers:
      shape:
      - 23
      target: __  0 __ __  1 __ __  2 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: a garden has 52 rows and 15 columns of bean plans . how many plants are there
      in all ?
    snippets:
      shape:
      - 3
      - 7
      target:
      - a garden has 52
      - a garden has 52 rows and 15
      - 52 rows and 15 columns of bean
    tokens:
      shape:
      - 23
      target: '[CLS] a garden has 52 rows and 15 columns of bean plans . how many
        plants are there in all ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: -(N_00, N_02) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of squirrels
      N_02:
      - the number of nuts
      X_00:
      - the value of the number of squirrels minus the number of nuts
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of squirrels
      - number of squirrels in a tree
      - the number of squirrels
      N_02:
      - the number of nuts
      - number of nuts in a tree
      - the number of nuts
      X_00:
      - the number of nuts lack in the number of squirrels
      - the value of the number of squirrels minus the number of nuts
      - the value of the number of squirrels minus the number of nuts
  info:
    answers:
    - d: '2'
    item_id: 60f9186c90be09b72239f00d
    numbers:
      N_00: '4'
      N_01: '1'
      N_02: '2'
    split: null
    variables:
    - d
  text:
    numbers:
      shape:
      - 23
      target: __ __ __  0 __ __  1 __ __  2 __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: there are 4 squirrels in a tree with 2 nuts . how many more squirrels are
      there than nuts ?
    snippets:
      shape:
      - 3
      - 7
      target:
      - there are 4 squirrels in a
      - 4 squirrels in a tree with 2
      - a tree with 2 nuts . how
    tokens:
      shape:
      - 23
      target: '[CLS] there are 4 squirrels in a tree with 2 nuts . how many more squirrels
        are there than nuts ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: -(R_00, R_01) R_03: =(N_02,
      R_02) R_04: +(R_00, R_01) R_05: =(N_04, R_04) R_06: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the value of the first number minus the second number
      N_04:
      - the sum of the two integers
      X_00:
      - the first number
      X_01:
      - the second number
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the value of the first number minus the second number
      - the value of the smaller number minus the larger number
      - the value of the smaller number minus the larger number
      N_04:
      - the sum of the first number and the second number
      - the sum of two numbers
      - the sum of two numbers
      X_00:
      - the value of the first number
      - the value of the smaller number
      - the value of the smaller number
      X_01:
      - the value of the second number
      - the value of the larger number
      - the value of the larger number
  info:
    answers:
    - n1: '-7'
      n2: '4'
    item_id: 604cc853117d71c492a62e09
    numbers:
      N_00: '2'
      N_01: '1'
      N_02: '-11'
      N_03: '1'
      N_04: '-3'
      N_05: '2'
    split: null
    variables:
    - n1
    - n2
  text:
    numbers:
      shape:
      - 23
      target: __  0 __ __  1 __ __  2  2 __  3 __ __  4  4 __ __ __ __  5 __ __ __
    raw: two integers with a difference of - 11 and a sum of - 3 . what are the two
      numbers ?
    snippets:
      shape:
      - 6
      - 7
      target:
      - two integers with a
      - two integers with a difference of -
      - a difference of - 11 and a
      - '- 11 and a sum of -'
      - a sum of - 3 . what
      - what are the two numbers ?
    tokens:
      shape:
      - 23
      target: '[CLS] two integers with a difference of - 11 and a sum of - 3 . what
        are the two numbers ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of dogs tyler had
      N_01:
      - the number of puppies in one dog
      X_00:
      - the total number of puppies
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of dogs
      - the number of dogs
      - the number of dogs tyler had
      N_01:
      - the number of puppies for each dog
      - the number of puppies each dog had
      - the number of puppies each dog had
      X_00:
      - the total number of puppies
      - the number of puppies
      - the number of puppies tyler has now
  info:
    answers:
    - p: '75'
    item_id: 60f9186c90be09b72239eb04
    numbers:
      N_00: '15'
      N_01: '5'
    split: null
    variables:
    - p
  text:
    numbers:
      shape:
      - 23
      target: __ __ __  0 __ __ __ __ __  1 __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'tyler had 15 dogs . each dog had 5 pup ##pies . how many pup ##pies does
      tyler now have ?'
    snippets:
      shape:
      - 2
      - 7
      target:
      - tyler had 15 dogs . each
      - 'each dog had 5 pup ##pies .'
    tokens:
      shape:
      - 23
      target: '[CLS] tyler had 15 dogs . each dog had 5 pup ##pies . how many pup
        ##pies does tyler now have ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 8
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(60, R_00) R_02: =(N_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of minutes spent on working on science project
      X_00:
      - the length of time spent on science project
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of minutes spent
      - the total number of minutes of work
      - the minutes of marcia working on her science project
      X_00:
      - the number of hours spent
      - the number of hours
      - the hour of marcia working on her science project
  info:
    answers:
    - h: '5'
    item_id: 60f9186c90be09b72239ef47
    numbers:
      N_00: '300'
    split: null
    variables:
    - h
  text:
    numbers:
      shape:
      - 26
      target: __ __ __  0 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __
    raw: marcia spent 300 minutes working on her science project . how many hours
      did marcia spend on her science project ?
    snippets:
      shape:
      - 1
      - 7
      target:
      - marcia spent 300 minutes working on
    tokens:
      shape:
      - 26
      target: '[CLS] marcia spent 300 minutes working on her science project . how
        many hours did marcia spend on her science project ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 8
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_00, N_02) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of calories in a candy bar
      N_02:
      - the number of candy bars
      X_00:
      - the total number of calories in all candy bars
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of calories in a candy bar
      - the calory of a candy bar
      - the number of calories in one candy bar
      N_02:
      - the number of candy bars
      - the number of candy bars
      - the total number of candy bars
      X_00:
      - the total number of candy bars
      - the whole calories of candy bars
      - the total number of calories for the candy bars
  info:
    answers:
    - c: '15'
    item_id: 60f9186c90be09b72239f1bb
    numbers:
      N_00: '3'
      N_01: '1'
      N_02: '5'
    split: null
    variables:
    - c
  text:
    numbers:
      shape:
      - 26
      target: __ __ __  0 __ __ __  1 __ __ __ __ __ __ __ __ __ __  2 __ __ __ __
        __ __ __
    raw: 'there are 3 cal ##ories in a candy bar . how many cal ##ories are there
      in 5 candy bars ?'
    snippets:
      shape:
      - 3
      - 7
      target:
      - 'there are 3 cal ##ories in'
      - 'cal ##ories in a candy bar .'
      - are there in 5 candy bars ?
    tokens:
      shape:
      - 26
      target: '[CLS] there are 3 cal ##ories in a candy bar . how many cal ##ories
        are there in 5 candy bars ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 8
    tokens: 'R_00: __NEW_VAR(, ) R_01: -(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of stickers willie starts with
      N_01:
      - the number of stickers willie gives to emily
      X_00:
      - the number of stickers willie ends with
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of stickers willie starts with
      - the number of stickers
      - the initial number of stickers willie has
      N_01:
      - the number of stickers willie gives to emily
      - the number of stickers gave away
      - the number of stickers willie gave away
      X_00:
      - the number of stickers willie ends with
      - the rest number of stickers
      - the number of stickers willie has now
  info:
    answers:
    - s: '29'
    item_id: 60f9186c90be09b72239f113
    numbers:
      N_00: '36'
      N_01: '7'
    split: null
    variables:
    - s
  text:
    numbers:
      shape:
      - 26
      target: __ __ __ __  0 __ __ __ __ __  1 __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __
    raw: 'willie starts with 36 stick ##ers . he gives 7 to emily . how many stick
      ##ers does willie end with ?'
    snippets:
      shape:
      - 2
      - 7
      target:
      - 'willie starts with 36 stick ##ers .'
      - . he gives 7 to emily .
    tokens:
      shape:
      - 26
      target: '[CLS] willie starts with 36 stick ##ers . he gives 7 to emily . how
        many stick ##ers does willie end with ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 8
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of candies joseph has
      N_01:
      - the number of candies kathy gives joseph
      X_00:
      - the total number of candies joseph has
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of candies joseph has the first time
      - the number of candies joseph has
      - the number of candies joseph initially has
      N_01:
      - the number of candies kathy gave joseph
      - the number of candies kathy gives to joseph
      - the number of candies given
      X_00:
      - the total number of candies joseph has in all
      - the number of candies joseph has in all
      - the total number of candies joseph has now
  info:
    answers:
    - c: '105'
    item_id: 60f9186c90be09b72239ec6a
    numbers:
      N_00: '67'
      N_01: '38'
    split: null
    variables:
    - c
  text:
    numbers:
      shape:
      - 26
      target: __ __ __  0 __ __ __ __ __ __  1 __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __
    raw: 'joseph has 67 candi ##es . kathy gives joseph 38 more . how many candi ##es
      does joseph have in all ?'
    snippets:
      shape:
      - 2
      - 7
      target:
      - 'joseph has 67 candi ##es .'
      - kathy gives joseph 38 more . how
    tokens:
      shape:
      - 26
      target: '[CLS] joseph has 67 candi ##es . kathy gives joseph 38 more . how many
        candi ##es does joseph have in all ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 8
    tokens: 'R_00: __NEW_VAR(, ) R_01: -(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of pumpkins sara grew
      N_01:
      - the number of pumpkins eaten
      X_00:
      - the total number of pumpkins eaten by sara and rabbits
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of pumpkins sara grew
      - the number of pumpkins
      - the total number of pumpkins sara grew
      N_01:
      - the number of pumpkins the rabbits ate
      - the number of pumpkins that the rabbits ate
      - the number of pumpkins eaten by rabbits
      X_00:
      - the number of remaining pumpkins
      - the rest amount of the pumpkins after the rabbits'ambush
      - the number of pumpkins she has now
  info:
    answers:
    - r: '20'
    item_id: 60f9186c90be09b72239ef45
    numbers:
      N_00: '43'
      N_01: '23'
    split: null
    variables:
    - r
  text:
    numbers:
      shape:
      - 26
      target: __ __ __  0 __ __ __ __ __ __ __  1 __ __ __ __ __ __ __ __ __ __ __
        __ __ __
    raw: 'sara grew 43 pumpkin ##s , but the rabbits ate 23 pumpkin ##s . how many
      pumpkin ##s does sara have ?'
    snippets:
      shape:
      - 2
      - 7
      target:
      - 'sara grew 43 pumpkin ##s ,'
      - 'the rabbits ate 23 pumpkin ##s .'
    tokens:
      shape:
      - 26
      target: '[CLS] sara grew 43 pumpkin ##s , but the rabbits ate 23 pumpkin ##s
        . how many pumpkin ##s does sara have ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 8
    tokens: 'R_00: __NEW_VAR(, ) R_01: -(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of apples the farmer had
      N_01:
      - the number of apples he gave to his neighbor
      X_00:
      - the number of apples he now has
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the initial number of apples
      - the initial number of apples
      - the number of apples the farmer had in the past
      N_01:
      - the number of apples given to the neighbor
      - the number of apples given away
      - the number of apples the farmer gave to his neighbor
      X_00:
      - the number of apples now
      - the number of apples left
      - the number of apples the farmer has in now
  info:
    answers:
    - a: '39'
    item_id: 60f9186c90be09b72239f22d
    numbers:
      N_00: '127'
      N_01: '88'
    split: null
    variables:
    - a
  text:
    numbers:
      shape:
      - 26
      target: __ __ __ __  0 __ __ __ __  1 __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __
    raw: the farmer had 127 apples . he gave 88 apples to his neighbor . how many
      apples does he have now ?
    snippets:
      shape:
      - 2
      - 7
      target:
      - the farmer had 127 apples . he
      - . he gave 88 apples to his
    tokens:
      shape:
      - 26
      target: '[CLS] the farmer had 127 apples . he gave 88 apples to his neighbor
        . how many apples does he have now ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 8
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of skittles that brenda starts with
      N_01:
      - the number of skittles that brenda buys
      X_00:
      - the total number of skittles that brenda ends with
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - number of skittles she starts with
      - the number of brenda's skittles
      - the number of skittles brenda starts with
      N_01:
      - number of skittles she buys
      - the number of skittles bought more by brenda
      - the number of skittles she buys more
      X_00:
      - the total number of skittles
      - the total number of brenda's skittles
      - the number of skittles she ends with
  info:
    answers:
    - s: '15'
    item_id: 60f9186c90be09b72239ef8d
    numbers:
      N_00: '7'
      N_01: '8'
    split: null
    variables:
    - s
  text:
    numbers:
      shape:
      - 26
      target: __ __ __ __  0 __ __ __ __ __ __  1 __ __ __ __ __ __ __ __ __ __ __
        __ __ __
    raw: 'brenda starts with 7 ski ##ttle ##s . she buys 8 more . how many ski ##ttle
      ##s does brenda end with ?'
    snippets:
      shape:
      - 2
      - 7
      target:
      - 'brenda starts with 7 ski ##ttle ##s'
      - . she buys 8 more . how
    tokens:
      shape:
      - 26
      target: '[CLS] brenda starts with 7 ski ##ttle ##s . she buys 8 more . how many
        ski ##ttle ##s does brenda end with ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 8
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_02, R_00) R_02: +(N_01, R_01) R_03: -(R_02,
      R_00) R_04: =(N_03, R_03) R_05: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the value to subtract from twice the number in the second case
      N_02:
      - the multiplier of the number
      N_03:
      - the value of the number minus 2 times the number
      X_00:
      - the value of the number
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - a number in the phrase " five more than "
      - a number in the phrase " five more than "
      - the value of the added number to twice the number
      N_02:
      - a number in the phrase " twice the number "
      - a number in the phrase " twice the number "
      - the coefficient of the number
      N_03:
      - the value of the sum of five and twice the number minus the number
      - the value of five more than twice the number minus the number
      - the value of five more than twice the number minus the number
      X_00:
      - the unknown number
      - the number we want to find
      - the value of the number
  info:
    answers:
    - n: '4'
    item_id: 604cc853117d71c492a63012
    numbers:
      N_00: '1'
      N_01: '5'
      N_02: '2'
      N_03: '9'
    split: null
    variables:
    - n
  text:
    numbers:
      shape:
      - 26
      target: __ __  0 __ __ __ __ __  1 __ __  2 __ __ __ __ __ __  3 __ __ __ __
        __ __ __
    raw: 'if a number is sub ##tracted from five more than twice the number , the
      result is 9 . find the number .'
    snippets:
      shape:
      - 4
      - 7
      target:
      - if a number is sub
      - 'sub ##tracted from five more than twice'
      - five more than twice the number ,
      - the result is 9 . find the
    tokens:
      shape:
      - 26
      target: '[CLS] if a number is sub ##tracted from five more than twice the number
        , the result is 9 . find the number . [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 8
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_01, N_02) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the original number of cards arthur has
      N_01:
      - the original number of cards aaron has
      N_02:
      - the number of cards aaron finds
      X_00:
      - the total number of cards aaron has now
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of aaron's cards
      - the number of cards aaron has
      - the number of cards aaron has
      N_02:
      - the number of cards found by aaron additionally
      - the additional number of cards aaron finds
      - the number of cards aaron finds
      X_00:
      - the number of cards aaron has in the end
      - the total number of cards aaron has
      - the whole number of cards aaron ends with
  info:
    answers:
    - c: '67'
    item_id: 60f9186c90be09b72239f23d
    numbers:
      N_00: '6'
      N_01: '5'
      N_02: '62'
    split: null
    variables:
    - c
  text:
    numbers:
      shape:
      - 26
      target: __ __ __  0 __ __ __ __  1 __ __ __ __ __  2 __ __ __ __ __ __ __ __
        __ __ __
    raw: arthur has 6 cards . aaron has 5 cards . aaron finds another 62 . how many
      cards does aaron end with ?
    snippets:
      shape:
      - 3
      - 7
      target:
      - arthur has 6 cards . aaron
      - . aaron has 5 cards . aaron
      - aaron finds another 62 . how many
    tokens:
      shape:
      - 26
      target: '[CLS] arthur has 6 cards . aaron has 5 cards . aaron finds another
        62 . how many cards does aaron end with ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 8
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of gumballs melanie is selling
      N_01:
      - the price of a gumballs
      X_00:
      - the total cost of melanie's gumballs
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of gumballs sold
      - the number of melanie's selling gumballs
      - the number of gumballs
      N_01:
      - the price of a gumball
      - the price of a gumball
      - the cost of each gumball by cents
      X_00:
      - the total value of gumballs sold
      - the value of the number of gumballs times its price
      - the total cost of gumballs
  info:
    answers:
    - t: '32'
    item_id: 60f9186c90be09b72239eacf
    numbers:
      N_00: '4'
      N_01: '8'
    split: null
    variables:
    - t
  text:
    numbers:
      shape:
      - 26
      target: __ __ __ __  0 __ __ __  1 __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __
    raw: 'melanie is selling 4 gum ##balls for eight cents each . how much money can
      melanie get from selling the gum ##balls ?'
    snippets:
      shape:
      - 2
      - 7
      target:
      - 'melanie is selling 4 gum ##balls for'
      - 'gum ##balls for eight cents each .'
    tokens:
      shape:
      - 26
      target: '[CLS] melanie is selling 4 gum ##balls for eight cents each . how much
        money can melanie get from selling the gum ##balls ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 8
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of bottle caps jose starts with
      N_01:
      - the number of bottle caps he bought
      X_00:
      - the number of bottle caps jose ends with
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the initial number of bottle caps
      - the number of bottle caps
      - the number of bottle caps jose starts with
      N_01:
      - the additional number of bottle caps earned
      - the number of bottle caps added
      - the number of bottle caps he gets from rebecca
      X_00:
      - the total number of bottle caps
      - the number of bottle caps in all
      - the number of bottle caps jose ends with
  info:
    answers:
    - c: '9'
    item_id: 60f9186c90be09b72239f1ec
    numbers:
      N_00: '7'
      N_01: '2'
    split: null
    variables:
    - c
  text:
    numbers:
      shape:
      - 26
      target: __ __ __ __  0 __ __ __ __ __  1 __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __
    raw: jose starts with 7 bottle caps . he gets 2 more from rebecca . how many bottle
      caps does jose end with ?
    snippets:
      shape:
      - 2
      - 7
      target:
      - jose starts with 7 bottle caps .
      - . he gets 2 more from rebecca
    tokens:
      shape:
      - 26
      target: '[CLS] jose starts with 7 bottle caps . he gets 2 more from rebecca
        . how many bottle caps does jose end with ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 8
    tokens: 'R_00: __NEW_VAR(, ) R_01: -(R_00, N_00) R_02: =(N_01, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of marbles connie has
      N_01:
      - the value of the number of marbles juan has minus the number of marbles connie
        has
      X_00:
      - the number of marbles juan has
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of connie's marbles
      - the number of connie's marbles
      - the number of connie's marbles
      N_01:
      - the value of the number of juan's marbles minus the number of connie's marbles
      - the number of marbles juan has more than connie
      - the value of the number of juan's marbles minus the number of connie's marbles
      X_00:
      - the number of juan's marbles
      - the number of juan's marbles
      - the number of juan's marbles
  info:
    answers:
    - j: '498'
    item_id: 60f9186c90be09b72239ee18
    numbers:
      N_00: '323'
      N_01: '175'
    split: null
    variables:
    - j
  text:
    numbers:
      shape:
      - 26
      target: __ __ __  0 __ __ __ __ __  1 __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __
    raw: 'connie has 323 marble ##s . juan has 175 more marble ##s than connie . how
      many marble ##s does juan have ?'
    snippets:
      shape:
      - 2
      - 7
      target:
      - 'connie has 323 marble ##s .'
      - '. juan has 175 more marble ##s'
    tokens:
      shape:
      - 26
      target: '[CLS] connie has 323 marble ##s . juan has 175 more marble ##s than
        connie . how many marble ##s does juan have ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 8
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_04, R_00) R_02: +(N_02, R_00) R_03: *(N_00,
      R_02) R_04: -(R_01, R_03) R_05: =(N_03, R_04) R_06: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the multiplier of the sum
      N_02:
      - the added value to the number of a number
      N_03:
      - the value of 8 times the number minus the 5 times the sum of a number
      N_04:
      - the multiplier of the number
      X_00:
      - the value of the number
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the coefficient of the sum of a number and 2
      - a number multiplied by the sum of a number and 2
      - the value multiplied to the sum of a number and 2
      N_02:
      - the added value of a number to make the sum
      - a number in the phrase " 2 "
      - the number added to a number
      N_03:
      - the value of 8 times that number minus 5 times the sum of a number
      - the value of 8 times the number minus 5 times the sum of a number and 2
      - the value of 8 times the number minus 5 times the sum of a number and 2
      N_04:
      - the coefficient of that number
      - a number multiplied by the number
      - the value the number is multiplied by
      X_00:
      - the value of the number
      - the value of the number
      - the value of the number
  info:
    answers:
    - n: '7'
    item_id: 60f9186c90be09b72239ea5c
    numbers:
      N_00: '5'
      N_01: '1'
      N_02: '2'
      N_03: '11'
      N_04: '8'
    split: null
    variables:
    - n
  text:
    numbers:
      shape:
      - 26
      target: __  0 __ __ __ __  1 __ __  2 __  3 __ __  4 __ __ __ __ __ __ __ __
        __ __ __
    raw: 5 times the sum of a number and 2 is 11 less than 8 times that number . what
      is the number ?
    snippets:
      shape:
      - 5
      - 7
      target:
      - 5 times the sum
      - the sum of a number and 2
      - a number and 2 is 11 less
      - and 2 is 11 less than 8
      - 11 less than 8 times that number
    tokens:
      shape:
      - 26
      target: '[CLS] 5 times the sum of a number and 2 is 11 less than 8 times that
        number . what is the number ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 8
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of bottle caps nicholas starts with
      N_01:
      - the number of bottle caps he bought from catherine
      X_00:
      - the number of bottle caps nicholas ends with
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the initial number of bottle caps
      - the number of bottle caps
      - the number of bottle caps nicholas starts with
      N_01:
      - the additional number of bottle caps earned
      - the number of bottle caps added
      - the number of bottle caps he gets more from catherine
      X_00:
      - the total number of bottle caps
      - the number of bottle caps in all
      - the number of bottle caps nicholas ends with
  info:
    answers:
    - c: '93'
    item_id: 60f9186c90be09b72239eecb
    numbers:
      N_00: '8'
      N_01: '85'
    split: null
    variables:
    - c
  text:
    numbers:
      shape:
      - 26
      target: __ __ __ __  0 __ __ __ __ __  1 __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __
    raw: nicholas starts with 8 bottle caps . he gets 85 more from catherine . how
      many bottle caps does nicholas end with ?
    snippets:
      shape:
      - 2
      - 7
      target:
      - nicholas starts with 8 bottle caps .
      - . he gets 85 more from catherine
    tokens:
      shape:
      - 26
      target: '[CLS] nicholas starts with 8 bottle caps . he gets 85 more from catherine
        . how many bottle caps does nicholas end with ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 8
    tokens: 'R_00: __NEW_VAR(, ) R_01: -(N_01, N_00) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of cookies alyssa had
      N_01:
      - the number of cookies aiyan has
      X_00:
      - the value of the number of cookies aiyan had minus the number of cookies aiyan
        has
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of cookies alyssa has
      - the number of alyssa's cookies
      - the number of cookies alyssa has
      N_01:
      - the number of cookies aiyanna has
      - the number of aiyana's cookies
      - the number of cookies aiyanna has
      X_00:
      - the number of cookies aiyanna has more than alyssa
      - the value of the number of aiyana's cookies minus the number of alyssa's cookies
      - the value of the number of cookies aiyanna has minus the number of cookies
        alyssa has
  info:
    answers:
    - d: '11'
    item_id: 60f9186c90be09b72239f1f4
    numbers:
      N_00: '129'
      N_01: '140'
    split: null
    variables:
    - d
  text:
    numbers:
      shape:
      - 26
      target: __ __ __  0 __ __ __ __ __ __  1 __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __
    raw: 'alyssa had 129 cookies . ai ##yan ##na has 140 . how many more cookies does
      ai ##yan ##na have than alyssa ?'
    snippets:
      shape:
      - 2
      - 7
      target:
      - alyssa had 129 cookies . ai
      - '##yan ##na has 140 . how many'
    tokens:
      shape:
      - 26
      target: '[CLS] alyssa had 129 cookies . ai ##yan ##na has 140 . how many more
        cookies does ai ##yan ##na have than alyssa ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 8
    tokens: 'R_00: __NEW_VAR(, ) R_01: /(N_03, 100) R_02: *(R_00, R_01) R_03: -(R_00,
      R_02) R_04: =(N_01, R_03) R_05: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the discount rate of the hummer2
      N_03:
      - the discount rate of the msmer2 hrp2
      X_00:
      - the msrp2 for the sold dollars for a hummer2
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the selling price of hammer h1
      - the cost for hummer h1 after discount
      - the final cost of msrp
      N_03:
      - the discount rate
      - the discount rate of the hummer h1 expressed in percentage
      - the discount rate of msrp
      X_00:
      - the msrp of hammer h1
      - the msrp for a hummer h1
      - the cost of msrp
  info:
    answers:
    - m: '116600'
    item_id: 60f9186c90be09b72239ef98
    numbers:
      N_00: '1'
      N_01: '107272'
      N_02: '1'
      N_03: '8'
    split: null
    variables:
    - m
  text:
    numbers:
      shape:
      - 26
      target: __ __ __ __ __ __ __  0 __ __ __ __ __ __ __  1  1  1 __ __  2  3 __
        __ __ __
    raw: 'what is the ms ##rp for a hum ##mer h 1 that sold for 107 ##27 ##2 dollars
      after an 8 % discount ?'
    snippets:
      shape:
      - 4
      - 7
      target:
      - 'ms ##rp for a hum ##mer h'
      - 'that sold for 107 ##27 ##2 dollars'
      - '##2 dollars after an 8 % discount'
      - dollars after an 8 % discount ?
    tokens:
      shape:
      - 26
      target: '[CLS] what is the ms ##rp for a hum ##mer h 1 that sold for 107 ##27
        ##2 dollars after an 8 % discount ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(R_00, R_01) R_03: =(N_02,
      R_02) R_04: -(R_01, R_00) R_05: =(N_03, R_04) R_06: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the sum of the two numbers
      N_03:
      - the value of the larger number minus the smaller number
      X_00:
      - the value of the larger number
      X_01:
      - the value of the smaller number
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the sum of two numbers
      - the sum of the two numbers
      - the sum of the two numbers
      N_03:
      - the value of the larger number minus the smaller number
      - the value of the larger number minus the smaller number
      - the value of the larger number minus the smaller number
      X_00:
      - the smaller number
      - the value of the smaller number
      - the value of the smaller number
      X_01:
      - the larger number
      - the value of the larger number
      - the value of the larger number
  info:
    answers:
    - l: '44'
      s: '23'
    item_id: 604cc853117d71c492a62dd5
    numbers:
      N_00: '2'
      N_01: '1'
      N_02: '67'
      N_03: '21'
      N_04: '2'
    split: null
    variables:
    - s
    - l
  text:
    numbers:
      shape:
      - 29
      target: __  0 __ __  1 __ __  2 __ __ __ __ __  3 __ __ __ __ __ __ __ __  4
        __ __ __ __ __ __
    raw: two numbers have a sum of 67 . the smaller number is 21 less than the larger
      number . find the two numbers .
    snippets:
      shape:
      - 5
      - 7
      target:
      - two numbers have a
      - two numbers have a sum of 67
      - a sum of 67 . the smaller
      - smaller number is 21 less than the
      - . find the two numbers .
    tokens:
      shape:
      - 29
      target: '[CLS] two numbers have a sum of 67 . the smaller number is 21 less
        than the larger number . find the two numbers . [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: *(N_02, R_01) R_03: -(R_00,
      R_02) R_04: =(N_01, R_03) R_05: +(R_00, R_01) R_06: =(N_04, R_05) R_07: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the value of one number minus 3 times another number
      N_02:
      - a number in the phrase " 3 times another number "
      N_04:
      - the sum of two numbers
      X_00:
      - the value of one number
      X_01:
      - the value of another number
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the value the first number minus 3 times the second number
      - the value of the first number minus 3 times the second number
      - the value of one number minus three times another number
      N_02:
      - the multiplier of the second number
      - a number in the phrase " 3 times another number "
      - a number in the phrase " 3 times another number "
      N_04:
      - the sum of the first number and the second number
      - the sum of two numbers
      - the sum of the two numbers
      X_00:
      - the value of the first number
      - the first number
      - the value of one number
      X_01:
      - the value of the second number
      - the second number
      - the value of another number
  info:
    answers:
    - n1: '119'
      n2: '38'
    item_id: 604cc853117d71c492a62fc4
    numbers:
      N_00: '1'
      N_01: '5'
      N_02: '3'
      N_03: '2'
      N_04: '157'
    split: null
    variables:
    - n1
    - n2
  text:
    numbers:
      shape:
      - 29
      target: __  0 __ __  1 __ __  2 __ __ __ __ __ __ __  3 __ __  4 __ __ __ __
        __ __ __ __ __ __
    raw: one number is 5 more than 3 times another number , the sum of two numbers
      is 157 . find the bigger number .
    snippets:
      shape:
      - 5
      - 7
      target:
      - one number is 5
      - one number is 5 more than 3
      - 5 more than 3 times another number
      - the sum of two numbers is 157
      - two numbers is 157 . find the
    tokens:
      shape:
      - 29
      target: '[CLS] one number is 5 more than 3 times another number , the sum of
        two numbers is 157 . find the bigger number . [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_01, R_00) R_02: -(R_01, N_00) R_03: =(R_00,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the constant that is subtracted from 4 times the original number
      N_01:
      - a number in the phrase " 4 times a certain number "
      X_00:
      - the original number
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the subtracted from 4 times a certain number
      - a number subtracted from 4 times the number
      - the number subtracted from'4 times a certain number '
      N_01:
      - the multiplier of a certain number
      - a number multiplied by the number
      - the number multiplying a certain number
      X_00:
      - the value of a certain number when the value of 4 times the number minus 18
        equal the number
      - the number that equals 18 subtracted from 4 times the same number
      - the certain number
  info:
    answers:
    - n: '6'
    item_id: 60f9186c90be09b72239eebf
    numbers:
      N_00: '18'
      N_01: '4'
      N_02: '1'
    split: null
    variables:
    - n
  text:
    numbers:
      shape:
      - 29
      target: __ __  0 __ __ __ __  1 __  2 __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __
    raw: 'when 18 is sub ##tracted from 4 times a certain number , the result is the
      original number . what is the number ?'
    snippets:
      shape:
      - 3
      - 7
      target:
      - 'when 18 is sub ##tracted'
      - 'sub ##tracted from 4 times a certain'
      - from 4 times a certain number ,
    tokens:
      shape:
      - 29
      target: '[CLS] when 18 is sub ##tracted from 4 times a certain number , the
        result is the original number . what is the number ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of chapters for each book
      N_01:
      - the number of chapters in each book
      X_00:
      - the total number of chapters
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of books
      - the number of books
      - the number of books mrs. hilt read
      N_01:
      - the number of chapters in each book
      - the number of chapters in each book
      - the number of chapters in each book
      X_00:
      - the total number of chapters
      - the number of chapters in all books
      - the total number of chapters
  info:
    answers:
    - c: '68'
    item_id: 60f9186c90be09b72239ecb2
    numbers:
      N_00: '4'
      N_01: '17'
    split: null
    variables:
    - c
  text:
    numbers:
      shape:
      - 29
      target: __ __ __ __ __  0 __ __ __ __ __  1 __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __
    raw: mrs . hilt read 4 books . each book had 17 chapters in it . how many chapters
      did mrs . hilt read ?
    snippets:
      shape:
      - 2
      - 7
      target:
      - . hilt read 4 books . each
      - each book had 17 chapters in it
    tokens:
      shape:
      - 29
      target: '[CLS] mrs . hilt read 4 books . each book had 17 chapters in it . how
        many chapters did mrs . hilt read ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: *(N_02, R_01) R_03: -(R_00,
      R_02) R_04: =(N_01, R_03) R_05: +(R_00, R_01) R_06: =(N_03, R_05) R_07: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the value of the larger number minus 4 times the other number
      N_02:
      - the value multiplied by the other number
      N_03:
      - the sum of the two numbers
      X_00:
      - the value of the larger number
      X_01:
      - the value of the other number
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the value of the larger number minus 4 times the smaller number
      - the value of the larger number minus 4 times the smaller number
      - the value the larger number minus 4 times the smaller number
      N_02:
      - a number in the phrase " 4 times the other "
      - a number in the phrase " 4 times the other "
      - a number in the phrase " 4 "
      N_03:
      - the sum of the two numbers
      - the sum of the original two numbers
      - the sum of two numbers
      X_00:
      - the larger number
      - the larger number
      - the value of the larger number
      X_01:
      - the smaller number
      - the smaller number
      - the value of the smaller number
  info:
    answers:
    - l: '26.8000000000000'
      s: '6.20000000000000'
    item_id: 604cc853117d71c492a62d80
    numbers:
      N_00: '2'
      N_01: '2'
      N_02: '4'
      N_03: '33'
      N_04: '2'
    split: null
    variables:
    - l
    - s
  text:
    numbers:
      shape:
      - 29
      target: __ __ __ __  0 __ __  1 __ __  2 __ __ __ __ __ __ __  3 __ __ __  4
        __ __ __ __ __ __
    raw: the larger of two numbers is 2 more than 4 times the other . their sum is
      33 . find the two numbers .
    snippets:
      shape:
      - 5
      - 7
      target:
      - the larger of two numbers is 2
      - two numbers is 2 more than 4
      - 2 more than 4 times the other
      - their sum is 33 . find the
      - . find the two numbers .
    tokens:
      shape:
      - 29
      target: '[CLS] the larger of two numbers is 2 more than 4 times the other .
        their sum is 33 . find the two numbers . [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of pops gino has
      N_01:
      - the number of popsicle sticks i have
      X_00:
      - the total number of popsicle sticks
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of popsicle sticks owned by gino
      - the number of gino's popsicle sticks
      - the number of popsicle sticks gino has
      N_01:
      - the number of popsicle sticks owned by me
      - the number of my popsicle sticks
      - the number of popsicle sticks i have
      X_00:
      - the total number of popsicle sticks
      - the number of our popsicle sticks in total
      - the sum number of our popsicle sticks
  info:
    answers:
    - s: '113'
    item_id: 60f9186c90be09b72239f09c
    numbers:
      N_00: '63'
      N_01: '50'
    split: null
    variables:
    - s
  text:
    numbers:
      shape:
      - 29
      target: __ __ __ __  0 __ __ __ __ __ __  1 __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __
    raw: 'gin ##o has 63 pops ##icle sticks . i have 50 pops ##icle sticks . what
      is the sum of our pops ##icle sticks ?'
    snippets:
      shape:
      - 2
      - 7
      target:
      - 'gin ##o has 63 pops ##icle sticks'
      - '. i have 50 pops ##icle sticks'
    tokens:
      shape:
      - 29
      target: '[CLS] gin ##o has 63 pops ##icle sticks . i have 50 pops ##icle sticks
        . what is the sum of our pops ##icle sticks ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of scissors in the drawer
      N_01:
      - the number of scissors keith placed in the drawer
      X_00:
      - the total number of scissors now in the drawer
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the initial number of scissors
      - number of scissors in the drawer
      - the number of scissors in the drawer
      N_01:
      - the number of additional scissors
      - number of scissors keith additionally put in the drawer
      - the number of additional scissors keith placed in the drawer
      X_00:
      - the total number of scissors
      - the total number of scissors in the drawer
      - the total number of scissors in the drawer
  info:
    answers:
    - s: '76'
    item_id: 60f9186c90be09b72239f1eb
    numbers:
      N_00: '54'
      N_01: '22'
    split: null
    variables:
    - s
  text:
    numbers:
      shape:
      - 29
      target: __ __ __  0 __ __ __ __ __ __ __  1 __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __
    raw: there are 54 scissors in the drawer . keith placed 22 scissors in the drawer
      . how many scissors are now there in all ?
    snippets:
      shape:
      - 2
      - 7
      target:
      - there are 54 scissors in the
      - . keith placed 22 scissors in the
    tokens:
      shape:
      - 29
      target: '[CLS] there are 54 scissors in the drawer . keith placed 22 scissors
        in the drawer . how many scissors are now there in all ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: *(N_02, R_00) R_03: -(R_02,
      R_01) R_04: =(N_01, R_03) R_05: +(R_00, R_01) R_06: =(N_03, R_05) R_07: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the value of twice the smaller number minus the larger number
      N_02:
      - a number in the phrase " twice the smaller "
      N_03:
      - the sum of the two numbers
      X_00:
      - the smaller number
      X_01:
      - the larger number
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the value of twice the smaller number minus the larger number
      - the value of twice the smaller number minus the larger number
      - the value of twice the smaller number minus the larger number
      N_02:
      - a number in the phrase " twice the smaller "
      - a number in the phrase " twice the smaller "
      - a number multiplied by the smaller number
      N_03:
      - the sum of the two numbers
      - the sum of the two numbers
      - the sum of the two numbers
      X_00:
      - the smaller number
      - the value of the smaller number
      - the value of the smaller number
      X_01:
      - the larger number
      - the value of the larger number
      - the value of the larger number
  info:
    answers:
    - l: '14'
      s: '9'
    item_id: 604cc853117d71c492a63030
    numbers:
      N_00: '2'
      N_01: '4'
      N_02: '2'
      N_03: '23'
    split: null
    variables:
    - s
    - l
  text:
    numbers:
      shape:
      - 29
      target: __ __ __ __  0 __ __  1 __ __  2 __ __ __ __ __ __  3  3  3  3 __ __
        __ __ __ __ __ __
    raw: the larger of two numbers is four less than twice the smaller . their sum
      is twenty - three . find the larger number .
    snippets:
      shape:
      - 4
      - 7
      target:
      - the larger of two numbers is four
      - two numbers is four less than twice
      - four less than twice the smaller .
      - their sum is twenty - three .
    tokens:
      shape:
      - 29
      target: '[CLS] the larger of two numbers is four less than twice the smaller
        . their sum is twenty - three . find the larger number . [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(R_00, R_01) R_03: =(N_01,
      R_02) R_04: *(N_02, R_00) R_05: *(N_03, R_01) R_06: -(R_04, R_05) R_07: =(N_04,
      R_06) R_08: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the sum of the larger number and the smaller number
      N_02:
      - a number in the phrase " twice the larger number "
      N_03:
      - a number in the phrase " 3 times the smaller number "
      N_04:
      - the value of twice the larger number minus 3 times the smaller number
      X_00:
      - the value of the larger number
      X_01:
      - the value of the smaller number
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the sum of the larger number and the smaller number
      - the sum of 2 numbers
      - the sum of two numbers
      N_02:
      - the multiplier for the larger number
      - the multiple to compare the larger number to 3 times the smaller number
      - a number in the phrase " twice the larger number "
      N_03:
      - the multiplier for the smaller number
      - the multiple to compare the smaller number to 2 times the larger number
      - a number in the phrase " 3 times the smaller number "
      N_04:
      - the value of 2 times the larger number minus 3 times the smaller number
      - the value of 2 times the larger number minus 3 times the smaller number
      - the value of twice the larger number minus 3 times the smaller number
      X_00:
      - the value of the larger number
      - the larger number
      - the value of the larger number
      X_01:
      - the value of the smaller number
      - the smaller number
      - the value of the smaller number
  info:
    answers:
    - l: '29'
      s: '14'
    item_id: 604cc852117d71c492a62b59
    numbers:
      N_00: '2'
      N_01: '43'
      N_02: '2'
      N_03: '3'
      N_04: '16'
    split: null
    variables:
    - l
    - s
  text:
    numbers:
      shape:
      - 29
      target: __ __ __ __  0 __ __  1 __  2 __ __ __ __  3 __ __ __ __ __  4 __ __
        __ __ __ __ __ __
    raw: the sum of 2 numbers is 43 . twice the larger number exceeds 3 times the
      smaller number by 16 . find the number .
    snippets:
      shape:
      - 5
      - 7
      target:
      - the sum of 2 numbers is 43
      - 2 numbers is 43 . twice the
      - is 43 . twice the larger number
      - larger number exceeds 3 times the smaller
      - smaller number by 16 . find the
    tokens:
      shape:
      - 29
      target: '[CLS] the sum of 2 numbers is 43 . twice the larger number exceeds
        3 times the smaller number by 16 . find the number . [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: /(R_00, R_01) R_03: /(N_01,
      N_02) R_04: =(R_02, R_03) R_05: +(R_00, R_01) R_06: =(N_03, R_05) R_07: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the numerator of the ratio of buses to bicycles
      N_02:
      - the denominator of the ratio of buses to bicycles
      N_03:
      - the sum of buses
      X_00:
      - the number of buses
      X_01:
      - the number of bicycles
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the numerator of the ratio of the number of buses to the number of bicycles
      - the numerator of the ratio of buses to bicycles
      - the numerator of the ratio of the number of buses to that of bicycles
      N_02:
      - the denominator of the ratio of the number of buses to the number of bicycles
      - the denominator of the ratio of buses to bicycles
      - the denominator of the ratio of the number of buses to that of bicycles
      N_03:
      - the total number of buses and bicycles
      - the total number of vehicles
      - the total number of vehicles
      X_00:
      - the number of buses
      - the number of buses
      - the number of buses
      X_01:
      - the number of bicycles
      - the number of bicycles
      - the number of bicycles
  info:
    answers:
    - b1: '6'
      b2: '9'
    item_id: 604cc853117d71c492a62ea2
    numbers:
      N_00: '2'
      N_01: '3'
      N_02: '2'
      N_03: '15'
      N_04: '2'
    split: null
    variables:
    - b2
    - b1
  text:
    numbers:
      shape:
      - 29
      target: __ __ __ __  0 __ __ __  1 __  2 __ __ __ __ __ __ __ __ __  3 __ __
        __ __  4  4 __ __
    raw: the ratio of buses to bicycles is 3 to 2 respectively . if the total number
      of vehicles is 15 , how many are buses ?
    snippets:
      shape:
      - 5
      - 7
      target:
      - the ratio of buses to bicycles is
      - to bicycles is 3 to 2 respectively
      - is 3 to 2 respectively . if
      - of vehicles is 15 , how many
      - how many are buses ?
    tokens:
      shape:
      - 29
      target: '[CLS] the ratio of buses to bicycles is 3 to 2 respectively . if the
        total number of vehicles is 15 , how many are buses ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_01, R_00) R_02: =(N_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of boxes
      N_01:
      - the number of boxes
      X_00:
      - the number of cases
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the total number of boxes
      - the number of boxes
      - the number of boxes of tagalongs sold by madison
      N_01:
      - the number of boxes in each case
      - the number of boxes per case
      - the number of boxes for each case picked up by madison from the cookie mom
      X_00:
      - the number of cases picked
      - the number of cases
      - the number of cases of 24 boxes of tagalongs
  info:
    answers:
    - p: '2'
    item_id: 60f9186c90be09b72239ec31
    numbers:
      N_00: '24'
      N_01: '12'
    split: null
    variables:
    - p
  text:
    numbers:
      shape:
      - 29
      target: __ __ __ __  0 __ __ __ __ __ __ __ __ __ __ __  1 __ __ __ __ __ __
        __ __ __ __ __ __
    raw: 'if madison sold 24 boxes of tag ##alo ##ng ##s , how many cases of 12 boxes
      does madison pick up from the cookie mom ?'
    snippets:
      shape:
      - 2
      - 7
      target:
      - if madison sold 24 boxes of tag
      - many cases of 12 boxes does madison
    tokens:
      shape:
      - 29
      target: '[CLS] if madison sold 24 boxes of tag ##alo ##ng ##s , how many cases
        of 12 boxes does madison pick up from the cookie mom ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_01, R_00) R_02: =(N_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the total number of cards
      N_01:
      - the number of groups
      X_00:
      - the number of cards in each group
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the total number of cards
      - the number of cards in jean's card collection
      - the number of cards in jean's card collection
      N_01:
      - the number of groups cards organized into
      - the number of groups the cards are organized into
      - the number of groups of cards
      X_00:
      - the number of cards in each group
      - the number of cards in each group
      - the number of cards in each group
  info:
    answers:
    - g: '8'
    item_id: 60f9186c90be09b72239efaa
    numbers:
      N_00: '72'
      N_01: '9'
    split: null
    variables:
    - g
  text:
    numbers:
      shape:
      - 29
      target: __ __ __  0 __ __ __ __ __ __ __ __ __ __ __ __ __ __  1 __ __ __ __
        __ __ __ __ __ __
    raw: there are 72 cards in jean ' s card collection . if the cards are organized
      into 9 groups , how big is each group ?
    snippets:
      shape:
      - 2
      - 7
      target:
      - there are 72 cards in jean
      - are organized into 9 groups , how
    tokens:
      shape:
      - 29
      target: '[CLS] there are 72 cards in jean '' s card collection . if the cards
        are organized into 9 groups , how big is each group ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_01, R_00) R_02: =(N_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of boxes
      N_01:
      - the number of boxes
      X_00:
      - the number of cases
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the total number of boxes
      - the number of boxes of tagalongs karen sold
      - the number of boxes of tagalongs sold by karen
      N_01:
      - the number of boxes in each case
      - the number of boxes in one case
      - the number of boxes contained in each case
      X_00:
      - the number of cases picked
      - the number of cases of 12 boxes karen picked up from the cookie mom
      - the number of cases containing 12 boxes
  info:
    answers:
    - p: '3'
    item_id: 60f9186c90be09b72239ed75
    numbers:
      N_00: '36'
      N_01: '12'
    split: null
    variables:
    - p
  text:
    numbers:
      shape:
      - 29
      target: __ __ __ __  0 __ __ __ __ __ __ __ __ __ __ __  1 __ __ __ __ __ __
        __ __ __ __ __ __
    raw: 'if karen sold 36 boxes of tag ##alo ##ng ##s , how many cases of 12 boxes
      does karen pick up from the cookie mom ?'
    snippets:
      shape:
      - 2
      - 7
      target:
      - if karen sold 36 boxes of tag
      - many cases of 12 boxes does karen
    tokens:
      shape:
      - 29
      target: '[CLS] if karen sold 36 boxes of tag ##alo ##ng ##s , how many cases
        of 12 boxes does karen pick up from the cookie mom ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: -(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of pennies he spent
      X_00:
      - the number of pennies in now
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the initial number of pennies
      - the number of pennies in sam's bank
      - the amounts of pennies in sam's bank
      N_01:
      - the number of pennies spent
      - the number of spent pennies
      - the amounts of pennies spent by sam
      X_00:
      - the number of pennies now
      - the number of left pennies
      - the amounts of remaining pennies
  info:
    answers:
    - r: '5'
    item_id: 60f9186c90be09b72239e9cf
    numbers:
      N_00: '98'
      N_01: '93'
    split: null
    variables:
    - r
  text:
    numbers:
      shape:
      - 29
      target: __ __ __  0 __ __ __ __ __ __ __ __  1 __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __
    raw: 'sam had 98 penn ##ies in his bank . he spent 93 of his penn ##ies . how
      many penn ##ies does he have now ?'
    snippets:
      shape:
      - 2
      - 7
      target:
      - 'sam had 98 penn ##ies in'
      - . he spent 93 of his penn
    tokens:
      shape:
      - 29
      target: '[CLS] sam had 98 penn ##ies in his bank . he spent 93 of his penn ##ies
        . how many penn ##ies does he have now ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of boxes of crayons martin has
      N_01:
      - the number of crayons one box holds
      X_00:
      - the total number of crayons martin has
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of boxes of crayons
      - the number of crayon boxes
      - the number of boxes of crayons
      N_01:
      - the number of crayons for each box
      - the number of crayons in each box
      - the number of crayons per box
      X_00:
      - the total number of crayons
      - the total number of crayons
      - the total number of crayons
  info:
    answers:
    - c: '56'
    item_id: 60f9186c90be09b72239ebee
    numbers:
      N_00: '8'
      N_01: '7'
    split: null
    variables:
    - c
  text:
    numbers:
      shape:
      - 29
      target: __ __ __  0 __ __ __ __ __ __ __ __ __  1 __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __
    raw: 'martin has 8 boxes of cr ##ayo ##ns . each box holds 7 cr ##ayo ##ns . how
      many cr ##ayo ##ns does martin have ?'
    snippets:
      shape:
      - 2
      - 7
      target:
      - martin has 8 boxes of cr
      - 'each box holds 7 cr ##ayo ##ns'
    tokens:
      shape:
      - 29
      target: '[CLS] martin has 8 boxes of cr ##ayo ##ns . each box holds 7 cr ##ayo
        ##ns . how many cr ##ayo ##ns does martin have ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: -(R_00, R_01) R_03: =(N_00,
      R_02) R_04: +(R_00, R_01) R_05: =(N_01, R_04) R_06: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the value of the age of his brother minus the age of tyler
      N_01:
      - the sum of their ages
      X_00:
      - the age of his brother
      X_01:
      - the age of tyler
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the value of the brother's age minus tyler's age
      - the value of tyler's brother's age minus tyler's age
      - the value of the age of tyler's brother minus the age of tyler
      N_01:
      - the sum of their ages
      - the sum of tyler and his brother's ages
      - the sum of their ages
      X_00:
      - the brother's age now
      - the age of tyler's brother
      - the age of tyler's brother
      X_01:
      - tyler's age now
      - the age of tyler
      - the age of tyler
  info:
    answers:
    - b: '7'
      t: '4'
    item_id: 604cc853117d71c492a62e2a
    numbers:
      N_00: '3'
      N_01: '11'
    split: null
    variables:
    - b
    - t
  text:
    numbers:
      shape:
      - 29
      target: __ __ __ __ __ __  0 __ __ __ __ __ __ __ __ __ __ __ __ __ __  1 __
        __ __ __ __ __ __
    raw: tyler ' s age is three less than his brother ' s age . the sum of their ages
      is 11 . how old is tyler ?
    snippets:
      shape:
      - 2
      - 7
      target:
      - s age is three less than his
      - their ages is 11 . how old
    tokens:
      shape:
      - 29
      target: '[CLS] tyler '' s age is three less than his brother '' s age . the
        sum of their ages is 11 . how old is tyler ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_02, R_00) R_02: =(N_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the total number of books
      N_02:
      - the number of books per table
      X_00:
      - the number of shelves
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the total number of books
      - the number of books in a library
      - the number of books in a library
      N_02:
      - the number of books for each shelf
      - the number of books on each shelf
      - the number of books on each shelf
      X_00:
      - the number of shelves
      - the number of all shelves
      - the number of shelves in the library
  info:
    answers:
    - s: '1780'
    item_id: 60f9186c90be09b72239f10d
    numbers:
      N_00: '14240'
      N_01: '1'
      N_02: '8'
    split: null
    variables:
    - s
  text:
    numbers:
      shape:
      - 32
      target: __ __ __  0  0 __ __  1 __ __ __ __ __ __ __ __ __  2 __ __ __ __ __
        __ __ __ __ __ __ __ __ __
    raw: 'there are 142 ##40 books in a library . they are arranged on shelves that
      hold 8 books each . how many shelves are in the library ?'
    snippets:
      shape:
      - 3
      - 7
      target:
      - 'there are 142 ##40 books in'
      - '##40 books in a library . they'
      - shelves that hold 8 books each .
    tokens:
      shape:
      - 32
      target: '[CLS] there are 142 ##40 books in a library . they are arranged on
        shelves that hold 8 books each . how many shelves are in the library ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_01, R_00) R_02: =(N_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of ice cream uncle bought
      N_01:
      - the number of nieces uncle wants to give to his niece
      X_00:
      - the number of ice cream each niece gets
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the total number of ice cream sandwiches given to nieces
      - the total number of ice cream sandwiches
      - the number of ice cream sandwiches uncle dave bought
      N_01:
      - the number of nieces
      - the number of nieces
      - the number of nieces he wants to give them
      X_00:
      - the number of ice cream sandwiches for each niece
      - the number of ice cream sandwiches for each niece
      - the number of ice cream sandwiches each niece gets
  info:
    answers:
    - p: '13'
    item_id: 60f9186c90be09b72239f0a7
    numbers:
      N_00: '143'
      N_01: '11'
    split: null
    variables:
    - p
  text:
    numbers:
      shape:
      - 32
      target: __ __ __ __  0 __ __ __ __ __ __ __ __ __ __ __ __  1 __ __ __ __ __
        __ __ __ __ __ __ __ __ __
    raw: 'uncle dave bought 143 ice cream sandwiches . if he wants to give them to
      his 11 hungry niece ##s , how many can each niece get ?'
    snippets:
      shape:
      - 2
      - 7
      target:
      - uncle dave bought 143 ice cream sandwiches
      - 'them to his 11 hungry niece ##s'
    tokens:
      shape:
      - 32
      target: '[CLS] uncle dave bought 143 ice cream sandwiches . if he wants to give
        them to his 11 hungry niece ##s , how many can each niece get ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of packages
      N_01:
      - the number of packages mom buys
      X_00:
      - the number of white t - shirts
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of white t - shirts in packages
      - the number of white t - shirts per package
      - the number of white t - shirts in a package for purchase
      N_01:
      - the number of packages bought by mom
      - the number of packages mom bought
      - the number of packages bought by mom
      X_00:
      - the number of total shirts
      - the total number of white t - shirts
      - the total number of white t - shirts bought by mom
  info:
    answers:
    - s: '426'
    item_id: 60f9186c90be09b72239eb34
    numbers:
      N_00: '6'
      N_01: '71'
    split: null
    variables:
    - s
  text:
    numbers:
      shape:
      - 32
      target: __ __ __ __ __ __ __ __ __ __ __  0 __ __ __ __  1 __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __
    raw: white t - shirts can be purchased in packages of 6 . if mom buys 71 packages
      , how many white t - shirts will she have ?
    snippets:
      shape:
      - 2
      - 7
      target:
      - in packages of 6 . if mom
      - if mom buys 71 packages , how
    tokens:
      shape:
      - 32
      target: '[CLS] white t - shirts can be purchased in packages of 6 . if mom buys
        71 packages , how many white t - shirts will she have ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: *(N_01, R_00) R_03: =(R_01,
      R_02) R_04: -(R_01, N_02) R_05: -(R_04, R_00) R_06: =(N_03, R_05) R_07: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the ratio of the smaller number to the larger number
      N_02:
      - a number in the phrase " ten "
      N_03:
      - the value of the larger number minus the smaller number
      X_00:
      - the value of the larger number
      X_01:
      - the value of the smaller number
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the ratio of the larger to the smaller
      - the ratio of the larger number to the smaller number
      - the ratio of the larger number to the smaller number
      N_02:
      - the value of the diminishing to the larger number
      - a number in the phrase " if the larger is diminished by ten "
      - a number diminished from the larger number
      N_03:
      - the value of larger diminished by ten minus smaller
      - the value of the larger diminished by ten minus the smaller
      - the value of the larger number diminished by ten minus the smaller number
      X_00:
      - the value of the smaller
      - the value of the smaller number
      - the value of the smaller number
      X_01:
      - the value of the larger
      - the value of the larger number
      - the value of the larger number
  info:
    answers:
    - l: '24'
      s: '12'
    item_id: 604cc853117d71c492a62dc7
    numbers:
      N_00: '1'
      N_01: '2'
      N_02: '10'
      N_03: '2'
    split: null
    variables:
    - s
    - l
  text:
    numbers:
      shape:
      - 32
      target: __  0 __ __  1 __ __ __ __ __ __ __ __ __  2  2 __ __ __  3 __ __ __
        __ __ __ __ __ __ __ __ __
    raw: one number is twice another number . if the larger is diminished by ten ,
      the result is two more than the smaller . find the number .
    snippets:
      shape:
      - 4
      - 7
      target:
      - one number is twice
      - one number is twice another number .
      - is diminished by ten , the result
      - the result is two more than the
    tokens:
      shape:
      - 32
      target: '[CLS] one number is twice another number . if the larger is diminished
        by ten , the result is two more than the smaller . find the number . [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: *(N_01, R_00) R_03: =(N_02,
      R_02) R_04: *(N_04, R_00) R_05: =(R_01, R_04) R_06: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the height of the painting
      N_02:
      - the width of the print
      N_04:
      - the height of the painting
      X_00:
      - the height of the print of the print
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the height of a painting
      - the height of a painting
      - the length of painting tall
      N_02:
      - the width of the painting
      - the width of a painting
      - the length of the painting wide
      N_04:
      - the height of a print of the painting
      - the height of the print
      - the length of a print of the painting tall
      X_00:
      - the ratio of the width of the painting to the height of the painting
      - the ratio of the height to width of the painting and print
      - the ratio of wide to tall
      X_01:
      - the width of the print of the painting
      - the width of the print
      - the length of a print of the painting wide
  info:
    answers:
    - t: '1.50000000000000'
      w: '37.5000000000000'
    item_id: 604cc853117d71c492a62cd6
    numbers:
      N_00: '1'
      N_01: '10'
      N_02: '15'
      N_03: '1'
      N_04: '25'
    split: null
    variables:
    - t
    - w
  text:
    numbers:
      shape:
      - 32
      target: __  0 __ __  1 __ __ __  2 __ __ __  3 __ __ __ __ __  4 __ __ __ __
        __ __ __ __ __ __ __ __ __
    raw: a painting is 10 inches tall and 15 inches wide . a print of the painting
      is 25 inches tall . how wide is the print in inches ?
    snippets:
      shape:
      - 5
      - 7
      target:
      - a painting is 10
      - a painting is 10 inches tall and
      - inches tall and 15 inches wide .
      - inches wide . a print of the
      - the painting is 25 inches tall .
    tokens:
      shape:
      - 32
      target: '[CLS] a painting is 10 inches tall and 15 inches wide . a print of
        the painting is 25 inches tall . how wide is the print in inches ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_02, R_00) R_02: *(N_00, R_00) R_03: +(N_01,
      R_02) R_04: =(R_01, R_03) R_05: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number added to the number
      N_01:
      - the number added to the number
      N_02:
      - the number added to the number
      X_00:
      - the value of the number when the first case the same as the second case
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - a number multiplied by the unknown
      - a number multiplied by the number
      - the value the number is multiplied by
      N_01:
      - a number added to 3 times the unknown
      - a number added to 3 times the number
      - the value added to the multiplication of 3 and the number
      N_02:
      - a number added to the unknown
      - a number added to the number
      - the value added to the number
      X_00:
      - the unknown number if two results of addition are equal
      - the value of the number
      - the value in the phrase " the number "
  info:
    answers:
    - n: '-4'
    item_id: 60f9186c90be09b72239ea73
    numbers:
      N_00: '3'
      N_01: '11'
      N_02: '3'
    split: null
    variables:
    - n
  text:
    numbers:
      shape:
      - 32
      target: __ __ __ __ __ __ __ __ __ __ __ __ __  0 __ __  1 __ __ __ __ __ __
        __ __ __  2 __ __ __ __ __
    raw: 'what '' s the number ? if i multi ##ply it by 3 and add 11 , i get the same
      answer when i add 3 to it .'
    snippets:
      shape:
      - 3
      - 7
      target:
      - '##ply it by 3 and add 11'
      - 3 and add 11 , i get
      - when i add 3 to it .
    tokens:
      shape:
      - 32
      target: '[CLS] what '' s the number ? if i multi ##ply it by 3 and add 11 ,
        i get the same answer when i add 3 to it . [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_00, R_00) R_02: -(N_02, N_01) R_03: =(R_01,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of sacks of apples
      N_01:
      - the number of sacks of apples in his pocket
      N_02:
      - the total number of apples
      X_00:
      - the number of apples in each sack
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of sacks of apples john has
      - the number of sacks of apples
      - the number of sacks of apples
      N_01:
      - the number of additional apples in his pocket
      - the number of additional apples
      - the number of apples in john's pocket
      N_02:
      - the total number of apples john has
      - the whole number of apples
      - the total number of john's apples
      X_00:
      - the number of apples for each sack
      - the number of apples in each sack
      - the number of apples in each sack
  info:
    answers:
    - p: '10'
    item_id: 60f9186c90be09b72239ef58
    numbers:
      N_00: '3'
      N_01: '3'
      N_02: '33'
    split: null
    variables:
    - p
  text:
    numbers:
      shape:
      - 32
      target: __ __ __  0 __ __ __ __  1 __ __ __ __ __ __ __ __ __ __  2 __ __ __
        __ __ __ __ __ __ __ __ __
    raw: john has 3 sacks of apples and 3 more apples in his pocket . altogether ,
      john has 33 apples . how many apples are in each sack ?
    snippets:
      shape:
      - 3
      - 7
      target:
      - john has 3 sacks of apples
      - of apples and 3 more apples in
      - ', john has 33 apples . how'
    tokens:
      shape:
      - 32
      target: '[CLS] john has 3 sacks of apples and 3 more apples in his pocket .
        altogether , john has 33 apples . how many apples are in each sack ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: -(N_03, R_00) R_02: *(N_04, R_01) R_03: -(N_01,
      R_00) R_04: =(R_02, R_03) R_05: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the age of the man
      N_03:
      - the age of the man now
      N_04:
      - the ratio of the age of the father in the past to the age of his son in the
        past
      X_00:
      - the number of years between the past and now
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - a man's age now
      - the present age of a man
      - the age of the man now
      N_03:
      - a son's age now
      - the present age of a son
      - the age of his son now
      N_04:
      - the ratio of the man's age certain years ago to the son's age certain years
        ago
      - a number in the phrase " the father seven times as old as his son "
      - the ratio of the age of the man in the past to the age of his son in the past
      X_00:
      - the number of years passed
      - the number of years ago for the father to be seven times as old as his son
      - the number of years past
  info:
    answers:
    - y: '10'
    item_id: 604cc853117d71c492a62de4
    numbers:
      N_00: '1'
      N_01: '38'
      N_02: '1'
      N_03: '14'
      N_04: '7'
    split: null
    variables:
    - y
  text:
    numbers:
      shape:
      - 32
      target: __  0 __  1 __ __ __  2 __ __ __  3 __ __ __ __ __ __ __ __ __ __  4
        __ __ __ __ __ __ __ __ __
    raw: a man 38 years old has a son who is 14 years old . how many years ago was
      the father seven times as old as his son ?
    snippets:
      shape:
      - 5
      - 7
      target:
      - a man 38 years
      - a man 38 years old has
      - years old has a son who is
      - son who is 14 years old .
      - was the father seven times as old
    tokens:
      shape:
      - 32
      target: '[CLS] a man 38 years old has a son who is 14 years old . how many years
        ago was the father seven times as old as his son ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: -(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of ounces of sugar bought by pamela
      N_01:
      - the number of ounces of sugar spilled
      X_00:
      - the number of ounces of sugar left
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the amount of sugar bought
      - the amount of sugar
      - the number of ounces of sugar pamela bought
      N_01:
      - the amount of sugar spilled
      - the amount of sugar spilled on the floor
      - the number of ounces of sugar pamela spilled on the floor
      X_00:
      - the amount of sugar left
      - the amount of remaining sugar
      - the number of ounces of sugar left
  info:
    answers:
    - l: '4.60000000000000'
    item_id: 60f9186c90be09b72239ef35
    numbers:
      N_00: '9.80000000000000'
      N_01: '5.20000000000000'
    split: null
    variables:
    - l
  text:
    numbers:
      shape:
      - 32
      target: __ __ __  0  0  0 __ __ __ __ __ __ __ __  1  1  1 __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __
    raw: 'pamela bought 9 . 8 ounce ##s of sugar , and she spilled 5 . 2 ounce ##s
      of it on the floor . how much is left ?'
    snippets:
      shape:
      - 2
      - 7
      target:
      - pamela bought 9 . 8 ounce
      - and she spilled 5 . 2 ounce
    tokens:
      shape:
      - 32
      target: '[CLS] pamela bought 9 . 8 ounce ##s of sugar , and she spilled 5 .
        2 ounce ##s of it on the floor . how much is left ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: __NEW_VAR(, ) R_03: *(10,
      R_00) R_04: +(R_01, R_03) R_05: =(R_02, R_04) R_06: *(N_02, R_01) R_07: =(R_02,
      R_06) R_08: +(N_03, R_02) R_09: *(10, R_01) R_10: +(R_00, R_09) R_11: =(R_08,
      R_10) R_12: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the ratio of the original number to the unit digit of the number
      N_03:
      - the value of added to the unit digit
      X_00:
      - the value of tens digit in the original number
      X_01:
      - the value of the unit digit
      X_02:
      - the value of the original number
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the ratio of the original two - digit number to the units digit of it
      - the ratio of the original number to the unit digit of the original number
      - the ratio of the number to its unit digit
      N_03:
      - the value of the reversed number minus the original number
      - the value of the reversed number minus the original number
      - the value of the reversed number minus the number
      X_00:
      - the tens digit
      - the tens'digit of the original number
      - the value of tens number
      X_01:
      - the units digit
      - the unit digit of the original number
      - the value of units number
      X_02:
      - the original number
      - the value of the original number
      - the value of the number
  info:
    answers:
    - o: '35'
      t: '3'
      u: '5'
    item_id: 604cc853117d71c492a630ac
    numbers:
      N_00: '1'
      N_01: '2'
      N_02: '7'
      N_03: '18'
    split: null
    variables:
    - t
    - u
    - o
  text:
    numbers:
      shape:
      - 32
      target: __  0  1  1  1 __ __  2 __ __ __ __ __ __  3 __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __
    raw: a two - digit number is 7 times its unit digit . if 18 is added to the number
      , its digits are reversed . find the number .
    snippets:
      shape:
      - 4
      - 7
      target:
      - a two - digit
      - a two - digit number
      - digit number is 7 times its unit
      - digit . if 18 is added to
    tokens:
      shape:
      - 32
      target: '[CLS] a two - digit number is 7 times its unit digit . if 18 is added
        to the number , its digits are reversed . find the number . [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, R_00) R_02: =(N_01, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of pigs in the barn
      N_01:
      - the total number of pigs
      X_00:
      - the number of pigs came to join them
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the original number of pigs
      - the number of pigs in the barn
      - the number of pigs in the barn
      N_01:
      - the current number of pigs
      - the number of total pigs
      - the number of pigs now
      X_00:
      - the number of newly joined pigs
      - the number of new pigs
      - the number of pigs that came to join them
  info:
    answers:
    - j: '22'
    item_id: 60f9186c90be09b72239f219
    numbers:
      N_00: '64'
      N_01: '86'
    split: null
    variables:
    - j
  text:
    numbers:
      shape:
      - 32
      target: __ __ __  0 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __  1 __ __ __
        __ __ __ __ __ __ __ __ __
    raw: there are 64 pigs in the barn . some more come to join them . now there are
      86 pigs . how many pigs came to join them ?
    snippets:
      shape:
      - 2
      - 7
      target:
      - there are 64 pigs in the
      - now there are 86 pigs . how
    tokens:
      shape:
      - 32
      target: '[CLS] there are 64 pigs in the barn . some more come to join them .
        now there are 86 pigs . how many pigs came to join them ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: -(R_00, R_01) R_03: =(N_01,
      R_02) R_04: +(R_00, R_01) R_05: =(N_02, R_04) R_06: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the value of the larger number minus the smaller number
      N_02:
      - the sum of the smaller number and the smaller number
      X_00:
      - the value of the larger number
      X_01:
      - the value of the smaller number
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the value of the larger number minus the smaller number
      - the value of the larger number minus the smaller number
      - the value of the larger number minus the smaller number
      N_02:
      - the sum of two numbers
      - the value of their sum
      - the sum of the two numbers
      X_00:
      - the larger number
      - the value of the larger number
      - the value of the larger number
      X_01:
      - the smaller number
      - the value of the smaller number
      - the value of the smaller number
  info:
    answers:
    - l: '8'
      s: '5'
    item_id: 604cc852117d71c492a62b91
    numbers:
      N_00: '2'
      N_01: '3'
      N_02: '13'
    split: null
    variables:
    - l
    - s
  text:
    numbers:
      shape:
      - 32
      target: __ __ __ __  0 __ __  1 __ __ __ __  2 __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __
    raw: the difference between two numbers is 3 . their sum is 13 . find the numbers
      . what is the larger number ? what is the smaller number ?
    snippets:
      shape:
      - 3
      - 7
      target:
      - the difference between two numbers is 3
      - two numbers is 3 . their sum
      - their sum is 13 . find the
    tokens:
      shape:
      - 32
      target: '[CLS] the difference between two numbers is 3 . their sum is 13 . find
        the numbers . what is the larger number ? what is the smaller number ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_03, R_00) R_02: *(N_02, R_00) R_03: =(R_01,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - a number which is multiplied by the number
      N_03:
      - the amount of the number multiplied by the unknown
      X_00:
      - the value of the number
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - a number in the phrase " the number is multiplied by 3 "
      - the value of the multiplier of x on the right side
      - the constant that is multiplied by the number, the result is as adding 34
        to the number
      N_03:
      - a number in the phrase " the result is as adding 34 to the number "
      - the number added to x on the left side
      - the constant that is added to the number, the result is as multiplying 3 by
        the number
      X_00:
      - the number to find when the number multiplied by 3 is same as adding 34 to
        the number itself
      - the value of x
      - the value of the number
  info:
    answers:
    - x: '17'
    item_id: 604cc853117d71c492a62efd
    numbers:
      N_00: '10'
      N_01: '1'
      N_02: '3'
      N_03: '34'
    split: null
    variables:
    - x
  text:
    numbers:
      shape:
      - 32
      target: __  0 __  1 __ __ __ __ __ __ __ __ __  2 __ __ __ __ __ __  3 __ __
        __ __ __ __ __ __ __ __ __
    raw: x represents a certain number . when the number is multiplied by 3 , the
      result is as adding 34 to the number . what is the number ?
    snippets:
      shape:
      - 4
      - 7
      target:
      - x represents a certain
      - x represents a certain number .
      - is multiplied by 3 , the result
      - is as adding 34 to the number
    tokens:
      shape:
      - 32
      target: '[CLS] x represents a certain number . when the number is multiplied
        by 3 , the result is as adding 34 to the number . what is the number ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: -(R_00, N_00) R_02: =(N_01, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of noodles daniel gave to william
      N_01:
      - the number of noodles daniel has
      X_00:
      - the number of noodles daniel originally had
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of noodles given to william
      - number of noodles he gave to william
      - the number of noodles given to william by daniel
      N_01:
      - the remaining number of noodles
      - number of noodles he now has
      - the number of noodles left on daniel
      X_00:
      - the original number of noodles
      - number of noodles daniel began with
      - the initial number of daniel's noodles
  info:
    answers:
    - b: '66'
    item_id: 60f9186c90be09b72239f059
    numbers:
      N_00: '12'
      N_01: '54'
    split: null
    variables:
    - b
  text:
    numbers:
      shape:
      - 32
      target: __ __ __ __ __ __ __ __  0 __ __ __ __ __ __ __ __  1 __ __ __ __ __
        __ __ __ __ __ __ __ __ __
    raw: daniel had some noodles . he gave 12 noodles to william . now daniel only
      has 54 noodles . how many noodles did daniel have to begin with ?
    snippets:
      shape:
      - 2
      - 7
      target:
      - . he gave 12 noodles to william
      - daniel only has 54 noodles . how
    tokens:
      shape:
      - 32
      target: '[CLS] daniel had some noodles . he gave 12 noodles to william . now
        daniel only has 54 noodles . how many noodles did daniel have to begin with
        ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_02, R_00) R_02: =(N_01, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of students
      N_02:
      - the number of seats on each school bus
      X_00:
      - the number of buses needed
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of students
      - the total number of students
      - the number of students
      N_02:
      - the number of seats on each school bus
      - the number of seats on each school bus
      - the number of seats on each school bus
      X_00:
      - the number of buses needed to take all the students
      - the number of buses needed
      - the number of buses needed to take students
  info:
    answers:
    - b: '7'
    item_id: 60f9186c90be09b72239f25b
    numbers:
      N_00: '1'
      N_01: '14'
      N_02: '2'
      N_03: '2'
      N_04: '2'
    split: null
    variables:
    - b
  text:
    numbers:
      shape:
      - 32
      target: __ __ __ __ __  0 __ __ __ __ __  1 __ __  2 __ __ __ __  3  3 __ __  4
        __ __ __ __ __ __ __ __
    raw: the school is planning a field trip . there are 14 students and 2 seats on
      each school bus . how many buses are needed to take the trip ?
    snippets:
      shape:
      - 5
      - 7
      target:
      - school is planning a field trip .
      - . there are 14 students and 2
      - 14 students and 2 seats on each
      - on each school bus . how many
      - . how many buses are needed to
    tokens:
      shape:
      - 32
      target: '[CLS] the school is planning a field trip . there are 14 students and
        2 seats on each school bus . how many buses are needed to take the trip ?
        [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: -(R_00, R_01) R_03: =(N_01,
      R_02) R_04: -(R_01, N_02) R_05: *(N_03, R_04) R_06: -(R_00, N_02) R_07: =(R_05,
      R_06) R_08: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the value of the present age of the mother minus the present age of her daughter
      N_02:
      - the number of years past
      N_03:
      - the ratio of the age of the mother a year ago to the age of her daughter a
        year ago
      X_00:
      - the age of her daughter now
      X_01:
      - the age of the mother now
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the value of the age of the mother minus the age of the daughter in the present
      - the value of the age of the mother minus the age of her daughter
      - the difference of the age of the mother today and the age of her daughter
        today
      N_02:
      - the number of years into the past
      - the years between now and the past
      - the number of years past
      N_03:
      - the ratio of the past age of the mother to the age past of the daughter
      - the ratio of the age of the mother to the age of her daughter a year ago
      - the ratio of the age of the mother a year ago to the age of her daughter a
        year ago
      X_00:
      - the age of the mother in the present
      - the age of the mother
      - the age of the mother today
      X_01:
      - the age of the daughter in the present
      - the age of her daughter
      - the age of her daughter today
  info:
    answers:
    - d: '28'
      m: '55'
    item_id: 604cc853117d71c492a62f6f
    numbers:
      N_00: '1'
      N_01: '27'
      N_02: '1'
      N_03: '2'
    split: null
    variables:
    - m
    - d
  text:
    numbers:
      shape:
      - 32
      target: __  0 __ __  1 __ __ __ __ __ __  2 __ __ __ __ __ __  3 __ __ __ __
        __ __ __ __ __ __ __ __ __
    raw: a mother is 27 years older than her daughter . a year ago , the mother was
      twice as old as her daughter . how old is each now ?
    snippets:
      shape:
      - 4
      - 7
      target:
      - a mother is 27
      - a mother is 27 years older than
      - her daughter . a year ago ,
      - the mother was twice as old as
    tokens:
      shape:
      - 32
      target: '[CLS] a mother is 27 years older than her daughter . a year ago , the
        mother was twice as old as her daughter . how old is each now ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 20
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_01, R_00) R_02: =(N_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of cookies sue's mother made
      N_01:
      - the number of cookies in each bag
      X_00:
      - the number of bags she could fill up in each bag
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of cookies sue's mother made
      - the number of cookies sue's mother made
      - the number of cookies made by sue's mother
      N_01:
      - the number of cookies for each bag
      - the number of cookies in each bag
      - the number of cookies put in each bag
      X_00:
      - the number of bags to fill up all the cookies
      - the number of bags
      - the number of bags for containing all cookies
  info:
    answers:
    - b: '25'
    item_id: 60f9186c90be09b72239ee27
    numbers:
      N_00: '75'
      N_01: '3'
    split: null
    variables:
    - b
  text:
    numbers:
      shape:
      - 36
      target: __ __ __ __ __ __  0 __ __ __ __ __ __ __ __ __ __  1 __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: sue ' s mother made 75 cookies . she put the cookies in bags , with 3 cookies
      in each bag . how many bags could she fill up ?
    snippets:
      shape:
      - 2
      - 7
      target:
      - s mother made 75 cookies . she
      - bags , with 3 cookies in each
    tokens:
      shape:
      - 36
      target: '[CLS] sue '' s mother made 75 cookies . she put the cookies in bags
        , with 3 cookies in each bag . how many bags could she fill up ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 20
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of days tom found
      N_01:
      - the number of seashells found
      X_00:
      - the total number of seashells at the beach
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of days
      - the number of days
      - the number of days
      N_01:
      - the number of seashells found every day
      - the number of seashells found on each day
      - the number of seashells found each day
      X_00:
      - the total number of seashells
      - the total number of seashells found
      - the whole number of seashells
  info:
    answers:
    - s: '35'
    item_id: 60f9186c90be09b72239ee41
    numbers:
      N_00: '5'
      N_01: '7'
    split: null
    variables:
    - s
  text:
    numbers:
      shape:
      - 36
      target: __ __ __ __ __ __ __  0 __ __ __  1 __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'tom was at the beach for 5 days and found 7 seas ##hell ##s every day .
      how many seas ##hell ##s did tom find during the beach trip ?'
    snippets:
      shape:
      - 2
      - 7
      target:
      - the beach for 5 days and found
      - 'days and found 7 seas ##hell ##s'
    tokens:
      shape:
      - 36
      target: '[CLS] tom was at the beach for 5 days and found 7 seas ##hell ##s every
        day . how many seas ##hell ##s did tom find during the beach trip ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 20
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: *(N_02, R_01) R_03: -(R_00,
      R_02) R_04: =(N_01, R_03) R_05: *(N_04, R_00) R_06: +(R_00, R_01) R_07: -(R_05,
      R_06) R_08: =(N_03, R_07) R_09: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the value of 2 times the larger number minus the larger number
      N_02:
      - the coefficient of the smaller number
      N_03:
      - the value of 2 times the larger number minus the larger number
      N_04:
      - the coefficient of the larger number in the second case
      X_00:
      - the value of the larger number
      X_01:
      - the value of the smaller number
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the value of the larger number minus 2 times the smaller number
      - the value of the larger number minus twice the smaller number
      - the value of the larger number minus twice the smaller number
      N_02:
      - the multiplier for the smaller number
      - a number in the phrase " twice the smaller "
      - a number in the phrase " twice the smaller "
      N_03:
      - the value of 3 times the larger number minus the sum of the larger number
        and the smaller number
      - the value of three times the larger number minus the sum of the numbers
      - the value of three times the larger number minus the sum of the larger number
        and the smaller number
      N_04:
      - the multiplier for the larger number
      - a number in the phrase " three times the larger "
      - a number in the phrase " three times the larger "
      X_00:
      - the value of the larger number
      - the value of the larger number
      - the value of the larger number
      X_01:
      - the value of the smaller number
      - the value of the smaller number
      - the value of the smaller number
  info:
    answers:
    - l: '4'
      s: '-2'
    item_id: 604cc853117d71c492a62f39
    numbers:
      N_00: '2'
      N_01: '8'
      N_02: '2'
      N_03: '10'
      N_04: '3'
    split: null
    variables:
    - l
    - s
  text:
    numbers:
      shape:
      - 36
      target: __ __ __ __  0 __ __  1 __ __  2 __ __ __ __ __ __ __ __ __  3 __ __  4
        __ __ __ __ __ __ __ __ __ __ __ __
    raw: the larger of two numbers is 8 more than twice the smaller . the sum of the
      numbers is 10 less than three times the larger . find the numbers .
    snippets:
      shape:
      - 5
      - 7
      target:
      - the larger of two numbers is 8
      - two numbers is 8 more than twice
      - 8 more than twice the smaller .
      - the numbers is 10 less than three
      - 10 less than three times the larger
    tokens:
      shape:
      - 36
      target: '[CLS] the larger of two numbers is 8 more than twice the smaller .
        the sum of the numbers is 10 less than three times the larger . find the numbers
        . [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 20
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: *(N_03, R_00) R_03: *(N_04,
      R_01) R_04: +(R_02, R_03) R_05: =(N_01, R_04) R_06: +(R_00, R_01) R_07: =(N_02,
      R_06) R_08: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the total points of the problems
      N_02:
      - the number of problems in a math test
      N_03:
      - the points of one problem in the first case
      N_04:
      - the point of one problem
      N_05:
      - the point of one problem
      X_00:
      - the number of problems in the first case
      X_01:
      - the number of problems in the second case
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the total number of points in a test
      - the total points that can be earned in the math test
      - the total worth
      N_02:
      - the total number of problems in the test
      - the sum of the number of the first type of problems and the number of the
        second type of problems
      - the number of problems
      N_03:
      - the number of points for a 3 - point problem
      - the points that the first type of problems are worth
      - the worth of 3 points problems
      N_04:
      - the number of points for a 4 - point problem
      - the points that the second type of problems are worth
      - the worth of 4 point problems
      N_05:
      - the number of points for a 4 - point problem
      - the points that the second type of problems are worth
      - the worth of 4 point problems
      X_00:
      - the number of 3 - point problems
      - the number of the first type of problems
      - the number of 3 point problems
      X_01:
      - the number of 4 - point problems
      - the number of the second type of problems
      - the number of 4 point problems
  info:
    answers:
    - p1: '20'
      p2: '10'
    item_id: 604cc853117d71c492a62ca5
    numbers:
      N_00: '1'
      N_01: '100'
      N_02: '30'
      N_03: '3'
      N_04: '4'
      N_05: '4'
    split: null
    variables:
    - p1
    - p2
  text:
    numbers:
      shape:
      - 36
      target: __  0 __ __ __ __  1 __ __ __  2 __ __ __ __ __ __ __  3 __ __  4 __
        __ __ __  5 __ __ __ __ __ __ __ __ __
    raw: a math test is worth 100 points and has 30 problems . each problem is worth
      either 3 points or 4 points . how many 4 point problems are there ?
    snippets:
      shape:
      - 6
      - 7
      target:
      - a math test is
      - test is worth 100 points and has
      - points and has 30 problems . each
      - is worth either 3 points or 4
      - 3 points or 4 points . how
      - . how many 4 point problems are
    tokens:
      shape:
      - 36
      target: '[CLS] a math test is worth 100 points and has 30 problems . each problem
        is worth either 3 points or 4 points . how many 4 point problems are there
        ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 20
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: *(N_00, R_00) R_03: =(R_01,
      R_02) R_04: +(N_01, R_00) R_05: *(N_02, R_04) R_06: +(N_01, R_01) R_07: =(R_05,
      R_06) R_08: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the ratio of the age of sue now to the age of louise now
      N_01:
      - the number of years between the future and now
      N_02:
      - the ratio of the future age of sue to that of louise
      X_00:
      - the age of louise now
      X_01:
      - the age of sue now
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the ratio of sue's age now to louise's age now
      - the ratio of the age of sue now to the age of lousie now
      - the ratio of the current age of sue to that of louise
      N_01:
      - the number of years from now
      - the number of years to go
      - the number of years between the future and now
      N_02:
      - the ratio of sue's age after six years to louise's age after six years
      - the ratio of the age of sue six years later to the age of lousie 6 years later
      - the ratio of the future age of sue to that of louise
      X_00:
      - louise's age now
      - the age of louise now
      - the current age of louise
      X_01:
      - sue's age now
      - the age of sue now
      - the current age of sue
  info:
    answers:
    - l: '12'
      s: '84'
    item_id: 604cc853117d71c492a62fc0
    numbers:
      N_00: '7'
      N_01: '6'
      N_02: '5'
      N_03: '1'
    split: null
    variables:
    - l
    - s
  text:
    numbers:
      shape:
      - 36
      target: __ __ __ __  0 __ __ __ __ __ __  1 __ __ __ __ __  2 __ __ __ __ __
        __ __ __ __ __ __ __  3  3 __ __ __ __
    raw: sue is now seven times old as louise . in six years , sue will be five times
      as old as louise . find the present age of each one .
    snippets:
      shape:
      - 4
      - 7
      target:
      - sue is now seven times old as
      - louise . in six years , sue
      - sue will be five times as old
      - age of each one .
    tokens:
      shape:
      - 36
      target: '[CLS] sue is now seven times old as louise . in six years , sue will
        be five times as old as louise . find the present age of each one . [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 20
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_02, R_00) R_02: +(N_00, N_01) R_03: =(R_01,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the amount of money earned by frank
      N_01:
      - the price of a weed weed
      N_02:
      - the price of a week
      X_00:
      - the amount of money the money last week
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of dollars frank earned from mowing lawns
      - the number of dollars by mowing lawns
      - the amount of money frank made by mowing lawns
      N_01:
      - the number of dollars frank earned from weed eating
      - the number of dollars by weed eating
      - the amount of money frank made by weed eating
      N_02:
      - the number of dollars frank spends per week
      - the number of dollars he spends a week
      - the amount of money he spends a week
      X_00:
      - the number of weeks frank last with his money
      - the number of weeks the money will last
      - the number of weeks the money would last him
  info:
    answers:
    - w: '9'
    item_id: 60f9186c90be09b72239efd9
    numbers:
      N_00: '5'
      N_01: '58'
      N_02: '7'
      N_03: '1'
    split: null
    variables:
    - w
  text:
    numbers:
      shape:
      - 36
      target: __ __ __  0 __ __ __ __ __ __ __  1 __ __ __ __ __ __ __ __  2 __  3
        __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'frank made 5 dollars mo ##wing lawn ##s , and 58 dollars weed eating . if
      he only spent 7 dollars a week , how long would the money last him ?'
    snippets:
      shape:
      - 4
      - 7
      target:
      - 'frank made 5 dollars mo ##wing'
      - '##s , and 58 dollars weed eating'
      - he only spent 7 dollars a week
      - spent 7 dollars a week , how
    tokens:
      shape:
      - 36
      target: '[CLS] frank made 5 dollars mo ##wing lawn ##s , and 58 dollars weed
        eating . if he only spent 7 dollars a week , how long would the money last
        him ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 20
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(R_00, R_01) R_03: =(N_01,
      R_02) R_04: *(N_04, R_00) R_05: -(R_01, R_04) R_06: =(N_03, R_05) R_07: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the sum of the two numbers
      N_03:
      - the value of the second number minus 5 times the first number
      N_04:
      - a number in the phrase " 5 times the first "
      X_00:
      - the first number
      X_01:
      - the second number
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the sum of the two numbers
      - the sum of the two numbers
      - the sum of the two numbers
      N_03:
      - the value of the second number minus 5 times the first number
      - the value of the second minus 5 times the first
      - the value of the second number minus 5 times the first
      N_04:
      - a number in the phrase " 5 times the first "
      - the coefficient of the first number on the second part
      - a number in the phrase " 5 times the first "
      X_00:
      - the first number
      - the value of the first number
      - the value of the first number
      X_01:
      - the second number
      - the value of the second number
      - the value of the second number
  info:
    answers:
    - f: '11'
      s: '62'
    item_id: 604cc853117d71c492a62c84
    numbers:
      N_00: '2'
      N_01: '73'
      N_02: '2'
      N_03: '7'
      N_04: '5'
      N_05: '1'
      N_06: '1'
      N_07: '2'
      N_08: '1'
    split: null
    variables:
    - f
    - s
  text:
    numbers:
      shape:
      - 36
      target: __ __ __ __  0 __ __  1 __ __  2 __  3 __ __  4 __ __  5  5 __ __ __  6
        __ __ __ __ __ __  7  8  8 __ __ __
    raw: the sum of two numbers is 73 . the second is 7 more than 5 times the first
      . what is the first number , and what is the second one ?
    snippets:
      shape:
      - 9
      - 7
      target:
      - the sum of two numbers is 73
      - two numbers is 73 . the second
      - 73 . the second is 7 more
      - the second is 7 more than 5
      - 7 more than 5 times the first
      - 5 times the first . what is
      - what is the first number , and
      - what is the second one ?
      - is the second one ?
    tokens:
      shape:
      - 36
      target: '[CLS] the sum of two numbers is 73 . the second is 7 more than 5 times
        the first . what is the first number , and what is the second one ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 20
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: *(N_00, R_00) R_03: *(N_01,
      R_01) R_04: +(R_02, R_03) R_05: =(N_04, R_04) R_06: +(R_00, R_01) R_07: =(N_02,
      R_06) R_08: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the value of the first type of coin
      N_01:
      - the face value of the second type of disc
      N_02:
      - the total number of coins
      N_04:
      - the total value of coins
      N_05:
      - the cost of one coin
      X_00:
      - the number of the first type of coins
      X_01:
      - the number of the second type of coins
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the dollar coin value of certain games
      - the face value of the 1 dollar coin
      - the cost of $ 1 coin
      N_01:
      - the dollar coin value of other games
      - the face value of the 2 dollar coin
      - the cost of $ 2 coin
      N_02:
      - the number of total coins
      - the total number of coins
      - the number of coins
      N_04:
      - the total worth of coins
      - the total value of coins
      - the total cost of coins
      N_05:
      - the dollar coin value of other games
      - the face value of the 2 dollar coin
      - the cost of $ 2 coin
      X_00:
      - the number of $ 1 coins
      - the number of the 1 dollar coins
      - the number of $ 1 coins
      X_01:
      - the number of $ 2 coins
      - the number of 2 dollar coins
      - the number of $ 2 coins
  info:
    answers:
    - c1: '148'
      c2: '127'
    item_id: 604cc853117d71c492a62f49
    numbers:
      N_00: '1'
      N_01: '2'
      N_02: '275'
      N_03: '1'
      N_04: '402'
      N_05: '2'
    split: null
    variables:
    - c1
    - c2
  text:
    numbers:
      shape:
      - 36
      target: __ __ __ __  0 __ __  1 __ __ __ __  2 __ __ __ __ __  3 __ __ __  4
        __ __ __ __  5 __ __ __ __ __ __ __ __
    raw: i collect $ 1 and $ 2 coins until i have 275 coins , and i have a total of
      $ 402 . how many $ 2 coins do i have ?
    snippets:
      shape:
      - 6
      - 7
      target:
      - i collect $ 1 and $ 2
      - 1 and $ 2 coins until i
      - until i have 275 coins , and
      - and i have a total of $
      - total of $ 402 . how many
      - how many $ 2 coins do i
    tokens:
      shape:
      - 36
      target: '[CLS] i collect $ 1 and $ 2 coins until i have 275 coins , and i have
        a total of $ 402 . how many $ 2 coins do i have ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 20
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: __NEW_VAR(, ) R_03: __NEW_VAR(,
      ) R_04: *(R_00, R_01) R_05: =(R_02, R_04) R_06: /(R_03, 100) R_07: *(1, R_06)
      R_08: -(1, R_02) R_09: =(R_07, R_08) R_10: /(N_00, 100) R_11: *(1, R_10) R_12:
      -(1, R_11) R_13: =(R_01, R_12) R_14: /(N_00, 100) R_15: *(1, R_14) R_16: +(1,
      R_15) R_17: =(R_00, R_16) R_18: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the percentage of the reduced oil
      X_00:
      - the value of the future year minus now
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the percent of the price increase
      - the increased percentage of petroleum oil
      - the price growth rate of the petroleum oil
      X_00:
      - the increased price
      - the increased price of petroleum oil
      - the ratio of the new price of petroleum oil to the original price
      X_01:
      - the decreased consumption
      - the amount of reduced oil consumption
      - the ratio of the new consumption of petroleum oil to the original consumption
      X_02:
      - the changed total cost of petroleum
      - the changed amount of petroleum bill
      - the ratio of billing cost with the new price to the billing cost with the
        original price
      X_03:
      - the percent of the total cost change
      - the changed percentage of petroleum bill
      - the cost rise rate of his bill
  info:
    answers:
    - n1: '0.990000000000000'
      n2: '0.900000000000000'
      n3: '1.10000000000000'
      p: '1'
    item_id: 60f9186c90be09b72239eaf0
    numbers:
      N_00: '10'
      N_01: '1'
    split: null
    variables:
    - n3
    - n2
    - n1
    - p
  text:
    numbers:
      shape:
      - 36
      target: __ __ __ __ __ __ __ __ __ __  0 __ __  1 __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: after the price of petroleum oil went up by 10 % , a consumer reduced his
      oil consumption by the same percent . by what percent would his petroleum bill
      be changed ?
    snippets:
      shape:
      - 2
      - 7
      target:
      - went up by 10 % , a
      - 10 % , a consumer reduced his
    tokens:
      shape:
      - 36
      target: '[CLS] after the price of petroleum oil went up by 10 % , a consumer
        reduced his oil consumption by the same percent . by what percent would his
        petroleum bill be changed ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 20
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: -(R_00, R_01) R_03: =(N_01,
      R_02) R_04: *(N_02, R_00) R_05: +(R_01, R_04) R_06: =(N_03, R_05) R_07: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the value of the greater number minus 2 times the smaller number
      N_02:
      - the coefficient of the smaller number
      N_03:
      - the value of the greater number minus the smaller number
      X_00:
      - the value of the greater
      X_01:
      - the value of the smaller number
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the value of the greater number minus the smaller number
      - the value of the greater number minus the smaller number
      - the value of the greater number minus the smaller number
      N_02:
      - a number in the phrase " twice the greater "
      - a number in the phrase " twice the greater "
      - a number in the phrase " twice the greater "
      N_03:
      - the sum of the smaller number and twice the greater
      - the sum of twice the greater number and the smaller number
      - the sum of the smaller number and twice the greater number
      X_00:
      - the greater number
      - the value of the greater number
      - the value of the greater number
      X_01:
      - the smaller number
      - the value of the smaller number
      - the value of the smaller number
  info:
    answers:
    - g: '9'
      s: '4'
    item_id: 604cc853117d71c492a62da2
    numbers:
      N_00: '2'
      N_01: '5'
      N_02: '2'
      N_03: '22'
    split: null
    variables:
    - g
    - s
  text:
    numbers:
      shape:
      - 36
      target: __ __ __ __  0 __ __  1 __ __ __ __ __ __ __ __ __ __ __  2 __ __ __
        __ __ __  3 __ __ __ __ __ __ __ __ __
    raw: the greater of two numbers is 5 more than the smaller . if the smaller is
      added to twice the greater , the result is 22 . find both of the numbers .
    snippets:
      shape:
      - 4
      - 7
      target:
      - the greater of two numbers is 5
      - two numbers is 5 more than the
      - is added to twice the greater ,
      - the result is 22 . find both
    tokens:
      shape:
      - 36
      target: '[CLS] the greater of two numbers is 5 more than the smaller . if the
        smaller is added to twice the greater , the result is 22 . find both of the
        numbers . [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 20
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of orchid bushes currently in the park
      N_01:
      - the number of orchid bushes will be planted today
      X_00:
      - the number of orchid bushes when the workers are finished
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the current number of orchid bushes
      - the number of orchid bushes currently in the park
      - the number of orchid bushes currently in the park
      N_01:
      - the number of orchid bushes planted
      - the number of orchid bushes park workers will plant today
      - the number of orchid bushes that park workers will plant
      X_00:
      - the total number of orchid bushes
      - the number of whole bushes
      - the number of orchid bushes that the park will have
  info:
    answers:
    - w: '6'
    item_id: 60f9186c90be09b72239f242
    numbers:
      N_00: '2'
      N_01: '4'
    split: null
    variables:
    - w
  text:
    numbers:
      shape:
      - 36
      target: __ __ __  0 __ __ __ __ __ __ __ __ __ __ __  1 __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: there are 2 orchid bushes currently in the park . park workers will plant
      4 orchid bushes today . how many orchid bushes will the park have when the workers
      are finished ?
    snippets:
      shape:
      - 2
      - 7
      target:
      - there are 2 orchid bushes currently
      - workers will plant 4 orchid bushes today
    tokens:
      shape:
      - 36
      target: '[CLS] there are 2 orchid bushes currently in the park . park workers
        will plant 4 orchid bushes today . how many orchid bushes will the park have
        when the workers are finished ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 20
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: *(N_01, R_01) R_03: -(R_00,
      R_02) R_04: =(N_00, R_03) R_05: +(N_02, R_00) R_06: +(N_02, R_01) R_07: +(R_05,
      R_06) R_08: =(N_03, R_07) R_09: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the value of the age of linda minus 2 times the age of jane
      N_01:
      - a number in the phrase " 2 times the age of jane "
      N_02:
      - the number of years to go
      N_03:
      - the sum of their ages in the future
      X_00:
      - the age of linda now
      X_01:
      - the age of linda now
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the value of linda's present age minus 2 times jane's present age
      - the value of the age of linda now minus twice the age of jane now
      - the value of the age of linda minus 2 times the age of jane
      N_01:
      - a number in the phrase " 2 times the age of jane "
      - the value multiplied by the age of jane now
      - the coefficient of the age of jane
      N_02:
      - the years to be the future
      - the value of the future year minus now
      - the years between now and the future
      N_03:
      - the sum of linda and jane's future ages
      - the sum of the age of linda in the future year and the age of jane in the
        future year
      - the sum of future ages of linda and jane
      X_00:
      - linda's present age
      - the age of linda now
      - the number of age of linda
      X_01:
      - jane's present age
      - the age of jane now
      - the number of age of jane
  info:
    answers:
    - j: '5'
      l: '13'
    item_id: 604cc853117d71c492a62ddf
    numbers:
      N_00: '3'
      N_01: '2'
      N_02: '5'
      N_03: '28'
    split: null
    variables:
    - l
    - j
  text:
    numbers:
      shape:
      - 36
      target: __ __ __  0 __ __  1 __ __ __ __ __ __ __  2 __ __ __ __ __ __ __ __  3
        __ __ __ __ __ __ __ __ __ __ __ __
    raw: linda is 3 more than 2 times the age of jane . in five years the sum of their
      ages will be 28 . what is linda ' s age at present ?
    snippets:
      shape:
      - 4
      - 7
      target:
      - linda is 3 more than 2
      - 3 more than 2 times the age
      - jane . in five years the sum
      - ages will be 28 . what is
    tokens:
      shape:
      - 36
      target: '[CLS] linda is 3 more than 2 times the age of jane . in five years
        the sum of their ages will be 28 . what is linda '' s age at present ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 20
    tokens: 'R_00: __NEW_VAR(, ) R_01: -(N_03, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of bacteria a petri dish contained
      N_03:
      - the number of bacteria now
      X_00:
      - the value of the number of bacteria bacteria let more
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of original bacteria
      - number of bacteria originally contained in a petri dish
      - the number of bacteria the petri dish originally contained
      N_03:
      - the number of bacterias after grown by a scientist
      - the number of bacteria that grew
      - the number of bacterias in the petri dish contains now
      X_00:
      - the number of bacterias grown by a scientist
      - the value of the bacteria number now minus originally
      - the number of bacterias in the petri dish now minus the number of bacteria
        the petri dish originally contained
  info:
    answers:
    - d: '8317'
    item_id: 60f9186c90be09b72239e9fd
    numbers:
      N_00: '1'
      N_01: '600'
      N_02: '1'
      N_03: '8917'
    split: null
    variables:
    - d
  text:
    numbers:
      shape:
      - 36
      target: __  0 __ __ __ __ __  1 __ __  2 __ __ __ __ __ __ __ __ __ __  3  3
        __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'a pet ##ri dish originally contained 600 bacteria . a scientist let the
      bacteria grow , and now there are 89 ##17 of them . how many more bacteria are
      there now ?'
    snippets:
      shape:
      - 4
      - 7
      target:
      - 'a pet ##ri dish'
      - dish originally contained 600 bacteria . a
      - 600 bacteria . a scientist let the
      - 'now there are 89 ##17 of them'
    tokens:
      shape:
      - 36
      target: '[CLS] a pet ##ri dish originally contained 600 bacteria . a scientist
        let the bacteria grow , and now there are 89 ##17 of them . how many more
        bacteria are there now ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 20
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of walnut trees currently in the park
      N_01:
      - number of walnut trees workers will plant today
      X_00:
      - the total number of walnut trees after workers
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the current number of walnut trees
      - the number of walnut trees planted at first
      - the number of walnut trees currently in the park
      N_01:
      - the number of walnut trees planted
      - the number of trees planted additionally
      - the number of walnut trees that park workers will plant
      X_00:
      - the total number of walnut trees
      - the total number of trees planted
      - the number of walnut trees that the park will have
  info:
    answers:
    - w: '211'
    item_id: 60f9186c90be09b72239efae
    numbers:
      N_00: '107'
      N_01: '104'
    split: null
    variables:
    - w
  text:
    numbers:
      shape:
      - 36
      target: __ __ __  0 __ __ __ __ __ __ __ __ __ __ __  1 __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: there are 107 walnut trees currently in the park . park workers will plant
      104 walnut trees today . how many walnut trees will the park have when the workers
      are finished ?
    snippets:
      shape:
      - 2
      - 7
      target:
      - there are 107 walnut trees currently
      - workers will plant 104 walnut trees today
    tokens:
      shape:
      - 36
      target: '[CLS] there are 107 walnut trees currently in the park . park workers
        will plant 104 walnut trees today . how many walnut trees will the park have
        when the workers are finished ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 20
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of rows of cabbage patch
      N_01:
      - the number of heads of cabbage patch
      X_00:
      - the total number of heads of cabbage patch
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of rows of cabbage
      - the number of the rows of cabbage albert's cabbage patch has
      - the number of rows of cabbage
      N_01:
      - the number of heads of cabbage
      - the number of heads of cabbage in each row
      - the number of cabbages in one row
      X_00:
      - the number of all cabbages
      - the number of heads of cabbage albert has in all
      - the total number of cabbages
  info:
    answers:
    - c: '180'
    item_id: 60f9186c90be09b72239eee2
    numbers:
      N_00: '12'
      N_01: '15'
    split: null
    variables:
    - c
  text:
    numbers:
      shape:
      - 36
      target: __ __ __ __ __ __ __  0 __ __ __ __ __ __ __ __ __ __  1 __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: albert ' s cabbage patch has 12 rows of cabbage . in each row , there are
      15 heads of cabbage . how many heads of cabbage does albert have in all ?
    snippets:
      shape:
      - 2
      - 7
      target:
      - cabbage patch has 12 rows of cabbage
      - ', there are 15 heads of cabbage'
    tokens:
      shape:
      - 36
      target: '[CLS] albert '' s cabbage patch has 12 rows of cabbage . in each row
        , there are 15 heads of cabbage . how many heads of cabbage does albert have
        in all ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 20
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_01, R_00) R_02: =(N_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of basketball games sara's high school played
      N_01:
      - the number of games defeated on the team
      X_00:
      - the number of won games
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of basketball games this year
      - the number of basketball games sara's high school played this year
      - the total number of games played
      N_01:
      - the number of games defeated
      - the number of games they lost
      - the number of games defeated
      X_00:
      - the number of games they won
      - the number of games they won
      - the number of games won
  info:
    answers:
    - w: '8'
    item_id: 60f9186c90be09b72239efa2
    numbers:
      N_00: '12'
      N_01: '4'
    split: null
    variables:
    - w
  text:
    numbers:
      shape:
      - 36
      target: __ __ __ __ __ __ __  0 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __  1 __ __ __ __ __ __ __ __ __ __
    raw: sara ' s high school played 12 basketball games this year . the team won
      most of their games . they were defeated during 4 games . how many games did
      they win ?
    snippets:
      shape:
      - 2
      - 7
      target:
      - high school played 12 basketball games this
      - were defeated during 4 games . how
    tokens:
      shape:
      - 36
      target: '[CLS] sara '' s high school played 12 basketball games this year .
        the team won most of their games . they were defeated during 4 games . how
        many games did they win ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(R_00, R_01) R_03: =(N_00,
      R_02) R_04: *(N_02, R_00) R_05: -(R_01, R_04) R_06: =(N_01, R_05) R_07: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the sum of the ages of petra and her mother
      N_01:
      - the value of the age of her mother minus twice the age of petra
      N_02:
      - a number in the phrase " twice as old as petra "
      X_00:
      - the age of petra
      X_01:
      - the age of her mother
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the sum of the ages of petra and the mother
      - the sum of the age of petra and the age of the mother
      - the sum of the ages of petra and her mother
      N_01:
      - the value of the mother's age minus twice petra's age
      - the value of the age of the mother minus 2 times the age of petra
      - the value of the age of her mother minus twice the age of petra
      N_02:
      - a number in the phrase " twice as old as "
      - the multiplier for the age of petra
      - the coefficient of the age of petra
      X_00:
      - petra's age now
      - the age of petra
      - the age of petra
      X_01:
      - the mother's age now
      - the age of the mother
      - the age of her mother
  info:
    answers:
    - m: '33'
      p: '12'
    item_id: 604cc853117d71c492a62fa7
    numbers:
      N_00: '45'
      N_01: '9'
      N_02: '2'
    split: null
    variables:
    - p
    - m
  text:
    numbers:
      shape:
      - 38
      target: __ __ __ __ __ __ __ __ __ __ __ __  0 __ __ __ __  1 __ __ __  2 __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: the sum of the ages of petra and her mother is 45 . her mother is 9 years
      more than twice as old as petra . how old are petra and her mother ?
    snippets:
      shape:
      - 3
      - 7
      target:
      - her mother is 45 . her mother
      - her mother is 9 years more than
      - years more than twice as old as
    tokens:
      shape:
      - 38
      target: '[CLS] the sum of the ages of petra and her mother is 45 . her mother
        is 9 years more than twice as old as petra . how old are petra and her mother
        ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of oak trees currently in the park
      N_01:
      - the number of oak trees will be planted today
      X_00:
      - the whole number of oak trees after the work
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the current number of oak trees
      - the number of oak trees planted at first
      - the number of oak trees currently in the park
      N_01:
      - the number of oak trees planted
      - the number of trees planted additionally
      - the number of oak trees park workers will plant today
      X_00:
      - the total number of oak trees
      - the total number of trees planted
      - the number of whole trees
  info:
    answers:
    - w: '9'
    item_id: 60f9186c90be09b72239ea63
    numbers:
      N_00: '5'
      N_01: '4'
    split: null
    variables:
    - w
  text:
    numbers:
      shape:
      - 38
      target: __ __ __  0 __ __ __ __ __ __ __ __ __ __ __  1 __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: there are 5 oak trees currently in the park . park workers will plant 4 more
      oak trees today . how many oak trees will the park have when the workers are
      finished ?
    snippets:
      shape:
      - 2
      - 7
      target:
      - there are 5 oak trees currently
      - workers will plant 4 more oak trees
    tokens:
      shape:
      - 38
      target: '[CLS] there are 5 oak trees currently in the park . park workers will
        plant 4 more oak trees today . how many oak trees will the park have when
        the workers are finished ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: /(1, N_01) R_02: /(1, N_02) R_03: +(R_01, R_02)
      R_04: *(R_00, R_03) R_05: =(1, R_04) R_06: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the hours for nancy to mow a yard
      N_02:
      - the hours for nancy to mow a yard
      X_00:
      - the hours to mow the yard both peter and peter work together
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of hours that it takes for nancy to mow a yard
      - the hours it takes nancy to mow a yard
      - the hours for nancy to mow the yard
      N_02:
      - the number of hours that it takes for peter to mow a yard
      - the hours it takes peter to mow a yard
      - the hours for peter to mow the yard
      X_00:
      - the number of hours that it takes for nancy and peter to mow a yard together
      - the hours it takes nancy and peter to mow a yard
      - the hours to take when they work together
  info:
    answers:
    - h: '1.71428571428571'
    item_id: 604cc853117d71c492a62da6
    numbers:
      N_00: '1'
      N_01: '3'
      N_02: '4'
    split: null
    variables:
    - h
  text:
    numbers:
      shape:
      - 38
      target: __ __ __ __ __  0 __ __  1 __ __ __ __ __ __ __ __ __  2 __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'nancy can mo ##w a yard in 3 hours , and peter can mo ##w it in 4 hours
      . suppose they both work together . how long would it take to finish ?'
    snippets:
      shape:
      - 3
      - 7
      target:
      - 'can mo ##w a yard in 3'
      - a yard in 3 hours , and
      - '##w it in 4 hours . suppose'
    tokens:
      shape:
      - 38
      target: '[CLS] nancy can mo ##w a yard in 3 hours , and peter can mo ##w it
        in 4 hours . suppose they both work together . how long would it take to finish
        ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of walnut trees currently in the park
      N_01:
      - the number of walnut trees workers will plant today
      X_00:
      - the number of walnut trees planted more by the workers
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of walnut trees planted at first
      - the number of walnut trees currently in the park
      - the number of walnut trees currently in the park
      N_01:
      - the number of trees planted additionally
      - the number of walnut trees park workers will plant today
      - the number of walnut trees that park workers will plant
      X_00:
      - the total number of trees planted
      - the number of whole trees
      - the number of walnut trees that the park will have
  info:
    answers:
    - w: '77'
    item_id: 60f9186c90be09b72239ee0d
    numbers:
      N_00: '33'
      N_01: '44'
    split: null
    variables:
    - w
  text:
    numbers:
      shape:
      - 38
      target: __ __ __  0 __ __ __ __ __ __ __ __ __ __ __  1 __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: there are 33 walnut trees currently in the park . park workers will plant
      44 more walnut trees today . how many walnut trees will the park have when the
      workers are finished ?
    snippets:
      shape:
      - 2
      - 7
      target:
      - there are 33 walnut trees currently
      - workers will plant 44 more walnut trees
    tokens:
      shape:
      - 38
      target: '[CLS] there are 33 walnut trees currently in the park . park workers
        will plant 44 more walnut trees today . how many walnut trees will the park
        have when the workers are finished ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: -(N_01, N_00) R_02: *(N_02, R_01) R_03: =(R_00,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of brownies needed to make a brown party
      N_01:
      - the number of cups of flour needed to baked
      N_02:
      - the number of cups of flour needed to flour
      X_00:
      - the number of cups of flour needed to baked
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of brownies already baked
      - number of brownies chloe baked
      - the number of brownies chloe baked
      N_01:
      - the number of total brownies having to be baked
      - number of brownies she needs
      - the total number of brownies chloe needs for her party
      N_02:
      - the number of used cups of flour per browny
      - number of cups needed for each brownie
      - the number of cups of flour used on each brownie she baked
      X_00:
      - the number of necessary cups of flour to achieve the goal
      - the number of cups of flour she needs to make the rest of the brownies
      - the number of cups of flour she still needs
  info:
    answers:
    - c: '54'
    item_id: 60f9186c90be09b72239f00e
    numbers:
      N_00: '7'
      N_01: '16'
      N_02: '6'
      N_03: '1'
    split: null
    variables:
    - c
  text:
    numbers:
      shape:
      - 38
      target: __ __ __  0 __ __ __ __  1 __ __ __ __ __ __ __ __  2 __ __ __ __ __  3  3
        __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'chloe baked 7 brown ##ies but needed 16 total for her party . if she used
      6 cups of flour on each one , how much cups of flour does she still need ?'
    snippets:
      shape:
      - 4
      - 7
      target:
      - 'chloe baked 7 brown ##ies but'
      - '##ies but needed 16 total for her'
      - if she used 6 cups of flour
      - flour on each one , how much
    tokens:
      shape:
      - 38
      target: '[CLS] chloe baked 7 brown ##ies but needed 16 total for her party .
        if she used 6 cups of flour on each one , how much cups of flour does she
        still need ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: -(N_01, N_00) R_02: *(N_02, R_01) R_03: =(R_00,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of brownies isabel baked
      N_01:
      - the number of cups of flour she used
      N_02:
      - the number of cups of flour she used
      X_00:
      - the amount of flour she needs to cups of flour
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of brownies already baked
      - number of brownies isabel baked
      - the number of brownies isabel baked
      N_01:
      - the number of total brownies having to be baked
      - number of brownies she needs
      - the number of brownies isabel needs for her party
      N_02:
      - the number of used cups of flour per browny
      - number of cups needed for each brownie
      - the number of cups of flour used on each brownie
      X_00:
      - the number of necessary cups of flour to achieve the goal
      - the number of cups of flour she needs to make the rest of the brownies
      - the number of cups of flour she still needs
  info:
    answers:
    - c: '10'
    item_id: 60f9186c90be09b72239eb49
    numbers:
      N_00: '3'
      N_01: '5'
      N_02: '5'
      N_03: '1'
    split: null
    variables:
    - c
  text:
    numbers:
      shape:
      - 38
      target: __ __ __  0 __ __ __ __  1 __ __ __ __ __ __ __ __  2 __ __ __ __ __  3  3
        __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'isabel baked 3 brown ##ies but needed 5 total for her party . if she used
      5 cups of flour on each one , how much cups of flour does she still need ?'
    snippets:
      shape:
      - 4
      - 7
      target:
      - 'isabel baked 3 brown ##ies but'
      - '##ies but needed 5 total for her'
      - if she used 5 cups of flour
      - flour on each one , how much
    tokens:
      shape:
      - 38
      target: '[CLS] isabel baked 3 brown ##ies but needed 5 total for her party .
        if she used 5 cups of flour on each one , how much cups of flour does she
        still need ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: -(N_00, R_00) R_02: =(N_02, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the total number of baseball games played
      N_01:
      - the number of baseball games joan attended
      N_02:
      - the number of baseball games joan attended
      X_00:
      - the number of baseball games joan attended
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - number of baseball games joan's high school played
      - the number of baseball games joan's high school played
      - the number of baseball games joan's high school played this year
      N_02:
      - number of games she attended
      - the number of games joan attended
      - the number of baseball games she attended
      X_00:
      - number of games joan missed
      - the number of games joan missed
      - the number of baseball games she missed
  info:
    answers:
    - m: '469'
    item_id: 60f9186c90be09b72239ece9
    numbers:
      N_00: '864'
      N_01: '128'
      N_02: '395'
    split: null
    variables:
    - m
  text:
    numbers:
      shape:
      - 38
      target: __ __ __ __ __ __ __  0  0 __ __ __ __ __  1 __ __ __ __ __ __ __ __
        __ __  2 __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'joan '' s high school played 86 ##4 baseball games this year . 128 of the
      games were played at night . she attended 395 games . how many baseball games
      did joan miss ?'
    snippets:
      shape:
      - 3
      - 7
      target:
      - 'high school played 86 ##4 baseball games'
      - this year . 128 of the games
      - . she attended 395 games . how
    tokens:
      shape:
      - 38
      target: '[CLS] joan '' s high school played 86 ##4 baseball games this year
        . 128 of the games were played at night . she attended 395 games . how many
        baseball games did joan miss ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_02, R_00) R_02: +(N_00, N_01) R_03: =(R_01,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of math problems
      N_01:
      - the number of spelling problems
      N_02:
      - the number of problems that can be finish in an hour
      X_00:
      - the number of hours it takes for faye and spelling problems to finish all
        the all problems
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of math problems of homework
      - the number of math problems
      - the number of math problems
      N_01:
      - the number of spelling problems of homework
      - the number of spelling problems
      - the number of spelling problems
      N_02:
      - the number of solving problems in an hour
      - the number of problems faye can finish in an hour
      - the number of the problems to finish in an hour
      X_00:
      - the total hour for solving all problems
      - the total number of hours faye needs to finish all the problems
      - the hours it takes her to finish all the problems
  info:
    answers:
    - h: '5'
    item_id: 60f9186c90be09b72239e9ec
    numbers:
      N_00: '13'
      N_01: '2'
      N_02: '3'
      N_03: '1'
    split: null
    variables:
    - h
  text:
    numbers:
      shape:
      - 38
      target: __ __ __ __ __ __  0 __ __ __  1 __ __ __ __ __ __ __  2 __ __  3 __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: for homework , faye had 13 math problems and 2 spelling problems . if she
      can finish 3 problems in an hour , how long will it take her to finish all the
      problems ?
    snippets:
      shape:
      - 4
      - 7
      target:
      - ', faye had 13 math problems and'
      - math problems and 2 spelling problems .
      - she can finish 3 problems in an
      - 3 problems in an hour , how
    tokens:
      shape:
      - 38
      target: '[CLS] for homework , faye had 13 math problems and 2 spelling problems
        . if she can finish 3 problems in an hour , how long will it take her to finish
        all the problems ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: /(N_01, 100) R_03: *(R_00,
      R_02) R_04: /(N_04, 100) R_05: *(N_02, R_04) R_06: +(R_03, R_05) R_07: /(N_07,
      100) R_08: *(R_01, R_07) R_09: =(R_06, R_08) R_10: +(N_02, R_00) R_11: =(R_01,
      R_10) R_12: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the concentration of the original salt solution
      N_02:
      - the amount of the original salt solution
      N_04:
      - the concentration of the original salt solution
      N_07:
      - the concentration of the original salt solution
      X_00:
      - the amount of the pure salt to be added to the original salt solution
      X_01:
      - the amount of the mixed salt solution
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the percentage of salt in the first solution
      - the percentage of salt of the first solution
      - the concentration of the first kind of salt solution
      N_02:
      - the amount of the second solution
      - the volume of the second solution
      - the number of liters of the second kind of salt solution
      N_04:
      - the percentage of salt in the second solution
      - the percentage of salt of the second solution
      - the concentration of the second kind of salt solution
      N_07:
      - the percentage of salt in the mixture of two solutions
      - the percentage of salt in the mixed solution of the first solution and the
        second solution
      - the concentration of the mixed salt solution
      X_00:
      - the amount of the first solution
      - the volume of the first solution
      - the number of liters of the first kind of salt solution
      X_01:
      - the amount of the mixture of two solutions
      - the volume of the mixed solution
      - the number of liters of the mixed solution
  info:
    answers:
    - s1: '12'
      s2: '4'
    item_id: 604cc853117d71c492a62d84
    numbers:
      N_00: '1'
      N_01: '20'
      N_02: '8'
      N_03: '1'
      N_04: '5'
      N_05: '1'
      N_06: '1'
      N_07: '10'
    split: null
    variables:
    - s2
    - s1
  text:
    numbers:
      shape:
      - 38
      target: __ __ __ __ __ __  0  1 __ __ __ __ __ __ __  2 __ __ __  3  4 __ __
        __ __ __  5 __ __ __  6  7 __ __ __ __ __ __
    raw: 'how many liter ##s of a 20 % salt solution must be added to 8 liter ##s
      of a 5 % salt solution to yield an alloy that is a 10 % salt solution ?'
    snippets:
      shape:
      - 8
      - 7
      target:
      - 'liter ##s of a 20 % salt'
      - '##s of a 20 % salt solution'
      - 'be added to 8 liter ##s of'
      - 'liter ##s of a 5 % salt'
      - '##s of a 5 % salt solution'
      - solution to yield an alloy that is
      - alloy that is a 10 % salt
      - that is a 10 % salt solution
    tokens:
      shape:
      - 38
      target: '[CLS] how many liter ##s of a 20 % salt solution must be added to 8
        liter ##s of a 5 % salt solution to yield an alloy that is a 10 % salt solution
        ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(R_00, R_01) R_03: =(N_01,
      R_02) R_04: -(R_01, R_00) R_05: =(N_02, R_04) R_06: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the distance that erin and susan walked
      N_02:
      - the value of the length of miles erin walked minus the distance that susan
        walked
      X_00:
      - the distance of dogs walked
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the sum of the distance walked by erin or susan
      - the sum of the miles walked by erin and the miles walked by susan
      - the total distance erin and susan walked
      N_02:
      - the value of the distance walked by susan minus the distance walked by erin
      - the value of the miles walked by susan minus the miles walked by erin
      - the value of the distance susan walked minus the distance erin walked
      X_00:
      - the distance walked by erin
      - the miles walked by erin
      - the distance erin walked
      X_01:
      - the distance walked by susan
      - the miles walked by susan
      - the distance susan walked
  info:
    answers:
    - e: '6'
      s: '9'
    item_id: 604cc853117d71c492a630b0
    numbers:
      N_00: '1'
      N_01: '15'
      N_02: '3'
    split: null
    variables:
    - e
    - s
  text:
    numbers:
      shape:
      - 38
      target: __ __ __ __ __ __ __ __ __  0 __ __ __ __ __  1 __ __ __ __ __  2 __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: erin and susan both took their dogs for a walk . together they walked 15
      miles . if erin walked 3 miles less than susan , how far did susan walk with
      her dog ?
    snippets:
      shape:
      - 3
      - 7
      target:
      - their dogs for a walk . together
      - together they walked 15 miles . if
      - if erin walked 3 miles less than
    tokens:
      shape:
      - 38
      target: '[CLS] erin and susan both took their dogs for a walk . together they
        walked 15 miles . if erin walked 3 miles less than susan , how far did susan
        walk with her dog ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_03, R_00) R_02: +(N_01, N_02) R_03: =(R_01,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of puppies adopted
      N_02:
      - the number of puppies adopted a day
      N_03:
      - the number of puppies adopted
      X_00:
      - the number of puppies it takes to be adopted
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the initial number of puppies
      - the number of puppies in the beginning
      - the number of puppies a pet shelter had
      N_02:
      - the additional number of puppies
      - the number of puppies added
      - the number of puppies another pet shelter had
      N_03:
      - the number of puppies adopted per day
      - the number of puppies adopted per day
      - the number of puppies adopted per day
      X_00:
      - the number of days it takes for all the puppies to be adopted
      - the number of days for every puppy to be adopted
      - the number of days it would take for all of them to be adopted
  info:
    answers:
    - d: '2'
    item_id: 60f9186c90be09b72239f22a
    numbers:
      N_00: '1'
      N_01: '3'
      N_02: '3'
      N_03: '3'
      N_04: '1'
    split: null
    variables:
    - d
  text:
    numbers:
      shape:
      - 38
      target: __  0 __ __ __  1 __ __ __ __  2 __ __ __ __ __  3 __ __  4 __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'a pet shelter had 3 pup ##pies when another 3 were brought in . if 3 pup
      ##pies a day are adopted , how long would it take for all of them to be adopted
      ?'
    snippets:
      shape:
      - 5
      - 7
      target:
      - a pet shelter had
      - 'pet shelter had 3 pup ##pies when'
      - '##pies when another 3 were brought in'
      - 'in . if 3 pup ##pies a'
      - '3 pup ##pies a day are adopted'
    tokens:
      shape:
      - 38
      target: '[CLS] a pet shelter had 3 pup ##pies when another 3 were brought in
        . if 3 pup ##pies a day are adopted , how long would it take for all of them
        to be adopted ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_03, R_00) R_02: +(N_01, N_02) R_03: =(R_01,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of regular sodas cody bought
      N_02:
      - the number of diet sodas cody bought
      N_03:
      - the number of sodas one shelf can hold
      X_00:
      - the number of shelves needed
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of regular sodas
      - the number of regular sodas
      - the number of regular sodas
      N_02:
      - the number of diet sodas
      - the number of diet sodas
      - the number of diet sodas
      N_03:
      - the number of soda on each shelf
      - the number of sodas able on a shelf
      - the number of sodas the shelf can hold
      X_00:
      - the number of shelves filled with sodas
      - the ratio of sodas to " 6 "
      - the number of shelves filled
  info:
    answers:
    - s: '8'
    item_id: 60f9186c90be09b72239ec60
    numbers:
      N_00: '1'
      N_01: '4'
      N_02: '44'
      N_03: '6'
    split: null
    variables:
    - s
  text:
    numbers:
      shape:
      - 38
      target: __ __  0 __ __ __ __ __  1 __ __ __ __  2 __ __ __ __ __ __ __ __ __
        __  3 __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'for a birthday party , cody bought 4 regular soda ##s and 44 diet soda ##s
      . if his fridge would only hold 6 on each shelf , how many shelves would he
      fill up ?'
    snippets:
      shape:
      - 4
      - 7
      target:
      - for a birthday party ,
      - ', cody bought 4 regular soda ##s'
      - 'soda ##s and 44 diet soda ##s'
      - would only hold 6 on each shelf
    tokens:
      shape:
      - 38
      target: '[CLS] for a birthday party , cody bought 4 regular soda ##s and 44
        diet soda ##s . if his fridge would only hold 6 on each shelf , how many shelves
        would he fill up ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_03, R_00) R_02: +(N_01, N_02) R_03: =(R_01,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of puppies a pet shelter had
      N_02:
      - the number of puppies added
      N_03:
      - the number of puppies adopted by a pet shelter
      X_00:
      - the number of puppies it takes to be adopted
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the initial number of puppies
      - the number of puppies in the beginning
      - the number of puppies a pet shelter had
      N_02:
      - the additional number of puppies
      - the number of puppies added
      - the number of puppies another pet shelter had
      N_03:
      - the number of puppies adopted per day
      - the number of puppies adopted per day
      - the number of puppies adopted per day
      X_00:
      - the number of days it takes for all the puppies to be adopted
      - the number of days for every puppy to be adopted
      - the number of days it would take for all of them to be adopted
  info:
    answers:
    - d: '7'
    item_id: 60f9186c90be09b72239f041
    numbers:
      N_00: '1'
      N_01: '9'
      N_02: '12'
      N_03: '3'
      N_04: '1'
    split: null
    variables:
    - d
  text:
    numbers:
      shape:
      - 38
      target: __  0 __ __ __  1 __ __ __ __  2 __ __ __ __ __  3 __ __  4 __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'a pet shelter had 9 pup ##pies when another 12 were brought in . if 3 pup
      ##pies a day are adopted , how long would it take for all of them to be adopted
      ?'
    snippets:
      shape:
      - 5
      - 7
      target:
      - a pet shelter had
      - 'pet shelter had 9 pup ##pies when'
      - '##pies when another 12 were brought in'
      - 'in . if 3 pup ##pies a'
      - '3 pup ##pies a day are adopted'
    tokens:
      shape:
      - 38
      target: '[CLS] a pet shelter had 9 pup ##pies when another 12 were brought in
        . if 3 pup ##pies a day are adopted , how long would it take for all of them
        to be adopted ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_03, R_00) R_02: +(N_01, N_02) R_03: =(R_01,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of regular sodas
      N_02:
      - the number of diet sodas
      N_03:
      - the number of sodas one shelf can hold
      X_00:
      - the number of shelves needed
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of regular sodas
      - the number of regular sodas tom bought
      - the number of regular sodas
      N_02:
      - the number of diet sodas
      - the number of diet sodas tom bought
      - the number of diet sodas
      N_03:
      - the number of soda on each shelf
      - the number of items his fridge can hold
      - the number of sodas able on a shelf
      X_00:
      - the number of shelves filled with sodas
      - the number of shelves needed to hold all sodas
      - the ratio of sodas to " 7 "
  info:
    answers:
    - s: '8'
    item_id: 60f9186c90be09b72239e971
    numbers:
      N_00: '1'
      N_01: '4'
      N_02: '52'
      N_03: '7'
    split: null
    variables:
    - s
  text:
    numbers:
      shape:
      - 38
      target: __ __  0 __ __ __ __ __  1 __ __ __ __  2 __ __ __ __ __ __ __ __ __
        __  3 __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'for a birthday party , tom bought 4 regular soda ##s and 52 diet soda ##s
      . if his fridge would only hold 7 on each shelf , how many shelves would he
      fill up ?'
    snippets:
      shape:
      - 4
      - 7
      target:
      - for a birthday party ,
      - ', tom bought 4 regular soda ##s'
      - 'soda ##s and 52 diet soda ##s'
      - would only hold 7 on each shelf
    tokens:
      shape:
      - 38
      target: '[CLS] for a birthday party , tom bought 4 regular soda ##s and 52 diet
        soda ##s . if his fridge would only hold 7 on each shelf , how many shelves
        would he fill up ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(R_00, R_01) R_03: =(N_02,
      R_02) R_04: *(N_03, R_01) R_05: =(R_00, R_04) R_06: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the total cost of the garden table and bench combined
      N_03:
      - the ratio of the cost of the garden table to the cost of the bench
      X_00:
      - the cost of the garden table
      X_01:
      - the cost of the bench
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the sum of the cost of the table and the bench
      - the total cost of a garden table and a bench
      - the total cost of a garden table and a bench combined
      N_03:
      - the ratio of the cost of the table to the cost of the bench
      - the ratio of a garden table cost to a bench
      - the ratio of the price of the garden table to that of the bench
      X_00:
      - the cost of the table
      - the cost of a garden table
      - the cost of a garden table
      X_01:
      - the cost of the bench
      - the cost of a bench
      - the cost of a bench
  info:
    answers:
    - b: '150'
      t: '300'
    item_id: 604cc853117d71c492a62ce5
    numbers:
      N_00: '1'
      N_01: '1'
      N_02: '450'
      N_03: '2'
    split: null
    variables:
    - t
    - b
  text:
    numbers:
      shape:
      - 38
      target: __  0 __ __ __  1 __ __  2 __ __ __ __ __ __ __ __ __ __  3 __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: a garden table and a bench cost 450 dollars combined . the price of the garden
      table is 2 times the price of the bench . what is the cost of the bench in dollars
      ?
    snippets:
      shape:
      - 4
      - 7
      target:
      - a garden table and
      - garden table and a bench cost 450
      - a bench cost 450 dollars combined .
      - garden table is 2 times the price
    tokens:
      shape:
      - 38
      target: '[CLS] a garden table and a bench cost 450 dollars combined . the price
        of the garden table is 2 times the price of the bench . what is the cost of
        the bench in dollars ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_02, R_00) R_02: +(N_00, N_01) R_03: =(R_01,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of pieces of neighbors'candy
      N_01:
      - the number of pieces of candy that megan received
      N_02:
      - the number of pieces of candy that she ate
      X_00:
      - the total number of pieces of candy
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of received candies from neighbors
      - the number of candies megan received from neighbors
      - the number of candies given by megan's neighbors to megan
      N_01:
      - the number of received candies from older sister
      - the number of candies megan received from her older sister
      - the number of pieces of candy given to megan by megan's sister
      N_02:
      - the number of candies eaten in a day
      - the number of candies megan would eat a day
      - the number of candies megan eats per day
      X_00:
      - the duration of candies
      - the number of days the candy would last her
      - the number of days megan can eat the candy
  info:
    answers:
    - d: '2'
    item_id: 60f9186c90be09b72239ec58
    numbers:
      N_00: '11'
      N_01: '5'
      N_02: '8'
      N_03: '1'
    split: null
    variables:
    - d
  text:
    numbers:
      shape:
      - 38
      target: __ __ __ __ __ __  0 __ __ __ __ __ __  1 __ __ __ __ __ __ __ __ __
        __  2 __  3 __ __ __ __ __ __ __ __ __ __ __
    raw: for halloween , megan received 11 pieces of candy from neighbors and 5 pieces
      from her older sister . if she only ate 8 pieces a day , how long would the
      candy last her ?
    snippets:
      shape:
      - 4
      - 7
      target:
      - ', megan received 11 pieces of candy'
      - from neighbors and 5 pieces from her
      - she only ate 8 pieces a day
      - ate 8 pieces a day , how
    tokens:
      shape:
      - 38
      target: '[CLS] for halloween , megan received 11 pieces of candy from neighbors
        and 5 pieces from her older sister . if she only ate 8 pieces a day , how
        long would the candy last her ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(N_00, R_00) R_03: *(N_01,
      R_02) R_04: +(N_00, R_01) R_05: =(R_03, R_04) R_06: -(R_00, N_02) R_07: *(N_03,
      R_06) R_08: -(R_01, N_02) R_09: =(R_07, R_08) R_10: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of years into the future
      N_01:
      - the ratio of the future age of alex to the future age of precycy
      N_02:
      - the number of years into the past
      N_03:
      - the ratio of alex's age a year ago to precy's age a year ago
      X_00:
      - the present age of precycy
      X_01:
      - the present age of alex
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of years from now
      - the number of years to go to the future
      - the number of years between the future and now
      N_01:
      - the ratio of alex's age after 3 years to precy's age after 3 years
      - the ratio of the age of alex 3 years later to the age of precy 3 years later
      - the ratio of the future age of alex to that of precy
      N_02:
      - the number of years passed
      - the number of years past
      - the number of years between the past and now
      N_03:
      - the ratio of alex's age a year ago to precy's age a year ago
      - the ratio of the age of alex a year ago to the age of precy a year ago
      - the ratio of the last year's age of alex to that of precy
      X_00:
      - precy's age now
      - the age of precy now
      - the current age of precy
      X_01:
      - alex's age now
      - the age of alex now
      - the current age of alex
  info:
    answers:
    - a: '15'
      p: '3'
    item_id: 604cc853117d71c492a63034
    numbers:
      N_00: '3'
      N_01: '3'
      N_02: '1'
      N_03: '7'
    split: null
    variables:
    - p
    - a
  text:
    numbers:
      shape:
      - 42
      target: __ __  0 __ __ __ __ __  1 __ __ __ __ __ __ __ __ __  2 __ __ __ __
        __  3 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'in 3 years , alex will be 3 times as old as his sister pre ##cy . a year
      ago , alex was 7 times as old as pre ##cy . how old are they now ?'
    snippets:
      shape:
      - 4
      - 7
      target:
      - in 3 years , alex
      - alex will be 3 times as old
      - 'pre ##cy . a year ago ,'
      - ', alex was 7 times as old'
    tokens:
      shape:
      - 42
      target: '[CLS] in 3 years , alex will be 3 times as old as his sister pre ##cy
        . a year ago , alex was 7 times as old as pre ##cy . how old are they now
        ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of dogwood tress currently in the park
      N_01:
      - the number of dogwood trees workers will plant today
      X_00:
      - the total number of dogwood trees after today
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the current number of dogwood trees
      - the number of dogwood trees currently in the park
      - the number of dogwood trees currently in the park
      N_01:
      - the number of dogwood trees planted
      - the number of dogwood trees park workers will plant today
      - the number of dogwood trees that park workers will plant
      X_00:
      - the total number of dogwood trees
      - the number of whole trees
      - the number of dogwood trees that the park will have
  info:
    answers:
    - w: '83'
    item_id: 60f9186c90be09b72239f06a
    numbers:
      N_00: '34'
      N_01: '49'
    split: null
    variables:
    - w
  text:
    numbers:
      shape:
      - 42
      target: __ __ __  0 __ __ __ __ __ __ __ __ __ __ __ __  1 __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'there are 34 dog ##wood trees currently in the park . park workers will
      plant 49 more dog ##wood trees today . how many dog ##wood trees will the park
      have when the workers are finished ?'
    snippets:
      shape:
      - 2
      - 7
      target:
      - 'there are 34 dog ##wood trees'
      - 'workers will plant 49 more dog ##wood'
    tokens:
      shape:
      - 42
      target: '[CLS] there are 34 dog ##wood trees currently in the park . park workers
        will plant 49 more dog ##wood trees today . how many dog ##wood trees will
        the park have when the workers are finished ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: /(N_00, 100) R_03: *(R_00,
      R_02) R_04: /(N_02, 100) R_05: *(R_01, R_04) R_06: +(R_03, R_05) R_07: =(N_04,
      R_06) R_08: +(R_00, R_01) R_09: =(N_06, R_08) R_10: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the cost of a pencil
      N_02:
      - the cost of a pencil
      N_04:
      - the total cost of pens
      N_06:
      - the total number of pencils and pencils
      X_00:
      - the number of pencils
      X_01:
      - the number of pens
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the price of a pencil in cents
      - the cost of the pencil
      - the cost of a pencil in cent terms
      N_02:
      - the price of a pen in cents
      - the cost of the pen
      - the cost of a pen in cent terms
      N_04:
      - the amount of dollars susan spent in total
      - the total spent dollars
      - the total cost of the pencils and the pens in dollar terms
      N_06:
      - the number of pens and pencils susan bought
      - the number of pens and pencils
      - the total number of the pens and the pencils
      X_00:
      - the number of pencils bought
      - the number of pencils
      - the number of the pencils
      X_01:
      - the number of pens bought
      - the number of the pens
      - the number of the pens
  info:
    answers:
    - p1: '20'
      p2: '16'
    item_id: 604cc852117d71c492a62b7f
    numbers:
      N_00: '25'
      N_01: '1'
      N_02: '80'
      N_03: '1'
      N_04: '20'
      N_05: '1'
      N_06: '36'
    split: null
    variables:
    - p2
    - p1
  text:
    numbers:
      shape:
      - 42
      target: __ __ __ __  0 __  1 __ __ __ __  2 __  3 __ __ __ __  4 __ __  5 __
        __  6 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'pencil ##s cost 25 cents a piece . pens cost 80 cents a piece . susan spent
      20 dollars for a total of 36 pens and pencil ##s . how many pencil ##s did she
      buy ?'
    snippets:
      shape:
      - 7
      - 7
      target:
      - 'pencil ##s cost 25 cents a piece'
      - cost 25 cents a piece . pens
      - . pens cost 80 cents a piece
      - cost 80 cents a piece . susan
      - . susan spent 20 dollars for a
      - 20 dollars for a total of 36
      - a total of 36 pens and pencil
    tokens:
      shape:
      - 42
      target: '[CLS] pencil ##s cost 25 cents a piece . pens cost 80 cents a piece
        . susan spent 20 dollars for a total of 36 pens and pencil ##s . how many
        pencil ##s did she buy ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: -(R_00, R_01) R_03: =(N_01,
      R_02) R_04: *(N_02, R_00) R_05: -(R_01, R_04) R_06: *(N_04, R_00) R_07: -(R_06,
      N_03) R_08: =(R_05, R_07) R_09: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the value of the larger number minus the smaller number
      N_02:
      - the multiplier for the larger number
      N_03:
      - the value of six times the larger number minus the smaller number
      N_04:
      - a number in the phrase " six "
      X_00:
      - the value of the larger number
      X_01:
      - the value of the smaller number
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the value of the larger number minus the smaller number
      - the value of the larger number minus the smaller number
      - the value of the larger number minus the smaller number
      N_02:
      - a number in the phrase " four times the larger "
      - a number in the phrase " four times the larger number "
      - a number in the phrase " four times the larger number "
      N_03:
      - the value of six times the larger number minus the difference between the
        smaller number and four times the larger number
      - the value of six times the larger number minus the smaller number decreased
        by four times the larger
      - the value of six times the larger number minus the smaller number decreased
        by four times the larger number
      N_04:
      - a number in the phrase " six times the larger "
      - a number in the phrase " six times the larger number "
      - a number in the phrase " six times the larger number "
      X_00:
      - the larger number
      - the value of the larger number
      - the value of the larger number
      X_01:
      - the smaller number
      - the value of the smaller number
      - the value of the smaller number
  info:
    answers:
    - l: '1'
      s: '-2'
    item_id: 604cc853117d71c492a62fba
    numbers:
      N_00: '1'
      N_01: '3'
      N_02: '4'
      N_03: '12'
      N_04: '6'
    split: null
    variables:
    - l
    - s
  text:
    numbers:
      shape:
      - 42
      target: __  0 __ __  1 __ __ __ __ __ __ __ __ __  2 __ __ __ __ __ __ __ __  3
        __ __  4 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: one number is 3 more than another . the smaller number decreased by four
      times the larger number is the same as 12 less than six times the larger number
      . what is the larger number ?
    snippets:
      shape:
      - 5
      - 7
      target:
      - one number is 3
      - one number is 3 more than another
      - number decreased by four times the larger
      - the same as 12 less than six
      - 12 less than six times the larger
    tokens:
      shape:
      - 42
      target: '[CLS] one number is 3 more than another . the smaller number decreased
        by four times the larger number is the same as 12 less than six times the
        larger number . what is the larger number ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_02) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the initial number of short bushes
      N_02:
      - the number of short bushes park workers will plant today
      X_00:
      - the total number of short bushes
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the current number of short bushes
      - the number of short bushes currently in the park
      - the number of short bushes currently in the park
      N_02:
      - the number of short bushes planted
      - the number of short bushes park workers will plant today
      - the number of short bushes that park workers will plant
      X_00:
      - the total number of short bushes
      - the number of whole bushes
      - the number of short bushes that the park will have
  info:
    answers:
    - w: '57'
    item_id: 60f9186c90be09b72239ec22
    numbers:
      N_00: '37'
      N_01: '30'
      N_02: '20'
    split: null
    variables:
    - w
  text:
    numbers:
      shape:
      - 42
      target: __ __ __  0 __ __ __  1 __ __ __ __ __ __ __ __ __ __ __  2 __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: there are 37 short bushes and 30 tall trees currently in the park . park
      workers will plant 20 short bushes today . how many short bushes will the park
      have when the workers are finished ?
    snippets:
      shape:
      - 3
      - 7
      target:
      - there are 37 short bushes and
      - short bushes and 30 tall trees currently
      - workers will plant 20 short bushes today
    tokens:
      shape:
      - 42
      target: '[CLS] there are 37 short bushes and 30 tall trees currently in the
        park . park workers will plant 20 short bushes today . how many short bushes
        will the park have when the workers are finished ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_01) R_02: *(N_02, R_01) R_03: =(R_00,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of new chairs
      N_01:
      - the number of new tables
      N_02:
      - the time it takes to finish each piece
      X_00:
      - the time it take her furniture
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of maria's new chairs
      - number of new chairs
      - the number of new chairs for maria's house
      N_01:
      - the number of maria's new tables
      - number of new tables
      - the number of new tables for maria's house
      N_02:
      - the length of minutes needed to put each piece of furniture
      - amount of time she spent on each piece of furniture
      - the length of time to spend on each piece of furniture putting it together
        in minutes
      X_00:
      - the whole minutes to finish putting all new furniture
      - the total amount of time it took her to put all the furniture together
      - the total length of time to spend on all furnitures putting them together
        in minutes
  info:
    answers:
    - m: '32'
    item_id: 60f9186c90be09b72239f146
    numbers:
      N_00: '2'
      N_01: '2'
      N_02: '8'
    split: null
    variables:
    - m
  text:
    numbers:
      shape:
      - 42
      target: __ __ __  0 __ __ __  1 __ __ __ __ __ __ __ __ __  2 __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: maria bought 2 new chairs and 2 new tables for her house . if she spent 8
      minutes on each piece of furniture putting it together , how many minutes did
      it take her to finish ?
    snippets:
      shape:
      - 3
      - 7
      target:
      - maria bought 2 new chairs and
      - new chairs and 2 new tables for
      - if she spent 8 minutes on each
    tokens:
      shape:
      - 42
      target: '[CLS] maria bought 2 new chairs and 2 new tables for her house . if
        she spent 8 minutes on each piece of furniture putting it together , how many
        minutes did it take her to finish ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_04, R_00) R_02: -(N_01, N_03) R_03: =(R_01,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of puppies a pet store had
      N_03:
      - the number of puppies sold
      N_04:
      - the number of puppies in each cage
      X_00:
      - the number of cages needed
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of puppies at the beginning
      - number of puppies
      - the number of puppies they had
      N_03:
      - the number of puppies sold
      - number of puppies sold
      - the number of puppies they sold
      N_04:
      - the number of puppies per cage
      - number of puppies in each cage
      - the number of puppies in each cage
      X_00:
      - the number of cages necessary for the rest puppies
      - the ratio of the puppies left to the number of puppies in each cage
      - the number of cages
  info:
    answers:
    - c: '9'
    item_id: 60f9186c90be09b72239eb87
    numbers:
      N_00: '1'
      N_01: '88'
      N_02: '1'
      N_03: '34'
      N_04: '6'
    split: null
    variables:
    - c
  text:
    numbers:
      shape:
      - 42
      target: __  0 __ __ __  1 __ __ __ __  2 __ __ __ __  3 __ __ __ __ __ __ __
        __ __ __  4 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'a pet store had 88 pup ##pies . in one day , they sold 34 of them and put
      the rest into cages , with 6 in each cage . how many cages did they use ?'
    snippets:
      shape:
      - 5
      - 7
      target:
      - a pet store had
      - 'pet store had 88 pup ##pies .'
      - '##pies . in one day , they'
      - ', they sold 34 of them and'
      - cages , with 6 in each cage
    tokens:
      shape:
      - 42
      target: '[CLS] a pet store had 88 pup ##pies . in one day , they sold 34 of
        them and put the rest into cages , with 6 in each cage . how many cages did
        they use ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_01, N_02) R_02: *(N_03, N_04) R_03: +(R_01,
      R_02) R_04: *(N_05, R_00) R_05: +(R_03, R_04) R_06: =(N_00, R_05) R_07: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the total cost of a notebook in cents
      N_02:
      - the cost of a ruler in cents
      N_04:
      - the cost of a notebook in cents
      N_05:
      - the number of pencils bought
      X_00:
      - the cost of a pencil
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the paid cost
      - the cost of cent mrs. hilt spent at the school store
      - the total amount of money spent
      N_01:
      - the number of notebooks
      - the number of notebooks
      - the number of notebooks bought
      N_02:
      - the cost of a notebook
      - the cost of a notebook
      - the cost of one notebook
      N_03:
      - the number of rulers
      - the number of rulers
      - the number of rulers bought
      N_04:
      - the cost of a ruler
      - the cost of a ruler
      - the cost of one ruler
      N_05:
      - the number of pencils
      - the number of pencils
      - the number of pencils bought
      X_00:
      - the cost of a pencil
      - the cost of a pencil
      - the cost of one pencil
  info:
    answers:
    - p: '7'
    item_id: 60f9186c90be09b72239e966
    numbers:
      N_00: '74'
      N_01: '1'
      N_02: '35'
      N_03: '1'
      N_04: '18'
      N_05: '3'
      N_06: '1'
    split: null
    variables:
    - p
  text:
    numbers:
      shape:
      - 42
      target: __ __ __ __ __  0 __ __ __ __ __ __ __ __  1 __ __  2 __ __  3 __ __  4
        __ __ __  5 __ __ __ __ __ __ __ __  6 __ __ __ __ __
    raw: 'mrs . hilt spent 74 cents at the school store . she bought a notebook for
      35 cents , a ruler for 18 cents , and 3 pencil ##s . what is the cost of one
      pencil ?'
    snippets:
      shape:
      - 7
      - 7
      target:
      - . hilt spent 74 cents at the
      - . she bought a notebook for 35
      - a notebook for 35 cents , a
      - 35 cents , a ruler for 18
      - a ruler for 18 cents , and
      - 'cents , and 3 pencil ##s .'
      - the cost of one pencil ?
    tokens:
      shape:
      - 42
      target: '[CLS] mrs . hilt spent 74 cents at the school store . she bought a
        notebook for 35 cents , a ruler for 18 cents , and 3 pencil ##s . what is
        the cost of one pencil ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: -(N_00, N_01) R_02: +(N_03, R_01) R_03: =(R_00,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of pieces of candy that haley scored
      N_01:
      - the number of candies eaten
      N_03:
      - the number of candies given to her sister
      X_00:
      - the total number of pieces of candy held by haley now
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of haley's scored pieces of candy during halloween
      - the number of pieces of candy
      - the number of pieces of candy scored by haley
      N_01:
      - the number of pieces of candy that she ate
      - the number of pieces she ate
      - the number of pieces of candy eaten by haley
      N_03:
      - the number of given pieces of candy from her sister
      - the number of pieces her sister gave her
      - the number of pieces of candy given to haley from haley's sister
      X_00:
      - the number of remaining pieces of candy
      - the number of pieces of candy in now
      - the number of pieces of candy left
  info:
    answers:
    - n: '35'
    item_id: 60f9186c90be09b72239eb9e
    numbers:
      N_00: '33'
      N_01: '17'
      N_02: '1'
      N_03: '19'
    split: null
    variables:
    - n
  text:
    numbers:
      shape:
      - 42
      target: __ __ __ __ __ __  0 __ __ __ __ __ __  1 __ __  2 __ __ __ __ __ __
        __ __  3 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: for halloween , haley scored 33 pieces of candy . she ate 17 pieces the first
      night , and then her sister gave her 19 more pieces . how many pieces of candy
      does haley have now ?
    snippets:
      shape:
      - 4
      - 7
      target:
      - ', haley scored 33 pieces of candy'
      - . she ate 17 pieces the first
      - 17 pieces the first night , and
      - sister gave her 19 more pieces .
    tokens:
      shape:
      - 42
      target: '[CLS] for halloween , haley scored 33 pieces of candy . she ate 17
        pieces the first night , and then her sister gave her 19 more pieces . how
        many pieces of candy does haley have now ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: /(N_03, 60) R_03: +(R_00,
      R_01) R_04: *(R_02, R_03) R_05: =(N_01, R_04) R_06: /(N_04, 60) R_07: -(R_00,
      R_01) R_08: *(R_06, R_07) R_09: =(N_01, R_08) R_10: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the distance the boat traveled downstream
      N_03:
      - the number of minutes it takes for the boat to go downstream
      N_04:
      - the time taken for the boat to travel back upstream
      N_05:
      - the distance the boat moves upstream
      X_00:
      - the speed of the boat
      X_01:
      - the speed of the current
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the distance traveled by the motorboat
      - the distance went by motorboat
      - the traveling distance of the boat in mile
      N_03:
      - the number of minutes it takes for the motorboat to travel downstream with
        the stream
      - the minutes it takes the motorboat to go downstream
      - the number of minutes the boat takes to go downstream
      N_04:
      - the number of minutes it takes for the motorboat to travel upstream against
        the stream
      - the minutes it takes the motorboat to go upstream
      - the number of minutes the boat takes to go upstream
      N_05:
      - the distance traveled by the motorboat
      - the distance went by motorboat
      - the traveling distance of the boat in mile
      X_00:
      - the speed of the motorboat in still water
      - the speed of the motorboat
      - the speed of the boat in miles per hour
      X_01:
      - the speed of the current
      - the speed of the current
      - the speed of the current in miles per hour
  info:
    answers:
    - c: '8'
      m: '40'
    item_id: 604cc853117d71c492a63021
    numbers:
      N_00: '1'
      N_01: '16'
      N_02: '1'
      N_03: '20'
      N_04: '30'
      N_05: '16'
    split: null
    variables:
    - m
    - c
  text:
    numbers:
      shape:
      - 42
      target: __  0 __ __ __ __  1 __ __ __  2 __ __  3 __ __ __ __  4 __ __ __ __
        __ __ __ __ __ __  5 __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'a motor ##boat can go 16 miles downstream on a river in 20 minutes . it
      takes 30 minutes for this boat to go back upstream the same 16 miles . find
      the speed of the current .'
    snippets:
      shape:
      - 6
      - 7
      target:
      - 'a motor ##boat can'
      - '##boat can go 16 miles downstream on'
      - miles downstream on a river in 20
      - a river in 20 minutes . it
      - . it takes 30 minutes for this
      - upstream the same 16 miles . find
    tokens:
      shape:
      - 42
      target: '[CLS] a motor ##boat can go 16 miles downstream on a river in 20 minutes
        . it takes 30 minutes for this boat to go back upstream the same 16 miles
        . find the speed of the current . [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_03, R_00) R_02: *(N_03, R_00) R_03: +(R_01,
      R_02) R_04: =(N_04, R_03) R_05: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_03:
      - the speed of the second car
      N_04:
      - the sum of the number of kilometers each plane traveled
      X_00:
      - the number of hours each plane traveled
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_03:
      - the speed of each of the two streamers traveling in opposite directions
      - the speed of each steamer traveling in opposite directions
      - the speed of the steamer in the opposite directions
      N_04:
      - the final distance between the two streamers
      - the amount of distance between two steamers after hours
      - the distance between steamers
      X_00:
      - the number of hours of traveling
      - the number of hours each vehicle traveled
      - the hours it takes the steamer to travel
  info:
    answers:
    - h: '2.50000000000000'
    item_id: 604cc853117d71c492a62f9f
    numbers:
      N_00: '2'
      N_01: '1'
      N_02: '1'
      N_03: '22'
      N_04: '110'
    split: null
    variables:
    - h
  text:
    numbers:
      shape:
      - 42
      target: __  0 __ __ __  1 __ __  2 __ __ __ __ __ __ __ __ __ __ __ __ __ __  3
        __ __ __ __ __ __ __ __ __ __ __  4 __ __ __ __ __ __
    raw: 'two steamer ##s leave a port on a river at the same time , traveling in
      opposite directions . each is traveling 22 mph . how long will it take for them
      to be 110 mi apart ?'
    snippets:
      shape:
      - 5
      - 7
      target:
      - 'two steamer ##s leave'
      - 'steamer ##s leave a port on a'
      - a port on a river at the
      - each is traveling 22 mph . how
      - them to be 110 mi apart ?
    tokens:
      shape:
      - 42
      target: '[CLS] two steamer ##s leave a port on a river at the same time , traveling
        in opposite directions . each is traveling 22 mph . how long will it take
        for them to be 110 mi apart ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: /(N_02, 100) R_02: *(R_00, R_01) R_03: +(R_00,
      R_02) R_04: =(N_03, R_03) R_05: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the percentage of the wage in the minimum hourly wage in the first case
      N_03:
      - the minimum hourly wage for the years
      X_00:
      - the minimum hourly wage in the first case
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the percentage of increase in the minimum hourly wage from 1980 to 2005
      - increase rate of minimum hourly wage
      - the increase rate of the minimum hourly wage
      N_03:
      - the minimum hourly wage in 2005
      - the amount of increased hourly wage
      - the minimum hourly wage in 2005
      X_00:
      - the minimum hourly wage in 1980
      - the hourly wage before the increase
      - the minimum hourly wage in 1980
  info:
    answers:
    - w: '3.09998194185277'
    item_id: 60f9186c90be09b72239edcb
    numbers:
      N_00: '1980'
      N_01: '2005'
      N_02: '66.1300000000000'
      N_03: '5.15000000000000'
      N_04: '1980'
    split: null
    variables:
    - w
  text:
    numbers:
      shape:
      - 42
      target: __ __ __ __  0 __  1 __ __ __ __ __ __ __  2  2  2 __ __ __  3  3  3
        __ __ __ __ __ __ __ __ __ __ __  4 __ __ __ __ __ __ __
    raw: from the years 1980 to 2005 , the minimum hourly wage increased about 66
      . 13 % , to 5 . 15 dollars per hour . what was the minimum hourly wage in 1980
      , in dollars ?
    snippets:
      shape:
      - 5
      - 7
      target:
      - from the years 1980 to 2005 ,
      - years 1980 to 2005 , the minimum
      - wage increased about 66 . 13 %
      - '% , to 5 . 15 dollars'
      - hourly wage in 1980 , in dollars
    tokens:
      shape:
      - 42
      target: '[CLS] from the years 1980 to 2005 , the minimum hourly wage increased
        about 66 . 13 % , to 5 . 15 dollars per hour . what was the minimum hourly
        wage in 1980 , in dollars ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: *(N_00, R_00) R_03: *(N_01,
      R_01) R_04: +(R_02, R_03) R_05: =(N_04, R_04) R_06: +(R_00, R_01) R_07: =(N_02,
      R_06) R_08: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the cost of an children ticket
      N_01:
      - the cost of an adult ticket
      N_02:
      - the total number of tickets sold
      N_04:
      - the total revenue from selling tickets
      X_00:
      - the number of children tickets sold
      X_01:
      - the number of adults tickets sold
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the cost of a children ticket
      - the cost of children's tickets
      - the ticket cost for one child
      N_01:
      - the cost of an adult ticket
      - the cost of adult tickets
      - the ticket cost for one adult
      N_02:
      - the sum of the number of children tickets and adult tickets
      - the number of tickets
      - the total number of tickets
      N_04:
      - the sum of the number dollars earned from selling children tickets and the
        number of dollars earned from selling adult tickets
      - the total cost of tickets
      - the total receipts
      X_00:
      - the number of children tickets
      - the number of the children's tickets
      - the number of child tickets
      X_01:
      - the number of adult tickets
      - the number of adult tickets
      - the number of adult tickets
  info:
    answers:
    - a: '175'
      c: '50'
    item_id: 604cc853117d71c492a62e33
    numbers:
      N_00: '6'
      N_01: '9'
      N_02: '225'
      N_03: '1'
      N_04: '1875'
    split: null
    variables:
    - c
    - a
  text:
    numbers:
      shape:
      - 42
      target: __ __ __ __ __ __ __ __ __ __ __  0 __ __ __ __  1 __ __ __  2 __ __
        __ __  3 __ __ __  4 __ __ __ __ __ __ __ __ __ __ __ __
    raw: tickets to the school ' s dinner theatre cost $ 6 for children and $ 9 for
      adults . 225 tickets were sold for a total of $ 1875 . how many children attended
      ? how many adults attended ?
    snippets:
      shape:
      - 5
      - 7
      target:
      - theatre cost $ 6 for children and
      - children and $ 9 for adults .
      - for adults . 225 tickets were sold
      - were sold for a total of $
      - total of $ 1875 . how many
    tokens:
      shape:
      - 42
      target: '[CLS] tickets to the school '' s dinner theatre cost $ 6 for children
        and $ 9 for adults . 225 tickets were sold for a total of $ 1875 . how many
        children attended ? how many adults attended ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(R_00, R_01) R_03: =(N_00,
      R_02) R_04: *(N_02, R_00) R_05: *(N_03, R_01) R_06: +(R_04, R_05) R_07: =(N_04,
      R_06) R_08: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the total number of tickets sold
      N_02:
      - the price of an adult ticket
      N_03:
      - the price of a kids's ticket
      N_04:
      - the total value of sold tickets
      X_00:
      - the number of adults
      X_01:
      - the number of kids's tickets
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of people going to a zoo
      - the total number of people
      - the number of people
      N_02:
      - the cost for an adult ticket
      - the price of an adult ticket
      - the cost of adult tickets
      N_03:
      - the cost for a kid ticket
      - the price of a kid ticket
      - the cost of a kid ticket
      N_04:
      - the total sales of tickets
      - the total amount of sales
      - the total cost of tickets
      X_00:
      - the number of attended adults
      - the number of adult tickets sold
      - the number of adults
      X_01:
      - the number of attended kids
      - the number of kid tickets sold
      - the number of kids
  info:
    answers:
    - a: '51'
      k: '203'
    item_id: 604cc853117d71c492a62cc1
    numbers:
      N_00: '254'
      N_01: '1'
      N_02: '28'
      N_03: '12'
      N_04: '3864'
    split: null
    variables:
    - a
    - k
  text:
    numbers:
      shape:
      - 42
      target: __  0 __ __ __  1 __ __ __ __  2 __ __ __ __  3 __ __ __ __ __ __ __  4  4  4  4
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: '254 people go to a zoo . tickets are 28 dollars for adults and 12 dollars
      for kids . total sales are 3 , 86 ##4 dollars . how many adults went to the
      zoo ? how many kids ?'
    snippets:
      shape:
      - 5
      - 7
      target:
      - 254 people go to
      - people go to a zoo . tickets
      - . tickets are 28 dollars for adults
      - for adults and 12 dollars for kids
      - 'total sales are 3 , 86 ##4'
    tokens:
      shape:
      - 42
      target: '[CLS] 254 people go to a zoo . tickets are 28 dollars for adults and
        12 dollars for kids . total sales are 3 , 86 ##4 dollars . how many adults
        went to the zoo ? how many kids ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: *(N_03, R_00) R_03: *(N_04,
      R_01) R_04: +(R_02, R_03) R_05: =(N_00, R_04) R_06: +(R_00, R_01) R_07: =(N_02,
      R_06) R_08: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the total number of points scored
      N_02:
      - the number of points you get for a two - point shot
      N_03:
      - the number of points you get for a two - point shot
      N_04:
      - the number of points you get for a three - point shot
      N_05:
      - the number of points you get for a two - point shot
      N_06:
      - the number of points you get for a two - point shot
      X_00:
      - the number of two - point baskets
      X_01:
      - the number of three - point baskets
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the total score of two - point baskets and three - point baskets
      - the total score
      - the total point they scored
      N_02:
      - the total number of two - point baskets and three - point baskets
      - the sum of the shot
      - the total number of baskets
      N_03:
      - the score of one two - point basket
      - the value of two - point baskets
      - the point of a two - point basket
      N_04:
      - the score of one three - point basket
      - the value of three - point baskets
      - the point of a three - point basket
      N_05:
      - the score of one two - point basket
      - the value of two - point baskets
      - the point of a two - point basket
      N_06:
      - the score of one three - point basket
      - the value of three - point baskets
      - the point of a three - point basket
      X_00:
      - the number of two - point baskets
      - the number of the two - point shot
      - the number of two - point baskets
      X_01:
      - the number of three - point baskets
      - the number of the three - point shot
      - the number of three - point baskets
  info:
    answers:
    - b1: '17'
      b2: '3'
    item_id: 604cc852117d71c492a62b27
    numbers:
      N_00: '43'
      N_01: '1'
      N_02: '20'
      N_03: '2'
      N_04: '3'
      N_05: '2'
      N_06: '3'
    split: null
    variables:
    - b1
    - b2
  text:
    numbers:
      shape:
      - 42
      target: __ __ __ __  0 __ __  1 __ __  2  3  3  3 __ __  4  4  4 __ __ __ __
        __ __  5  5  5 __ __ __ __ __ __  6  6  6 __ __ __ __ __
    raw: the lakers scored 43 points on a combination of 20 two - point baskets and
      three - point baskets . how many shots of two - point baskets and how many shots
      of three - point baskets were made ?
    snippets:
      shape:
      - 7
      - 7
      target:
      - the lakers scored 43 points on a
      - 43 points on a combination of 20
      - a combination of 20 two - point
      - combination of 20 two - point baskets
      - point baskets and three - point baskets
      - many shots of two - point baskets
      - many shots of three - point baskets
    tokens:
      shape:
      - 42
      target: '[CLS] the lakers scored 43 points on a combination of 20 two - point
        baskets and three - point baskets . how many shots of two - point baskets
        and how many shots of three - point baskets were made ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_02, R_00) R_02: -(N_00, N_01) R_03: =(R_01,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of games edward had that he started out
      N_01:
      - the number of games edward sold
      N_02:
      - the number of games he sold
      X_00:
      - the number of boxes he started out
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the starting number of games
      - the initial number of old games
      - number of games edward started out with
      N_01:
      - the number of games sold
      - the number of old games sold
      - number of games edward sold
      N_02:
      - the number of games left packed in each box
      - the number of old games in each box
      - number of left games in each box
      X_00:
      - the number of boxes used
      - the number of boxes
      - the number of boxes used to pack the rest of the games
  info:
    answers:
    - b: '2'
    item_id: 60f9186c90be09b72239ede8
    numbers:
      N_00: '35'
      N_01: '19'
      N_02: '8'
    split: null
    variables:
    - b
  text:
    numbers:
      shape:
      - 42
      target: __ __ __ __ __ __ __ __ __ __ __ __  0 __ __  1 __ __ __ __ __ __ __
        __ __ __  2 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: edward was selling his old games . he started out with 35 but sold 19 of
      them . he packed the rest up , putting 8 games into each box . how many boxes
      did he have to use ?
    snippets:
      shape:
      - 3
      - 7
      target:
      - started out with 35 but sold 19
      - 35 but sold 19 of them .
      - up , putting 8 games into each
    tokens:
      shape:
      - 42
      target: '[CLS] edward was selling his old games . he started out with 35 but
        sold 19 of them . he packed the rest up , putting 8 games into each box .
        how many boxes did he have to use ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of buckets of trouts at each day
      N_01:
      - the number of buckets of salmons
      X_00:
      - the total number of buckets
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of trout buckets
      - the amount of buckets of trout eaten by the polar bear
      - the amount of trout the bear eats
      N_01:
      - the number of salmon buckets
      - the amount of buckets of salmon eaten by the polar bear
      - the amount of salmon the bear eats
      X_00:
      - the total number of buckets
      - the total amount of fish buckets eaten by the polar bear
      - the total amount of trout and salmon
  info:
    answers:
    - e: '0.600000000000000'
    item_id: 60f9186c90be09b72239f11d
    numbers:
      N_00: '0.200000000000000'
      N_01: '0.400000000000000'
    split: null
    variables:
    - e
  text:
    numbers:
      shape:
      - 47
      target: __ __ __ __ __ __ __ __ __ __ __ __ __  0  0  0 __ __ __ __ __  1  1  1
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'each day , the polar bear at richmond '' s zoo eats 0 . 2 bucket ##s of
      trout and 0 . 4 bucket ##s of salmon . how many bucket ##s of fish does the
      polar bear eat daily ?'
    snippets:
      shape:
      - 2
      - 7
      target:
      - s zoo eats 0 . 2 bucket
      - of trout and 0 . 4 bucket
    tokens:
      shape:
      - 47
      target: '[CLS] each day , the polar bear at richmond '' s zoo eats 0 . 2 bucket
        ##s of trout and 0 . 4 bucket ##s of salmon . how many bucket ##s of fish
        does the polar bear eat daily ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: *(N_00, R_00) R_03: *(N_01,
      R_01) R_04: +(R_02, R_03) R_05: =(N_03, R_04) R_06: +(R_00, R_01) R_07: =(N_02,
      R_06) R_08: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the price of student tickets
      N_01:
      - the price of student tickets
      N_02:
      - the total number of tickets sold
      N_03:
      - the total number of dollars collected from selling tickets
      X_00:
      - the number of students
      X_01:
      - the price of a general admission ticket
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the cost of student tickets
      - the ticket cost for one student
      - the cost of a student ticket
      N_01:
      - the cost of general admission tickets
      - the ticket cost for one general admission
      - the cost of a general admission ticket
      N_02:
      - the total tickets sold
      - the total amount of tickets sold
      - the total number of tickets sold
      N_03:
      - the total revenue collected
      - the total cost of tickets sold
      - the total cost of tickets sold
      X_00:
      - the number of student tickets
      - the number of student tickets sold
      - the number of student tickets sold
      X_01:
      - the number of general admission tickets
      - the number of general admission tickets sold
      - the number of general admission tickets sold
  info:
    answers:
    - g: '388'
      s: '137'
    item_id: 604cc852117d71c492a62b2a
    numbers:
      N_00: '4'
      N_01: '6'
      N_02: '525'
      N_03: '2876'
    split: null
    variables:
    - s
    - g
  text:
    numbers:
      shape:
      - 47
      target: __ __ __ __  0 __ __ __ __ __ __ __  1 __ __ __ __  2 __ __ __  3  3
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'student tickets cost 4 dollars , and general admission tickets cost 6 dollars
      . you sell 525 tickets and collect 287 ##6 dollars . how many student tickets
      did you sell ? how many general admission tickets did you sell ?'
    snippets:
      shape:
      - 4
      - 7
      target:
      - student tickets cost 4 dollars , and
      - admission tickets cost 6 dollars . you
      - . you sell 525 tickets and collect
      - 'tickets and collect 287 ##6 dollars .'
    tokens:
      shape:
      - 47
      target: '[CLS] student tickets cost 4 dollars , and general admission tickets
        cost 6 dollars . you sell 525 tickets and collect 287 ##6 dollars . how many
        student tickets did you sell ? how many general admission tickets did you
        sell ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: *(N_01, R_00) R_03: *(N_02,
      R_01) R_04: +(R_02, R_03) R_05: =(N_04, R_04) R_06: +(R_00, R_01) R_07: =(N_05,
      R_06) R_08: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the cost of an adult ticket
      N_02:
      - the cost of a children's ticket
      N_04:
      - the total cost of tickets
      N_05:
      - the total number of tickets sold
      X_00:
      - the number of adult tickets
      X_01:
      - the number of children's tickets
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the price of an adult ticket
      - the price of an adult ticket
      - the price of an adult ticket
      N_02:
      - the price of a children's ticket
      - the price of a children ticket
      - the price of a children's ticket
      N_04:
      - the total value of sold tickets
      - the sum of the number of dollars earned from selling adult tickets and children
        tickets
      - the total cost of tickets sold
      N_05:
      - the total number of tickets sold
      - the sum of the number of adult tickets and children tickets
      - the total number of tickets sold
      X_00:
      - the number of adult tickets
      - the number of adult tickets
      - the number of adult tickets sold
      X_01:
      - the number of children's tickets
      - the number of children tickets
      - the number of children's tickets sold
  info:
    answers:
    - a: '22'
      c: '12'
    item_id: 604cc853117d71c492a62d1c
    numbers:
      N_00: '1'
      N_01: '8'
      N_02: '5'
      N_03: '1'
      N_04: '236'
      N_05: '34'
    split: null
    variables:
    - a
    - c
  text:
    numbers:
      shape:
      - 47
      target: __  0 __ __ __ __ __ __  1 __ __ __ __ __ __ __  2 __ __  3 __ __ __  4
        __ __ __ __ __ __  5 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: a theater sells adult tickets for $ 8 and children ' s tickets for $ 5 .
      if a total of $ 236 was taken in on sales of 34 total tickets , then how many
      adult tickets were sold ?
    snippets:
      shape:
      - 6
      - 7
      target:
      - a theater sells adult
      - tickets for $ 8 and children '
      - tickets for $ 5 . if a
      - 5 . if a total of $
      - total of $ 236 was taken in
      - on sales of 34 total tickets ,
    tokens:
      shape:
      - 47
      target: '[CLS] a theater sells adult tickets for $ 8 and children '' s tickets
        for $ 5 . if a total of $ 236 was taken in on sales of 34 total tickets ,
        then how many adult tickets were sold ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_01) R_02: -(R_01, R_00) R_03: =(N_02,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of cupcakes amy baked
      N_02:
      - the number of cupcakes amy had
      X_00:
      - the number of pastcakes
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of cupcakes for the sale
      - the number of cupcakes
      - the number of cupcakes amy made
      N_01:
      - the number of cookies for the sale
      - the number of cookies
      - the number of cookies amy made
      N_02:
      - the number of pastries left after the sale
      - the number of pastries left
      - the number of pastries left
      X_00:
      - the number of pastries sold
      - the number of total pastries minus " 12 "
      - the number of pastries amy sold
  info:
    answers:
    - s: '51'
    item_id: 60f9186c90be09b72239f010
    numbers:
      N_00: '15'
      N_01: '48'
      N_02: '12'
    split: null
    variables:
    - s
  text:
    numbers:
      shape:
      - 47
      target: __ __ __ __ __ __ __ __ __ __ __ __ __ __ __  0 __ __ __ __  1 __ __
        __ __ __ __ __ __  2 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'for the school ba ##ke sale , amy made past ##ries . she baked 15 cup ##cake
      ##s and 48 cookies . after the sale , she had 12 to take back home . how many
      past ##ries did she sell ?'
    snippets:
      shape:
      - 3
      - 7
      target:
      - '. she baked 15 cup ##cake ##s'
      - '##cake ##s and 48 cookies . after'
      - ', she had 12 to take back'
    tokens:
      shape:
      - 47
      target: '[CLS] for the school ba ##ke sale , amy made past ##ries . she baked
        15 cup ##cake ##s and 48 cookies . after the sale , she had 12 to take back
        home . how many past ##ries did she sell ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_01) R_02: -(R_01, R_00) R_03: =(N_02,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of cupcakes paige baked
      N_01:
      - the number of cookies paige had
      N_02:
      - the number of cupcakes paige baked
      X_00:
      - the number of pastcakes
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of cupcakes for the sale
      - the number of cupcakes baked by paige
      - the number of cupcakes paige made
      N_01:
      - the number of cookies for the sale
      - the number of cookies baked by paige
      - the number of cookies paige made
      N_02:
      - the number of pastries left after the sale
      - the value of the number of pastries baked by paige minus the number of pastries
        sold
      - the number of pastries left
      X_00:
      - the number of pastries sold
      - the number of pastries sold
      - the number of pastries paige sold
  info:
    answers:
    - s: '41'
    item_id: 60f9186c90be09b72239e99b
    numbers:
      N_00: '36'
      N_01: '9'
      N_02: '4'
    split: null
    variables:
    - s
  text:
    numbers:
      shape:
      - 47
      target: __ __ __ __ __ __ __ __ __ __ __ __ __ __ __  0 __ __ __ __  1 __ __
        __ __ __ __ __ __  2 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'for the school ba ##ke sale , paige made past ##ries . she baked 36 cup
      ##cake ##s and 9 cookies . after the sale , she had 4 to take back home . how
      many past ##ries did she sell ?'
    snippets:
      shape:
      - 3
      - 7
      target:
      - '. she baked 36 cup ##cake ##s'
      - '##cake ##s and 9 cookies . after'
      - ', she had 4 to take back'
    tokens:
      shape:
      - 47
      target: '[CLS] for the school ba ##ke sale , paige made past ##ries . she baked
        36 cup ##cake ##s and 9 cookies . after the sale , she had 4 to take back
        home . how many past ##ries did she sell ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(R_00, R_01) R_03: *(N_03,
      R_02) R_04: =(N_01, R_03) R_05: -(R_00, R_01) R_06: *(N_04, R_05) R_07: =(N_01,
      R_06) R_08: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the distance that a plane flies with a tailwind
      N_03:
      - the number of hours of flying with the wind
      N_04:
      - the number of hours of returning against the wind
      N_05:
      - the distance that a plane flies against the wind
      X_00:
      - the speed of the plane in still air
      X_01:
      - the speed of the wind
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of miles traveled by plane in each situation
      - the distance the plane flies
      - the distance of a one - way fly
      N_03:
      - the number of hours it takes for the plane to travel with a tailwind
      - the hours for the plane to fly 900 miles with the tailwind
      - the number of flying hours with the wind
      N_04:
      - the number of hours it takes for the plane to travel against the wind
      - the hours for the plane to fly 900 miles against the wind
      - the number of flying hours against the wind
      N_05:
      - the number of miles traveled by plane in each situation
      - the distance the plane flies
      - the distance of a one - way fly
      X_00:
      - the speed of the plane
      - the speed of the plane in still air
      - the speed of the plane in still air
      X_01:
      - the speed of the wind
      - the speed of the wind
      - the speed of the wind
  info:
    answers:
    - p: '262.500000000000'
      w: '37.5000000000000'
    item_id: 604cc853117d71c492a62f16
    numbers:
      N_00: '1'
      N_01: '900'
      N_02: '1'
      N_03: '3'
      N_04: '4'
      N_05: '900'
    split: null
    variables:
    - p
    - w
  text:
    numbers:
      shape:
      - 47
      target: __  0 __ __  1 __ __  2 __ __ __  3 __ __ __ __ __ __ __  4 __ __ __
        __  5 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'a plane flies 900 miles with a tail ##wind in 3 hours . it takes the same
      plane 4 hours to fly the 900 miles when flying against the wind . what is the
      plane '' s speed in still air ?'
    snippets:
      shape:
      - 6
      - 7
      target:
      - a plane flies 900
      - a plane flies 900 miles with a
      - '900 miles with a tail ##wind in'
      - 'tail ##wind in 3 hours . it'
      - the same plane 4 hours to fly
      - to fly the 900 miles when flying
    tokens:
      shape:
      - 47
      target: '[CLS] a plane flies 900 miles with a tail ##wind in 3 hours . it takes
        the same plane 4 hours to fly the 900 miles when flying against the wind .
        what is the plane '' s speed in still air ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: -(N_01, N_03) R_02: +(N_04, R_01) R_03: =(R_00,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of lives in the next level
      N_03:
      - the number of lives lost in the final part
      N_04:
      - the number of lives lost in the next level
      X_00:
      - the total number of lives
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the initial number of lives
      - the number of lives
      - the number of lives
      N_03:
      - the number of lives lost
      - the number of lives lost
      - the number of lost lives
      N_04:
      - the number of lives gotten
      - the number of lives earned in the next level
      - the number of new lives
      X_00:
      - the number of lives now
      - the total number of lives in the next level
      - the total number of lives
  info:
    answers:
    - n: '41'
    item_id: 60f9186c90be09b72239ed7f
    numbers:
      N_00: '1'
      N_01: '10'
      N_02: '1'
      N_03: '6'
      N_04: '37'
    split: null
    variables:
    - n
  text:
    numbers:
      shape:
      - 47
      target: __ __ __ __  0 __ __ __ __  1 __ __ __  2 __ __ __ __ __ __ __ __  3
        __ __ __ __ __  4 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: wendy was playing a video game and had 10 lives . in a hard part of the game
      , she lost 6 lives . if she got 37 more lives in the next level , how many lives
      would she have ?
    snippets:
      shape:
      - 5
      - 7
      target:
      - wendy was playing a video game and
      - game and had 10 lives . in
      - lives . in a hard part of
      - ', she lost 6 lives . if'
      - if she got 37 more lives in
    tokens:
      shape:
      - 47
      target: '[CLS] wendy was playing a video game and had 10 lives . in a hard part
        of the game , she lost 6 lives . if she got 37 more lives in the next level
        , how many lives would she have ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_01) R_02: -(R_01, N_02) R_03: =(R_00,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of pieces of candy that janet had
      N_01:
      - the number of pieces of candy that her sister had
      N_02:
      - the number of pieces of candy that janet ate
      X_00:
      - the number of pieces of candy eaten by janet now
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of janet's candies
      - the number of pieces of janet's candy
      - the number of pieces of candy janet had
      N_01:
      - the number of her sister's candies
      - the number of pieces of candy held by janet's sister
      - the number of pieces of candy janet's sister had
      N_02:
      - the number of eaten candies
      - the number of pieces of candy eaten by janet and janet's sister the first
        night
      - the number of pieces eaten
      X_00:
      - the number of left candies
      - the number of pieces of candy left held by janet and janet's sister
      - the total number of pieces janet and janet's sister have now
  info:
    answers:
    - n: '63'
    item_id: 60f9186c90be09b72239ebcd
    numbers:
      N_00: '34'
      N_01: '33'
      N_02: '4'
      N_03: '1'
    split: null
    variables:
    - n
  text:
    numbers:
      shape:
      - 47
      target: __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __  0 __ __ __ __ __ __
        __ __  1 __ __ __ __  2 __ __  3 __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: for halloween , janet and her sister combined the candy they received . janet
      had 34 pieces of candy , while her sister had 33 . if they ate 4 pieces the
      first night , how many pieces do they have left ?
    snippets:
      shape:
      - 4
      - 7
      target:
      - . janet had 34 pieces of candy
      - her sister had 33 . if they
      - if they ate 4 pieces the first
      - 4 pieces the first night , how
    tokens:
      shape:
      - 47
      target: '[CLS] for halloween , janet and her sister combined the candy they
        received . janet had 34 pieces of candy , while her sister had 33 . if they
        ate 4 pieces the first night , how many pieces do they have left ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: /(R_00, 100) R_02: *(N_01, R_01) R_03: -(N_02,
      N_01) R_04: =(R_02, R_03) R_05: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of voters in the one year
      N_02:
      - the number of voters in the next year
      X_00:
      - the percentage of voters who were million in one year
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of voters in one year
      - the number of voters in one year
      - number of voters
      N_02:
      - the number of voters in the next year
      - the number of voters in the next year
      - number of voters the next year
      X_00:
      - the percentage of change in the number of voters
      - the percentage change in the number of voter
      - the percentage change in the number of voters
  info:
    answers:
    - p: '69.3611473272490'
    item_id: 60f9186c90be09b72239ebcf
    numbers:
      N_00: '1'
      N_01: '76700000'
      N_02: '129900000'
    split: null
    variables:
    - p
  text:
    numbers:
      shape:
      - 47
      target: __ __  0 __ __ __ __ __ __ __ __ __ __  1  1  1  1 __ __ __ __ __ __
        __ __ __ __ __  2  2  2  2 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: in one year , for the election for president , there were 76 . 7 million
      voters , whereas , in the next year , there were 129 . 9 million voters . find
      the percentage change in the number of voters ?
    snippets:
      shape:
      - 3
      - 7
      target:
      - in one year , for
      - ', there were 76 . 7 million'
      - ', there were 129 . 9 million'
    tokens:
      shape:
      - 47
      target: '[CLS] in one year , for the election for president , there were 76
        . 7 million voters , whereas , in the next year , there were 129 . 9 million
        voters . find the percentage change in the number of voters ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, R_00) R_02: =(N_01, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of bales in the barn
      N_01:
      - the number of bales in the barn
      X_00:
      - the number of bales in the barn
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the initial number of bales of hay
      - number of bales of hay that were in the barn
      - the original number of bales of hay
      N_01:
      - the current total number of bales of hay
      - number of bales of hay now
      - the number of bales of hay in the barn now
      X_00:
      - the additional number of bales of hay
      - the number of bales jason stacked
      - the additional number of bales jason stacked in the barn
  info:
    answers:
    - s: '23'
    item_id: 60f9186c90be09b72239f210
    numbers:
      N_00: '73'
      N_01: '96'
    split: null
    variables:
    - s
  text:
    numbers:
      shape:
      - 47
      target: __ __ __  0 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __  1 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'there were 73 bal ##es of hay in the barn . jason stacked bal ##es in the
      barn today . there are now 96 bal ##es of hay in the barn . how many bal ##es
      did he store in the barn ?'
    snippets:
      shape:
      - 2
      - 7
      target:
      - 'there were 73 bal ##es of'
      - 'there are now 96 bal ##es of'
    tokens:
      shape:
      - 47
      target: '[CLS] there were 73 bal ##es of hay in the barn . jason stacked bal
        ##es in the barn today . there are now 96 bal ##es of hay in the barn . how
        many bal ##es did he store in the barn ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, R_00) R_02: =(N_01, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of bales in the barn
      N_01:
      - the number of bales in the barn
      X_00:
      - the number of bales added
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the initial number of bales of hay
      - the original number of bales of hay
      - the bales of hay in the barn
      N_01:
      - the current total number of bales of hay
      - the number of bales of hay in the barn now
      - the total bales of hay there are now in the barn
      X_00:
      - the additional number of bales of hay
      - the additional number of bales tim stacked in the barn
      - the bales of hay he stored in the barn
  info:
    answers:
    - s: '26'
    item_id: 60f9186c90be09b72239eafd
    numbers:
      N_00: '28'
      N_01: '54'
    split: null
    variables:
    - s
  text:
    numbers:
      shape:
      - 47
      target: __ __ __  0 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __  1 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'there were 28 bal ##es of hay in the barn . tim stacked more bal ##es in
      the barn today . there are now 54 bal ##es of hay in the barn . how many bal
      ##es did he store in the barn ?'
    snippets:
      shape:
      - 2
      - 7
      target:
      - 'there were 28 bal ##es of'
      - 'there are now 54 bal ##es of'
    tokens:
      shape:
      - 47
      target: '[CLS] there were 28 bal ##es of hay in the barn . tim stacked more
        bal ##es in the barn today . there are now 54 bal ##es of hay in the barn
        . how many bal ##es did he store in the barn ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: *(N_01, R_00) R_03: *(N_02,
      R_01) R_04: +(R_02, R_03) R_05: *(N_03, N_04) R_06: =(R_04, R_05) R_07: +(R_00,
      R_01) R_08: =(N_03, R_07) R_09: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the cost of peanut nuts per kilo
      N_02:
      - the price of a kilo of cashew nuts
      N_03:
      - the number of kilos of the cashew nuts
      N_04:
      - the cost of cashew nuts per kilo and peanuts
      X_00:
      - the number of kilos of cashew nuts
      X_01:
      - the number of kilos of peanut nuts
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the price of a kilo of cashew nuts
      - the cost per kilo of cashew nuts
      - the cost of cashew nuts per kilo
      N_02:
      - the price of a kilo of peanuts
      - the cost per kilo of peanuts
      - the cost of peanut nuts per kilo
      N_03:
      - the amount of the mixture of nuts
      - the sum of the number of kilos of the mixture of cashew nuts and peanuts
      - the number of the kilo of mixed nuts
      N_04:
      - the price of a kilo of the mixture
      - the cost per kilo of the mixture of cashew nuts and peanuts
      - the cost of mixed nuts per kilo
      X_00:
      - the amount of cashew nuts
      - the number of kilos for cashew nuts
      - the number of the kilo of the cashew nuts
      X_01:
      - the amount of peanuts
      - the number of kilos for peanuts
      - the number of the kilo of the peanut
  info:
    answers:
    - c: '3'
      p: '2'
    item_id: 604cc853117d71c492a6303a
    numbers:
      N_00: '1'
      N_01: '210'
      N_02: '130'
      N_03: '5'
      N_04: '178'
    split: null
    variables:
    - c
    - p
  text:
    numbers:
      shape:
      - 47
      target: __  0 __ __ __ __ __ __ __  1 __ __ __ __ __ __ __  2 __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __  3 __ __ __ __  4 __ __ __ __ __ __
    raw: 'a man bought cash ##ew nuts worth p 210 / ki ##lo and peanut at p 130 /
      ki ##lo . how many ki ##los of cash ##ew nuts and peanuts wherein it becomes
      5 ki ##los worth p 178 per ki ##lo ?'
    snippets:
      shape:
      - 5
      - 7
      target:
      - a man bought cash
      - 'nuts worth p 210 / ki ##lo'
      - 'peanut at p 130 / ki ##lo'
      - 'wherein it becomes 5 ki ##los worth'
      - '##los worth p 178 per ki ##lo'
    tokens:
      shape:
      - 47
      target: '[CLS] a man bought cash ##ew nuts worth p 210 / ki ##lo and peanut
        at p 130 / ki ##lo . how many ki ##los of cash ##ew nuts and peanuts wherein
        it becomes 5 ki ##los worth p 178 per ki ##lo ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_01, N_02) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the total number of drums of grapes
      N_02:
      - the number of days for harvesting
      X_00:
      - the number of drums of grapes filled in 9 days
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of drums filling grapes per day
      - the number of drums of grapes the pickers fill per day
      - the number of drums they fill per day
      N_02:
      - the number of days for filling drums
      - the number of days
      - the number of days
      X_00:
      - the number of all drums
      - the total number of drums of grapes filled
      - the total number of filled drums
  info:
    answers:
    - d: '2916'
    item_id: 60f9186c90be09b72239ebfb
    numbers:
      N_00: '1'
      N_01: '324'
      N_02: '9'
    split: null
    variables:
    - d
  text:
    numbers:
      shape:
      - 47
      target: __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __  0 __ __ __ __
        __ __ __  1 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __  2 __ __ __ __
    raw: 'lewis saved checking on the grape ##vine ##s for his last stop . he was
      told by one of the pick ##ers that they fill 324 drums of grapes per day . how
      many drums of grapes would be filled in 9 days ?'
    snippets:
      shape:
      - 3
      - 7
      target:
      - was told by one of the pick
      - that they fill 324 drums of grapes
      - be filled in 9 days ?
    tokens:
      shape:
      - 47
      target: '[CLS] lewis saved checking on the grape ##vine ##s for his last stop
        . he was told by one of the pick ##ers that they fill 324 drums of grapes
        per day . how many drums of grapes would be filled in 9 days ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the distance of the desk
      N_01:
      - the ratio of the length of the desk to the distance from the desk
      X_00:
      - the distance of the fountain to the fountain
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the distance between her desk and the water fountain
      - the distance having to walk at once
      - the number of feet of the water fountain
      N_01:
      - the number of trips made to the water fountain
      - the number of times to walk
      - the number of times to go water fountain today
      X_00:
      - the total distance traveled
      - the total distance having to walk
      - the total distance
  info:
    answers:
    - d: '120'
    item_id: 60f9186c90be09b72239eb62
    numbers:
      N_00: '30'
      N_01: '4'
    split: null
    variables:
    - d
  text:
    numbers:
      shape:
      - 47
      target: __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __  0 __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __  1 __ __ __ __ __
    raw: mrs . hilt measured the distance from her desk to the water fountain . it
      was 30 feet . how many feet will mrs . hilt walk on her trips to the fountain
      if she goes to the water fountain 4 times today ?
    snippets:
      shape:
      - 2
      - 7
      target:
      - . it was 30 feet . how
      - the water fountain 4 times today ?
    tokens:
      shape:
      - 47
      target: '[CLS] mrs . hilt measured the distance from her desk to the water fountain
        . it was 30 feet . how many feet will mrs . hilt walk on her trips to the
        fountain if she goes to the water fountain 4 times today ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: *(N_01, R_00) R_03: =(R_01,
      R_02) R_04: /(N_02, 100) R_05: *(R_01, R_04) R_06: /(N_03, 100) R_07: *(R_00,
      R_06) R_08: +(R_05, R_07) R_09: =(N_05, R_08) R_10: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - a number in the phrase " woman invests 4 times as much from 5 % as she did
        at 6 % "
      N_02:
      - an interest rate
      N_03:
      - another interest rate
      N_05:
      - the total interest collected in both accounts
      X_00:
      - the principal at the 5 % interest rate
      X_01:
      - the principal at the 6 % interest rate
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the ratio of the amount of the investment in 5 % interest to the amount of
        the investment in 6 % interest
      - the ratio of the amount of investment in the first case to the investment
        in the second case
      - the ratio of the amount of 5 % investment to that of 6 % investment
      N_02:
      - the interest ratio of one part
      - the annual interest rate in the first case
      - the interest rate of 5 % investment
      N_03:
      - the interest ratio of another part
      - the annual interest rate in the second case
      - the interest rate of 6 % investment
      N_05:
      - the total interest
      - the total amount of interest
      - the total amount of interest from the two investments
      X_00:
      - the amount of investment for 6 % interest
      - the amount of investment in the second case
      - the amount of 6 % investment
      X_01:
      - the amount of investment for 5 % interest
      - the amount of investment in the first case
      - the amount of 5 % investment
  info:
    answers:
    - i1: '8000'
      i2: '2000'
    item_id: 604cc853117d71c492a62d49
    numbers:
      N_00: '1'
      N_01: '4'
      N_02: '5'
      N_03: '6'
      N_04: '1'
      N_05: '520'
    split: null
    variables:
    - i2
    - i1
  text:
    numbers:
      shape:
      - 47
      target: __  0 __ __ __  1 __ __ __ __  2 __ __ __ __ __  3 __ __ __ __ __ __
        __ __ __ __ __  4 __ __ __ __ __ __  5 __ __ __ __ __ __ __ __ __ __ __
    raw: 'a woman invest ##s 4 times as much at 5 % as she did at 6 % . the total
      amount of interest she earn ##s in 1 year from both accounts is $ 520 . how
      much did she invest at each rate ?'
    snippets:
      shape:
      - 6
      - 7
      target:
      - 'a woman invest ##s'
      - 'woman invest ##s 4 times as much'
      - as much at 5 % as she
      - she did at 6 % . the
      - 'earn ##s in 1 year from both'
      - accounts is $ 520 . how much
    tokens:
      shape:
      - 47
      target: '[CLS] a woman invest ##s 4 times as much at 5 % as she did at 6 % .
        the total amount of interest she earn ##s in 1 year from both accounts is
        $ 520 . how much did she invest at each rate ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_01) R_02: -(R_01, N_02) R_03: =(R_00,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of pieces of debby's candy
      N_01:
      - the number of pieces of candy that her sister had
      N_02:
      - the number of pieces of candy eaten by debby
      X_00:
      - the number of pieces of candy eaten by they combined
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of candy owned by debby
      - the number of debby's candies
      - the number of pieces of debby's candy
      N_01:
      - the number of candy owned by her sister
      - the number of her sister's candies
      - the number of pieces of candy held by debby's sister
      N_02:
      - the number of candy eaten
      - the number of eaten candies
      - the number of pieces of candy eaten by debby and debby's sister the first
        night
      X_00:
      - the total number of candy left
      - the number of left candies
      - the number of pieces of candy left to debby and debby's sister
  info:
    answers:
    - n: '39'
    item_id: 60f9186c90be09b72239ef25
    numbers:
      N_00: '32'
      N_01: '42'
      N_02: '35'
      N_03: '1'
    split: null
    variables:
    - n
  text:
    numbers:
      shape:
      - 47
      target: __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __  0 __ __ __ __
        __ __ __ __  1 __ __ __ __  2 __ __  3 __ __ __ __ __ __ __ __ __ __ __
    raw: 'for halloween , de ##bby and her sister combined the candy they received
      . de ##bby had 32 pieces of candy , while her sister had 42 . if they ate 35
      pieces the first night , how many pieces do they have left ?'
    snippets:
      shape:
      - 4
      - 7
      target:
      - 'de ##bby had 32 pieces of candy'
      - her sister had 42 . if they
      - if they ate 35 pieces the first
      - 35 pieces the first night , how
    tokens:
      shape:
      - 47
      target: '[CLS] for halloween , de ##bby and her sister combined the candy they
        received . de ##bby had 32 pieces of candy , while her sister had 42 . if
        they ate 35 pieces the first night , how many pieces do they have left ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 16
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_02, R_00) R_02: -(N_00, N_01) R_03: =(R_01,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of students trying out for the school's trivia teams
      N_01:
      - the number of students who didn't get picked out
      N_02:
      - the number of groups
      X_00:
      - the number of students in each group
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of students tried for trivia teams
      - the number of students trying out for the team
      - the total number of students trying out
      N_01:
      - the number of students not picked
      - the number of students who didn't get picked
      - the number of students not picked for the team
      N_02:
      - the number of picked students put in each group
      - the number of groups students were put into
      - the number groups
      X_00:
      - the number of groups
      - the number of students in each group
      - the number of students in one group
  info:
    answers:
    - g: '4'
    item_id: 60f9186c90be09b72239eb84
    numbers:
      N_00: '17'
      N_01: '5'
      N_02: '3'
    split: null
    variables:
    - g
  text:
    numbers:
      shape:
      - 54
      target: __ __ __  0 __ __ __ __ __ __ __ __ __ __ __ __ __  1 __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __  2 __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __
    raw: 'there are 17 students trying out for the school '' s tri ##via teams . if
      5 of them didn '' t get picked for the team and the rest were put into 3 groups
      , how many students would be in each group ?'
    snippets:
      shape:
      - 3
      - 7
      target:
      - there are 17 students trying out
      - teams . if 5 of them didn
      - were put into 3 groups , how
    tokens:
      shape:
      - 54
      target: '[CLS] there are 17 students trying out for the school '' s tri ##via
        teams . if 5 of them didn '' t get picked for the team and the rest were put
        into 3 groups , how many students would be in each group ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 16
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: *(N_01, R_00) R_03: *(N_02,
      R_01) R_04: +(R_02, R_03) R_05: =(N_05, R_04) R_06: +(R_00, R_01) R_07: =(N_03,
      R_06) R_08: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the price of an adult ticket
      N_02:
      - the price of a children's ticket
      N_03:
      - the total number of tickets sold
      N_05:
      - the total value of sold tickets
      X_00:
      - the number of adults attended
      X_01:
      - the number of children's tickets sold
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the price of an adult ticket
      - the cost for adults
      - the ticket cost for one adult
      N_02:
      - the price of a children ticket
      - the cost for children
      - the ticket cost for one child
      N_03:
      - the sum of the number of adult tickets and the number of children tickets
      - the number of total sold tickets
      - the total number of tickets
      N_05:
      - the sum of the number of dollars earned from selling adult tickets and the
        number of dollars earned from selling children tickets
      - the total profit of dollars
      - the total cost of tickets
      X_00:
      - the number of adults tickets sold
      - the number of adult tickets
      - the number of adult tickets
      X_01:
      - the number of children tickets sold
      - the number of children's tickets
      - the number of child tickets
  info:
    answers:
    - a: '200'
      c: '200'
    item_id: 604cc852117d71c492a62b98
    numbers:
      N_00: '1'
      N_01: '6.00000000000000'
      N_02: '4.50000000000000'
      N_03: '400'
      N_04: '1'
      N_05: '2100'
    split: null
    variables:
    - a
    - c
  text:
    numbers:
      shape:
      - 54
      target: __ __ __  0 __ __  1  1  1 __ __ __ __  2  2  2 __ __ __ __  3 __ __
        __ __  4 __ __  5  5 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __
    raw: 'tickets for a show cost 6 . 00 dollars for adults and 4 . 50 dollars for
      children . 400 tickets were sold for a total of 210 ##0 dollars . how many adult
      tickets and how many children '' s tickets were sold ?'
    snippets:
      shape:
      - 6
      - 7
      target:
      - tickets for a show cost 6
      - a show cost 6 . 00 dollars
      - for adults and 4 . 50 dollars
      - for children . 400 tickets were sold
      - were sold for a total of 210
      - 'a total of 210 ##0 dollars .'
    tokens:
      shape:
      - 54
      target: '[CLS] tickets for a show cost 6 . 00 dollars for adults and 4 . 50
        dollars for children . 400 tickets were sold for a total of 210 ##0 dollars
        . how many adult tickets and how many children '' s tickets were sold ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 16
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_02, R_00) R_02: +(N_00, N_01) R_03: =(R_01,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - number of pictures uploaded
      N_01:
      - the number of albums containing the camera uploaded
      N_02:
      - number of albums uploaded
      X_00:
      - the number of pictures in each of the other albums
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of pictures from the phone
      - the number of pictures from the phone
      - the number of pictures wendy uploaded from her phone to facebook
      N_01:
      - the number of pictures from the camera
      - the number of pictures from facebook
      - the number of pictures wendy uploaded from her camera to facebook
      N_02:
      - the number of albums
      - the number of albums sorted all pictures with the same amount
      - the number of albums with the same amount of pics
      X_00:
      - the number of pictures in each album
      - the number of pictures in each album
      - the number of pictures in each of the album
  info:
    answers:
    - e: '6'
    item_id: 60f9186c90be09b72239ea3a
    numbers:
      N_00: '22'
      N_01: '2'
      N_02: '4'
    split: null
    variables:
    - e
  text:
    numbers:
      shape:
      - 54
      target: __ __ __  0 __ __ __ __ __  1 __ __ __ __ __ __ __ __ __ __ __ __ __  2
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __
    raw: 'wendy uploaded 22 pictures from her phone and 2 from her camera to facebook
      . if she sorted the pic ##s into 4 different albums with the same amount of
      pic ##s in each album , how many pictures were in each of the albums ?'
    snippets:
      shape:
      - 3
      - 7
      target:
      - wendy uploaded 22 pictures from her
      - her phone and 2 from her camera
      - 'pic ##s into 4 different albums with'
    tokens:
      shape:
      - 54
      target: '[CLS] wendy uploaded 22 pictures from her phone and 2 from her camera
        to facebook . if she sorted the pic ##s into 4 different albums with the same
        amount of pic ##s in each album , how many pictures were in each of the albums
        ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 16
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: __NEW_VAR(, ) R_03: *(10,
      R_00) R_04: +(R_01, R_03) R_05: =(R_02, R_04) R_06: +(R_00, R_01) R_07: =(N_02,
      R_06) R_08: *(10, R_01) R_09: +(R_00, R_08) R_10: -(R_02, R_09) R_11: =(N_03,
      R_10) R_12: -(R_00, R_01) R_13: =(N_05, R_12) R_14: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the sum of the digits of the original number
      N_03:
      - the value of the reversed number minus the original number
      N_05:
      - the value of the original number minus the reversed number
      X_00:
      - the value of tens digit in the original number
      X_01:
      - the value of units digit in the original number
      X_02:
      - the value of the original number
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the sum of the digits of a 2 - digit number
      - the sum of the tens and units digits
      - the sum of the digits of the original number
      N_03:
      - the value of the original number minus the reversed number
      - the value of the original number minus 10 times the units digit plus the tens
        digit
      - the value of the original number minus the original number with its digits
        reversed
      N_05:
      - the value of the tens digit minus the units digit
      - the value of the tens digit minus the units digit
      - the value of the tens digit minus the units digit
      X_00:
      - the tens digit
      - the tens digit
      - the tens digit of the original number
      X_01:
      - the units digit
      - the units digit
      - the units digit of the original number
      X_02:
      - the original number
      - the original number
      - the value of the original number
  info:
    answers:
    - o: '76'
      t: '7'
      u: '6'
    item_id: 604cc853117d71c492a6307a
    numbers:
      N_00: '1'
      N_01: '2'
      N_02: '13'
      N_03: '9'
      N_04: '2'
      N_05: '1'
    split: null
    variables:
    - t
    - u
    - o
  text:
    numbers:
      shape:
      - 54
      target: __ __ __ __ __ __ __  0 __  1 __ __ __ __  2 __ __ __ __ __ __ __ __
        __ __ __  3 __ __ __ __ __ __ __ __ __ __  4 __ __  5 __ __ __ __ __ __ __
        __ __ __ __ __ __
    raw: the sum of the digits of a certain 2 - digit number is 13 . when you reverse
      the number , the new number is 9 less than the original number . the difference
      between the 2 digits is 1 . find the original number .
    snippets:
      shape:
      - 6
      - 7
      target:
      - the digits of a certain 2 -
      - of a certain 2 - digit number
      - digit number is 13 . when you
      - new number is 9 less than the
      - difference between the 2 digits is 1
      - 2 digits is 1 . find the
    tokens:
      shape:
      - 54
      target: '[CLS] the sum of the digits of a certain 2 - digit number is 13 . when
        you reverse the number , the new number is 9 less than the original number
        . the difference between the 2 digits is 1 . find the original number . [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 16
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_02, R_00) R_02: +(N_00, N_01) R_03: =(R_01,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - number of pictures uploaded
      N_01:
      - the number of pictures in the second step
      N_02:
      - number of albums uploaded
      X_00:
      - the number of pictures in each of the other albums
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of pictures from the phone
      - the number of pictures from the phone
      - the number of pictures olivia uploaded from her phone to facebook
      N_01:
      - the number of pictures from the camera
      - the number of pictures from facebook
      - the number of pictures olivia uploaded from her camera to facebook
      N_02:
      - the number of albums
      - the number of albums sorted all pictures with the same amount
      - the number of albums with the same amount of pics
      X_00:
      - the number of pictures in each album
      - the number of pictures in each album
      - the number of pictures in each of the albums
  info:
    answers:
    - e: '5'
    item_id: 60f9186c90be09b72239f032
    numbers:
      N_00: '5'
      N_01: '35'
      N_02: '8'
    split: null
    variables:
    - e
  text:
    numbers:
      shape:
      - 54
      target: __ __ __  0 __ __ __ __ __  1 __ __ __ __ __ __ __ __ __ __ __ __ __  2
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __
    raw: 'olivia uploaded 5 pictures from her phone and 35 from her camera to facebook
      . if she sorted the pic ##s into 8 different albums with the same amount of
      pic ##s in each album , how many pictures were in each of the albums ?'
    snippets:
      shape:
      - 3
      - 7
      target:
      - olivia uploaded 5 pictures from her
      - her phone and 35 from her camera
      - 'pic ##s into 8 different albums with'
    tokens:
      shape:
      - 54
      target: '[CLS] olivia uploaded 5 pictures from her phone and 35 from her camera
        to facebook . if she sorted the pic ##s into 8 different albums with the same
        amount of pic ##s in each album , how many pictures were in each of the albums
        ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 16
    tokens: 'R_00: __NEW_VAR(, ) R_01: -(N_02, N_03) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the weight of the yellow block
      N_03:
      - the weight of the green block
      X_00:
      - the value of the weight of the yellow block minus the weight of the green
        block
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the weight of the yellow block
      - the weight of the yellow block
      - the weight of the yellow block
      N_03:
      - the weight of the green block
      - the weight of the green block
      - the weight of the green block
      X_00:
      - the value of the weight of the yellow block minus the weight of the green
        block
      - the value of the weight of yellow block minus the weight of green block
      - the value of the weight of the yellow block minus the weight of the green
        block
  info:
    answers:
    - d: '0.200000000000000'
    item_id: 60f9186c90be09b72239edde
    numbers:
      N_00: '1'
      N_01: '1'
      N_02: '0.600000000000000'
      N_03: '0.400000000000000'
    split: null
    variables:
    - d
  text:
    numbers:
      shape:
      - 54
      target: __ __ __ __ __ __ __ __ __  0 __ __  1 __ __ __ __ __ __ __  2  2  2
        __ __ __ __ __ __ __  3  3  3 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __
    raw: kenji and his classmates placed colored blocks on a scale during a science
      lab . the yellow block weighed 0 . 6 pounds , and the green block weighed 0
      . 4 pounds . how much more did the yellow block weigh than the green block ?
    snippets:
      shape:
      - 4
      - 7
      target:
      - colored blocks on a scale during a
      - a scale during a science lab .
      - yellow block weighed 0 . 6 pounds
      - green block weighed 0 . 4 pounds
    tokens:
      shape:
      - 54
      target: '[CLS] kenji and his classmates placed colored blocks on a scale during
        a science lab . the yellow block weighed 0 . 6 pounds , and the green block
        weighed 0 . 4 pounds . how much more did the yellow block weigh than the green
        block ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 16
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_02, R_00) R_02: =(N_01, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of coats collected from the high schools from the high schools
      N_02:
      - the number of coats collected from the high schools from the high schools
      X_00:
      - the number of coats collected at the elementary schools
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of coats collected so far
      - the total number of coats collected so far
      - the total number of coats collected
      N_02:
      - the number of coats collected from the high school
      - the number of coats collected from the high schools
      - number of coats collected from the high schools
      X_00:
      - the number of coats collected from the elementary school
      - the number of coats collected from the elementary schools
      - the number of coats collected from the elementary schools
  info:
    answers:
    - e: '2515'
    item_id: 60f9186c90be09b72239ee47
    numbers:
      N_00: '1'
      N_01: '9437'
      N_02: '6922'
    split: null
    variables:
    - e
  text:
    numbers:
      shape:
      - 54
      target: __ __ __ __ __ __ __ __  0 __ __ __  1  1 __ __ __ __ __ __ __  2  2
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __
    raw: 'students at arcadia schools are participating in a coat drive . 94 ##37
      coats have been collected so far . 69 ##22 coats were collected from the high
      schools and the rest from the elementary schools . how many coats were collected
      at the elementary schools ?'
    snippets:
      shape:
      - 3
      - 7
      target:
      - are participating in a coat drive .
      - 'coat drive . 94 ##37 coats have'
      - 'so far . 69 ##22 coats were'
    tokens:
      shape:
      - 54
      target: '[CLS] students at arcadia schools are participating in a coat drive
        . 94 ##37 coats have been collected so far . 69 ##22 coats were collected
        from the high schools and the rest from the elementary schools . how many
        coats were collected at the elementary schools ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 16
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_04, R_00) R_02: *(N_03, R_00) R_03: -(R_01,
      R_02) R_04: =(N_05, R_03) R_05: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_03:
      - the speed of one car
      N_04:
      - the speed of the other car
      N_05:
      - the final distance between the two cars after unknown hours
      X_00:
      - the number of hours each car traveled
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_03:
      - the speed of one car
      - the speed of one car in the same direction as the other car
      - the speed of one car
      N_04:
      - the speed of another car
      - the speed of the other car in the same direction as one car
      - the speed of the other car
      N_05:
      - the distance between the cars after traveling
      - the distance between the two cars
      - the distance between the two cars after traveling in the same direction
      X_00:
      - the time spent traveling for both cars
      - the driving hours until the cars are 45 mi apart
      - the hours needed for the two cars to be 45 mi apart
  info:
    answers:
    - h: '3'
    item_id: 604cc853117d71c492a62de1
    numbers:
      N_00: '2'
      N_01: '1'
      N_02: '1'
      N_03: '40'
      N_04: '55'
      N_05: '45'
    split: null
    variables:
    - h
  text:
    numbers:
      shape:
      - 54
      target: __  0 __ __ __  1 __ __ __ __ __ __ __ __ __ __ __ __ __  2 __ __  3
        __ __ __ __ __ __ __ __ __ __  4 __ __ __ __ __ __ __ __ __ __  5 __ __ __
        __ __ __ __ __ __
    raw: two cars leave town a at the same time going in the same direction . the
      speed of one car is 40 mph , and the speed of the other car is 55 mph . in how
      many hours will the cars be 45 mi apart ?
    snippets:
      shape:
      - 6
      - 7
      target:
      - two cars leave town
      - cars leave town a at the same
      - the speed of one car is 40
      - one car is 40 mph , and
      - other car is 55 mph . in
      - the cars be 45 mi apart ?
    tokens:
      shape:
      - 54
      target: '[CLS] two cars leave town a at the same time going in the same direction
        . the speed of one car is 40 mph , and the speed of the other car is 55 mph
        . in how many hours will the cars be 45 mi apart ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 16
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_05, R_00) R_02: +(N_04, R_00) R_03: *(N_03,
      R_02) R_04: =(R_01, R_03) R_05: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_03:
      - the speed of the second jet
      N_04:
      - the time passed after the second jet worked
      N_05:
      - the speed of the second jet
      X_00:
      - the number of hours each jet traveled
      X_01:
      - the number of hours each jet traveled
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_03:
      - the speed of the first jet
      - the speed of the first jet
      - the speed of the first jet
      N_04:
      - the hour of the second jet departing after the first jet
      - the amount of time passed between the two travel
      - the hours between the start time of jets
      N_05:
      - the speed of the second jet
      - the speed of the second jet
      - the speed of the second jet
      X_00:
      - the hour for the second jet to overtake the first
      - the time that the second jet overtakes the first jet
      - the hours it takes the second jet to overtake the first
  info:
    answers:
    - h: '2.25000000000000'
    item_id: 60f9186c90be09b72239ea33
    numbers:
      N_00: '1'
      N_01: '1'
      N_02: '1'
      N_03: '600'
      N_04: '0.750000000000000'
      N_05: '800'
      N_06: '2'
      N_07: '1'
    split: null
    variables:
    - h
  text:
    numbers:
      shape:
      - 54
      target: __  0 __ __  1 __ __ __  2 __ __ __  3 __ __ __ __ __ __ __ __ __ __  4  4  4
        __ __ __ __  5 __ __ __ __ __ __ __ __ __ __  6 __ __ __ __ __  7  7 __ __
        __ __ __
    raw: 'a jet leaves an airport traveling at a steady pace of 600 kilometers per
      hour . another jet leaves the same airport 0 . 75 hours later , traveling 800
      kilometers per hour . how long will it take the second jet to over ##take the
      first ?'
    snippets:
      shape:
      - 8
      - 7
      target:
      - a jet leaves an
      - a jet leaves an airport traveling at
      - airport traveling at a steady pace of
      - steady pace of 600 kilometers per hour
      - the same airport 0 . 75 hours
      - later , traveling 800 kilometers per hour
      - it take the second jet to over
      - 'over ##take the first ?'
    tokens:
      shape:
      - 54
      target: '[CLS] a jet leaves an airport traveling at a steady pace of 600 kilometers
        per hour . another jet leaves the same airport 0 . 75 hours later , traveling
        800 kilometers per hour . how long will it take the second jet to over ##take
        the first ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 16
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: /(N_03, 100) R_03: *(R_00,
      R_02) R_04: /(N_04, 100) R_05: *(R_01, R_04) R_06: +(R_03, R_05) R_07: /(N_07,
      100) R_08: *(N_05, R_07) R_09: =(R_06, R_08) R_10: +(R_00, R_01) R_11: =(N_05,
      R_10) R_12: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_03:
      - the concentration of the first solution
      N_04:
      - the concentration of the second solution
      N_05:
      - the amount of the mixed solution
      N_07:
      - the concentration of the mixed solution
      X_00:
      - the amount of the first solution
      X_01:
      - the amount of the second solution
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_03:
      - the percentage of salt in the first kind of brine solution
      - the concentration of the 3 % salt solution
      - the concentration of 3 % solution
      N_04:
      - the percentage of salt in the second kind of brine solution
      - the concentration of the 12 % salt solution
      - the concentration of 12 % solution
      N_05:
      - the number of milliliters of the mixed solution
      - the total amount of mixed solution
      - the amount of the mixed solution
      N_07:
      - the percentage of salt in the mixed solution
      - the concentration of the mixed solution
      - the concentration of the mixed solution
      X_00:
      - the number of milliliters of the first kind of brine solution
      - the total amount of 3 % salt solution
      - the amount of 3 % solution
      X_01:
      - the number of milliliters of the second kind of brine solution
      - the total amount of 12 % salt solution
      - the amount of 12 % solution
  info:
    answers:
    - s1: '600'
      s2: '400'
    item_id: 604cc853117d71c492a62d75
    numbers:
      N_00: '1'
      N_01: '2'
      N_02: '1'
      N_03: '3'
      N_04: '12'
      N_05: '1000'
      N_06: '1'
      N_07: '8.40000000000000'
    split: null
    variables:
    - s2
    - s1
  text:
    numbers:
      shape:
      - 54
      target: __  0 __ __  1 __ __ __ __  2 __  3 __ __ __ __ __  4 __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __  5 __ __ __ __  6 __ __ __  7  7  7 __ __
        __ __ __ __ __ __
    raw: 'a biologist has two br ##ine solutions , one containing 3 % salt and another
      containing 12 % salt . how many mill ##ili ##ters of each solution should she
      mix to obtain 1000 mill ##ili ##ters of a solution that contains 8 . 4 % salt
      ?'
    snippets:
      shape:
      - 8
      - 7
      target:
      - a biologist has two
      - 'a biologist has two br ##ine solutions'
      - '##ine solutions , one containing 3 %'
      - ', one containing 3 % salt and'
      - and another containing 12 % salt .
      - 'mix to obtain 1000 mill ##ili ##ters'
      - '##ili ##ters of a solution that contains'
      - solution that contains 8 . 4 %
    tokens:
      shape:
      - 54
      target: '[CLS] a biologist has two br ##ine solutions , one containing 3 % salt
        and another containing 12 % salt . how many mill ##ili ##ters of each solution
        should she mix to obtain 1000 mill ##ili ##ters of a solution that contains
        8 . 4 % salt ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 16
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: *(N_02, R_00) R_03: *(N_02,
      R_01) R_04: +(R_02, R_03) R_05: =(N_03, R_04) R_06: -(R_00, R_01) R_07: =(N_04,
      R_06) R_08: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the number of hours passed after they started traveling in opposite directions
        from no directions
      N_03:
      - the value of the speed of lily minus the speed of noe
      N_04:
      - the value of the speed of lily minus the speed of noe
      X_00:
      - the speed of lily
      X_01:
      - the speed of noe
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the number of hours of traveling in the opposite directions after starting
        from the same hotel
      - the hours of travel
      - the traveling hours
      N_03:
      - the final distance between two friends after four hours
      - the distance of lily and noe after traveled
      - the distance between lily and noe
      N_04:
      - the value of the average rate of lily minus the average rate of noe
      - the value of the speed of lily minus the speed of noe
      - the value of the speed of lily minus the speed of noe
      X_00:
      - the average rate of lily
      - the speed of lily
      - the speed of lily in the opposite direction from noe
      X_01:
      - the average rate of noe
      - the speed of noe
      - the speed of noe in the opposite direction from lily
  info:
    answers:
    - l: '65'
      n: '55'
    item_id: 604cc853117d71c492a62e92
    numbers:
      N_00: '2'
      N_01: '1'
      N_02: '4'
      N_03: '480'
      N_04: '10'
    split: null
    variables:
    - l
    - n
  text:
    numbers:
      shape:
      - 54
      target: __  0 __ __  1 __ __ __ __ __ __ __ __ __ __ __ __ __ __  2 __ __ __
        __  3 __ __ __ __ __ __  4 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __
    raw: 'two friends leave a hotel at the same time traveling in the opposite directions
      . they travel for four hours and are then 480 miles apart . if lily travels
      10 miles per hour faster than no ##e , find the average rate of speed for each
      person .'
    snippets:
      shape:
      - 5
      - 7
      target:
      - two friends leave a
      - two friends leave a hotel at the
      - they travel for four hours and are
      - and are then 480 miles apart .
      - if lily travels 10 miles per hour
    tokens:
      shape:
      - 54
      target: '[CLS] two friends leave a hotel at the same time traveling in the opposite
        directions . they travel for four hours and are then 480 miles apart . if
        lily travels 10 miles per hour faster than no ##e , find the average rate
        of speed for each person . [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 16
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(R_00, R_01) R_03: =(N_01,
      R_02) R_04: /(N_03, 100) R_05: *(R_00, R_04) R_06: /(N_04, 100) R_07: *(R_01,
      R_06) R_08: +(R_05, R_07) R_09: =(N_06, R_08) R_10: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the total amount invested in two parts
      N_03:
      - the interest rate of investment of one part
      N_04:
      - the interest rate of investment of the other part
      N_06:
      - the value of the total interest
      N_07:
      - the interest rate of investment of the other part
      X_00:
      - the invested dollars on one part
      X_01:
      - the invested dollars on another part
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the total amount invested in two parts
      - the total amount of money invested
      - the total amount of the investment
      N_03:
      - the interest rate on the first part
      - the interest rate of the first kind
      - the annual interest rate in the first case
      N_04:
      - the interest rate on the second part
      - the interest rate of the second kind
      - the annual interest rate in the second case
      N_06:
      - the total amount of interest
      - the total amount of interest gained
      - the total amount of interest
      N_07:
      - the interest rate on the second part
      - the interest rate of the second kind
      - the annual interest rate in the second case
      X_00:
      - the amount invested in the first part
      - the amount of money invested in the first kind
      - the amount of money walt invested in the first case
      X_01:
      - the amount invested in the second part
      - the amount of money invested in the second kind
      - the amount of money walt invested in the second case
  info:
    answers:
    - i1: '4000'
      i2: '5000'
    item_id: 604cc853117d71c492a6305d
    numbers:
      N_00: '1'
      N_01: '9000'
      N_02: '1'
      N_03: '9'
      N_04: '8'
      N_05: '1'
      N_06: '770'
      N_07: '8'
    split: null
    variables:
    - i2
    - i1
  text:
    numbers:
      shape:
      - 54
      target: __ __ __  0 __ __  1  1 __ __ __  2 __ __ __ __ __ __ __ __ __ __ __
        __  3 __ __ __ __ __  4 __ __ __ __  5 __ __ __  6 __ __ __ __ __ __ __ __  7
        __ __ __ __ __
    raw: 'walt made an extra $ 900 ##0 last year from a part - time job . he invested
      part of the money at 9 % and the rest at 8 % . he made a total of $ 770 in interest
      . how much was invested at 8 % ?'
    snippets:
      shape:
      - 8
      - 7
      target:
      - walt made an extra $ 900
      - 'an extra $ 900 ##0 last year'
      - last year from a part - time
      - the money at 9 % and the
      - the rest at 8 % . he
      - . he made a total of $
      - total of $ 770 in interest .
      - was invested at 8 % ?
    tokens:
      shape:
      - 54
      target: '[CLS] walt made an extra $ 900 ##0 last year from a part - time job
        . he invested part of the money at 9 % and the rest at 8 % . he made a total
        of $ 770 in interest . how much was invested at 8 % ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 16
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, R_00) R_02: =(N_02, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of bales in the barn
      N_02:
      - the number of bales in the barn
      X_00:
      - the total number of bales in the barn
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the initial number of bales of hay
      - number of bales of hay that were in the barn
      - the original number of bales of hay
      N_02:
      - the current total number of bales of hay
      - number of bales of hay now
      - the number of bales of hay in the barn now
      X_00:
      - the additional number of bales of hay
      - the number of bales tom stacked
      - the additional number of bales tom stacked in the barn
  info:
    answers:
    - s: '14'
    item_id: 60f9186c90be09b72239ec49
    numbers:
      N_00: '46'
      N_01: '32'
      N_02: '60'
    split: null
    variables:
    - s
  text:
    numbers:
      shape:
      - 54
      target: __ __ __  0 __ __ __ __ __ __ __ __  1 __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __  2 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __
    raw: 'there were 46 bal ##es of hay in the barn and 32 bal ##es in the shed .
      tom stacked bal ##es in the barn today . there are now 60 bal ##es of hay in
      the barn . how many bal ##es did he store in the barn ?'
    snippets:
      shape:
      - 3
      - 7
      target:
      - 'there were 46 bal ##es of'
      - 'the barn and 32 bal ##es in'
      - 'there are now 60 bal ##es of'
    tokens:
      shape:
      - 54
      target: '[CLS] there were 46 bal ##es of hay in the barn and 32 bal ##es in
        the shed . tom stacked bal ##es in the barn today . there are now 60 bal ##es
        of hay in the barn . how many bal ##es did he store in the barn ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 16
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(R_00, R_01) R_03: *(N_03,
      R_02) R_04: =(N_02, R_03) R_05: -(R_00, R_01) R_06: *(N_05, R_05) R_07: =(N_02,
      R_06) R_08: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the distance that the plane traveled with a tailwind
      N_03:
      - the number of hours it took for the plane to traveled 800 miwind
      N_05:
      - the number of hours it took for the plane to headwind
      X_00:
      - the speed of the plane
      X_01:
      - the speed of the wind
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the distance traveled by plane
      - the distance traveled by a plane with tailwind
      - the distance of plane traveled
      N_03:
      - the number of hours it takes to travel with a wind
      - the hours taken to travel with tailwind
      - the time of a plane traveled with a tailwind
      N_05:
      - the number of hours it takes to travel against the wind
      - the hours taken to travel against headwind
      - the time of a plane traveled against a headwind
      X_00:
      - the speed of the plane in calm wind
      - the speed of the plane
      - the speed of the plane
      X_01:
      - the speed of the wind
      - the speed of the wind
      - the speed of the wind
  info:
    answers:
    - p: '130'
      w: '30'
    item_id: 604cc853117d71c492a62ec5
    numbers:
      N_00: '1'
      N_01: '1'
      N_02: '800'
      N_03: '5'
      N_04: '1'
      N_05: '8'
    split: null
    variables:
    - p
    - w
  text:
    numbers:
      shape:
      - 54
      target: __ __  0 __ __ __  1 __ __  2 __ __  3 __ __ __ __  4 __ __ __ __ __
        __ __ __ __ __  5 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __
    raw: 'with a tail ##wind , a plane traveled 800 mi in 5 hr ##s . against a head
      ##wind , the plane traveled the same distance in 8 hr ##s . find the plane ''
      s airs ##peed and the speed of the wind . assume that both were constant .'
    snippets:
      shape:
      - 6
      - 7
      target:
      - 'with a tail ##wind ,'
      - 'tail ##wind , a plane traveled 800'
      - a plane traveled 800 mi in 5
      - '800 mi in 5 hr ##s .'
      - '##s . against a head ##wind ,'
      - 'same distance in 8 hr ##s .'
    tokens:
      shape:
      - 54
      target: '[CLS] with a tail ##wind , a plane traveled 800 mi in 5 hr ##s . against
        a head ##wind , the plane traveled the same distance in 8 hr ##s . find the
        plane '' s airs ##peed and the speed of the wind . assume that both were constant
        . [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 16
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the amount of green peppers bought by green peppers
      N_01:
      - the amount of red peppers
      X_00:
      - the total amount of peppers
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of pounds of green peppers hannah's vegetarian restaurant bought
      - the weight of green peppers
      - the amounts of green peppers bought by hannah's vegetarian restaurant
      N_01:
      - the number of pounds of red peppers hannah's vegetarian restaurant bought
      - the weight of red peppers
      - the amounts of red peppers bought by hannah's vegetarian restaurant
      X_00:
      - the number of pounds of green and red peppers hannah's vegetarian restaurant
        bought
      - the weight of green peppers and red peppers
      - the total amounts of peppers bought by hannah's vegetarian restaurant
  info:
    answers:
    - p: '0.666666666666667'
    item_id: 60f9186c90be09b72239f24a
    numbers:
      N_00: '0.333333333333333'
      N_01: '0.333333333333333'
    split: null
    variables:
    - p
  text:
    numbers:
      shape:
      - 54
      target: __ __ __ __ __ __ __  0  0  0  0  0  0  0  0  0  0 __ __ __ __ __  1  1  1  1  1  1  1  1  1  1
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'hannah '' s vegetarian restaurant bought 0 . 333 ##33 ##33 ##33 ##33 ##33
      ##33 ##3 pounds of green peppers and 0 . 333 ##33 ##33 ##33 ##33 ##33 ##33 ##3
      pounds of red peppers . how many pounds of peppers did hannah '' s vegetarian
      restaurant buy in all ?'
    snippets:
      shape:
      - 2
      - 7
      target:
      - 'vegetarian restaurant bought 0 . 333 ##33'
      - 'green peppers and 0 . 333 ##33'
    tokens:
      shape:
      - 54
      target: '[CLS] hannah '' s vegetarian restaurant bought 0 . 333 ##33 ##33 ##33
        ##33 ##33 ##33 ##3 pounds of green peppers and 0 . 333 ##33 ##33 ##33 ##33
        ##33 ##33 ##3 pounds of red peppers . how many pounds of peppers did hannah
        '' s vegetarian restaurant buy in all ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 16
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: __NEW_VAR(, ) R_03: *(10,
      R_00) R_04: +(R_01, R_03) R_05: =(R_02, R_04) R_06: +(R_00, R_01) R_07: =(N_02,
      R_06) R_08: *(10, R_01) R_09: +(R_00, R_08) R_10: -(R_09, R_02) R_11: *(N_02,
      N_07) R_12: =(R_10, R_11) R_13: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the sum of the digits of the first number and the second number
      N_07:
      - the ratio of the second number to the sum of the first number and the second
        number to the second number
      X_00:
      - the value of the first number
      X_01:
      - the units digit of the first number
      X_02:
      - the value of the first number
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the sum of the tens'digits of the original number and the unit digit of the
        original number
      - the sum of the digits of the original two - digit number
      - the sum of the digits of the number
      N_07:
      - the ratio of the reversed number minus the original number to the sum of the
        digits of the origianl number
      - the ratio of the number formed by reversing the digits subtracted from the
        original number to the sum of the digits
      - the ratio of the second number minus the first number to the sum of the digits
        of the number
      X_00:
      - the number of the tens'digit of the original number
      - the digit of tens of the original number
      - the ten's digit
      X_01:
      - the number of the unit digit of the original number
      - the digits of units of the original
      - the unit's digit
      X_02:
      - the value of the original number
      - the value of the original number
      - the value of the first number
  info:
    answers:
    - o: '24'
      t: '2'
      u: '4'
    item_id: 604cc853117d71c492a62f02
    numbers:
      N_00: '1'
      N_01: '2'
      N_02: '6'
      N_03: '1'
      N_04: '2'
      N_05: '2'
      N_06: '1'
      N_07: '3'
      N_08: '1'
    split: null
    variables:
    - t
    - u
    - o
  text:
    numbers:
      shape:
      - 54
      target: __ __ __ __  0 __  1  1  1 __ __ __ __  2 __ __  3  4 __ __ __ __ __
        __ __ __ __ __  5 __ __ __ __ __ __  6  6 __ __ __  7 __ __ __ __ __ __ __
        __ __  8 __ __ __
    raw: 'the digits of a certain two - digit number add up to 6 . form a second number
      by rev ##ers ##ing these digits . when the second number is sub ##tracted from
      the first , the result is three times the sum of the digits . find the first
      number .'
    snippets:
      shape:
      - 9
      - 7
      target:
      - the digits of a certain two -
      - of a certain two - digit number
      - add up to 6 . form a
      - 6 . form a second number by
      - . form a second number by rev
      - . when the second number is sub
      - '##tracted from the first , the result'
      - the result is three times the sum
      - . find the first number .
    tokens:
      shape:
      - 54
      target: '[CLS] the digits of a certain two - digit number add up to 6 . form
        a second number by rev ##ers ##ing these digits . when the second number is
        sub ##tracted from the first , the result is three times the sum of the digits
        . find the first number . [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_00, R_00) R_02: *(N_01, N_02) R_03: =(R_01,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the speed of her friend toward the library
      N_01:
      - the speed to go toward the library
      N_02:
      - the distance between the friend and the library
      X_00:
      - the hours marla traveled toward the library
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of miles marla walking at per hour
      - the speed of marla in miles per hour
      - the number of miles marla waled per hour
      N_01:
      - the value of the way walking to the library
      - the rate of the point she meets her friend
      - the ratio of the distance of the point marla met her friend to the distance
        of the library
      N_02:
      - the value of miles to the library
      - the distance to the library in miles
      - the number of miles to the library
      X_00:
      - the number of hours marla walked
      - the time in hours it takes for marla to meet her friend
      - the number of hours marla walked to the library
  info:
    answers:
    - h: '0.666666666666667'
    item_id: 60f9186c90be09b72239eaaa
    numbers:
      N_00: '3'
      N_01: '0.500000000000000'
      N_02: '4'
    split: null
    variables:
    - h
  text:
    numbers:
      shape:
      - 102
      target: __ __ __ __ __ __  0 __ __ __ __ __ __ __ __ __ __ __ __ __  1  1  1
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __  2 __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __
    raw: 'mar ##la begins walking at 3 miles per hour toward the library . her friend
      meets her at the 0 . 5 - way point and drives her the rest of the way to the
      library . the distance to the library is 4 miles . how many hours did mar ##la
      walk ?'
    snippets:
      shape:
      - 3
      - 7
      target:
      - begins walking at 3 miles per hour
      - her at the 0 . 5 -
      - the library is 4 miles . how
    tokens:
      shape:
      - 102
      target: '[CLS] mar ##la begins walking at 3 miles per hour toward the library
        . her friend meets her at the 0 . 5 - way point and drives her the rest of
        the way to the library . the distance to the library is 4 miles . how many
        hours did mar ##la walk ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(R_00, R_01) R_03: =(N_00,
      R_02) R_04: /(N_02, 100) R_05: *(R_00, R_04) R_06: /(N_03, 100) R_07: *(R_01,
      R_06) R_08: +(R_05, R_07) R_09: =(N_05, R_08) R_10: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the total amount of interest gained
      N_02:
      - the interest rate of the first kind
      N_03:
      - the interest rate of the second kind
      N_05:
      - the total amount of interest gained
      X_00:
      - the amount of money owed in the first kind
      X_01:
      - the amount of money owed in the second kind
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the sum of the number of dollars of the first loan and the second loan in
        dollars
      - the total amount of cole's student loans
      - the total student loans of cole
      N_02:
      - the interest rate of the first loan
      - the interest rate of the first kind
      - the annual interest rate of one loan
      N_03:
      - the interest rate of the second loan
      - the interest rate of the second kind
      - the annual interest rate of the other loan
      N_05:
      - the sum of interest from the first and second loan in dollars
      - the total amount of interest gained
      - the total amount of interest
      X_00:
      - the number of dollars borrowed from the first loan in dollars
      - the amount of money he loaned from the first kind
      - the amount of one loan
      X_01:
      - the number of dollars borrowed from the second loan in dollars
      - the amount of money he loaned from the second kind
      - the amount of the other loan
  info:
    answers:
    - l1: '21800'
      l2: '9200'
    item_id: 604cc853117d71c492a62cdb
    numbers:
      N_00: '31000'
      N_01: '1'
      N_02: '2.80000000000000'
      N_03: '4.50000000000000'
      N_04: '1'
      N_05: '1024.40000000000'
    split: null
    variables:
    - l1
    - l2
  text:
    numbers:
      shape:
      - 102
      target: __ __ __ __ __ __ __  0  0  0 __ __  1 __ __ __ __ __  2  2  2 __ __
        __ __ __ __ __  3  3  3 __ __ __  4 __ __ __ __  5  5  5  5 __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __
    raw: 'cole '' s student loans totaled 31 , 000 dollars . one of his loans was
      at 2 . 8 % simple interest and the other at 4 . 5 % . after one year , cole
      owed 102 ##4 . 40 dollars in interest . what was the amount of each loan ?'
    snippets:
      shape:
      - 6
      - 7
      target:
      - student loans totaled 31 , 000 dollars
      - 000 dollars . one of his loans
      - loans was at 2 . 8 %
      - the other at 4 . 5 %
      - '% . after one year , cole'
      - ', cole owed 102 ##4 . 40'
    tokens:
      shape:
      - 102
      target: '[CLS] cole '' s student loans totaled 31 , 000 dollars . one of his
        loans was at 2 . 8 % simple interest and the other at 4 . 5 % . after one
        year , cole owed 102 ##4 . 40 dollars in interest . what was the amount of
        each loan ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: *(N_01, R_00) R_03: *(N_03,
      R_01) R_04: +(R_02, R_03) R_05: =(N_05, R_04) R_06: *(N_06, R_00) R_07: *(N_08,
      R_01) R_08: +(R_06, R_07) R_09: =(N_10, R_08) R_10: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the speed of the first speed
      N_03:
      - the time spent at the second speed
      N_05:
      - the total distance of traveled
      N_06:
      - the number of hours in the first speed
      N_08:
      - the speed of the second speed
      N_10:
      - the distance between the two speeds
      X_00:
      - the first speed
      X_01:
      - the speed of the second speed
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the time driven at the first speed in the first set
      - the number of hours the motorist drove at one speed in the first case
      - the hours of drove one speed at the first distance
      N_03:
      - the time driven at the second speed in the first set
      - the number of hours the motorist drove at another speed in the first case
      - the hours of drove another speed at the first distance
      N_05:
      - the total distance traveled in the first set
      - the total distance the motorist drove in the first case
      - the first distance
      N_06:
      - the time driven at the first speed in the second set
      - the number of hours the motorist drove at one speed in the second case
      - the hours of drove one speed at the second distance
      N_08:
      - the time driven at the second speed in the second set
      - the number of hours the motorist drove at another speed in the second case
      - the hours of drove another speed at the second distance
      N_10:
      - the total distance traveled in the second set
      - the total distance the motorist drove in the second case
      - the second distance
      X_00:
      - the first speed
      - the value of one speed
      - the one driving speed
      X_01:
      - the second speed
      - the value of another speed
      - another driving speed
  info:
    answers:
    - s1: '48'
      s2: '52'
    item_id: 604cc852117d71c492a62bc8
    numbers:
      N_00: '1'
      N_01: '2'
      N_02: '1'
      N_03: '3'
      N_04: '1'
      N_05: '252'
      N_06: '4'
      N_07: '1'
      N_08: '1'
      N_09: '2'
      N_10: '244'
      N_11: '2'
    split: null
    variables:
    - s1
    - s2
  text:
    numbers:
      shape:
      - 102
      target: __  0 __ __ __  1 __ __  2 __ __ __ __  3 __ __ __ __ __ __ __  4 __
        __  5 __ __ __ __ __ __  6 __ __ __  7 __ __  8 __ __ __  9 __ __ __ __ __
        __ 10 __ __ __ 11 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __
    raw: 'a motor ##ist drove 2 hours at one speed and then for 3 hours at another
      speed . he covered a distance of 252 kilometers . if he had traveled 4 hours
      at the first speed and 1 hour at the second speed , he would have covered 244
      kilometers . find two speeds ?'
    snippets:
      shape:
      - 12
      - 7
      target:
      - 'a motor ##ist drove'
      - 'motor ##ist drove 2 hours at one'
      - 2 hours at one speed and then
      - and then for 3 hours at another
      - . he covered a distance of 252
      - a distance of 252 kilometers . if
      - he had traveled 4 hours at the
      - hours at the first speed and 1
      - first speed and 1 hour at the
      - hour at the second speed , he
      - would have covered 244 kilometers . find
      - kilometers . find two speeds ?
    tokens:
      shape:
      - 102
      target: '[CLS] a motor ##ist drove 2 hours at one speed and then for 3 hours
        at another speed . he covered a distance of 252 kilometers . if he had traveled
        4 hours at the first speed and 1 hour at the second speed , he would have
        covered 244 kilometers . find two speeds ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(R_00, R_01) R_03: =(N_02,
      R_02) R_04: /(N_05, 100) R_05: *(R_00, R_04) R_06: /(N_06, 100) R_07: *(R_01,
      R_06) R_08: +(R_05, R_07) R_09: =(N_04, R_08) R_10: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the total amount invested in two investments
      N_04:
      - the total amount of interest gained
      N_05:
      - the interest rate of the first kind
      N_06:
      - the interest rate of the second kind
      X_00:
      - the amount invested in the first part
      X_01:
      - the amount invested in the second part
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the total amount invested in two parts
      - the total amount of money invested
      - the amount of total investments
      N_04:
      - the total interest yielded after one year
      - the total amount of money yielded by interest
      - the amount of total interest
      N_05:
      - the interest rate on the first part
      - the interest rate of first interest
      - the annual interest rate in the first case
      N_06:
      - the interest rate on the second part
      - the interest rate of second interest
      - the annual interest rate in the second case
      X_00:
      - the amount invested in the first part
      - amount of money invested in the first interest
      - the amount of investment in the first case
      X_01:
      - the amount invested in the second part
      - amount of money invested in the second interest
      - the amount of investment in the second case
  info:
    answers:
    - i1: '6800'
      i2: '8200'
    item_id: 604cc852117d71c492a62b23
    numbers:
      N_00: '1'
      N_01: '2'
      N_02: '15000'
      N_03: '1'
      N_04: '1023'
      N_05: '6'
      N_06: '7.50000000000000'
    split: null
    variables:
    - i1
    - i2
  text:
    numbers:
      shape:
      - 102
      target: __  0 __ __ __ __ __ __ __  1 __ __  2  2  2 __ __ __  3 __ __ __ __
        __  4  4 __ __ __ __ __ __ __ __ __ __ __ __  5 __ __ __ __ __  6  6  6 __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __
    raw: 'a self - employed contractor nearing retirement made two investments totaling
      15 , 000 dollars . in one year , these investments yielded 102 ##3 dollars in
      simple interest . part of the money was invested at 6 % and the rest at 7 .
      5 % . how much was invested at each rate ?'
    snippets:
      shape:
      - 7
      - 7
      target:
      - a self - employed
      - nearing retirement made two investments totaling 15
      - two investments totaling 15 , 000 dollars
      - dollars . in one year , these
      - 'these investments yielded 102 ##3 dollars in'
      - was invested at 6 % and the
      - the rest at 7 . 5 %
    tokens:
      shape:
      - 102
      target: '[CLS] a self - employed contractor nearing retirement made two investments
        totaling 15 , 000 dollars . in one year , these investments yielded 102 ##3
        dollars in simple interest . part of the money was invested at 6 % and the
        rest at 7 . 5 % . how much was invested at each rate ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: /(N_02, 100) R_02: *(R_00, R_01) R_03: +(N_01,
      R_02) R_04: /(N_04, 100) R_05: *(R_00, R_04) R_06: =(R_03, R_05) R_07: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of cents offered in the first plan
      N_01:
      - the dollar of the second plan per minute
      N_02:
      - the additional fee per minute of another plan
      N_04:
      - the cent fee per minute of the second plan in cents
      X_00:
      - the number of minutes the cost of the two plans become the same
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the monthly charge of the rate plus plan
      - the monthly fee in dollars that the rate plus plan costs
      - the dollars per month the rate plus plan costs
      N_02:
      - the charge per minute of the rate plus plan in cents
      - the fee in cents that the rate plus plan costs per minute
      - the cents per minute the rate plus plan costs
      N_04:
      - the charge per minute of another plan in cents
      - the fee in cents that another plan costs per minute
      - the cents per minute another plan costs
      X_00:
      - the number of minutes when the 2 plans cost the same
      - the number of minutes when the 2 plans will cost the same
      - the number of minutes for the 2 plans to be the same cost
  info:
    answers:
    - m: '165'
    item_id: 60f9186c90be09b72239f1d8
    numbers:
      N_00: '2'
      N_01: '4.95000000000000'
      N_02: '7'
      N_03: '1'
      N_04: '10'
      N_05: '1'
      N_06: '2'
    split: null
    variables:
    - m
  text:
    numbers:
      shape:
      - 102
      target: __ __ __ __ __ __ __  0 __ __ __ __ __ __ __ __ __ __ __  1  1  1 __
        __ __ __  2 __  3 __ __ __ __ __ __ __ __ __ __  4 __  5 __ __ __ __ __ __
        __ __ __  6 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __
    raw: recently , at & t offered 2 long - distance calling plans . the rate plus
      plan costs 4 . 95 dollars per month plus 7 cents a minute . another plan has
      no monthly fee but costs 10 cents a minute . for what number of minutes will
      the 2 plans cost the same ?
    snippets:
      shape:
      - 7
      - 7
      target:
      - '& t offered 2 long - distance'
      - plus plan costs 4 . 95 dollars
      - per month plus 7 cents a minute
      - plus 7 cents a minute . another
      - fee but costs 10 cents a minute
      - costs 10 cents a minute . for
      - minutes will the 2 plans cost the
    tokens:
      shape:
      - 102
      target: '[CLS] recently , at & t offered 2 long - distance calling plans . the
        rate plus plan costs 4 . 95 dollars per month plus 7 cents a minute . another
        plan has no monthly fee but costs 10 cents a minute . for what number of minutes
        will the 2 plans cost the same ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_02) R_02: +(N_04, R_01) R_03: =(R_00,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of cups of strawberries used
      N_02:
      - the number of cups of yogurt used
      N_04:
      - the number of cups of orange juice used
      X_00:
      - the total number of cups of strawberries, yogurt, and orange juice
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of cups of strawberries
      - the number of cups of strawberries ellen used to make smoothies
      - the number of cups of strawberries ellen used to make smoothies
      N_02:
      - the number of cups of yogurt
      - the number of cups of yogurt ellen used to make smoothies
      - the number of cups of yogurt she used
      N_04:
      - the number of cups of orange juice
      - the number of cups of orange juice ellen used to make smoothies
      - the number of cups of orange juice she used
      X_00:
      - the total number of cups of ingredients
      - the number of cups of ingredients ellen used for the smoothies
      - the number of cups of ingredients she used for the smoothies
  info:
    answers:
    - c: '0.500000000000000'
    item_id: 60f9186c90be09b72239f055
    numbers:
      N_00: '0.200000000000000'
      N_01: '1'
      N_02: '0.100000000000000'
      N_03: '1'
      N_04: '0.200000000000000'
      N_05: '1'
    split: null
    variables:
    - c
  text:
    numbers:
      shape:
      - 102
      target: __ __ __ __ __ __ __ __ __ __ __ __  0  0  0 __  1 __ __ __ __ __  2  2  2
        __  3 __ __ __ __ __ __ __  4  4  4 __  5 __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __
    raw: 'ellen made smooth ##ies in the blend ##er . she used 0 . 2 of a cup of straw
      ##berries , 0 . 1 of a cup of yo ##gur ##t , and 0 . 2 of a cup of orange juice
      . how many cups of ingredients did ellen use for the smooth ##ies ?'
    snippets:
      shape:
      - 6
      - 7
      target:
      - . she used 0 . 2 of
      - . 2 of a cup of straw
      - 'straw ##berries , 0 . 1 of'
      - . 1 of a cup of yo
      - '##t , and 0 . 2 of'
      - . 2 of a cup of orange
    tokens:
      shape:
      - 102
      target: '[CLS] ellen made smooth ##ies in the blend ##er . she used 0 . 2 of
        a cup of straw ##berries , 0 . 1 of a cup of yo ##gur ##t , and 0 . 2 of a
        cup of orange juice . how many cups of ingredients did ellen use for the smooth
        ##ies ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of pages of the phone book
      N_01:
      - the number of pages listed by rosa this week
      X_00:
      - the number of pages worth of the phone book in all
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the initial number of pages
      - the number of pages of the phone book called last week
      - the number of pages called last week
      N_01:
      - the additional number of pages
      - the number of pages of the phone book called this week
      - the number of pages called this week
      X_00:
      - the total number of pages
      - the total number of pages
      - the total number of pages called
  info:
    answers:
    - p: '18.8000000000000'
    item_id: 60f9186c90be09b72239ed6f
    numbers:
      N_00: '10.2000000000000'
      N_01: '8.60000000000000'
    split: null
    variables:
    - p
  text:
    numbers:
      shape:
      - 102
      target: __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __  0  0  0 __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __  1  1  1 __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __
    raw: 'hoping to be named sales ##person of the month , rosa called the names from
      10 . 2 pages of the phone book last week . this week , she called the people
      listed on another 8 . 6 pages of the same phone book . how many pages worth
      of people did rosa call in all ?'
    snippets:
      shape:
      - 2
      - 7
      target:
      - the names from 10 . 2 pages
      - listed on another 8 . 6 pages
    tokens:
      shape:
      - 102
      target: '[CLS] hoping to be named sales ##person of the month , rosa called
        the names from 10 . 2 pages of the phone book last week . this week , she
        called the people listed on another 8 . 6 pages of the same phone book . how
        many pages worth of people did rosa call in all ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: *(N_01, R_00) R_03: *(N_03,
      R_01) R_04: +(R_02, R_03) R_05: =(N_05, R_04) R_06: *(N_02, R_00) R_07: *(N_04,
      R_01) R_08: +(R_06, R_07) R_09: =(N_06, R_08) R_10: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the amount of fat in the first unit of grain
      N_02:
      - the total calories
      N_03:
      - the amount of fat in the unit of grain b
      N_04:
      - the total calories
      N_05:
      - the total number of grams of grain a unit of grain a
      N_06:
      - the total calories
      X_00:
      - the number of grams of grain a
      X_01:
      - the number of grain b
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of grams of fat in an unit of grain a
      - the fat content of each unit of grain a
      - the amount of fat in each unit of grain a
      N_02:
      - the number of calories in an unit of grain a
      - the calories in each unit of grain a
      - the calories of each unit of grain a
      N_03:
      - the number of grams of fat in an unit of grain b
      - the fat content of each unit of grain b
      - the amount of fat in each unit of grain b
      N_04:
      - the number of calories in an unit of grain b
      - the calories in each unit of grain b
      - the calories of each unit of grain b
      N_05:
      - the number of grams of fat in an unit of the final product mixed with grain
        a and grain b
      - the total fat content of grain b
      - the amount of fat in the final product
      N_06:
      - the number of calories in the final product mixed with grain a and grain b
      - the total calories in total grain
      - the calories of the final product
      X_00:
      - the number of units of grain a
      - the number of grain a
      - the number of the units of grain a
      X_01:
      - the number of units of grain b
      - the number of grain b
      - the number of the units of grain b
  info:
    answers:
    - g1: '3'
      g2: '4'
    item_id: 604cc853117d71c492a62ce1
    numbers:
      N_00: '1'
      N_01: '2'
      N_02: '80'
      N_03: '3'
      N_04: '60'
      N_05: '18'
      N_06: '480'
      N_07: '1'
    split: null
    variables:
    - g1
    - g2
  text:
    numbers:
      shape:
      - 102
      target: __ __ __ __ __  0 __  1 __ __ __ __  2 __ __ __ __ __ __ __  3 __ __
        __ __  4 __ __ __ __ __ __ __ __ __ __  5 __ __ __ __  6 __ __ __ __ __ __
        __  7 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __
    raw: 'each unit of grain a contains 2 grams of fat and 80 cal ##ories , and unit
      b has 3 grams of fat and 60 cal ##ories . if the final product is to provide
      18 grams of fat and 480 cal ##ories , how much of grain a and how much of grain
      b should be used .'
    snippets:
      shape:
      - 8
      - 7
      target:
      - unit of grain a contains 2 grams
      - grain a contains 2 grams of fat
      - 'of fat and 80 cal ##ories ,'
      - unit b has 3 grams of fat
      - 'of fat and 60 cal ##ories .'
      - is to provide 18 grams of fat
      - 'of fat and 480 cal ##ories ,'
      - much of grain a and how much
    tokens:
      shape:
      - 102
      target: '[CLS] each unit of grain a contains 2 grams of fat and 80 cal ##ories
        , and unit b has 3 grams of fat and 60 cal ##ories . if the final product
        is to provide 18 grams of fat and 480 cal ##ories , how much of grain a and
        how much of grain b should be used . [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: *(N_00, R_00) R_03: *(N_01,
      R_01) R_04: +(R_02, R_03) R_05: =(N_03, R_04) R_06: +(R_00, R_01) R_07: =(N_02,
      R_06) R_08: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the cost of one pumpkin
      N_01:
      - the cost of one pumpkin
      N_02:
      - the number of pumpkins sold
      N_03:
      - the total cost of pumpkins sold
      X_00:
      - the number of jumbos sold
      X_01:
      - the number of regular pumpkins
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the price of a jumbo pumpkin
      - the cost of one jumbo pumpkin
      - the cost of a jumbo pumpkin
      N_01:
      - the price of a regular pumpkin
      - the cost of one regular pumpkin
      - the cost of a regular pumpkin
      N_02:
      - the total number of pumpkins sold
      - the total number of pumpkins
      - the total number of pumpkins
      N_03:
      - the total cost of pumpkins sold
      - the total cost of pumpkins
      - the total sales of pumpkins
      X_00:
      - the number of jumbo pumpkins sold
      - the number of jumbo pumpkins
      - the number of jumbo pumpkins
      X_01:
      - the number of regular pumpkins sold
      - the number of regular pumpkins
      - the number of regular pumpkins
  info:
    answers:
    - j: '15'
      r: '65'
    item_id: 604cc853117d71c492a62cc5
    numbers:
      N_00: '9.00000000000000'
      N_01: '4.00000000000000'
      N_02: '80'
      N_03: '395.000000000000'
    split: null
    variables:
    - j
    - r
  text:
    numbers:
      shape:
      - 102
      target: __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __  0  0  0 __ __ __ __
        __ __ __ __ __ __  1  1  1 __ __ __ __ __  2 __ __ __ __  3  3  3 __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __
    raw: 'peter sold pumpkin ##s from his farm . he sold ju ##mbo pumpkin ##s for
      9 . 00 dollars each , and he sold regular pumpkin ##s for 4 . 00 dollars each
      . peter sold 80 pumpkin ##s and collected 395 . 00 dollars . how many ju ##mbo
      pumpkin ##s and regular pumpkin ##s did he sell ?'
    snippets:
      shape:
      - 4
      - 7
      target:
      - 'pumpkin ##s for 9 . 00 dollars'
      - 'pumpkin ##s for 4 . 00 dollars'
      - '. peter sold 80 pumpkin ##s and'
      - '##s and collected 395 . 00 dollars'
    tokens:
      shape:
      - 102
      target: '[CLS] peter sold pumpkin ##s from his farm . he sold ju ##mbo pumpkin
        ##s for 9 . 00 dollars each , and he sold regular pumpkin ##s for 4 . 00 dollars
        each . peter sold 80 pumpkin ##s and collected 395 . 00 dollars . how many
        ju ##mbo pumpkin ##s and regular pumpkin ##s did he sell ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_01, N_02) R_02: +(N_03, R_01) R_03: =(R_00,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the weight of peanuts
      N_02:
      - the weight of chocolate
      N_03:
      - the weight of raisins
      X_00:
      - the total weight of trailsins
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of pounds of peanuts brandy used to make the trail mix
      - the pounds of peanuts she used for trail mix
      - the number of peanuts used
      N_02:
      - the number of pounds of chocolate chips brandy used to make the trail mix
      - the pounds of chocolate used for trail mix
      - the number of chocolate chips used
      N_03:
      - the number of pounds of raisins brandy used to make the trail mix
      - the pounds of raisins she used for trail mix
      - the number of raisins used
      X_00:
      - the total number of pounds of the trail mix brandy made
      - the total pounds of trail mix she made
      - the total amount of peanuts, chocolate chips, and raisins
  info:
    answers:
    - p: '0.416666666666667'
    item_id: 60f9186c90be09b72239eb77
    numbers:
      N_00: '1'
      N_01: '0.166666666666667'
      N_02: '0.166666666666667'
      N_03: '0.0833333333333333'
    split: null
    variables:
    - p
  text:
    numbers:
      shape:
      - 102
      target: __ __ __ __ __ __  0 __ __ __ __ __ __  1  1  1  1  1  1  1  1  1  1
        __ __ __ __  2  2  2  2  2  2  2  2  2  2 __ __ __ __ __ __  3  3  3  3  3  3  3  3  3  3  3
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'brandy made trail mix for a backpack ##ing trip . she used 0 . 1666 ##66
      ##66 ##66 ##66 ##66 ##66 ##6 pounds of peanuts , 0 . 1666 ##66 ##66 ##66 ##66
      ##66 ##66 ##6 pounds of chocolate chips , and 0 . 08 ##33 ##33 ##33 ##33 ##33
      ##33 ##33 ##3 pounds of rai ##sin ##s . how many pounds of trail mix did brandy
      make ?'
    snippets:
      shape:
      - 4
      - 7
      target:
      - 'trail mix for a backpack ##ing trip'
      - '. she used 0 . 1666 ##66'
      - 'of peanuts , 0 . 1666 ##66'
      - 'chips , and 0 . 08 ##33'
    tokens:
      shape:
      - 102
      target: '[CLS] brandy made trail mix for a backpack ##ing trip . she used 0
        . 1666 ##66 ##66 ##66 ##66 ##66 ##66 ##6 pounds of peanuts , 0 . 1666 ##66
        ##66 ##66 ##66 ##66 ##66 ##6 pounds of chocolate chips , and 0 . 08 ##33 ##33
        ##33 ##33 ##33 ##33 ##33 ##3 pounds of rai ##sin ##s . how many pounds of
        trail mix did brandy make ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(R_00, R_01) R_03: *(N_02,
      R_02) R_04: =(N_01, R_03) R_05: -(R_00, R_01) R_06: *(N_03, R_05) R_07: =(N_01,
      R_06) R_08: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the distance of the plane in miles per hour
      N_02:
      - the hours it takes the plane to travel west
      N_03:
      - the hours it takes the plane to travel west
      X_00:
      - the average speed of the plane in miles per hour
      X_01:
      - the wind speed
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the traveling distance between east and west
      - the distance of a direct flight on delta airlines from atlanta to paris
      - the distance from atlanta to paris
      N_02:
      - the number of hours it takes to travel east
      - the number of hours the plane traveled east with the wind
      - the hours needed for going east
      N_03:
      - the number of hours it takes to travel west
      - the number of hours the plane traveled west against the wind
      - the hours needed for going west
      X_00:
      - the speed of the plane in calm wind
      - the speed of the plane
      - the average airspeed of the plane
      X_01:
      - the speed of the wind
      - the speed of the wind
      - the average wind speed
  info:
    answers:
    - p: '450'
      w: '50'
    item_id: 604cc852117d71c492a62b89
    numbers:
      N_00: '1'
      N_01: '4000'
      N_02: '8'
      N_03: '10'
      N_04: '1'
      N_05: '1'
    split: null
    variables:
    - p
    - w
  text:
    numbers:
      shape:
      - 102
      target: __  0 __ __ __ __ __ __ __ __ __ __  1 __ __ __ __  2 __ __ __ __  3
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __  4 __ __ __ __ __ __ __ __  5
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __
    raw: 'a direct flight on delta airlines from atlanta to paris is 4000 miles and
      takes approximately 8 hours going east and 10 hours going west . although the
      plane averages the same airs ##peed , there is a head ##wind while traveling
      east , resulting in a different airs ##peed . what is the average airs ##peed
      of the plane in miles per hour and the average wind speed ?'
    snippets:
      shape:
      - 6
      - 7
      target:
      - a direct flight on
      - to paris is 4000 miles and takes
      - and takes approximately 8 hours going east
      - going east and 10 hours going west
      - ', there is a head ##wind while'
      - ', resulting in a different airs ##peed'
    tokens:
      shape:
      - 102
      target: '[CLS] a direct flight on delta airlines from atlanta to paris is 4000
        miles and takes approximately 8 hours going east and 10 hours going west .
        although the plane averages the same airs ##peed , there is a head ##wind
        while traveling east , resulting in a different airs ##peed . what is the
        average airs ##peed of the plane in miles per hour and the average wind speed
        ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: -(N_00, R_00) R_03: =(R_01,
      R_02) R_04: /(N_02, 100) R_05: *(R_01, R_04) R_06: +(R_00, R_05) R_07: /(N_03,
      100) R_08: *(N_00, R_07) R_09: =(R_06, R_08) R_10: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the amount of the original solution
      N_02:
      - the percentage of ordinary solution in the first solution
      N_03:
      - the percentage of ordinary bleachlled content in the tank
      X_00:
      - the amount of the bleachlled content
      X_01:
      - the amount of the drained solution
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the total number of gallons of the mixed solution
      - the amount of the original solution
      - the total amount of solution
      N_02:
      - the concentration of household bleach
      - the concentration of the original solution
      - the concentration of 2 % solution
      N_03:
      - the concentration of the mixed bleach
      - the concentration of the final solution
      - the concentration of 5 % solution
      X_00:
      - the number of gallons of bleach added to the mixture
      - the amount of the bleach to be replaced
      - the amount of pure bleach that replaces 2 % solution
      X_01:
      - the number of gallons of household bleach in the mixture
      - the amount of the solution remained
      - the amount of 2 % solution that is not drained
  info:
    answers:
    - b: '3.06122448979592'
      r: '96.9387755102041'
    item_id: 604cc853117d71c492a62e19
    numbers:
      N_00: '100'
      N_01: '1'
      N_02: '2'
      N_03: '5'
    split: null
    variables:
    - b
    - r
  text:
    numbers:
      shape:
      - 102
      target: __ __ __ __ __ __ __  0 __ __  1 __ __  2 __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __  3 __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __
    raw: 'the ste ##ril ##ization tank contains 100 gal of a solution of 2 % ordinary
      household b ##lea ##ch mixed with pure di ##sti ##lled water . new research
      indicates that the concentration of b ##lea ##ch should be 5 % for complete
      ste ##ril ##ization . how much of the solution should be drained and replaced
      with b ##lea ##ch to increase the b ##lea ##ch content to the recommended level
      ?'
    snippets:
      shape:
      - 4
      - 7
      target:
      - '##ization tank contains 100 gal of a'
      - 100 gal of a solution of 2
      - a solution of 2 % ordinary household
      - '##ch should be 5 % for complete'
    tokens:
      shape:
      - 102
      target: '[CLS] the ste ##ril ##ization tank contains 100 gal of a solution of
        2 % ordinary household b ##lea ##ch mixed with pure di ##sti ##lled water
        . new research indicates that the concentration of b ##lea ##ch should be
        5 % for complete ste ##ril ##ization . how much of the solution should be
        drained and replaced with b ##lea ##ch to increase the b ##lea ##ch content
        to the recommended level ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: *(N_01, R_00) R_03: *(N_02,
      R_01) R_04: +(R_02, R_03) R_05: =(N_04, R_04) R_06: +(R_00, R_01) R_07: =(N_03,
      R_06) R_08: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the cost of a print wrap
      N_02:
      - the cost of a print wrap
      N_03:
      - the total number of rolls
      N_04:
      - the total amount of money sold
      X_00:
      - the number of solid rolls
      X_01:
      - the number of print rolls
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the solid color gift wrap cost per roll
      - the cost of the gift wrap in solid colors per roll
      - the cost of a solid roll
      N_02:
      - the print gift wrap cost per roll
      - the cost of the print gift wrap per roll
      - the cost of a print roll
      N_03:
      - the total number of rolls sold
      - the total number of rolls sold
      - the total number of rolls
      N_04:
      - the total amount of money collected
      - the total amount of money collected
      - the total cost of rolls
      X_00:
      - the amount of gift wrap in solid colors sold per roll
      - the number of the gift wraps in solid colors
      - the number of solid rolls
      X_01:
      - the amount of gift wrap in print sold per roll
      - the number of the print gift wraps
      - the number of print rolls
  info:
    answers:
    - p: '210'
      s: '270'
    item_id: 604cc852117d71c492a62bae
    numbers:
      N_00: '1'
      N_01: '4.00000000000000'
      N_02: '6.00000000000000'
      N_03: '480'
      N_04: '2340.00000000000'
    split: null
    variables:
    - s
    - p
  text:
    numbers:
      shape:
      - 102
      target: __  0 __ __ __ __ __ __ __ __ __ __ __ __ __ __  1  1  1 __ __ __ __
        __ __ __ __ __ __  2  2  2 __ __ __ __ __ __ __ __ __ __ __  3 __ __ __ __
        __ __ __ __ __ __  4  4  4  4  4 __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __
    raw: a high school sold gift wrap . the gift wrap in solid colors sold for 4 .
      00 dollars per roll and the print gift wrap sold for 6 . 00 dollars per roll
      . the total number of rolls sold was 480 rolls , and the total amount of money
      collected was 2 , 340 . 00 dollars . how many solid rolls were sold ? how many
      print rolls were sold ?
    snippets:
      shape:
      - 5
      - 7
      target:
      - a high school sold
      - colors sold for 4 . 00 dollars
      - wrap sold for 6 . 00 dollars
      - rolls sold was 480 rolls , and
      - money collected was 2 , 340 .
    tokens:
      shape:
      - 102
      target: '[CLS] a high school sold gift wrap . the gift wrap in solid colors
        sold for 4 . 00 dollars per roll and the print gift wrap sold for 6 . 00 dollars
        per roll . the total number of rolls sold was 480 rolls , and the total amount
        of money collected was 2 , 340 . 00 dollars . how many solid rolls were sold
        ? how many print rolls were sold ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(R_00, R_01) R_03: =(N_02,
      R_02) R_04: *(N_04, R_00) R_05: *(N_05, R_01) R_06: +(R_04, R_05) R_07: =(N_06,
      R_06) R_08: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of wheels that could be replaced
      N_02:
      - the number of vehicles replaced
      N_04:
      - the number of wheels of the cars
      N_05:
      - the number of wheels of the bridge with the bridge
      N_06:
      - the total number of tires
      X_00:
      - the number of cars replaced to the bridge
      X_01:
      - the number of trucks replaced
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the number of vehicles
      - the total number of vehicles
      - the number of total vehicles
      N_04:
      - the number of wheels of a car
      - the number of cars wheels
      - the number of wheels of one car
      N_05:
      - the number of wheels of a truck
      - the number of truck wheels
      - the number of wheels of one truck
      N_06:
      - the total number of tires
      - the total number of wheels
      - the number of total wheels of the vehicles
      X_00:
      - the number of cars
      - the number of cars
      - the number of cars
      X_01:
      - the number of trucks
      - the number of trucks
      - the number of trucks
  info:
    answers:
    - c: '22'
      t: '10'
    item_id: 604cc852117d71c492a62be3
    numbers:
      N_00: '1'
      N_01: '4'
      N_02: '32'
      N_03: '1'
      N_04: '4'
      N_05: '6'
      N_06: '148'
    split: null
    variables:
    - c
    - t
  text:
    numbers:
      shape:
      - 102
      target: __ __  0  1 __ __ __ __ __  2 __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __  3 __ __ __ __ __ __ __ __  4 __ __ __ __  5 __ __ __ __ __ __
        __ __ __ __ __ __ __ __  6 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __
    raw: 'during a 4 th of july weekend , 32 vehicles became trapped on the sunshine
      sky ##way bridge while it was being rep ##ave ##d . a recent city ordinance
      decreed that only cars with 4 wheels and trucks with six wheels could be on
      the bridge at any given time . if there were 148 tires that needed to be replaced
      due to damage , how many cars and trucks were involved in the incident ?'
    snippets:
      shape:
      - 7
      - 7
      target:
      - during a 4 th of
      - during a 4 th of july
      - july weekend , 32 vehicles became trapped
      - '##ave ##d . a recent city ordinance'
      - only cars with 4 wheels and trucks
      - and trucks with six wheels could be
      - if there were 148 tires that needed
    tokens:
      shape:
      - 102
      target: '[CLS] during a 4 th of july weekend , 32 vehicles became trapped on
        the sunshine sky ##way bridge while it was being rep ##ave ##d . a recent
        city ordinance decreed that only cars with 4 wheels and trucks with six wheels
        could be on the bridge at any given time . if there were 148 tires that needed
        to be replaced due to damage , how many cars and trucks were involved in the
        incident ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: *(N_00, R_00) R_03: *(N_02,
      R_01) R_04: +(R_02, R_03) R_05: =(N_05, R_04) R_06: *(N_06, R_00) R_07: *(N_08,
      R_01) R_08: +(R_06, R_07) R_09: =(N_11, R_08) R_10: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of milligram glasses in the second case
      N_01:
      - the number of milligrams of apple juice
      N_02:
      - the number of milligrams of orange juice in the second glass
      N_03:
      - the number of milligram glasses in the second glass
      N_05:
      - the total number of milligrams of apple juice
      N_06:
      - the number of milligrams of orange juice in the second glass
      N_07:
      - the number of milligrams of apple juice
      N_08:
      - the number of milligrams of orange juice in the second glass
      N_09:
      - the number of milligram glasses in the second glass
      N_11:
      - the total number of milligram glasses
      N_13:
      - the number of milligram glasses in the second case
      X_00:
      - the number of milligrams of apple juice in the first glass
      X_01:
      - the number of milligram glasses
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of eight - ounce glasses of apple juice in the first case
      - the number of apple juice in the first case
      - the number of apple juices in the first case
      N_02:
      - the number of eight - ounce glasses of orange juice in the first case
      - the number of orange juice in the first case
      - the number of orange juices in the first case
      N_05:
      - the total amount of vitamin c in the first case
      - the milligrams of vitamin c in one apple juice and one orange juice in the
        first case
      - the total amount of vitamin c in one apple juice and one orange juice
      N_06:
      - the number of eight - ounce glasses of apple juice in the second case
      - the number of apple juice in the second case
      - the number of apple juices in the second case
      N_08:
      - the number of eight - ounce glasses of orange juice in the second case
      - the number of orange juice in the second case
      - the number of orange juices in the second case
      N_11:
      - the total amount of vitamin c in the second case
      - the milligrams of vitamin c in two apple juice and three orange juice in the
        second case
      - the total amount of vitamin c in the second case
      X_00:
      - the amount of vitamin c in one eight - ounce glass of apple juice
      - the milligrams of vitamin c in apple juice
      - the amount of vitamin c in one apple juice
      X_01:
      - the amount of vitamin c in one eight - ounce glass of orange juice
      - the milligrams of vitamin c in orange juice
      - the amount of vitamin c in one orange juice
  info:
    answers:
    - a: '103'
      o: '82'
    item_id: 604cc853117d71c492a630ca
    numbers:
      N_00: '1'
      N_01: '8'
      N_02: '1'
      N_03: '8'
      N_04: '1'
      N_05: '185'
      N_06: '2'
      N_07: '8'
      N_08: '3'
      N_09: '8'
      N_10: '1'
      N_11: '452'
      N_12: '1'
      N_13: '8'
    split: null
    variables:
    - a
    - o
  text:
    numbers:
      shape:
      - 102
      target: __  0  1  1  1 __ __ __ __ __  2  3  3  3 __ __ __ __ __  4 __ __  5
        __ __ __ __ __ __ __ __  6  7  7  7 __ __ __ __ __  8  9  9  9 __ __ __ __
        __ 10 __ __ 11 11 __ __ __ __ __ __ __ __ __ __ __ __ __ __ 12 13 13 13 __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __
    raw: 'one eight - ounce glass of apple juice and one eight - ounce glass of orange
      juice contain a total of 185 mill ##ig ##ram ##s of vitamin c . two eight -
      ounce glasses of apple juice and three eight - ounce glasses of orange juice
      contain a total of 45 ##2 mill ##ig ##ram ##s of vitamin c . how much vitamin
      c is in an eight - ounce glass of each type of juice ?'
    snippets:
      shape:
      - 14
      - 7
      target:
      - one eight - ounce
      - one eight - ounce glass
      - apple juice and one eight - ounce
      - juice and one eight - ounce glass
      - orange juice contain a total of 185
      - 'a total of 185 mill ##ig ##ram'
      - vitamin c . two eight - ounce
      - c . two eight - ounce glasses
      - apple juice and three eight - ounce
      - juice and three eight - ounce glasses
      - orange juice contain a total of 45
      - 'a total of 45 ##2 mill ##ig'
      - c is in an eight - ounce
      - is in an eight - ounce glass
    tokens:
      shape:
      - 102
      target: '[CLS] one eight - ounce glass of apple juice and one eight - ounce
        glass of orange juice contain a total of 185 mill ##ig ##ram ##s of vitamin
        c . two eight - ounce glasses of apple juice and three eight - ounce glasses
        of orange juice contain a total of 45 ##2 mill ##ig ##ram ##s of vitamin c
        . how much vitamin c is in an eight - ounce glass of each type of juice ?
        [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(R_00, R_01) R_03: =(N_02,
      R_02) R_04: /(N_05, 100) R_05: *(R_00, R_04) R_06: /(N_06, 100) R_07: *(R_01,
      R_06) R_08: +(R_05, R_07) R_09: /(N_04, 100) R_10: *(N_02, R_09) R_11: =(R_08,
      R_10) R_12: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the amount of the mixed solution
      N_04:
      - the concentration of the mixed kind of solution
      N_05:
      - the concentration of the first kind of solution
      N_06:
      - the concentration of the second kind of acid solution
      N_07:
      - the concentration of the other solution
      N_10:
      - the concentration of the mixed solution
      X_00:
      - the amount of the first kind of solution
      X_01:
      - the amount of the other solution
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the amount of the mixture of two solutions
      - the total weight of the mixed solution of the first solution and the second
        solution
      - the amount of the mixed solution
      N_04:
      - the percentage of acid in the mixture
      - the total percentage of the acid in the mixed solution of the first solution
        and the second solution
      - the concentration of the mixed solution
      N_05:
      - the percentage of acid in the first solution
      - the total percentage of the acid in the first solution
      - the concentration of one type of acid solution
      N_06:
      - the percentage of acid in the second solution
      - the total percentage of the acid in the second solution
      - the concentration of the other type of acid solution
      N_07:
      - the percentage of acid in the mixture
      - the total percentage of the acid in the mixed solution of the first solution
        and the second solution
      - the concentration of the mixed solution
      N_10:
      - the percentage of acid in the mixture
      - the total percentage of the acid in the mixed solution of the first solution
        and the second solution
      - the concentration of the mixed solution
      X_00:
      - the amount of the first solution
      - the weight of the first solution
      - the amount of one type of the acid solution
      X_01:
      - the amount of the second solution
      - the weight of the second solution
      - the amount of the other type of the acid solution
  info:
    answers:
    - s1: '12'
      s2: '18'
    item_id: 604cc852117d71c492a62bb3
    numbers:
      N_00: '1'
      N_01: '1'
      N_02: '30'
      N_03: '1'
      N_04: '40'
      N_05: '25'
      N_06: '50'
      N_07: '40'
      N_08: '2'
      N_09: '1'
      N_10: '40'
    split: null
    variables:
    - s1
    - s2
  text:
    numbers:
      shape:
      - 102
      target: __  0 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __  1 __ __ __ __ __
        __ __ __ __ __ __ __  2 __ __ __  3  4 __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __  5 __ __ __ __ __  6 __ __ __ __ __ __ __ __  7 __ __ __ __ __ __
        __ __ __ __ __ __  8 __ __ __ __ __ __ __  9 10 __ __ __ __ __ __ __ __ __
        __ __ __ __
    raw: 'an em ##bos ##sing shop etc ##hes metal with acid solutions . the owner
      is discussing a certain job with the job supervisor , and they decide to use
      30 ounce ##s of a 40 % solution . upon checking the acid solution supplies ,
      the supervisor has found some 25 % acid solution and some 50 % acid solution
      , but there is no 40 % acid solution . the owner explains to the supervisor
      how the two existing solutions can be mixed to obtain a 40 % acid solution .
      how much of each solution is needed ?'
    snippets:
      shape:
      - 11
      - 7
      target:
      - 'an em ##bos ##sing'
      - owner is discussing a certain job with
      - 'decide to use 30 ounce ##s of'
      - 'ounce ##s of a 40 % solution'
      - '##s of a 40 % solution .'
      - has found some 25 % acid solution
      - solution and some 50 % acid solution
      - there is no 40 % acid solution
      - supervisor how the two existing solutions can
      - mixed to obtain a 40 % acid
      - to obtain a 40 % acid solution
    tokens:
      shape:
      - 102
      target: '[CLS] an em ##bos ##sing shop etc ##hes metal with acid solutions .
        the owner is discussing a certain job with the job supervisor , and they decide
        to use 30 ounce ##s of a 40 % solution . upon checking the acid solution supplies
        , the supervisor has found some 25 % acid solution and some 50 % acid solution
        , but there is no 40 % acid solution . the owner explains to the supervisor
        how the two existing solutions can be mixed to obtain a 40 % acid solution
        . how much of each solution is needed ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_01, R_00) R_02: +(N_00, R_01) R_03: =(N_03,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the constant that is added to the number
      N_01:
      - a number in the phrase " twice a number "
      N_03:
      - the sum of 38 and the number
      X_00:
      - the unknown number
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - a number in the phrase " the sum of 38 and twice a number "
      - the value to be added to a number
      - the value of 124 minuses twice the number
      N_01:
      - a number in the phrase " twice a number "
      - the value of the coefficient of the number
      - a number in the phrase " twice "
      N_03:
      - the sum of 38 and twice a number
      - the sum of 38 and twice a number
      - the sum of 38 and twice the number
      X_00:
      - the number we want to find
      - the value of a number
      - the value of the number
  info:
    answers:
    - n: '43'
    item_id: 604cc853117d71c492a62caf
    numbers:
      N_00: '38'
      N_01: '2'
      N_02: '1'
      N_03: '124'
    split: null
    variables:
    - n
  text:
    numbers:
      shape:
      - 25
      target: __ __ __ __  0 __  1  2 __ __  3 __ __ __ __ __ __ __ __ __ __ __ __
        __ __
    raw: the sum of 38 and twice a number is 124 . find the number .
    snippets:
      shape:
      - 4
      - 7
      target:
      - the sum of 38 and twice a
      - of 38 and twice a number is
      - 38 and twice a number is 124
      - a number is 124 . find the
    tokens:
      shape:
      - 25
      target: '[CLS] the sum of 38 and twice a number is 124 . find the number . [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_00, R_00) R_02: -(R_01, N_02) R_03: =(N_03,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - a number in the phrase " twice a number "
      N_02:
      - a number in the phrase " five is 89 "
      N_03:
      - the value of twice the number minus five
      X_00:
      - the value of the number
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the multiplier of the number
      - the coefficient of the number
      - a number in the phrase " twice a number "
      N_02:
      - another number that is subtracted from 2 times the number
      - the value of the subtracted number from twice a number
      - the number that is subtracted from twice the number
      N_03:
      - the value of 2 times the number minus 5
      - the difference of twice a number and five
      - the value of twice the number minus five
      X_00:
      - the value of the number
      - the value of the number
      - the value of the number
  info:
    answers:
    - n: '47'
    item_id: 604cc853117d71c492a62e46
    numbers:
      N_00: '2'
      N_01: '1'
      N_02: '5'
      N_03: '89'
    split: null
    variables:
    - n
  text:
    numbers:
      shape:
      - 25
      target: __ __ __ __  0  1 __ __  2 __  3 __ __ __ __ __ __ __ __ __ __ __ __
        __ __
    raw: the difference of twice a number and five is 89 . find the number .
    snippets:
      shape:
      - 4
      - 7
      target:
      - the difference of twice a number and
      - difference of twice a number and five
      - a number and five is 89 .
      - and five is 89 . find the
    tokens:
      shape:
      - 25
      target: '[CLS] the difference of twice a number and five is 89 . find the number
        . [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(R_00, R_01) R_03: =(N_01,
      R_02) R_04: -(R_00, R_01) R_05: =(N_02, R_04) R_06: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the sum of the 2 numbers
      N_02:
      - the value of the first number minus the second number
      X_00:
      - the first number
      X_01:
      - the second number
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the sum of the two numbers
      - the sum of 2 numbers
      - the sum of two numbers
      N_02:
      - the value of the larger number minus the smaller number
      - the value of one number minus the other number
      - the value of the larger number minus the smaller number
      X_00:
      - the value of the larger number
      - the value of one number
      - the value of the larger number
      X_01:
      - the value of the smaller number
      - the value of the other number
      - the value of the smaller number
  info:
    answers:
    - n1: '33'
      n2: '28'
    item_id: 604cc853117d71c492a62f60
    numbers:
      N_00: '2'
      N_01: '61'
      N_02: '5'
    split: null
    variables:
    - n1
    - n2
  text:
    numbers:
      shape:
      - 25
      target: __ __ __ __  0 __ __  1 __ __ __ __  2 __ __ __ __ __ __ __ __ __ __
        __ __
    raw: the sum of 2 numbers is 61 . the numbers are 5 apart . what are they ?
    snippets:
      shape:
      - 3
      - 7
      target:
      - the sum of 2 numbers is 61
      - 2 numbers is 61 . the numbers
      - the numbers are 5 apart . what
    tokens:
      shape:
      - 25
      target: '[CLS] the sum of 2 numbers is 61 . the numbers are 5 apart . what are
        they ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: -(R_00, R_01) R_03: =(N_01,
      R_02) R_04: +(R_00, R_01) R_05: =(N_02, R_04) R_06: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the value of the larger number minus the smaller number
      N_02:
      - the sum of the two numbers
      X_00:
      - the larger number
      X_01:
      - the smaller number
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the value of the larger number minus the smaller number
      - the value of the larger number minus smaller number
      - the value of the larger number minus the smaller number
      N_02:
      - the sum of the two numbers
      - the sum of the large number and smaller number
      - the sum of the larger number and the smaller number
      X_00:
      - the larger number
      - the value of the larger number
      - the value of the larger number
      X_01:
      - the smaller number
      - the value of the smaller number
      - the value of the smaller number
  info:
    answers:
    - l: '22'
      s: '12'
    item_id: 604cc853117d71c492a62c63
    numbers:
      N_00: '1'
      N_01: '10'
      N_02: '34'
    split: null
    variables:
    - l
    - s
  text:
    numbers:
      shape:
      - 25
      target: __  0 __ __ __ __  1 __ __ __ __ __  2 __ __ __ __ __ __ __ __ __ __
        __ __
    raw: one number exceeds another by 10 , and their sum is 34 . find the larger
      number .
    snippets:
      shape:
      - 3
      - 7
      target:
      - one number exceeds another
      - exceeds another by 10 , and their
      - their sum is 34 . find the
    tokens:
      shape:
      - 25
      target: '[CLS] one number exceeds another by 10 , and their sum is 34 . find
        the larger number . [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: -(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of peanuts ralph starts with
      N_01:
      - the number of peanuts ralph lost
      X_00:
      - the number of peanuts ralph has now
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the starting number of peanuts
      - the number of peanuts ralph started with
      - the number of peanuts that ralph starts with
      N_01:
      - the number of peanuts lost
      - the number of peanuts ralph lost
      - the number of peanuts that ralph loses
      X_00:
      - the number of peanuts left
      - the number of the rest of the peanuts ralph has
      - the number of peanuts that ralph ends with
  info:
    answers:
    - r: '15'
    item_id: 60f9186c90be09b72239f159
    numbers:
      N_00: '74'
      N_01: '59'
    split: null
    variables:
    - r
  text:
    numbers:
      shape:
      - 25
      target: __ __ __ __  0 __ __ __ __  1 __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __
    raw: ralph starts with 74 peanuts . he loses 59 . how many peanuts does ralph
      end with ?
    snippets:
      shape:
      - 2
      - 7
      target:
      - ralph starts with 74 peanuts . he
      - . he loses 59 . how many
    tokens:
      shape:
      - 25
      target: '[CLS] ralph starts with 74 peanuts . he loses 59 . how many peanuts
        does ralph end with ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(R_00, R_01) R_03: =(N_00,
      R_02) R_04: *(N_01, R_01) R_05: =(R_00, R_04) R_06: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the sum of the number of children and the number of children
      N_01:
      - the ratio of the number of children to the number of adults
      X_00:
      - the number of adults
      X_01:
      - the number of children
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the total number of children and adults
      - the total number of people
      - the number of children and adults
      N_01:
      - the ratio of children to adults
      - a number in the phrase " twice as many "
      - the ratio of the number of children to adults
      X_00:
      - the number of children
      - the number of children
      - the number of children
      X_01:
      - the number of adults
      - the number of adults
      - the number of adults
  info:
    answers:
    - a: '14'
      c: '28'
    item_id: 604cc853117d71c492a62c8b
    numbers:
      N_00: '42'
      N_01: '2'
    split: null
    variables:
    - c
    - a
  text:
    numbers:
      shape:
      - 25
      target: __ __ __  0 __ __ __ __  1 __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __
    raw: there were 42 people . there were twice as many children as adults . how
      many children attended ?
    snippets:
      shape:
      - 2
      - 7
      target:
      - there were 42 people . there
      - . there were twice as many children
    tokens:
      shape:
      - 25
      target: '[CLS] there were 42 people . there were twice as many children as adults
        . how many children attended ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(R_00, R_01) R_03: =(N_01,
      R_02) R_04: *(N_04, R_01) R_05: -(R_00, R_04) R_06: =(N_03, R_05) R_07: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the sum of the two numbers
      N_03:
      - the value of one number minus twice the other number
      N_04:
      - the coefficient of the other number
      X_00:
      - the value of the number
      X_01:
      - the value of the other number
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the sum of the first number and the second number
      - the sum of two numbers
      - the sum of the two numbers
      N_03:
      - the value of the first number minus 2 times the second number
      - the value of the first number minus 2 times the second number
      - the value of one number minus twice the other number
      N_04:
      - the multiplier of the second number
      - a number in the phrase " twice the other number "
      - a number in the phrase " twice the other number "
      X_00:
      - the value of the first number
      - the first number
      - the value of one number
      X_01:
      - the value of the second number
      - the second number
      - the value of the other number
  info:
    answers:
    - n1: '45.3333333333333'
      n2: '14.6666666666667'
    item_id: 604cc853117d71c492a62f6b
    numbers:
      N_00: '2'
      N_01: '60'
      N_02: '1'
      N_03: '16'
      N_04: '2'
    split: null
    variables:
    - n1
    - n2
  text:
    numbers:
      shape:
      - 25
      target: __ __ __ __  0 __ __  1 __  2 __ __  3 __ __  4 __ __ __ __ __ __ __
        __ __
    raw: the sum of two numbers is 60 . one number is 16 more than twice the other
      number .
    snippets:
      shape:
      - 5
      - 7
      target:
      - the sum of two numbers is 60
      - two numbers is 60 . one number
      - is 60 . one number is 16
      - one number is 16 more than twice
      - 16 more than twice the other number
    tokens:
      shape:
      - 25
      target: '[CLS] the sum of two numbers is 60 . one number is 16 more than twice
        the other number . [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, R_00) R_02: =(N_01, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of apples kelly had
      N_01:
      - the number of apples kelly had
      X_00:
      - the number of apples kelly needs to pick
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of apples
      - number of apples kelly had
      - the number of apples kelly has
      N_01:
      - the needed amount of apples
      - number kelly needs to have altogether
      - the total number of apples
      X_00:
      - the required number of apples to be picked
      - number of apples she needs to pick
      - the number of apples to add
  info:
    answers:
    - p: '49'
    item_id: 60f9186c90be09b72239edd7
    numbers:
      N_00: '56'
      N_01: '105'
    split: null
    variables:
    - p
  text:
    numbers:
      shape:
      - 25
      target: __ __ __  0 __ __ __ __ __ __ __ __ __ __ __ __ __  1 __ __ __ __ __
        __ __
    raw: kelly had 56 apples . how many more apples does kelly need to pick to have
      105 apples altogether ?
    snippets:
      shape:
      - 2
      - 7
      target:
      - kelly had 56 apples . how
      - pick to have 105 apples altogether ?
    tokens:
      shape:
      - 25
      target: '[CLS] kelly had 56 apples . how many more apples does kelly need to
        pick to have 105 apples altogether ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: -(R_00, R_01) R_03: =(N_00,
      R_02) R_04: +(R_00, R_01) R_05: =(N_01, R_04) R_06: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the value of ben's age minus dan's age
      N_01:
      - the sum of their ages
      X_00:
      - the age of ben
      X_01:
      - the age of dan
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the value of the age of dan minus the age of ben
      - the value of the age of dan minus the age of ben
      - the value of the age of dan minus that of ben
      N_01:
      - the sum of their ages
      - the sum of their ages
      - the sum of ages of dan and ben
      X_00:
      - the number of age of dan
      - the age of dan
      - the age of dan
      X_01:
      - the number of age of ben
      - the age of ben
      - the age of ben
  info:
    answers:
    - b: '25'
      d: '28'
    item_id: 604cc853117d71c492a62df6
    numbers:
      N_00: '3'
      N_01: '53'
    split: null
    variables:
    - d
    - b
  text:
    numbers:
      shape:
      - 25
      target: __ __ __  0 __ __ __ __ __ __ __ __ __ __ __  1 __ __ __ __ __ __ __
        __ __
    raw: ben is 3 years younger than dan . the sum of their ages is 53 . how old is
      each ?
    snippets:
      shape:
      - 2
      - 7
      target:
      - ben is 3 years younger than
      - their ages is 53 . how old
    tokens:
      shape:
      - 25
      target: '[CLS] ben is 3 years younger than dan . the sum of their ages is 53
        . how old is each ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of apples brenda has
      N_01:
      - the number of apples that brenda gets from willie
      X_00:
      - the total number of apples that brenda has in all
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of apples
      - the number of apples brenda has
      - the number of apples that brenda has
      N_01:
      - the number of apples added
      - the number of apples brenda gets from willie
      - the number of apples that brenda gets from willie
      X_00:
      - the number of apples in total
      - the number of apples brenda has in all now
      - the total number of apples that brenda has
  info:
    answers:
    - b: '71'
    item_id: 60f9186c90be09b72239f056
    numbers:
      N_00: '34'
      N_01: '37'
    split: null
    variables:
    - b
  text:
    numbers:
      shape:
      - 25
      target: __ __ __  0 __ __ __ __  1 __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __
    raw: brenda has 34 apples . she gets 37 more from willie . how many apples does
      brenda have in all ?
    snippets:
      shape:
      - 2
      - 7
      target:
      - brenda has 34 apples . she
      - . she gets 37 more from willie
    tokens:
      shape:
      - 25
      target: '[CLS] brenda has 34 apples . she gets 37 more from willie . how many
        apples does brenda have in all ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: -(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the initial number of blocks
      N_01:
      - the number of blocks eaten by a hippopotamus
      X_00:
      - the number of blocks left
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of blocks sean has
      - number of blocks sean has
      - the number of blocks that sean has
      N_01:
      - the number of blocks eaten by a hippopotamus
      - number of blocks eaten by a hippo
      - the number of blocks that are eaten
      X_00:
      - the number of blocks left
      - the number of blocks left
      - the number of blocks sean will have
  info:
    answers:
    - b: '26'
    item_id: 60f9186c90be09b72239ed7d
    numbers:
      N_00: '55'
      N_01: '29'
      N_02: '1'
    split: null
    variables:
    - b
  text:
    numbers:
      shape:
      - 25
      target: __ __ __  0 __ __  1 __ __ __  2 __ __ __ __ __ __ __ __ __ __ __ __
        __ __
    raw: 'sean has 55 blocks . 29 are eaten by a hip ##pop ##ota ##mus . how many
      blocks will sean have ?'
    snippets:
      shape:
      - 3
      - 7
      target:
      - sean has 55 blocks . 29
      - 55 blocks . 29 are eaten by
      - 'are eaten by a hip ##pop ##ota'
    tokens:
      shape:
      - 25
      target: '[CLS] sean has 55 blocks . 29 are eaten by a hip ##pop ##ota ##mus
        . how many blocks will sean have ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of candies in each child
      N_01:
      - the number of children
      X_00:
      - the total number of candies
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of candies that each child has
      - the number of candies each child has.
      - the number of candies each child has
      N_01:
      - the number of children
      - the number of children
      - the number of children
      X_00:
      - the whole number of candies children have
      - the total number of candies
      - the total number of candies
  info:
    answers:
    - p: '18'
    item_id: 60f9186c90be09b72239ea59
    numbers:
      N_00: '2'
      N_01: '9'
    split: null
    variables:
    - p
  text:
    numbers:
      shape:
      - 25
      target: __ __ __ __  0 __ __ __ __ __ __  1 __ __ __ __ __ __ __ __ __ __ __
        __ __
    raw: 'each child has 2 candi ##es . if there are 9 children , how many candi ##es
      are there in total ?'
    snippets:
      shape:
      - 2
      - 7
      target:
      - 'each child has 2 candi ##es .'
      - if there are 9 children , how
    tokens:
      shape:
      - 25
      target: '[CLS] each child has 2 candi ##es . if there are 9 children , how many
        candi ##es are there in total ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(7, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of pies sold every day
      X_00:
      - the number of pies sold
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of pies sold each day
      - the number of pies the restaurant sold every day
      - the number of pies sold per day
      X_00:
      - the total number of pies sold in a week
      - the number of pies the restaurant sold for a week
      - the total number of pies sold during the week
  info:
    answers:
    - p: '56'
    item_id: 60f9186c90be09b72239f079
    numbers:
      N_00: '1'
      N_01: '8'
      N_02: '1'
    split: null
    variables:
    - p
  text:
    numbers:
      shape:
      - 25
      target: __  0 __ __  1 __ __ __ __ __  2 __ __ __ __ __ __ __ __ __ __ __ __
        __ __
    raw: 'a restaurant sold 8 pie ##s every day for a week . how many pie ##s were
      sold during the week ?'
    snippets:
      shape:
      - 3
      - 7
      target:
      - a restaurant sold 8
      - 'a restaurant sold 8 pie ##s every'
      - every day for a week . how
    tokens:
      shape:
      - 25
      target: '[CLS] a restaurant sold 8 pie ##s every day for a week . how many pie
        ##s were sold during the week ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of oranges each child has
      N_01:
      - the number of children
      X_00:
      - the total number of oranges
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of oranges that each child has
      - the number of oranges each child has.
      - the number of oranges held by each child
      N_01:
      - the number of children
      - the number of children
      - the number of children
      X_00:
      - the whole number of oranges children have
      - the total number of oranges
      - the number of oranges in total
  info:
    answers:
    - p: '12'
    item_id: 60f9186c90be09b72239eaba
    numbers:
      N_00: '3'
      N_01: '4'
    split: null
    variables:
    - p
  text:
    numbers:
      shape:
      - 25
      target: __ __ __ __  0 __ __ __ __ __ __  1 __ __ __ __ __ __ __ __ __ __ __
        __ __
    raw: 'each child has 3 orange ##s . if there are 4 children , how many orange
      ##s are there in total ?'
    snippets:
      shape:
      - 2
      - 7
      target:
      - 'each child has 3 orange ##s .'
      - if there are 4 children , how
    tokens:
      shape:
      - 25
      target: '[CLS] each child has 3 orange ##s . if there are 4 children , how many
        orange ##s are there in total ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: -(R_00, N_00) R_02: =(N_01, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of marbles connie has
      N_01:
      - the value of the number of marbles juan has minus the number of marbles connie
        has
      X_00:
      - the number of marbles juan has
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of connie's marbles
      - the number of marbles that connie has
      - the number of connie's marbles
      N_01:
      - the value of the number of juan's marbles minus the number of connie's marbles
      - the number of marbles that juan has more than connie
      - the value of the number of juan's marbles minus the number of connie's marbles
      X_00:
      - the number of juan's marbles
      - the number of marbles that juan has
      - the number of juan's marbles
  info:
    answers:
    - j: '64'
    item_id: 60f9186c90be09b72239ee6d
    numbers:
      N_00: '39'
      N_01: '25'
    split: null
    variables:
    - j
  text:
    numbers:
      shape:
      - 25
      target: __ __ __  0 __ __ __ __ __  1 __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __
    raw: 'connie has 39 marble ##s . juan has 25 more marble ##s than connie . how
      many marble ##s does juan have ?'
    snippets:
      shape:
      - 2
      - 7
      target:
      - 'connie has 39 marble ##s .'
      - '. juan has 25 more marble ##s'
    tokens:
      shape:
      - 25
      target: '[CLS] connie has 39 marble ##s . juan has 25 more marble ##s than connie
        . how many marble ##s does juan have ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the initial number of pencils
      N_01:
      - the number of pencils gotten from joyce
      X_00:
      - the total number of pencils
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the initial number of pencils
      - the number of pencils eugene has
      - the number of pencils he has
      N_01:
      - the number of pencils gotten from joyce
      - the number of new pencils from joyce
      - the number of pencils he gets
      X_00:
      - the number of pencils now
      - the number of total pencils
      - the number of pencils he has in all
  info:
    answers:
    - p: '57'
    item_id: 60f9186c90be09b72239ee8f
    numbers:
      N_00: '51'
      N_01: '6'
    split: null
    variables:
    - p
  text:
    numbers:
      shape:
      - 25
      target: __ __ __  0 __ __ __ __ __  1 __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __
    raw: 'eugene has 51 pencil ##s . he gets 6 more from joyce . how many pencil ##s
      does eugene have in all ?'
    snippets:
      shape:
      - 2
      - 7
      target:
      - 'eugene has 51 pencil ##s .'
      - . he gets 6 more from joyce
    tokens:
      shape:
      - 25
      target: '[CLS] eugene has 51 pencil ##s . he gets 6 more from joyce . how many
        pencil ##s does eugene have in all ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: -(N_00, N_02) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of apples craig has
      N_01:
      - the number of apples judy has
      N_02:
      - the number of apples shared
      X_00:
      - the remaining number of apples
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of craig's apples
      - the number of apples
      - the number of craig's apples
      N_02:
      - the number of craig's apples shared with eugene
      - the number of apples given to someone
      - the number of apples craig shares with eugene
      X_00:
      - the number of craig's apples now
      - the number of remaining apples
      - the number of craig's apple in the future
  info:
    answers:
    - r: '13'
    item_id: 60f9186c90be09b72239ef68
    numbers:
      N_00: '20'
      N_01: '11'
      N_02: '7'
    split: null
    variables:
    - r
  text:
    numbers:
      shape:
      - 29
      target: __ __ __  0 __ __ __ __  1 __ __ __ __  2 __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __
    raw: craig has 20 apples . judy has 11 apples . he shares 7 with eugene . how
      many apples will craig have ?
    snippets:
      shape:
      - 3
      - 7
      target:
      - craig has 20 apples . judy
      - . judy has 11 apples . he
      - . he shares 7 with eugene .
    tokens:
      shape:
      - 29
      target: '[CLS] craig has 20 apples . judy has 11 apples . he shares 7 with eugene
        . how many apples will craig have ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: -(R_00, R_01) R_03: =(N_00,
      R_02) R_04: +(R_00, R_01) R_05: =(N_01, R_04) R_06: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the value of the age of bella minus the age of bella
      N_01:
      - the sum of bella's and bella's age
      X_00:
      - the age of bella
      X_01:
      - the age of bella
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the value of brother's age now minus bella's age now
      - the value of bella's brother's age minus bella's age
      - the value of the age of bella's brother minus the age of bella
      N_01:
      - the sum of their ages
      - the sum of the age of bella and bella's brother
      - the sum of their ages
      X_00:
      - brother's age now
      - the age of bella's brother
      - the age of bella's brother
      X_01:
      - bella's age now
      - the age of bella
      - the age of bella
  info:
    answers:
    - b1: '5'
      b2: '14'
    item_id: 604cc853117d71c492a62d78
    numbers:
      N_00: '9'
      N_01: '19'
    split: null
    variables:
    - b2
    - b1
  text:
    numbers:
      shape:
      - 29
      target: __ __ __ __ __ __  0 __ __ __ __ __ __ __ __ __ __  1 __ __ __ __ __
        __ __ __ __ __ __
    raw: bella ' s brother is 9 years older than bella . their ages add up to 19 .
      how old is bella ?
    snippets:
      shape:
      - 2
      - 7
      target:
      - s brother is 9 years older than
      - add up to 19 . how old
    tokens:
      shape:
      - 29
      target: '[CLS] bella '' s brother is 9 years older than bella . their ages add
        up to 19 . how old is bella ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_00, R_00) R_02: +(N_02, R_01) R_03: =(N_03,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - a number in the phrase " the product of 5 and a number "
      N_02:
      - a number which is multiplied by the product
      N_03:
      - the result of the multiplication
      X_00:
      - the value of the number
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - a number in the phrase " the product of 5 and a number "
      - the multiplier of the number
      - the coefficient of a number
      N_02:
      - a number in the phrase " increased by 4 "
      - a number added to the number
      - the increased value
      N_03:
      - the value of 5 times a number plus 4
      - the sum of 5 times the number and 4
      - the value of the product of 5 and a number is increased by 4
      X_00:
      - the unknown number
      - the value of the number
      - the number of the number
  info:
    answers:
    - n: '3'
    item_id: 604cc852117d71c492a62bfc
    numbers:
      N_00: '5'
      N_01: '1'
      N_02: '4'
      N_03: '19'
    split: null
    variables:
    - n
  text:
    numbers:
      shape:
      - 29
      target: __ __ __ __ __  0 __  1 __ __ __ __  2 __ __ __ __  3 __ __ __ __ __
        __ __ __ __ __ __
    raw: if the product of 5 and a number is increased by 4 , the result is 19 . what
      is the number ?
    snippets:
      shape:
      - 4
      - 7
      target:
      - the product of 5 and a number
      - of 5 and a number is increased
      - is increased by 4 , the result
      - the result is 19 . what is
    tokens:
      shape:
      - 29
      target: '[CLS] if the product of 5 and a number is increased by 4 , the result
        is 19 . what is the number ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: -(R_00, N_03) R_02: *(N_02, R_01) R_03: +(N_00,
      R_00) R_04: =(R_02, R_03) R_05: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of years to go
      N_02:
      - the ratio of the age of the boy in four years to the age of a boy in four
        years
      N_03:
      - the years between now and the past
      X_00:
      - the age of a boy now
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of years from now
      - the number of years into the future
      - the years between now and the future
      N_02:
      - the ratio of boy's age after 4 years to boy's age 6 years ago
      - the ratio of the age of the boy in the future to the age of the boy in the
        past
      - the ratio of the future age of the boy to the past age of the boy
      N_03:
      - the number of years passed
      - the number of years into the past
      - the years between past and now
      X_00:
      - the boy's age now
      - the age of the boy in the present
      - the age of the boy
  info:
    answers:
    - b: '16'
    item_id: 604cc853117d71c492a62df7
    numbers:
      N_00: '4'
      N_01: '1'
      N_02: '2'
      N_03: '6'
    split: null
    variables:
    - b
  text:
    numbers:
      shape:
      - 29
      target: __  0 __ __  1 __ __ __  2 __ __ __ __ __  3 __ __ __ __ __ __ __ __
        __ __ __ __ __ __
    raw: four years hence a boy will be twice as old as he was 6 years ago . what
      is his present age ?
    snippets:
      shape:
      - 4
      - 7
      target:
      - four years hence a
      - four years hence a boy will be
      - boy will be twice as old as
      - as he was 6 years ago .
    tokens:
      shape:
      - 29
      target: '[CLS] four years hence a boy will be twice as old as he was 6 years
        ago . what is his present age ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_02, R_00) R_02: =(N_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of students at a school
      N_02:
      - the number of students each classroom holds
      X_00:
      - the number of classrooms needed
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of students at a school
      - the total number of students at a school
      - the number of students at a school
      N_02:
      - the number of students for each classroom capacity
      - the number of students each classroom can hold
      - the maximum number of students for each classroom
      X_00:
      - the ratio of the number of students to classroom capacity
      - the number of classrooms needed at the school
      - the number of classrooms necessary to a school
  info:
    answers:
    - c: '13'
    item_id: 60f9186c90be09b72239ee1e
    numbers:
      N_00: '390'
      N_01: '1'
      N_02: '30'
    split: null
    variables:
    - c
  text:
    numbers:
      shape:
      - 29
      target: __ __ __  0 __ __  1 __ __ __ __ __ __  2 __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __
    raw: there are 390 students at a school . if each classroom holds 30 students
      , how many classrooms are needed at the school ?
    snippets:
      shape:
      - 3
      - 7
      target:
      - there are 390 students at a
      - 390 students at a school . if
      - each classroom holds 30 students , how
    tokens:
      shape:
      - 29
      target: '[CLS] there are 390 students at a school . if each classroom holds
        30 students , how many classrooms are needed at the school ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: /(R_00, 100) R_02: *(N_01, R_01) R_03: =(N_02,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of total students
      N_02:
      - the number of students received in a class
      X_00:
      - the ratio of the number of students to the total students
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the total number of students
      - the total number of students
      - the number of students in a class
      N_02:
      - the number of students graded a
      - the number of students who received a grade of a
      - the number of students who received a grade of a
      X_00:
      - the percentage of students graded a
      - the percentage of the students who received a's
      - the percent of students who received a grade of a
  info:
    answers:
    - p: '32'
    item_id: 60f9186c90be09b72239efe1
    numbers:
      N_00: '1'
      N_01: '25'
      N_02: '8'
      N_03: '1'
      N_04: '1'
    split: null
    variables:
    - p
  text:
    numbers:
      shape:
      - 29
      target: __ __  0 __ __  1 __ __  2 __  3 __ __  4  4 __ __ __ __ __ __ __ __
        __ __ __ __ __ __
    raw: in a class of 25 students , 8 received a grade of a . what percent of the
      students received a ' s ?
    snippets:
      shape:
      - 5
      - 7
      target:
      - in a class of 25
      - a class of 25 students , 8
      - 25 students , 8 received a grade
      - ', 8 received a grade of a'
      - a grade of a . what percent
    tokens:
      shape:
      - 29
      target: '[CLS] in a class of 25 students , 8 received a grade of a . what percent
        of the students received a '' s ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: *(N_00, R_00) R_03: =(R_01,
      R_02) R_04: +(R_00, R_01) R_05: =(N_01, R_04) R_06: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the ratio of the age of jack to the age of jill
      N_01:
      - the sum of the age of jack and the age of jill
      X_00:
      - the age of jill
      X_01:
      - the age of jack
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the ratio of jack's age to jill's age
      - the ratio of the age of jack to the age of jill
      - the ratio of age of jack to the age of jill
      N_01:
      - the sum of their ages
      - the sum of the age of jack and the age of jill
      - the sum of their ages
      X_00:
      - jill's age now
      - the age of jill
      - the age of jill
      X_01:
      - jack's age now
      - the age of jack
      - the age of jack
  info:
    answers:
    - j1: '54'
      j2: '18'
    item_id: 604cc853117d71c492a6309e
    numbers:
      N_00: '3'
      N_01: '72'
    split: null
    variables:
    - j2
    - j1
  text:
    numbers:
      shape:
      - 29
      target: __ __ __  0 __ __ __ __ __ __ __ __ __ __ __ __  1 __ __ __ __ __ __
        __ __ __ __ __ __
    raw: jack is three times as old as jill . the total of their ages is 72 . find
      the age of each person .
    snippets:
      shape:
      - 2
      - 7
      target:
      - jack is three times as old
      - their ages is 72 . find the
    tokens:
      shape:
      - 29
      target: '[CLS] jack is three times as old as jill . the total of their ages
        is 72 . find the age of each person . [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of strawberries paul had
      N_01:
      - the number of strawberries he picked
      X_00:
      - the number of strawberries he had in his basket
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the initial number of strawberries
      - the original number of strawberries in the basket
      - the initial number of strawberries
      N_01:
      - the number of additional strawberries
      - the number of newly picked strawberries
      - the number of strawberries added
      X_00:
      - the total number of strawberries
      - the whole number of strawberries
      - the total number of strawberries now
  info:
    answers:
    - w: '120'
    item_id: 60f9186c90be09b72239f19d
    numbers:
      N_00: '42'
      N_01: '78'
    split: null
    variables:
    - w
  text:
    numbers:
      shape:
      - 29
      target: __ __ __  0 __ __ __ __ __ __ __ __  1 __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __
    raw: 'paul had 42 straw ##berries in his basket . he picked 78 more straw ##berries
      . how many straw ##berries did he have then ?'
    snippets:
      shape:
      - 2
      - 7
      target:
      - 'paul had 42 straw ##berries in'
      - '. he picked 78 more straw ##berries'
    tokens:
      shape:
      - 29
      target: '[CLS] paul had 42 straw ##berries in his basket . he picked 78 more
        straw ##berries . how many straw ##berries did he have then ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: *(N_01, R_01) R_03: -(R_00,
      R_02) R_04: =(N_02, R_03) R_05: +(R_00, R_01) R_06: =(N_03, R_05) R_07: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - a number in the phrase " double another number "
      N_02:
      - the value of one number minus double another number
      N_03:
      - the sum of the two numbers
      X_00:
      - the value of one number
      X_01:
      - the value of another number
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - a number in the phrase " double another number "
      - a number in the phrase " double another number "
      - a number in the phrase " double "
      N_02:
      - the value of the larger number minus double the smaller number
      - the value of the larger number minus twice the smaller number
      - the value of the larger number minus double the smaller number
      N_03:
      - the sum of the two numbers
      - the sum of the two numbers
      - the sum of the two numbers
      X_00:
      - the larger number
      - the value of the larger number
      - the value of the larger number
      X_01:
      - the smaller number
      - the value of the smaller number
      - the value of the smaller number
  info:
    answers:
    - l: '41'
      s: '13'
    item_id: 604cc853117d71c492a62f17
    numbers:
      N_00: '1'
      N_01: '2'
      N_02: '15'
      N_03: '54'
      N_04: '2'
    split: null
    variables:
    - l
    - s
  text:
    numbers:
      shape:
      - 29
      target: __  0 __ __ __ __  1 __ __ __  2 __ __ __ __ __  3 __ __ __ __ __ __  4
        __ __ __ __ __
    raw: one number is greater than double another number by 15 . if their sum is
      54 , find the smaller of the two numbers .
    snippets:
      shape:
      - 5
      - 7
      target:
      - one number is greater
      - is greater than double another number by
      - another number by 15 . if their
      - their sum is 54 , find the
      - smaller of the two numbers .
    tokens:
      shape:
      - 29
      target: '[CLS] one number is greater than double another number by 15 . if their
        sum is 54 , find the smaller of the two numbers . [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_01, R_00) R_02: =(N_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of oranges betty has
      N_01:
      - the number of boxes
      X_00:
      - the number of oranges in each box
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the total number of oranges
      - the number of oranges
      - the number of oranges betty stores in boxes
      N_01:
      - the number of boxes for storing oranges
      - the number of boxes
      - the number of boxes
      X_00:
      - the number of oranges in each box
      - the number of oranges in each box
      - the number of oranges in each box
  info:
    answers:
    - p: '8'
    item_id: 60f9186c90be09b72239ed58
    numbers:
      N_00: '24'
      N_01: '3'
    split: null
    variables:
    - p
  text:
    numbers:
      shape:
      - 29
      target: __ __ __  0 __ __ __ __ __ __ __ __ __  1 __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __
    raw: 'betty has 24 orange ##s stored in boxes . if there are 3 boxes , how many
      orange ##s must go in each box ?'
    snippets:
      shape:
      - 2
      - 7
      target:
      - 'betty has 24 orange ##s stored'
      - if there are 3 boxes , how
    tokens:
      shape:
      - 29
      target: '[CLS] betty has 24 orange ##s stored in boxes . if there are 3 boxes
        , how many orange ##s must go in each box ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_02, R_00) R_02: =(N_01, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of cups of cereal
      N_02:
      - the number of cups of cereal each serving
      X_00:
      - the number of servings in the whole box
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of cups of cereal
      - number of cups of cereal in a box
      - the number of cups of cereal
      N_02:
      - the number of cups of cereal in each serving
      - number of cups in a serving
      - the number of cups of cereal of each serving
      X_00:
      - the number of servings
      - the number of servings in a box
      - the total number of servings
  info:
    answers:
    - s: '9'
    item_id: 60f9186c90be09b72239f1d3
    numbers:
      N_00: '1'
      N_01: '18'
      N_02: '2'
    split: null
    variables:
    - s
  text:
    numbers:
      shape:
      - 29
      target: __  0 __ __ __  1 __ __ __ __ __ __ __  2 __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __
    raw: 'a cereal box holds 18 cups of cereal . each serving is 2 cups . how many
      serving ##s are in the whole box ?'
    snippets:
      shape:
      - 3
      - 7
      target:
      - a cereal box holds
      - cereal box holds 18 cups of cereal
      - each serving is 2 cups . how
    tokens:
      shape:
      - 29
      target: '[CLS] a cereal box holds 18 cups of cereal . each serving is 2 cups
        . how many serving ##s are in the whole box ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_01, R_00) R_02: =(N_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the total number of oranges
      N_01:
      - the number of boxes
      X_00:
      - the number of oranges in each box
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of oranges
      - the number of oranges albert stored in boxes
      - the total number of oranges
      N_01:
      - the number of boxes
      - the number of boxes
      - the total number of boxes
      X_00:
      - the number of oranges in each box
      - the number of oranges in each box
      - the number of oranges that go in one box
  info:
    answers:
    - p: '5'
    item_id: 60f9186c90be09b72239f09e
    numbers:
      N_00: '35'
      N_01: '7'
    split: null
    variables:
    - p
  text:
    numbers:
      shape:
      - 29
      target: __ __ __  0 __ __ __ __ __ __ __ __ __  1 __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __
    raw: 'albert has 35 orange ##s stored in boxes . if there are 7 boxes , how many
      orange ##s must go in each box ?'
    snippets:
      shape:
      - 2
      - 7
      target:
      - 'albert has 35 orange ##s stored'
      - if there are 7 boxes , how
    tokens:
      shape:
      - 29
      target: '[CLS] albert has 35 orange ##s stored in boxes . if there are 7 boxes
        , how many orange ##s must go in each box ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_01, R_00) R_02: =(N_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the total number of bananas
      N_01:
      - the number of groups
      X_00:
      - the number of bananas in each group
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the total number of bananas
      - the number of bananas in diane's banana collection
      - the number of bananas in diane's banana collection
      N_01:
      - the number of groups bananas organized into
      - the number of bananas for each organized group
      - the number of groups of bananas
      X_00:
      - the number of bananas in each group
      - the ratio of bananas to a organized group's number of bananas
      - the number of bananas in each group
  info:
    answers:
    - g: '6'
    item_id: 60f9186c90be09b72239ea17
    numbers:
      N_00: '36'
      N_01: '6'
    split: null
    variables:
    - g
  text:
    numbers:
      shape:
      - 29
      target: __ __ __  0 __ __ __ __ __ __ __ __ __ __ __ __ __ __  1 __ __ __ __
        __ __ __ __ __ __
    raw: there are 36 bananas in diane ' s banana collection . if the bananas are
      organized into 6 groups , how big is each group ?
    snippets:
      shape:
      - 2
      - 7
      target:
      - there are 36 bananas in diane
      - are organized into 6 groups , how
    tokens:
      shape:
      - 29
      target: '[CLS] there are 36 bananas in diane '' s banana collection . if the
        bananas are organized into 6 groups , how big is each group ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of oranges mary picked
      N_01:
      - the number of oranges jason picked
      X_00:
      - the total number of oranges picked
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of oranges picked by mary
      - the number of oranges that mary picked
      - the number of oranges picked by mary
      N_01:
      - the number of oranges picked by jason
      - the number of oranges that jason picked
      - the number of oranges picked by jason
      X_00:
      - the total number of oranges picked
      - the number of oranges that were picked in total
      - the total number of oranges picked by mary and jason
  info:
    answers:
    - o: '227'
    item_id: 60f9186c90be09b72239ed93
    numbers:
      N_00: '122'
      N_01: '105'
    split: null
    variables:
    - o
  text:
    numbers:
      shape:
      - 29
      target: __ __ __  0 __ __ __ __ __ __  1 __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __
    raw: 'mary picked 122 orange ##s , and jason picked 105 orange ##s from the orange
      tree . how many orange ##s were picked in total ?'
    snippets:
      shape:
      - 2
      - 7
      target:
      - 'mary picked 122 orange ##s ,'
      - 'and jason picked 105 orange ##s from'
    tokens:
      shape:
      - 29
      target: '[CLS] mary picked 122 orange ##s , and jason picked 105 orange ##s
        from the orange tree . how many orange ##s were picked in total ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, R_00) R_02: /(R_01, N_02) R_03: =(N_03,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - a number in the phrase " 9 "
      N_02:
      - the value of a certain answer minus 9
      N_03:
      - the value of the final number minus the second number
      X_00:
      - the value of the number
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - a number in the phrase " add 9 "
      - a number in the phrase " add 9 to a certain number "
      - a number added to the number
      N_02:
      - a number in the phrase " by 16 "
      - a number in the phrase " divide the sum by 16 "
      - a number that divides the sum of the number and 9
      N_03:
      - the result of dividing the sum of 9 and the number by 16
      - the sum of 9 and a certain number divided by 16
      - a number in the phrase " 1 "
      X_00:
      - the unknown number
      - the number we want to find
      - the value of the number
  info:
    answers:
    - n: '7'
    item_id: 604cc853117d71c492a62db8
    numbers:
      N_00: '9'
      N_01: '1'
      N_02: '16'
      N_03: '1'
    split: null
    variables:
    - n
  text:
    numbers:
      shape:
      - 29
      target: __ __ __  0 __  1 __ __ __ __ __ __ __  2 __ __ __ __ __ __  3 __ __
        __ __ __ __ __ __
    raw: i add 9 to a certain number and divide the sum by 16 . if my final answer
      is 1 , what is the number ?
    snippets:
      shape:
      - 4
      - 7
      target:
      - i add 9 to a certain
      - add 9 to a certain number and
      - the sum by 16 . if my
      - final answer is 1 , what is
    tokens:
      shape:
      - 29
      target: '[CLS] i add 9 to a certain number and divide the sum by 16 . if my
        final answer is 1 , what is the number ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_02) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of to add to the tree
      N_02:
      - the number of to add to the tree
      X_00:
      - the total number of toucan toucan toucan
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of toucans sitting on a tree limb
      - number of toucans on the tree
      - the number of toucans sitting on a tree limb
      N_02:
      - the number of additional toucan
      - number of toucans who joined them
      - the number of toucans that joins sitting on a tree limb
      X_00:
      - the whole number of toucans
      - the total number of toucans
      - the total number of toucans sitting on a tree limb
  info:
    answers:
    - t: '3'
    item_id: 60f9186c90be09b72239eacc
    numbers:
      N_00: '2'
      N_01: '1'
      N_02: '1'
    split: null
    variables:
    - t
  text:
    numbers:
      shape:
      - 29
      target: __  0 __ __ __ __ __ __  1 __ __ __  2 __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __
    raw: '2 to ##uca ##ns are sitting on a tree limb . 1 more to ##uca ##n joins them
      . how many to ##uca ##ns in all ?'
    snippets:
      shape:
      - 3
      - 7
      target:
      - '2 to ##uca ##ns'
      - are sitting on a tree limb .
      - 'tree limb . 1 more to ##uca'
    tokens:
      shape:
      - 29
      target: '[CLS] 2 to ##uca ##ns are sitting on a tree limb . 1 more to ##uca
        ##n joins them . how many to ##uca ##ns in all ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: -(R_00, R_01) R_03: =(N_01,
      R_02) R_04: *(N_04, R_00) R_05: *(N_02, R_01) R_06: -(R_04, R_05) R_07: =(N_03,
      R_06) R_08: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the value of the smaller number minus the larger number
      N_02:
      - the numerator of the ratio of the larger number to the smaller number
      N_03:
      - the value of 2 times the smaller number minus the larger number
      N_04:
      - the coefficient of the smaller number
      X_00:
      - the value of the smaller number
      X_01:
      - the value of the larger number
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the value of the larger number minus the smaller number
      - the value of the larger number minus the smaller number
      - the value of the larger number minus the smaller number
      N_02:
      - the multiplier of the smaller number
      - a number in the phrase " five times the smaller "
      - a number in the phrase " five times the smaller "
      N_03:
      - the value of 2 times the larger number minus 5 times the smaller number
      - the value of 2 times the larger number minus 5 times the smaller number
      - the value of twice the larger minus five times the smaller
      N_04:
      - the multiplier of the larger number
      - a number in the phrase " twice the larger "
      - a number in the phrase " twice the larger "
      X_00:
      - the value of the larger number
      - the larger number
      - the value of the larger number
      X_01:
      - the value of the smaller number
      - the smaller number
      - the value of the smaller number
  info:
    answers:
    - l: '24'
      s: '8'
    item_id: 604cc853117d71c492a62fcd
    numbers:
      N_00: '2'
      N_01: '16'
      N_02: '5'
      N_03: '8'
      N_04: '2'
    split: null
    variables:
    - l
    - s
  text:
    numbers:
      shape:
      - 33
      target: __ __ __ __  0 __ __  1 __  2 __ __ __ __ __ __ __  3 __ __  4 __ __
        __ __ __ __ __ __ __ __ __ __
    raw: the difference between two numbers is 16 . five times the smaller is the
      same as 8 less than twice the larger . find the numbers .
    snippets:
      shape:
      - 5
      - 7
      target:
      - the difference between two numbers is 16
      - two numbers is 16 . five times
      - is 16 . five times the smaller
      - the same as 8 less than twice
      - 8 less than twice the larger .
    tokens:
      shape:
      - 33
      target: '[CLS] the difference between two numbers is 16 . five times the smaller
        is the same as 8 less than twice the larger . find the numbers . [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of packages
      N_01:
      - the number of packages mom buys
      X_00:
      - the number of white t - shirts
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of white t - shirts in packages
      - the number of white t - shirts per package
      - the number of t - shirts in one package
      N_01:
      - the number of packages bought by mom
      - the number of packages mom bought
      - the number of packages of t - shirts
      X_00:
      - the number of total shirts
      - the total number of white t - shirts
      - the number of t - shirts
  info:
    answers:
    - s: '426'
    item_id: 60f9186c90be09b72239eeb2
    numbers:
      N_00: '6'
      N_01: '71'
    split: null
    variables:
    - s
  text:
    numbers:
      shape:
      - 33
      target: __ __ __ __ __ __ __ __ __ __ __  0 __ __ __ __  1 __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __
    raw: white t - shirts can be purchased in packages of 6 . if mom buys 71 packages
      , how many white t - shirts will mom have ?
    snippets:
      shape:
      - 2
      - 7
      target:
      - in packages of 6 . if mom
      - if mom buys 71 packages , how
    tokens:
      shape:
      - 33
      target: '[CLS] white t - shirts can be purchased in packages of 6 . if mom buys
        71 packages , how many white t - shirts will mom have ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_01, R_00) R_02: =(N_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of books iesha has
      N_01:
      - the number of books about school
      X_00:
      - the number of books about sports
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the total number of books
      - the number of books about school and that of sports
      - the number of books lesha has
      N_01:
      - the number of books about school
      - the number of books about school
      - the number of books about school
      X_00:
      - the number of books about sports
      - the number of books about sports
      - the number of books not about school
  info:
    answers:
    - s: '39'
    item_id: 60f9186c90be09b72239e9d4
    numbers:
      N_00: '58'
      N_01: '19'
    split: null
    variables:
    - s
  text:
    numbers:
      shape:
      - 33
      target: __ __ __ __  0 __ __  1 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __
    raw: 'ie ##sha has 58 books . 19 are about school , and the rest are about sports
      . how many books about sports does ie ##sha have ?'
    snippets:
      shape:
      - 2
      - 7
      target:
      - 'ie ##sha has 58 books . 19'
      - 58 books . 19 are about school
    tokens:
      shape:
      - 33
      target: '[CLS] ie ##sha has 58 books . 19 are about school , and the rest are
        about sports . how many books about sports does ie ##sha have ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: -(R_00, N_00) R_02: *(N_02, R_01) R_03: =(N_03,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the value to subtract from the number in the second case
      N_02:
      - the value to divide in a number minus 6 in the first case
      N_03:
      - the value of the number minus the then
      X_00:
      - the value of the number when the first case the same as the second case
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the subtracting number from a number
      - the number used for subtraction from a number
      - the value subtracted from the number
      N_02:
      - the multiplier of the result of the number minus 6
      - the number of multiples making 6 less than a number equal to 36
      - the value multiplied to the number subtracted by 6
      N_03:
      - the result of multiplying
      - the number as the result of multiplication
      - the value of 4 multiplied by the difference
      X_00:
      - the number in question
      - the original number
      - the value in the phrase " a number "
  info:
    answers:
    - n: '15'
    item_id: 60f9186c90be09b72239f1c1
    numbers:
      N_00: '6'
      N_01: '1'
      N_02: '4'
      N_03: '36'
    split: null
    variables:
    - n
  text:
    numbers:
      shape:
      - 33
      target: __ __ __ __ __ __  0 __  1 __ __ __ __ __ __ __ __  2 __ __ __ __  3
        __ __ __ __ __ __ __ __ __ __
    raw: 'if i sub ##tra ##ct 6 from a number and then multi ##ply the difference
      by 4 , the result is 36 . what is the number ?'
    snippets:
      shape:
      - 4
      - 7
      target:
      - 'sub ##tra ##ct 6 from a number'
      - '##ct 6 from a number and then'
      - the difference by 4 , the result
      - the result is 36 . what is
    tokens:
      shape:
      - 33
      target: '[CLS] if i sub ##tra ##ct 6 from a number and then multi ##ply the
        difference by 4 , the result is 36 . what is the number ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of limes alyssa picked
      N_01:
      - the number of limes mike picked
      X_00:
      - the number of limes picked in all
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of limes picked by alyssa
      - the number of limes alyssa picked
      - the number of limes alyssa picked
      N_01:
      - the number of limes picked by mike
      - the number of limes mike picked
      - the number of limes mike picked
      X_00:
      - the number of limes picked by them in all
      - the number of all picked limes
      - the number of limes picked in all
  info:
    answers:
    - p: '57'
    item_id: 60f9186c90be09b72239f212
    numbers:
      N_00: '25'
      N_01: '32'
      N_02: '12'
    split: null
    variables:
    - p
  text:
    numbers:
      shape:
      - 33
      target: __ __ __  0 __ __ __ __ __ __  1 __ __ __ __ __  2 __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __
    raw: 'alyssa picked 25 lime ##s , and mike picked 32 lime ##s . tom picked 12
      plum ##s . how many lime ##s were picked in all ?'
    snippets:
      shape:
      - 3
      - 7
      target:
      - 'alyssa picked 25 lime ##s ,'
      - 'and mike picked 32 lime ##s .'
      - '. tom picked 12 plum ##s .'
    tokens:
      shape:
      - 33
      target: '[CLS] alyssa picked 25 lime ##s , and mike picked 32 lime ##s . tom
        picked 12 plum ##s . how many lime ##s were picked in all ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: -(N_00, N_02) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the weight of fruit that gordon bought
      N_02:
      - the weight of fruit eaten by gordon
      X_00:
      - the number of pounds of fruit left
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the initial number of pounds of the fruit
      - the weight of fruits gordon bought for a class party in pounds
      - the amounts of pounds of gordon's fruit for a class party
      N_02:
      - the number of pounds of fruit eaten
      - the pound weight of fruits the class ate
      - the amounts of pounds of the fruit eaten by the class students
      X_00:
      - the number of pounds of fruit left
      - the pound weight of remaining fruits
      - the amounts of pounds of the fruit left to gordon
  info:
    answers:
    - l: '1.22000000000000'
    item_id: 60f9186c90be09b72239f042
    numbers:
      N_00: '3.42000000000000'
      N_01: '1'
      N_02: '2.20000000000000'
    split: null
    variables:
    - l
  text:
    numbers:
      shape:
      - 33
      target: __ __ __  0  0  0 __ __ __ __  1 __ __ __ __ __ __  2  2  2 __ __ __
        __ __ __ __ __ __ __ __ __ __
    raw: gordon bought 3 . 42 pounds of fruit for a class party . the class ate 2
      . 2 pounds of fruit . how much fruit is left ?
    snippets:
      shape:
      - 3
      - 7
      target:
      - gordon bought 3 . 42 pounds
      - of fruit for a class party .
      - the class ate 2 . 2 pounds
    tokens:
      shape:
      - 33
      target: '[CLS] gordon bought 3 . 42 pounds of fruit for a class party . the
        class ate 2 . 2 pounds of fruit . how much fruit is left ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: /(N_00, 100) R_03: *(R_00,
      R_02) R_04: /(N_01, 100) R_05: *(R_01, R_04) R_06: +(R_03, R_05) R_07: /(N_03,
      100) R_08: *(N_02, R_07) R_09: =(R_06, R_08) R_10: +(R_00, R_01) R_11: =(N_02,
      R_10) R_12: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the concentration of the first kind of solution
      N_01:
      - the concentration of the second kind of boric acid
      N_02:
      - the amount of the mixed solution
      N_03:
      - the concentration of the mixed solution
      X_00:
      - the amount of the 1 % boric acid solution
      X_01:
      - the amount of the 5 % boric acid solution
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the density of a boric acid solution
      - the concentration of one boric acid solution
      - the concentration of 1 % boric acid solution
      N_01:
      - the density of another boric acid solution
      - the concentration of the other boric acid solution
      - the concentration of 5 % boric acid solution
      N_02:
      - the volume of the 3 % boric acid mixture
      - the amount of the mixed boric acid solution
      - the amount of 3 % boric acid solution
      N_03:
      - the density of the boric acid mixture to make
      - the concentration of the mixed boric acid solution
      - the concentration of 3 % boric acid solution
      X_00:
      - the volume of the 1 % boric acid solution
      - the amount of one solution
      - the amount of 1 % boric acid solution
      X_01:
      - the volume of the 5 % boric acid solution
      - the amount of the other solution
      - the amount of 5 % boric acid solution
  info:
    answers:
    - s1: '15'
      s2: '15'
    item_id: 604cc853117d71c492a62d26
    numbers:
      N_00: '1'
      N_01: '5'
      N_02: '30'
      N_03: '3'
    split: null
    variables:
    - s1
    - s2
  text:
    numbers:
      shape:
      - 33
      target: __ __ __  0 __ __ __ __ __ __  1 __ __ __ __ __ __ __ __ __  2 __ __  3
        __ __ __ __ __ __ __ __ __
    raw: 'how much 1 % bo ##ric acid solution and 5 % bo ##ric acid solution are needed
      to make 30 ml of 3 % bo ##ric acid solution ?'
    snippets:
      shape:
      - 4
      - 7
      target:
      - 'how much 1 % bo ##ric'
      - 'acid solution and 5 % bo ##ric'
      - needed to make 30 ml of 3
      - '30 ml of 3 % bo ##ric'
    tokens:
      shape:
      - 33
      target: '[CLS] how much 1 % bo ##ric acid solution and 5 % bo ##ric acid solution
        are needed to make 30 ml of 3 % bo ##ric acid solution ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: __NEW_VAR(, ) R_03: *(10,
      R_00) R_04: +(R_01, R_03) R_05: =(R_02, R_04) R_06: +(R_00, R_01) R_07: *(N_02,
      R_06) R_08: =(R_02, R_07) R_09: -(R_00, R_01) R_10: =(N_04, R_09) R_11: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the ratio of the number to the sum of its digits to
      N_04:
      - the value of the tens digit minus the units digit
      X_00:
      - the tens digit
      X_01:
      - the units digit
      X_02:
      - the value of the number
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the ratio of the original two - digit number to the sum of its digits
      - the ratio of the original number to the sum of its digits
      - the ratio of the number to the sum of its digits
      N_04:
      - the value of the tens digit minus the units digit
      - the value of the tens digit minus the units digit
      - the value of the tens digit minus the units digit of the number
      X_00:
      - the tens digit
      - the tens digit of the original number
      - the value of tens digit
      X_01:
      - the units digit
      - the units digit of the original number
      - the value of units digit
      X_02:
      - the original number
      - the original number we want to find
      - the value of the original number
  info:
    answers:
    - o: '54'
      t: '5'
      u: '4'
    item_id: 604cc853117d71c492a630d6
    numbers:
      N_00: '1'
      N_01: '2'
      N_02: '6'
      N_03: '10'
      N_04: '1'
    split: null
    variables:
    - t
    - u
    - o
  text:
    numbers:
      shape:
      - 33
      target: __  0  1  1  1 __ __  2 __ __ __ __ __ __ __ __  3 __ __  4 __ __ __
        __ __ __ __ __ __ __ __ __ __
    raw: a two - digit number is 6 times the sum of its digits . the tens digit is
      1 more than the units digit . find the number .
    snippets:
      shape:
      - 5
      - 7
      target:
      - a two - digit
      - a two - digit number
      - digit number is 6 times the sum
      - digits . the tens digit is 1
      - tens digit is 1 more than the
    tokens:
      shape:
      - 33
      target: '[CLS] a two - digit number is 6 times the sum of its digits . the tens
        digit is 1 more than the units digit . find the number . [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_02, R_00) R_02: =(N_01, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of students
      N_02:
      - the number of seats on each school bus
      X_00:
      - the number of buses needed
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of students
      - the number of students that take the trip
      - the number of students
      N_02:
      - the number of seats on each school bus
      - the number of seats on each school bus
      - the number of seats on each school bus
      X_00:
      - the number of buses needed to take all the students
      - the number of buses needed to take the trip
      - the number of buses needed to take students
  info:
    answers:
    - b: '3'
    item_id: 60f9186c90be09b72239ef99
    numbers:
      N_00: '1'
      N_01: '9'
      N_02: '3'
      N_03: '2'
      N_04: '2'
    split: null
    variables:
    - b
  text:
    numbers:
      shape:
      - 33
      target: __ __ __ __ __  0 __ __ __ __ __  1 __ __  2 __ __ __ __  3  3 __ __  4
        __ __ __ __ __ __ __ __ __
    raw: the school is planning a field trip . there are 9 students and 3 seats on
      each school bus . how many buses are needed to take the trip ?
    snippets:
      shape:
      - 5
      - 7
      target:
      - school is planning a field trip .
      - . there are 9 students and 3
      - 9 students and 3 seats on each
      - on each school bus . how many
      - . how many buses are needed to
    tokens:
      shape:
      - 33
      target: '[CLS] the school is planning a field trip . there are 9 students and
        3 seats on each school bus . how many buses are needed to take the trip ?
        [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: -(R_00, R_01) R_03: =(N_01,
      R_02) R_04: *(N_02, R_01) R_05: =(R_00, R_04) R_06: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the value of the larger number minus the smaller number
      N_02:
      - the value of the quotient of the larger number divided by the smaller
      X_00:
      - the value of the larger number
      X_01:
      - the value of the smaller number
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the value of the larger number minus the smaller number
      - the value of the larger number minus the smaller number
      - the value of the larger number minus the smaller number
      N_02:
      - the quotient of the larger number divided by the smaller number
      - the quotient of the larger number divided by the smaller
      - the ratio of the larger number to the smaller number
      X_00:
      - the larger number
      - the value of the larger number
      - the value of the larger number
      X_01:
      - the smaller number
      - the value of the smaller number
      - the value of the smaller
  info:
    answers:
    - l: '9'
      s: '6'
    item_id: 604cc853117d71c492a62f6c
    numbers:
      N_00: '1'
      N_01: '3'
      N_02: '1.50000000000000'
    split: null
    variables:
    - l
    - s
  text:
    numbers:
      shape:
      - 33
      target: __  0 __ __  1 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __  2  2  2
        __ __ __ __ __ __ __
    raw: 'one number is three more than another number . the quo ##tie ##nt of the
      larger number divided by the smaller is 1 . 5 . find the numbers .'
    snippets:
      shape:
      - 3
      - 7
      target:
      - one number is three
      - one number is three more than another
      - the smaller is 1 . 5 .
    tokens:
      shape:
      - 33
      target: '[CLS] one number is three more than another number . the quo ##tie
        ##nt of the larger number divided by the smaller is 1 . 5 . find the numbers
        . [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_02, R_00) R_02: =(N_01, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of students
      N_02:
      - the number of seats on each school bus
      X_00:
      - the number of buses needed
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of students
      - the total number of students
      - the number of students that take the trip
      N_02:
      - the number of seats on each school bus
      - the number of seats on each school bus
      - the number of seats on each school bus
      X_00:
      - the number of buses needed to take all the students
      - the number of buses needed
      - the number of buses needed to take the trip
  info:
    answers:
    - b: '3'
    item_id: 60f9186c90be09b72239ef71
    numbers:
      N_00: '1'
      N_01: '180'
      N_02: '60'
      N_03: '2'
      N_04: '2'
    split: null
    variables:
    - b
  text:
    numbers:
      shape:
      - 33
      target: __ __ __ __ __  0 __ __ __ __ __  1 __ __  2 __ __ __ __  3  3 __ __  4
        __ __ __ __ __ __ __ __ __
    raw: the school is planning a field trip . there are 180 students and 60 seats
      on each school bus . how many buses are needed to take the trip ?
    snippets:
      shape:
      - 5
      - 7
      target:
      - school is planning a field trip .
      - . there are 180 students and 60
      - 180 students and 60 seats on each
      - on each school bus . how many
      - . how many buses are needed to
    tokens:
      shape:
      - 33
      target: '[CLS] the school is planning a field trip . there are 180 students
        and 60 seats on each school bus . how many buses are needed to take the trip
        ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: -(N_00, N_01) R_02: +(N_03, R_01) R_03: =(R_00,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of socks john had
      N_01:
      - the number of socks john threw away
      N_03:
      - the number of new socks
      X_00:
      - the number of socks he has now
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the initial number of socks
      - the number of john's socks
      - the number of socks
      N_01:
      - the number of socks thrown away
      - the number of socks john threw away
      - the number of socks thrown away
      N_03:
      - the number of new socks
      - the number of socks john newly bought
      - the number of socks newly bought
      X_00:
      - the total number of socks
      - the number of john's current socks
      - the current number of socks
  info:
    answers:
    - n: '27'
    item_id: 60f9186c90be09b72239eea0
    numbers:
      N_00: '33'
      N_01: '19'
      N_02: '1'
      N_03: '13'
      N_04: '1'
    split: null
    variables:
    - n
  text:
    numbers:
      shape:
      - 33
      target: __ __ __  0 __ __ __ __ __ __  1 __  2 __ __ __ __ __ __ __  3 __  4  4
        __ __ __ __ __ __ __ __ __
    raw: john had 33 socks . if he threw away 19 old ones that didn ' t fit and bought
      13 new ones , how many socks would he have ?
    snippets:
      shape:
      - 5
      - 7
      target:
      - john had 33 socks . if
      - he threw away 19 old ones that
      - away 19 old ones that didn '
      - fit and bought 13 new ones ,
      - bought 13 new ones , how many
    tokens:
      shape:
      - 33
      target: '[CLS] john had 33 socks . if he threw away 19 old ones that didn ''
        t fit and bought 13 new ones , how many socks would he have ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: *(N_02, R_00) R_03: -(R_02,
      R_01) R_04: =(N_01, R_03) R_05: +(R_00, R_01) R_06: =(N_03, R_05) R_07: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the value of 2 times the number of girls minus the number of boys
      N_02:
      - a number in the phrase " twice the number of girls "
      N_03:
      - the number of students in eighth grade in eighth grade in eighth grade now
      X_00:
      - the number of girls
      X_01:
      - the number of boys
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the value of 2 times the number of girls minus the number of boys
      - the value of 2 times the number of girls minus the number of boys
      - the value of two times the number of girls minus the number of boys
      N_02:
      - the multiplier for the number of girls
      - a number in the phrase " twice the number of girls "
      - the coefficient of the number of girls
      N_03:
      - the sum of the number of boys and girls
      - total number of students in eighth grade
      - the number of boys and girls
      X_00:
      - the number of girls
      - the number of girls
      - the number of girls
      X_01:
      - the number of boys
      - the number of boys
      - the number of boys
  info:
    answers:
    - b: '40'
      g: '28'
    item_id: 604cc853117d71c492a62cda
    numbers:
      N_00: '8'
      N_01: '16'
      N_02: '2'
      N_03: '68'
      N_04: '8'
    split: null
    variables:
    - g
    - b
  text:
    numbers:
      shape:
      - 33
      target: __ __ __ __ __ __  0 __ __  1 __ __  2 __ __ __ __ __ __ __  3 __ __  4
        __ __ __ __ __ __ __ __ __
    raw: the number of boys in eighth grade is 16 less than twice the number of girls
      . there are 68 students in eighth grade . how many are girls ?
    snippets:
      shape:
      - 5
      - 7
      target:
      - of boys in eighth grade is 16
      - eighth grade is 16 less than twice
      - 16 less than twice the number of
      - . there are 68 students in eighth
      - 68 students in eighth grade . how
    tokens:
      shape:
      - 33
      target: '[CLS] the number of boys in eighth grade is 16 less than twice the
        number of girls . there are 68 students in eighth grade . how many are girls
        ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: *(N_00, R_00) R_03: =(R_01,
      R_02) R_04: +(R_00, R_01) R_05: =(N_01, R_04) R_06: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the ratio of the number of black shoes to the number of brown shoes
      N_01:
      - the total number of shoes
      X_00:
      - the number of brown shoes
      X_01:
      - the number of black shoes
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the ratio of the number of black shoes to the number of brown shoes
      - the ratio of the number of black shoes to the number of brown shoes
      - the ratio of the number of black shoes to brown shoes
      N_01:
      - the total number of shoes
      - the total number of shoes
      - the total number of shoes
      X_00:
      - the number of brown shoes
      - the number of the brown shoes
      - the number of brown shoes
      X_01:
      - the number of black shoes
      - the number of the black shoes
      - the number of black shoes
  info:
    answers:
    - b1: '44'
      b2: '22'
    item_id: 604cc853117d71c492a62ca8
    numbers:
      N_00: '2'
      N_01: '66'
    split: null
    variables:
    - b2
    - b1
  text:
    numbers:
      shape:
      - 33
      target: __ __ __ __ __  0 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __  1
        __ __ __ __ __ __ __ __ __ __
    raw: the shoe store has twice as many black shoes as it does brown shoes . the
      total number of shoes is 66 . how many brown shoes are there ?
    snippets:
      shape:
      - 2
      - 7
      target:
      - shoe store has twice as many black
      - of shoes is 66 . how many
    tokens:
      shape:
      - 33
      target: '[CLS] the shoe store has twice as many black shoes as it does brown
        shoes . the total number of shoes is 66 . how many brown shoes are there ?
        [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: *(N_01, R_00) R_03: =(N_02,
      R_02) R_04: *(N_03, R_00) R_05: =(R_01, R_04) R_06: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the weight of apples in dollars
      N_02:
      - the cost of a 5 pounds of apples
      N_03:
      - the weight of apples
      X_00:
      - the same rate
      X_01:
      - the cost of 7 pounds of apples
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the weight of a 5 - pound bag of apples
      - the weight of one apple bag in pound
      - the pound of the apples in the first case
      N_02:
      - the price of a 5 - pound bag of apples
      - the cost of one apple bag
      - the cost of the apples in the first case
      N_03:
      - the weight of a 7 - pound bag of apples
      - the weight of the other apple bag
      - the pound of the apples in the second case
      X_00:
      - the price of a pound of apples
      - the cost of an apple bag per pound
      - the cost of apples per pound
      X_01:
      - the cost of 7 pounds of apples
      - the cost of the other apple bag
      - the cost of the apples in the second case
  info:
    answers:
    - c: '0.700000000000000'
      t: '4.90000000000000'
    item_id: 604cc853117d71c492a62c91
    numbers:
      N_00: '1'
      N_01: '5'
      N_02: '3.50000000000000'
      N_03: '7'
    split: null
    variables:
    - c
    - t
  text:
    numbers:
      shape:
      - 33
      target: __  0  1 __ __ __ __ __ __  2  2  2 __ __ __ __ __ __ __ __ __ __ __
        __ __  3 __ __ __ __ __ __ __
    raw: a 5 - pound bag of apples costs 3 . 50 dollars . at the same rate , what
      would be the cost of 7 pounds of apples in dollars ?
    snippets:
      shape:
      - 4
      - 7
      target:
      - a 5 - pound
      - a 5 - pound bag
      - of apples costs 3 . 50 dollars
      - the cost of 7 pounds of apples
    tokens:
      shape:
      - 33
      target: '[CLS] a 5 - pound bag of apples costs 3 . 50 dollars . at the same
        rate , what would be the cost of 7 pounds of apples in dollars ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_01, R_00) R_02: *(N_02, R_01) R_03: -(R_00,
      N_04) R_04: *(N_03, R_03) R_05: =(R_02, R_04) R_06: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the added value to the number
      N_02:
      - a number which is multiplied by the sum
      N_03:
      - the multiplier of the number in the second equation
      N_04:
      - the value of the result of the multiplication of the number minus 6
      X_00:
      - the value of the number
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number that is added to a number
      - a number in the phrase " the sum of a number and 6 " on the left - hand side
      - the added value to a number in the first case
      N_02:
      - a number multiplied with the value
      - the value multiplied by the sum of the number and 6 on the left - hand side
      - the multiplier of the sum of a number and 6 in the first case
      N_03:
      - the number multiplied with the value
      - the value multiplied by the number decreased by 2 on the right - hand side
      - the multiplier of the number decreased by 2 in the second case
      N_04:
      - the number subtracted from the number
      - a number in the phrase " the number decreased by 2 " on the right - hand side
      - the value subtracted to the number in the second case
      X_00:
      - the number that satisfies the condition
      - the number we want to find
      - the value of the number when the first case equals the second case
  info:
    answers:
    - n: '12'
    item_id: 60f9186c90be09b72239f1e1
    numbers:
      N_00: '1'
      N_01: '6'
      N_02: '5'
      N_03: '9'
      N_04: '2'
    split: null
    variables:
    - n
  text:
    numbers:
      shape:
      - 33
      target: __ __ __ __ __  0 __ __  1 __ __ __  2 __ __ __ __ __ __ __  3 __ __
        __ __ __  4 __ __ __ __ __ __
    raw: if the sum of a number and 6 is multiplied by 5 , the result is the same
      as 9 times the number decreased by 2 . find the number .
    snippets:
      shape:
      - 5
      - 7
      target:
      - the sum of a number and 6
      - a number and 6 is multiplied by
      - is multiplied by 5 , the result
      - the same as 9 times the number
      - number decreased by 2 . find the
    tokens:
      shape:
      - 33
      target: '[CLS] if the sum of a number and 6 is multiplied by 5 , the result
        is the same as 9 times the number decreased by 2 . find the number . [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_02, R_00) R_02: +(N_00, N_01) R_03: =(R_01,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the dollars earned by mike
      N_01:
      - the number of dollars mike made
      N_02:
      - the dollars mike spent
      X_00:
      - the number of dollars mike can made
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of dollars mike earned from mowing lawns
      - the number of dollars by mowing lawns
      - the amount of money mike made by mowing lawns
      N_01:
      - the number of dollars mike earned from weed eating
      - the number of dollars by weed eating
      - the amount of money mike made by weed eating
      N_02:
      - the number of dollars mike spends per week
      - the number of dollars he spends a week
      - the amount of money he spent per week
      X_00:
      - the number of weeks mike last with his money
      - the number of weeks the money will last
      - the number of weeks the money would last him
  info:
    answers:
    - w: '8'
    item_id: 60f9186c90be09b72239ec5a
    numbers:
      N_00: '14'
      N_01: '26'
      N_02: '5'
      N_03: '1'
    split: null
    variables:
    - w
  text:
    numbers:
      shape:
      - 36
      target: __ __ __  0 __ __ __ __ __ __  1 __ __ __ __ __ __ __ __  2 __  3 __
        __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'mike made 14 dollars mo ##wing lawn ##s and 26 dollars weed eating . if
      he only spent 5 dollars a week , how long would the money last him ?'
    snippets:
      shape:
      - 4
      - 7
      target:
      - 'mike made 14 dollars mo ##wing'
      - 'lawn ##s and 26 dollars weed eating'
      - he only spent 5 dollars a week
      - spent 5 dollars a week , how
    tokens:
      shape:
      - 36
      target: '[CLS] mike made 14 dollars mo ##wing lawn ##s and 26 dollars weed eating
        . if he only spent 5 dollars a week , how long would the money last him ?
        [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_02, R_00) R_02: +(N_00, N_01) R_03: =(R_01,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of dollars paul made
      N_01:
      - the number of weeds paul made
      N_02:
      - the amount of money paul spent a week
      X_00:
      - the number of dollars paul would receive him to last him
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of dollars by mowing lawns
      - amount of money paul makes by mowing
      - the amount of money paul made by mowing lawns
      N_01:
      - the number of dollars by weed eating
      - amount of money paul makes by weed - eating
      - the amount of money paul made by weed eating
      N_02:
      - the number of dollars he spends a week
      - how much money he uses a week
      - the amount of money he spends per week
      X_00:
      - the number of weeks the money will last
      - how long paul can last with the money he made
      - the number of weeks the money would last him
  info:
    answers:
    - w: '9'
    item_id: 60f9186c90be09b72239f22b
    numbers:
      N_00: '68'
      N_01: '13'
      N_02: '9'
      N_03: '1'
    split: null
    variables:
    - w
  text:
    numbers:
      shape:
      - 36
      target: __ __ __  0 __ __ __ __ __ __  1 __ __ __ __ __ __ __ __  2 __  3 __
        __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'paul made 68 dollars mo ##wing lawn ##s and 13 dollars weed eating . if
      he only spent 9 dollars a week , how long would the money last him ?'
    snippets:
      shape:
      - 4
      - 7
      target:
      - 'paul made 68 dollars mo ##wing'
      - 'lawn ##s and 13 dollars weed eating'
      - he only spent 9 dollars a week
      - spent 9 dollars a week , how
    tokens:
      shape:
      - 36
      target: '[CLS] paul made 68 dollars mo ##wing lawn ##s and 13 dollars weed eating
        . if he only spent 9 dollars a week , how long would the money last him ?
        [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_02, R_00) R_02: +(N_00, N_01) R_03: =(R_01,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the money jerry made
      N_01:
      - the number of dollars jerry made
      N_02:
      - the dollars jerry spent a week
      X_00:
      - the number of dollars jerry would receive him to last him
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of dollars jerry earned from mowing lawns
      - the number of dollars by mowing lawns
      - the amount of money jerry made by mowing lawns
      N_01:
      - the number of dollars jerry earned from weed eating
      - the number of dollars by weed eating
      - the amount of money jerry made by weed eating
      N_02:
      - the number of dollars jerry spends per week
      - the number of dollars he spends a week
      - the amount of money he spends per week
      X_00:
      - the number of weeks jerry last with his money
      - the number of weeks the money will last
      - the number of weeks the money would last him
  info:
    answers:
    - w: '9'
    item_id: 60f9186c90be09b72239f198
    numbers:
      N_00: '14'
      N_01: '31'
      N_02: '5'
      N_03: '1'
    split: null
    variables:
    - w
  text:
    numbers:
      shape:
      - 36
      target: __ __ __  0 __ __ __ __ __ __  1 __ __ __ __ __ __ __ __  2 __  3 __
        __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'jerry made 14 dollars mo ##wing lawn ##s and 31 dollars weed eating . if
      he only spent 5 dollars a week , how long would the money last him ?'
    snippets:
      shape:
      - 4
      - 7
      target:
      - 'jerry made 14 dollars mo ##wing'
      - 'lawn ##s and 31 dollars weed eating'
      - he only spent 5 dollars a week
      - spent 5 dollars a week , how
    tokens:
      shape:
      - 36
      target: '[CLS] jerry made 14 dollars mo ##wing lawn ##s and 31 dollars weed
        eating . if he only spent 5 dollars a week , how long would the money last
        him ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: *(N_01, R_00) R_03: -(R_02,
      R_01) R_04: =(N_00, R_03) R_05: +(R_00, R_01) R_06: =(N_02, R_05) R_07: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the value of twice the age of his sister minus the age of tom
      N_01:
      - a number in the phrase " twice as old as his sister his sister his sister's
        age "
      N_02:
      - the sum of their ages
      X_00:
      - the age of his sister
      X_01:
      - the age of tom
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the value of twice the sister's age minus tom's age
      - the value of twice the age of his sister minus the age of tom
      - the value of twice the age of his sister minus the age of tom
      N_01:
      - a number in the phrase " twice as old as "
      - a number in the phrase " twice as old as his sister "
      - a number in the phrase " twice as old as his sister "
      N_02:
      - the sum of their ages
      - the sum of the age of tom and the age of his sister
      - the sum of their ages
      X_00:
      - the sister's age now
      - the age of his sister
      - the age of his sister
      X_01:
      - tom's age now
      - the age of tom
      - the age of tom
  info:
    answers:
    - s: '5'
      t: '9'
    item_id: 604cc853117d71c492a62e94
    numbers:
      N_00: '1'
      N_01: '2'
      N_02: '14'
    split: null
    variables:
    - s
    - t
  text:
    numbers:
      shape:
      - 36
      target: __ __ __ __  0 __ __ __  1 __ __ __ __ __ __ __ __ __ __ __ __ __  2
        __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: tom johnson is 1 year less than twice as old as his sister . if the sum of
      their ages is 14 years , then tom ' s age is ?
    snippets:
      shape:
      - 3
      - 7
      target:
      - tom johnson is 1 year less than
      - year less than twice as old as
      - their ages is 14 years , then
    tokens:
      shape:
      - 36
      target: '[CLS] tom johnson is 1 year less than twice as old as his sister .
        if the sum of their ages is 14 years , then tom '' s age is ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_03, R_00) R_02: +(N_01, R_01) R_03: =(N_04,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the length of the tree planted by tony
      N_03:
      - the speed of the tree
      N_04:
      - the total length of the tree
      X_00:
      - the number of years for the tree to be 29 feet to be 29 feet every year
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the starting height of the tree
      - the length of the tree at first
      - the current height of the tree
      N_03:
      - the amount of height the tree grows every year
      - the growing rate of the tree every year
      - the rate of growth
      N_04:
      - the goal height of the tree
      - the final length of the tree
      - the future height of the tree
      X_00:
      - the number of years it takes for the tree to be 29 feet
      - the number of years taken for the tree to be 29 feet
      - the number of years it will take for the tree to be 29 feet
  info:
    answers:
    - y: '5'
    item_id: 604cc853117d71c492a62c54
    numbers:
      N_00: '1'
      N_01: '4'
      N_02: '1'
      N_03: '5'
      N_04: '29'
    split: null
    variables:
    - y
  text:
    numbers:
      shape:
      - 36
      target: __ __ __  0  1 __ __ __ __ __ __ __ __  2 __ __  3 __ __ __ __ __ __
        __ __ __ __ __ __  4 __ __ __ __ __ __
    raw: tony planted a 4 - foot tree . the tree grows at a rate of 5 feet every year
      . how many years will it take to be 29 feet ?
    snippets:
      shape:
      - 5
      - 7
      target:
      - tony planted a 4 - foot
      - tony planted a 4 - foot tree
      - tree grows at a rate of 5
      - a rate of 5 feet every year
      - take to be 29 feet ?
    tokens:
      shape:
      - 36
      target: '[CLS] tony planted a 4 - foot tree . the tree grows at a rate of 5
        feet every year . how many years will it take to be 29 feet ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: -(N_00, R_00) R_02: =(N_01, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of inches it rained on monday
      N_01:
      - the number of inches it rained on monday
      X_00:
      - the number of inches it rained on tuesday
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the amount of rain on monday
      - the amount of rain on monday
      - the amounts of the rain on monday
      N_01:
      - the value of the amount of rain on monday minus the amount of rain on tuesday
      - the value of the amount of monday minus the amount of tuesday
      - the value of the amounts of the rain on monday minus the value of the amounts
        of the rain on tuesday
      X_00:
      - the amount of rain on tuesday
      - the amount of rain on tuesday
      - the amounts of the rain on tuesday
  info:
    answers:
    - t: '0.200000000000000'
    item_id: 60f9186c90be09b72239eb09
    numbers:
      N_00: '0.900000000000000'
      N_01: '0.700000000000000'
    split: null
    variables:
    - t
  text:
    numbers:
      shape:
      - 36
      target: __ __ __  0  0  0 __ __ __ __ __ __ __ __ __  1  1  1 __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: it rained 0 . 9 inches on monday . on tuesday , it rained 0 . 7 inches less
      than on monday . how much did it rain on tuesday ?
    snippets:
      shape:
      - 2
      - 7
      target:
      - it rained 0 . 9 inches
      - ', it rained 0 . 7 inches'
    tokens:
      shape:
      - 36
      target: '[CLS] it rained 0 . 9 inches on monday . on tuesday , it rained 0 .
        7 inches less than on monday . how much did it rain on tuesday ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_02, R_00) R_02: +(N_00, N_01) R_03: =(R_01,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the dollars john made
      N_01:
      - the dollars john spent
      N_02:
      - the dollars john spent a week
      X_00:
      - the amount of money he would long him make
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of dollars by mowing lawns
      - amount of money john makes by mowing
      - the amount of money john made by mowing lawns
      N_01:
      - the number of dollars by weed eating
      - amount of money john makes by weed - eating
      - the amount of money john made by weed eating
      N_02:
      - the number of dollars he spends a week
      - how much money he uses a week
      - the amount of money he spends a week
      X_00:
      - the number of weeks the money will last
      - how long john can last with the money he made
      - the number of weeks the money would last him
  info:
    answers:
    - w: '8'
    item_id: 60f9186c90be09b72239ed41
    numbers:
      N_00: '6'
      N_01: '18'
      N_02: '3'
      N_03: '1'
    split: null
    variables:
    - w
  text:
    numbers:
      shape:
      - 36
      target: __ __ __  0 __ __ __ __ __ __ __  1 __ __ __ __ __ __ __ __  2 __  3
        __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'john made 6 dollars mo ##wing lawn ##s , and 18 dollars weed eating . if
      he only spent 3 dollars a week , how long would the money last him ?'
    snippets:
      shape:
      - 4
      - 7
      target:
      - 'john made 6 dollars mo ##wing'
      - '##s , and 18 dollars weed eating'
      - he only spent 3 dollars a week
      - spent 3 dollars a week , how
    tokens:
      shape:
      - 36
      target: '[CLS] john made 6 dollars mo ##wing lawn ##s , and 18 dollars weed
        eating . if he only spent 3 dollars a week , how long would the money last
        him ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: -(N_00, N_01) R_02: *(N_02, R_01) R_03: =(R_00,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of chocolate candy will puts to his little brother
      N_01:
      - the number of chocolate candy will puts to his brother
      N_02:
      - the number of pieces inside each box
      X_00:
      - the total number of pieces
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of boxes
      - the number of boxes of chocolate candy will bought
      - the number of boxes of chocolate candy will bought
      N_01:
      - the number of boxes given
      - the number of boxes of chocolate candy gave to his little brother
      - the number of boxes of chocolate candy he gave to his little brother
      N_02:
      - the pieces of chocolate candies in the box
      - the number of pieces inside each box
      - the number of chocolate candies in each box
      X_00:
      - the quantity of remain pieces
      - the total number of pieces
      - the number of chocolate candies will still has
  info:
    answers:
    - p: '16'
    item_id: 60f9186c90be09b72239eff5
    numbers:
      N_00: '7'
      N_01: '3'
      N_02: '4'
    split: null
    variables:
    - p
  text:
    numbers:
      shape:
      - 36
      target: __ __ __  0 __ __ __ __ __ __  1 __ __ __ __ __ __ __ __ __  2 __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: will bought 7 boxes of chocolate candy and gave 3 to his little brother .
      if each box has 4 pieces inside it , how many pieces did will still have ?
    snippets:
      shape:
      - 3
      - 7
      target:
      - will bought 7 boxes of chocolate
      - candy and gave 3 to his little
      - each box has 4 pieces inside it
    tokens:
      shape:
      - 36
      target: '[CLS] will bought 7 boxes of chocolate candy and gave 3 to his little
        brother . if each box has 4 pieces inside it , how many pieces did will still
        have ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of walnut trees currently in the park
      N_01:
      - the number of walnut trees will be planted today
      X_00:
      - the value of the number of trees when finished minus the number of trees currently
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the current number of walnut trees
      - the number of walnut trees planted at first
      - the number of walnut trees currently in the park
      N_01:
      - the number of walnut trees planted
      - the number of trees planted additionally
      - the number of walnut trees park workers will plant today
      X_00:
      - the total number of walnut trees
      - the total number of trees planted
      - the number of whole trees
  info:
    answers:
    - w: '10'
    item_id: 60f9186c90be09b72239f20b
    numbers:
      N_00: '4'
      N_01: '6'
    split: null
    variables:
    - w
  text:
    numbers:
      shape:
      - 36
      target: __ __ __  0 __ __ __ __ __ __ __ __ __ __ __  1 __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: there are 4 walnut trees currently in the park . park workers will plant
      6 walnut trees today . how many walnut trees will the park have when the workers
      are finished ?
    snippets:
      shape:
      - 2
      - 7
      target:
      - there are 4 walnut trees currently
      - workers will plant 6 walnut trees today
    tokens:
      shape:
      - 36
      target: '[CLS] there are 4 walnut trees currently in the park . park workers
        will plant 6 walnut trees today . how many walnut trees will the park have
        when the workers are finished ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of popular trees currently in the park
      N_01:
      - the number of popular trees workers will plant today
      X_00:
      - the total number of popular trees after workers
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the current number of popular trees
      - the number of popular trees planted at first
      - the number of popular trees currently in the park
      N_01:
      - the number of popular trees planted
      - the number of trees planted additionally
      - the number of popular trees park workers will plant today
      X_00:
      - the total number of popular trees
      - the total number of trees planted
      - the number of whole trees
  info:
    answers:
    - w: '98'
    item_id: 60f9186c90be09b72239f05b
    numbers:
      N_00: '25'
      N_01: '73'
    split: null
    variables:
    - w
  text:
    numbers:
      shape:
      - 36
      target: __ __ __  0 __ __ __ __ __ __ __ __ __ __ __  1 __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: there are 25 popular trees currently in the park . park workers will plant
      73 popular trees today . how many popular trees will the park have when the
      workers are finished ?
    snippets:
      shape:
      - 2
      - 7
      target:
      - there are 25 popular trees currently
      - workers will plant 73 popular trees today
    tokens:
      shape:
      - 36
      target: '[CLS] there are 25 popular trees currently in the park . park workers
        will plant 73 popular trees today . how many popular trees will the park have
        when the workers are finished ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_02, N_03) R_02: *(N_01, R_01) R_03: =(R_00,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of parrots
      N_02:
      - the number of parrots in one cage
      N_03:
      - the number of parakeets
      X_00:
      - the total number of birds
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of bird cages
      - the number of bird cages
      - the number of bird cages
      N_02:
      - the number of parrots in each cage
      - the number of parrots in each cage
      - the number of parrots in each cage
      N_03:
      - the number of parakeets in each cage
      - the number of parakeets in each cage
      - the number of parakeets in each cage
      X_00:
      - the total number of birds
      - the total number of birds
      - the number of all birds
  info:
    answers:
    - b: '36'
    item_id: 60f9186c90be09b72239f110
    numbers:
      N_00: '1'
      N_01: '9'
      N_02: '2'
      N_03: '2'
    split: null
    variables:
    - b
  text:
    numbers:
      shape:
      - 36
      target: __  0 __ __ __  1 __ __ __ __ __ __ __  2 __ __ __  3 __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'a pet store has 9 bird cages . if each cage has 2 parrot ##s and 2 para
      ##kee ##ts in it , how many birds does the pet store have total ?'
    snippets:
      shape:
      - 4
      - 7
      target:
      - a pet store has
      - pet store has 9 bird cages .
      - 'each cage has 2 parrot ##s and'
      - 'parrot ##s and 2 para ##kee ##ts'
    tokens:
      shape:
      - 36
      target: '[CLS] a pet store has 9 bird cages . if each cage has 2 parrot ##s
        and 2 para ##kee ##ts in it , how many birds does the pet store have total
        ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(R_00, R_01) R_03: =(N_00,
      R_02) R_04: /(R_00, R_01) R_05: /(N_02, N_03) R_06: =(R_04, R_05) R_07: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of children
      N_01:
      - the number of boys in a child's ticket
      N_02:
      - the amount of children
      N_03:
      - the number of boys
      N_04:
      - the number of girls in year
      X_00:
      - the number of boys
      X_01:
      - the number of girls
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the sum of the number of boy and the number of girls
      - the total number of children in year 6
      - the number of children
      N_02:
      - the numerator of the ratio of the number of girls to the number of boys
      - the numerator of the ratio of the number of girls to the number of boys
      - the numerator of the ratio of girls to boys
      N_03:
      - the denominator of the ratio of the number of girls to the number of boys
      - the denominator of the ratio of the number of girls to the number of boys
      - the denominator of the ratio of girls to boys
      X_00:
      - the number of girls
      - the number of girls
      - the number of girls
      X_01:
      - the number of boys
      - the number of boys
      - the number of boys
  info:
    answers:
    - b: '143'
      g: '154'
    item_id: 604cc853117d71c492a62fa0
    numbers:
      N_00: '297'
      N_01: '6'
      N_02: '14'
      N_03: '13'
      N_04: '6'
    split: null
    variables:
    - g
    - b
  text:
    numbers:
      shape:
      - 36
      target: __ __ __  0 __ __ __  1 __ __ __  2 __ __ __ __  3 __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __  4 __ __ __
    raw: there are 297 children in year 6 . for every 14 girls , there are 13 boys
      . so , there are how many boys and how many girls in year 6 ?
    snippets:
      shape:
      - 5
      - 7
      target:
      - there are 297 children in year
      - children in year 6 . for every
      - . for every 14 girls , there
      - ', there are 13 boys . so'
      - girls in year 6 ?
    tokens:
      shape:
      - 36
      target: '[CLS] there are 297 children in year 6 . for every 14 girls , there
        are 13 boys . so , there are how many boys and how many girls in year 6 ?
        [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: -(R_00, N_00) R_03: *(N_01,
      R_02) R_04: -(R_01, N_00) R_05: =(R_03, R_04) R_06: +(N_02, R_00) R_07: *(N_03,
      R_06) R_08: +(N_02, R_01) R_09: =(R_07, R_08) R_10: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of y's age five y would be three y's age later
      N_01:
      - the ratio of the present age of lucy to the past age of lovely
      N_02:
      - the number of y's age now
      N_03:
      - the ratio of the future age of lucy to the future age of lovely
      X_00:
      - the present age of lovely
      X_01:
      - the present age of lucy
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of yrs passed
      - the value of now minus the past
      - the number of years between the past and now
      N_01:
      - the ratio of lucy's age five years ago to lovely's age five years ago
      - the ratio of the age of lucy in the past to the age of lovely in the past
      - the ratio of the past ages of lucy to that of lovely
      N_02:
      - the number of yrs from now
      - the value of the future minus now
      - the number of years between the future and now
      N_03:
      - the ratio of lucy's age 10 years later to lovely's age 10 years later
      - the ratio of the age of lucy in the future to the age of lovely in the future
      - the ratio of the future ages of lucy to that of lovely
      X_00:
      - lovely's age now
      - the age of lovely now
      - the current age of lovely
      X_01:
      - lucy's age now
      - the age of lucy now
      - the current age of lucy
  info:
    answers:
    - l1: '20'
      l2: '50'
    item_id: 604cc853117d71c492a62e90
    numbers:
      N_00: '5'
      N_01: '3'
      N_02: '10'
      N_03: '2'
    split: null
    variables:
    - l1
    - l2
  text:
    numbers:
      shape:
      - 36
      target: __  0 __ __ __ __ __ __  1 __ __ __ __ __ __  2 __ __ __ __ __ __ __  3
        __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'five y ##rs ago , lucy was three times as old as lovely . 10 y ##rs later
      , lucy would be twice as old as lovely . how old are they now ?'
    snippets:
      shape:
      - 4
      - 7
      target:
      - 'five y ##rs ago'
      - ', lucy was three times as old'
      - 'as lovely . 10 y ##rs later'
      - lucy would be twice as old as
    tokens:
      shape:
      - 36
      target: '[CLS] five y ##rs ago , lucy was three times as old as lovely . 10
        y ##rs later , lucy would be twice as old as lovely . how old are they now
        ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: -(N_01, N_00) R_02: *(N_02, R_01) R_03: =(R_00,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of brownies
      N_01:
      - the number of cups of flour needed
      N_02:
      - the number of cups of flour needed to flour
      X_00:
      - the number of cups of flour needed to used
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of brownies baked
      - the number of brownies already baked
      - number of brownies tiffany baked
      N_01:
      - the number of brownies needed
      - the number of total brownies having to be baked
      - number of brownies she needs
      N_02:
      - the number of cups of flour used on each brownie
      - the number of used cups of flour per browny
      - number of cups needed for each brownie
      X_00:
      - the total number of cups needed
      - the number of necessary cups of flour to achieve the goal
      - the number of cups of flour she needs to make the rest of the brownies
  info:
    answers:
    - c: '72'
    item_id: 60f9186c90be09b72239ef0a
    numbers:
      N_00: '8'
      N_01: '17'
      N_02: '8'
      N_03: '1'
    split: null
    variables:
    - c
  text:
    numbers:
      shape:
      - 36
      target: __ __ __  0 __ __ __ __  1 __ __ __ __ __ __ __ __  2 __ __ __ __ __  3  3
        __ __ __ __ __ __ __ __ __ __ __
    raw: 'tiffany baked 8 brown ##ies but needed 17 total for her party . if she used
      8 cups of flour on each one , how much cups of flour does she still need ?'
    snippets:
      shape:
      - 4
      - 7
      target:
      - 'tiffany baked 8 brown ##ies but'
      - '##ies but needed 17 total for her'
      - if she used 8 cups of flour
      - flour on each one , how much
    tokens:
      shape:
      - 36
      target: '[CLS] tiffany baked 8 brown ##ies but needed 17 total for her party
        . if she used 8 cups of flour on each one , how much cups of flour does she
        still need ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: /(1, N_01) R_02: /(1, N_02) R_03: +(R_01, R_02)
      R_04: *(R_00, R_03) R_05: =(1, R_04) R_06: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the hours sally can paint a house
      N_02:
      - the hours john can paint a house
      X_00:
      - the hours required if sally and john paint together
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the hours to paint a house for sally
      - the hours of sally's painting time
      - the number of hours in which sally can paint a house
      N_02:
      - the hours to paint a house for john
      - the hours of john's painting time
      - the number of hours in which john can paint a house
      X_00:
      - the hours to paint a house when sally and john work together
      - the hours of painting together
      - the number of hours in which sally and john can paint a house
  info:
    answers:
    - h: '2.40000000000000'
    item_id: 60f9186c90be09b72239efca
    numbers:
      N_00: '1'
      N_01: '4'
      N_02: '6'
    split: null
    variables:
    - h
  text:
    numbers:
      shape:
      - 36
      target: __ __ __ __ __  0 __ __  1 __ __ __ __ __ __ __ __ __ __  2 __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: if sally can paint a house in 4 hours , and john can paint the same house
      in 6 hours , how long will it take for both of them to paint together ?
    snippets:
      shape:
      - 3
      - 7
      target:
      - sally can paint a house in 4
      - a house in 4 hours , and
      - same house in 6 hours , how
    tokens:
      shape:
      - 36
      target: '[CLS] if sally can paint a house in 4 hours , and john can paint the
        same house in 6 hours , how long will it take for both of them to paint together
        ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: -(N_00, N_04) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of apples in a box
      N_02:
      - the number of apples taken out of the box
      N_04:
      - the number of apples taken out of the box
      X_00:
      - the number of apples left in the box
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of apples in the box
      - the number of apples in a box
      - the number of apples in the box
      N_04:
      - the number of apples taken out of the box
      - the number of apples taken out of the box
      - the number of apples that scott takes out of the box
      X_00:
      - the remaining number of apples in the box
      - the number of apples remaining in the box
      - the number of apples that are left in the box
  info:
    answers:
    - c: '2'
    item_id: 60f9186c90be09b72239f028
    numbers:
      N_00: '77'
      N_01: '1'
      N_02: '9'
      N_03: '1'
      N_04: '75'
    split: null
    variables:
    - c
  text:
    numbers:
      shape:
      - 36
      target: __ __ __  0 __ __  1 __ __ __ __  2 __ __  3 __ __ __ __  4 __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: there are 77 apples in a box . louise has 9 apples in a bag . scott takes
      75 apples out of the box . how many apples are left in the box ?
    snippets:
      shape:
      - 5
      - 7
      target:
      - there are 77 apples in a
      - 77 apples in a box . louise
      - . louise has 9 apples in a
      - 9 apples in a bag . scott
      - . scott takes 75 apples out of
    tokens:
      shape:
      - 36
      target: '[CLS] there are 77 apples in a box . louise has 9 apples in a bag .
        scott takes 75 apples out of the box . how many apples are left in the box
        ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of skittles kimberly has
      N_01:
      - the number of skittles she buys more
      X_00:
      - the total number of skittles kimberly has in all
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of owned skittles
      - the number of skittles in the past
      - the number of kimberly's skittles
      N_01:
      - the number of bought skittles
      - the number of skittles bought more
      - the number of skittles bought more by kimberly
      X_00:
      - the sum of owned skittles and bought skittles
      - the number of skittles in now
      - the total number of kimberly's skittles
  info:
    answers:
    - s: '12'
    item_id: 60f9186c90be09b72239eac9
    numbers:
      N_00: '5'
      N_01: '7'
      N_02: '18'
    split: null
    variables:
    - s
  text:
    numbers:
      shape:
      - 38
      target: __ __ __  0 __ __ __ __ __ __  1 __ __ __ __ __ __  2 __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'kimberly has 5 ski ##ttle ##s . she buys 7 more . later , kimberly buys
      18 orange ##s at the store . how many ski ##ttle ##s does kimberly have in all
      ?'
    snippets:
      shape:
      - 3
      - 7
      target:
      - 'kimberly has 5 ski ##ttle ##s'
      - . she buys 7 more . later
      - ', kimberly buys 18 orange ##s at'
    tokens:
      shape:
      - 38
      target: '[CLS] kimberly has 5 ski ##ttle ##s . she buys 7 more . later , kimberly
        buys 18 orange ##s at the store . how many ski ##ttle ##s does kimberly have
        in all ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of rose bushes currently in the park
      N_01:
      - the number of rose bushes will be planted today
      X_00:
      - the whole number of rose bushes
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the current number of rose bushes
      - the number of rose bushes planted at first
      - the number of rose bushes currently in the park
      N_01:
      - the number of rose bushes planted
      - the number of bushes planted additionally
      - the number of rose bushes park workers will plant today
      X_00:
      - the total number of rose bushes
      - the total number of bushes planted
      - the number of whole bushes
  info:
    answers:
    - w: '6'
    item_id: 60f9186c90be09b72239f0db
    numbers:
      N_00: '2'
      N_01: '4'
    split: null
    variables:
    - w
  text:
    numbers:
      shape:
      - 38
      target: __ __ __  0 __ __ __ __ __ __ __ __ __ __ __  1 __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: there are 2 rose bushes currently in the park . park workers will plant 4
      more rose bushes today . how many rose bushes will the park have when the workers
      are finished ?
    snippets:
      shape:
      - 2
      - 7
      target:
      - there are 2 rose bushes currently
      - workers will plant 4 more rose bushes
    tokens:
      shape:
      - 38
      target: '[CLS] there are 2 rose bushes currently in the park . park workers
        will plant 4 more rose bushes today . how many rose bushes will the park have
        when the workers are finished ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of walnut trees currently in the park
      N_01:
      - the number of walnut trees workers will plant today
      X_00:
      - the total number of walnut trees after plant more
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the current number of walnut trees
      - the number of walnut trees currently in the park
      - the number of walnut trees currently in the park
      N_01:
      - the number of walnut trees planted
      - the number of walnut trees park workers will plant today
      - the number of walnut trees that park workers will plant
      X_00:
      - the total number of walnut trees
      - the number of whole trees
      - the number of walnut trees that the park will have
  info:
    answers:
    - w: '211'
    item_id: 60f9186c90be09b72239ef48
    numbers:
      N_00: '107'
      N_01: '104'
    split: null
    variables:
    - w
  text:
    numbers:
      shape:
      - 38
      target: __ __ __  0 __ __ __ __ __ __ __ __ __ __ __  1 __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: there are 107 walnut trees currently in the park . park workers will plant
      104 more walnut trees today . how many walnut trees will the park have when
      the workers are finished ?
    snippets:
      shape:
      - 2
      - 7
      target:
      - there are 107 walnut trees currently
      - workers will plant 104 more walnut trees
    tokens:
      shape:
      - 38
      target: '[CLS] there are 107 walnut trees currently in the park . park workers
        will plant 104 more walnut trees today . how many walnut trees will the park
        have when the workers are finished ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(R_00, R_01) R_03: =(N_00,
      R_02) R_04: *(N_01, R_00) R_05: *(N_02, R_01) R_06: +(R_04, R_05) R_07: =(N_03,
      R_06) R_08: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of bills in the wallet
      N_01:
      - the value of one bill in the first case
      N_02:
      - the value of one bill in the second case
      N_03:
      - the total value of the bills
      X_00:
      - the number of bills in the first case
      X_01:
      - the number of bills in the second case
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of bills anna has
      - the total number of bills
      - the total number of bills
      N_01:
      - the worth of some dollar bills
      - the face value of a 5 dollar bill
      - the value of the first bill
      N_02:
      - the worth of other dollar bills
      - the face value of a 10 dollar bill
      - the value of the second bill
      N_03:
      - the total worth of bills
      - the total value of the bills
      - the total value of the bills
      X_00:
      - the number of $ 5 bills
      - the number of 5 dollar bills
      - the number of 5 - dollar bills
      X_01:
      - the number of $ 10 bills
      - the number of 10 dollar bills
      - the number of 10 - dollar bills
  info:
    answers:
    - b1: '8'
      b2: '4'
    item_id: 604cc853117d71c492a62e51
    numbers:
      N_00: '12'
      N_01: '5'
      N_02: '10'
      N_03: '100'
    split: null
    variables:
    - b2
    - b1
  text:
    numbers:
      shape:
      - 38
      target: __ __ __  0 __ __ __ __ __ __  1 __ __ __ __  2 __ __ __ __ __ __ __
        __ __  3 __ __ __ __ __ __ __ __ __ __ __ __
    raw: anna has 12 bills in her wallet , some 5 $ and some $ 10 . the total value
      of the bills is $ 100 . how many of each bill does anna have ?
    snippets:
      shape:
      - 4
      - 7
      target:
      - anna has 12 bills in her
      - wallet , some 5 $ and some
      - and some $ 10 . the total
      - bills is $ 100 . how many
    tokens:
      shape:
      - 38
      target: '[CLS] anna has 12 bills in her wallet , some 5 $ and some $ 10 . the
        total value of the bills is $ 100 . how many of each bill does anna have ?
        [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_01) R_02: +(N_02, R_01) R_03: =(R_00,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of seashells sally found
      N_01:
      - the number of seashells tom found
      N_02:
      - the number of seashells jessica found
      X_00:
      - the total number of seashells the two people found
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of sally's found seashells
      - the number of seashells sally found
      - the number of seashells found by sally
      N_01:
      - the number of tom's found seashells
      - the number of seashells tom found
      - the number of seashells found by tom
      N_02:
      - the number of jessica's found seashells
      - the number of seashells jessica found
      - the number of seashells found by jessica
      X_00:
      - the sum number of sally, tom, and jessica's found seashells
      - the total number of seashells they found together
      - the total number of seashells
  info:
    answers:
    - s: '21'
    item_id: 60f9186c90be09b72239e990
    numbers:
      N_00: '9'
      N_01: '7'
      N_02: '5'
    split: null
    variables:
    - s
  text:
    numbers:
      shape:
      - 38
      target: __ __ __  0 __ __ __ __ __ __  1 __ __ __ __ __ __ __  2 __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'sally found 9 seas ##hell ##s , tom found 7 seas ##hell ##s , and jessica
      found 5 seas ##hell ##s on the beach . how many seas ##hell ##s did they find
      together ?'
    snippets:
      shape:
      - 3
      - 7
      target:
      - 'sally found 9 seas ##hell ##s'
      - ', tom found 7 seas ##hell ##s'
      - 'and jessica found 5 seas ##hell ##s'
    tokens:
      shape:
      - 38
      target: '[CLS] sally found 9 seas ##hell ##s , tom found 7 seas ##hell ##s ,
        and jessica found 5 seas ##hell ##s on the beach . how many seas ##hell ##s
        did they find together ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: __NEW_VAR(, ) R_03: *(10,
      R_00) R_04: +(R_01, R_03) R_05: =(R_02, R_04) R_06: +(R_00, R_01) R_07: =(N_02,
      R_06) R_08: *(10, R_01) R_09: +(R_00, R_08) R_10: -(R_02, R_09) R_11: =(N_03,
      R_10) R_12: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the sum of the digits of a two - digit number
      N_03:
      - the value of the reversed number minus the original number
      X_00:
      - the value of tens digit in the original number
      X_01:
      - the value of units digit in the original number
      X_02:
      - the value of the original number
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the sum of the digits of a two - digit number
      - the sum of the digits of a two - digit number
      - the sum of the digits of the number
      N_03:
      - the value of the original number minus the reversed number
      - the value of the original number minus reversed number
      - the value of the number minus the reversed number
      X_00:
      - the tens digit
      - the value of the ten's digit
      - the tens'digit
      X_01:
      - the units digit
      - the value of the unit's digit
      - the units'digit
      X_02:
      - the original number
      - the value of the original number
      - the value of the number
  info:
    answers:
    - o: '63'
      t: '6'
      u: '3'
    item_id: 604cc853117d71c492a62e4f
    numbers:
      N_00: '1'
      N_01: '2'
      N_02: '9'
      N_03: '27'
    split: null
    variables:
    - t
    - u
    - o
  text:
    numbers:
      shape:
      - 38
      target: __ __ __ __ __ __ __  0  1  1  1 __ __  2 __ __ __ __ __ __ __ __ __
        __ __  3 __ __ __ __ __ __ __ __ __ __ __ __
    raw: the sum of the digits of a two - digit number is 9 . if the digits are reversed
      , the new number is 27 less than the original . find the original number .
    snippets:
      shape:
      - 4
      - 7
      target:
      - the digits of a two - digit
      - digits of a two - digit number
      - digit number is 9 . if the
      - new number is 27 less than the
    tokens:
      shape:
      - 38
      target: '[CLS] the sum of the digits of a two - digit number is 9 . if the digits
        are reversed , the new number is 27 less than the original . find the original
        number . [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_02, R_00) R_02: +(N_00, N_01) R_03: =(R_01,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of pieces of neighbors emily received
      N_01:
      - the number of pieces of candy emily received
      N_02:
      - the number of candies emily ate
      X_00:
      - the total number of pieces of candy emily has
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of received candies from neighbors
      - the number of candy emily received from neighbors
      - the number of candy given by neighbors of emily
      N_01:
      - the number of received candies from older sister
      - the number of candy emily received from her older sister
      - the number of candy given by the older sister of emily
      N_02:
      - the number of candies eaten in a day
      - the number of candy emily would eat a day
      - the number of candy eaten per day
      X_00:
      - the duration of candies
      - the days the candy would last her
      - the number of days emily can eat the candy
  info:
    answers:
    - d: '2'
    item_id: 60f9186c90be09b72239e9ed
    numbers:
      N_00: '5'
      N_01: '13'
      N_02: '9'
      N_03: '1'
    split: null
    variables:
    - d
  text:
    numbers:
      shape:
      - 38
      target: __ __ __ __ __ __  0 __ __ __ __ __ __  1 __ __ __ __ __ __ __ __ __
        __  2 __  3 __ __ __ __ __ __ __ __ __ __ __
    raw: for halloween , emily received 5 pieces of candy from neighbors and 13 pieces
      from her older sister . if she only ate 9 pieces a day , how long would the
      candy last her ?
    snippets:
      shape:
      - 4
      - 7
      target:
      - ', emily received 5 pieces of candy'
      - from neighbors and 13 pieces from her
      - she only ate 9 pieces a day
      - ate 9 pieces a day , how
    tokens:
      shape:
      - 38
      target: '[CLS] for halloween , emily received 5 pieces of candy from neighbors
        and 13 pieces from her older sister . if she only ate 9 pieces a day , how
        long would the candy last her ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: /(N_03, 4) R_02: *(2, N_02) R_03: -(R_01, R_02)
      R_04: =(R_00, R_03) R_05: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the length of the fence of the pond
      N_03:
      - the length of the pond
      X_00:
      - the size of the pond
      X_01:
      - the length of the fence
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the width of a wooden deck enclosing a pond
      - the width of the deck
      - the width of the wooden deck surrounded by the deck
      N_03:
      - the length of the fence surrounding the deck
      - the total length of the fence
      - the length of the fence surrounding the square pond
      X_00:
      - the side length of the square pond
      - the length of one side of the pond
      - the length of a side of the pond
  info:
    answers:
    - p: '19'
    item_id: 604cc853117d71c492a630d5
    numbers:
      N_00: '1'
      N_01: '1'
      N_02: '3'
      N_03: '100'
    split: null
    variables:
    - p
  text:
    numbers:
      shape:
      - 38
      target: __  0 __ __ __ __  1 __ __ __ __  2 __ __ __ __ __ __ __ __ __ __  3
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: a pond is enclosed by a wooden deck that is three feet wide . the fence is
      surrounding the deck is 100 feet long . if the pond is square , what are its
      dimensions ?
    snippets:
      shape:
      - 4
      - 7
      target:
      - a pond is enclosed
      - is enclosed by a wooden deck that
      - deck that is three feet wide .
      - the deck is 100 feet long .
    tokens:
      shape:
      - 38
      target: '[CLS] a pond is enclosed by a wooden deck that is three feet wide .
        the fence is surrounding the deck is 100 feet long . if the pond is square
        , what are its dimensions ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_02, R_00) R_02: +(N_00, N_01) R_03: =(R_01,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of sarah's pieces of neighbors'received
      N_01:
      - the number of pieces of candy that sarah ate
      N_02:
      - the number of candies eaten
      X_00:
      - the total number of pieces of candy held by sarah now
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of pieces of candy from neighbors
      - the number of received candies from neighbors
      - the number of candies sarah received from neighbors
      N_01:
      - the number of pieces of candy from the sister
      - the number of received candies from older sister
      - the number of candies sarah received from her older sister
      N_02:
      - the number of pieces eaten for each day
      - the number of candies eaten in a day
      - the number of candies sarah would eat a day
      X_00:
      - the number of days required for eating all candies
      - the duration of candies
      - the number of days the candy would last her
  info:
    answers:
    - d: '9'
    item_id: 60f9186c90be09b72239eca8
    numbers:
      N_00: '66'
      N_01: '15'
      N_02: '9'
      N_03: '1'
    split: null
    variables:
    - d
  text:
    numbers:
      shape:
      - 38
      target: __ __ __ __ __ __  0 __ __ __ __ __ __  1 __ __ __ __ __ __ __ __ __
        __  2 __  3 __ __ __ __ __ __ __ __ __ __ __
    raw: for halloween , sarah received 66 pieces of candy from neighbors and 15 pieces
      from her older sister . if she only ate 9 pieces a day , how long would the
      candy last her ?
    snippets:
      shape:
      - 4
      - 7
      target:
      - ', sarah received 66 pieces of candy'
      - from neighbors and 15 pieces from her
      - she only ate 9 pieces a day
      - ate 9 pieces a day , how
    tokens:
      shape:
      - 38
      target: '[CLS] for halloween , sarah received 66 pieces of candy from neighbors
        and 15 pieces from her older sister . if she only ate 9 pieces a day , how
        long would the candy last her ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: *(N_00, R_00) R_03: =(R_01,
      R_02) R_04: +(N_02, R_01) R_05: *(N_01, N_02) R_06: +(R_00, R_05) R_07: =(R_04,
      R_06) R_08: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the ratio of the age of the father to the age of his children
      N_02:
      - the number of years it takes for the father to be equal to the sum of his
        children
      X_00:
      - the age of the children
      X_01:
      - the age of the father
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the ratio of the father's age to the sum of the sum of ages of the children
        in the present
      - the ratio of the age of the father now to the sum of the age of his two children
        now
      - the numerator of the ratio of the age of the father to the sum of the ages
        of his two children
      N_01:
      - the number of children
      - the number of his children
      - the number of his sons
      N_02:
      - the number of years into the future when the age of the father and the sum
        of the ages of the children are the same
      - the value of the future year minus now where the father's age will be equal
        to the sum of the ages of his children
      - the value of the future year minus the current year
      X_00:
      - the sum of the ages of the children in the present
      - the sum of the age of his children now
      - the sum of the ages of his two children
      X_01:
      - the father's age in the present
      - the age of the father now
      - the age of the father
  info:
    answers:
    - c: '20'
      f: '40'
    item_id: 604cc853117d71c492a62e0f
    numbers:
      N_00: '2'
      N_01: '2'
      N_02: '20'
    split: null
    variables:
    - c
    - f
  text:
    numbers:
      shape:
      - 38
      target: __ __ __ __ __ __ __  0 __ __ __ __ __ __ __  1 __ __ __  2 __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: the age of the father is twice the sum of the ages of his two children .
      after 20 years , his age will be equal to the sum of the ages of his children
      .
    snippets:
      shape:
      - 3
      - 7
      target:
      - the father is twice the sum of
      - ages of his two children . after
      - children . after 20 years , his
    tokens:
      shape:
      - 38
      target: '[CLS] the age of the father is twice the sum of the ages of his two
        children . after 20 years , his age will be equal to the sum of the ages of
        his children . [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_03, R_00) R_02: +(N_01, N_02) R_03: =(R_01,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of puppies a pet shelter had
      N_02:
      - the number of puppies adopted by a pet shelter
      N_03:
      - the number of puppies adopted by a pet shelter
      X_00:
      - the number of puppies it takes to be adopted
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the initial number of puppies
      - the number of puppies in the beginning
      - the number of puppies a pet shelter had
      N_02:
      - the additional number of puppies
      - the number of puppies added
      - the number of puppies another pet shelter had
      N_03:
      - the number of puppies adopted per day
      - the number of puppies adopted per day
      - the number of puppies adopted per day
      X_00:
      - the number of days it takes for all the puppies to be adopted
      - the number of days for every puppy to be adopted
      - the number of days it would take for all of them to be adopted
  info:
    answers:
    - d: '5'
    item_id: 60f9186c90be09b72239eca1
    numbers:
      N_00: '1'
      N_01: '5'
      N_02: '35'
      N_03: '8'
      N_04: '1'
    split: null
    variables:
    - d
  text:
    numbers:
      shape:
      - 38
      target: __  0 __ __ __  1 __ __ __ __  2 __ __ __ __ __  3 __ __  4 __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'a pet shelter had 5 pup ##pies when another 35 were brought in . if 8 pup
      ##pies a day are adopted , how long would it take for all of them to be adopted
      ?'
    snippets:
      shape:
      - 5
      - 7
      target:
      - a pet shelter had
      - 'pet shelter had 5 pup ##pies when'
      - '##pies when another 35 were brought in'
      - 'in . if 8 pup ##pies a'
      - '8 pup ##pies a day are adopted'
    tokens:
      shape:
      - 38
      target: '[CLS] a pet shelter had 5 pup ##pies when another 35 were brought in
        . if 8 pup ##pies a day are adopted , how long would it take for all of them
        to be adopted ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_03, R_00) R_02: +(N_01, N_02) R_03: =(R_01,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of puppies a pet shelter had
      N_02:
      - the number of puppies adopted
      N_03:
      - the number of puppies adopted
      X_00:
      - the number of puppies it takes to be adopted
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of puppies in the beginning
      - the number of puppies
      - the number of puppies a pet shelter had
      N_02:
      - the number of puppies added
      - the number of new puppies
      - the number of puppies another pet shelter had
      N_03:
      - the number of puppies adopted per day
      - the number of adopted puppies a day
      - the number of puppies adopted per day
      X_00:
      - the number of days for every puppy to be adopted
      - the ratio of all puppies to the number of adopted puppies a day
      - the number of days it would take for all of them to be adopted
  info:
    answers:
    - d: '9'
    item_id: 60f9186c90be09b72239ed71
    numbers:
      N_00: '1'
      N_01: '8'
      N_02: '19'
      N_03: '3'
      N_04: '1'
    split: null
    variables:
    - d
  text:
    numbers:
      shape:
      - 38
      target: __  0 __ __ __  1 __ __ __ __  2 __ __ __ __ __  3 __ __  4 __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'a pet shelter had 8 pup ##pies when another 19 were brought in . if 3 pup
      ##pies a day are adopted , how long would it take for all of them to be adopted
      ?'
    snippets:
      shape:
      - 5
      - 7
      target:
      - a pet shelter had
      - 'pet shelter had 8 pup ##pies when'
      - '##pies when another 19 were brought in'
      - 'in . if 3 pup ##pies a'
      - '3 pup ##pies a day are adopted'
    tokens:
      shape:
      - 38
      target: '[CLS] a pet shelter had 8 pup ##pies when another 19 were brought in
        . if 3 pup ##pies a day are adopted , how long would it take for all of them
        to be adopted ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_03, R_00) R_02: +(N_01, N_02) R_03: =(R_01,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of regular sodas jerry bought
      N_02:
      - the number of diet sodas jerry bought
      N_03:
      - the number of sodas his fridge would hold
      X_00:
      - the number of shelves he would fill
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of regular sodas
      - the number of regular sodas
      - the number of regular sodas
      N_02:
      - the number of diet sodas
      - the number of diet sodas
      - the number of diet sodas
      N_03:
      - the number of soda on each shelf
      - the number of sodas able on a shelf
      - the number of sodas the shelf can hold
      X_00:
      - the number of shelves filled with sodas
      - the ratio of sodas to " 9 "
      - the number of shelves filled
  info:
    answers:
    - s: '7'
    item_id: 60f9186c90be09b72239eb00
    numbers:
      N_00: '1'
      N_01: '41'
      N_02: '22'
      N_03: '9'
    split: null
    variables:
    - s
  text:
    numbers:
      shape:
      - 38
      target: __ __  0 __ __ __ __ __  1 __ __ __ __  2 __ __ __ __ __ __ __ __ __
        __  3 __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'for a birthday party , jerry bought 41 regular soda ##s and 22 diet soda
      ##s . if his fridge would only hold 9 on each shelf , how many shelves would
      he fill up ?'
    snippets:
      shape:
      - 4
      - 7
      target:
      - for a birthday party ,
      - ', jerry bought 41 regular soda ##s'
      - 'soda ##s and 22 diet soda ##s'
      - would only hold 9 on each shelf
    tokens:
      shape:
      - 38
      target: '[CLS] for a birthday party , jerry bought 41 regular soda ##s and 22
        diet soda ##s . if his fridge would only hold 9 on each shelf , how many shelves
        would he fill up ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_03, R_00) R_02: +(N_01, N_02) R_03: =(R_01,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of regular sodas
      N_02:
      - the number of diet sodas
      N_03:
      - the number of on each shelf
      X_00:
      - the number of shelves he would fill
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of regular sodas
      - the number of regular sodas george bought
      - the number of regular sodas
      N_02:
      - the number of diet sodas
      - the number of diet sodas george bought
      - the number of diet sodas
      N_03:
      - the number of soda on each shelf
      - the number of items his fridge can hold
      - the number of sodas able on a shelf
      X_00:
      - the number of shelves filled with sodas
      - the number of shelves needed to hold all sodas
      - the ratio of sodas to " 4 "
  info:
    answers:
    - s: '8'
    item_id: 60f9186c90be09b72239ef22
    numbers:
      N_00: '1'
      N_01: '10'
      N_02: '22'
      N_03: '4'
    split: null
    variables:
    - s
  text:
    numbers:
      shape:
      - 38
      target: __ __  0 __ __ __ __ __  1 __ __ __ __  2 __ __ __ __ __ __ __ __ __
        __  3 __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'for a birthday party , george bought 10 regular soda ##s and 22 diet soda
      ##s . if his fridge would only hold 4 on each shelf , how many shelves would
      he fill up ?'
    snippets:
      shape:
      - 4
      - 7
      target:
      - for a birthday party ,
      - ', george bought 10 regular soda ##s'
      - 'soda ##s and 22 diet soda ##s'
      - would only hold 4 on each shelf
    tokens:
      shape:
      - 38
      target: '[CLS] for a birthday party , george bought 10 regular soda ##s and
        22 diet soda ##s . if his fridge would only hold 4 on each shelf , how many
        shelves would he fill up ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: *(N_02, R_00) R_03: *(N_02,
      R_01) R_04: +(R_02, R_03) R_05: =(N_00, R_04) R_06: -(R_01, R_00) R_07: =(N_01,
      R_06) R_08: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the distance between jamal and enrique
      N_01:
      - the value of the speed of jamal minus the speed of enrique
      N_02:
      - the number of hours passed after they are traveling towards each other
      X_00:
      - the speed of jamal
      X_01:
      - the speed of enrique
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the distance between jamal and enrique
      - the distance between enrique and jamal
      - the distance between enrique and jamal
      N_01:
      - the value of the speed of jamal minus the speed of enrique
      - the value of the rate of jamal minus the rate of enrique
      - the value of the speed of jamal minus that of enrique
      N_02:
      - the number of hours they traveled towards each other
      - the traveling hours for them to meet
      - the number of hours taken to meet with each other when they travel toward
        each other
      X_00:
      - the speed of enrique
      - the speed of enrique towards jamal
      - the speed of enrique
      X_01:
      - the speed of jamal
      - the speed of jamal towards enrique
      - the speed of jamal
  info:
    answers:
    - e: '9'
      j: '16'
    item_id: 604cc853117d71c492a62f52
    numbers:
      N_00: '200'
      N_01: '7'
      N_02: '8'
    split: null
    variables:
    - e
    - j
  text:
    numbers:
      shape:
      - 38
      target: __ __ __  0 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __  1 __ __ __
        __ __ __ __ __  2 __ __ __ __ __ __ __ __ __
    raw: enrique is 200 miles away from jamal . they are traveling towards each other
      . if jamal travels 7 mph faster than enrique and they meet after 8 hours , how
      fast was each traveling ?
    snippets:
      shape:
      - 3
      - 7
      target:
      - enrique is 200 miles away from
      - if jamal travels 7 mph faster than
      - they meet after 8 hours , how
    tokens:
      shape:
      - 38
      target: '[CLS] enrique is 200 miles away from jamal . they are traveling towards
        each other . if jamal travels 7 mph faster than enrique and they meet after
        8 hours , how fast was each traveling ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: /(1, N_01) R_02: /(1, N_02) R_03: +(R_01, R_02)
      R_04: *(R_00, R_03) R_05: =(1, R_04) R_06: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of minutes in which randy can type a paper
      N_02:
      - the number of minutes in which his sister can type the paper
      X_00:
      - the minute of takes together
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of minutes taken for randy to type a paper
      - the number of minutes it takes for randy to type a paper
      - the minutes it takes randy to type a paper
      N_02:
      - the number of minutes taken for candy to do it
      - the number of minutes it takes for candy to type a paper
      - the minutes it takes candy to type a paper
      X_00:
      - the number of minutes taken if they type together
      - the number of minutes it takes for randy and candy to type the paper together
      - the minutes it takes them to type a paper
  info:
    answers:
    - m: '18'
    item_id: 604cc853117d71c492a63081
    numbers:
      N_00: '1'
      N_01: '30'
      N_02: '45'
    split: null
    variables:
    - m
  text:
    numbers:
      shape:
      - 38
      target: __ __ __ __ __  0 __ __  1 __ __ __ __ __ __ __ __ __ __ __  2 __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: randy howard can type a paper in 30 minutes . his sister candy can type the
      same paper in 45 minutes . how many minutes will it take them if they type the
      paper together ?
    snippets:
      shape:
      - 3
      - 7
      target:
      - howard can type a paper in 30
      - a paper in 30 minutes . his
      - same paper in 45 minutes . how
    tokens:
      shape:
      - 38
      target: '[CLS] randy howard can type a paper in 30 minutes . his sister candy
        can type the same paper in 45 minutes . how many minutes will it take them
        if they type the paper together ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, R_00) R_02: =(N_01, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of robin's pieces of gum
      N_01:
      - the number of pieces of gum now
      X_00:
      - the total number of pieces of robin's gum
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of pieces of robin's gum
      - the number of pieces of gum robin originally had
      - the amount of gum before
      N_01:
      - the number of pieces of robin's gum after her brother gave her some
      - the total number of pieces of gum robin has now
      - the total amount of gum after being given
      X_00:
      - the number of pieces of given gum
      - the number of pieces of gum robin's brother gave her
      - the amount of gum given
  info:
    answers:
    - g: '26'
    item_id: 60f9186c90be09b72239ea61
    numbers:
      N_00: '18'
      N_01: '44'
    split: null
    variables:
    - g
  text:
    numbers:
      shape:
      - 40
      target: __ __ __  0 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __  1 __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: robin had 18 pieces of gum . her brother gave her some more pieces . now
      robin has 44 pieces in all . how many pieces of gum did robin ' s brother give
      her ?
    snippets:
      shape:
      - 2
      - 7
      target:
      - robin had 18 pieces of gum
      - now robin has 44 pieces in all
    tokens:
      shape:
      - 40
      target: '[CLS] robin had 18 pieces of gum . her brother gave her some more pieces
        . now robin has 44 pieces in all . how many pieces of gum did robin '' s brother
        give her ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_01) R_02: *(N_02, R_01) R_03: =(R_00,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of new chairs
      N_01:
      - the number of tables
      N_02:
      - the time it takes to finish each piece
      X_00:
      - the time it take her furniture
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of chairs
      - number of new chairs
      - the number of new chairs for emily's house
      N_01:
      - the number of tables
      - number of new tables
      - the number of new tables for emily's house
      N_02:
      - the number of minutes spent on each piece of furniture
      - amount of time she spent on each piece of furniture
      - the length of time to spend on each piece of furniture putting it together
        in minutes
      X_00:
      - the total number of minutes spent
      - the total amount of time it took her to put all the furniture together
      - the total length of time to spend on all furnitures putting them together
        in minutes
  info:
    answers:
    - m: '48'
    item_id: 60f9186c90be09b72239ef7b
    numbers:
      N_00: '4'
      N_01: '2'
      N_02: '8'
    split: null
    variables:
    - m
  text:
    numbers:
      shape:
      - 40
      target: __ __ __  0 __ __ __  1 __ __ __ __ __ __ __ __ __  2 __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: emily bought 4 new chairs and 2 new tables for her house . if she spent 8
      minutes on each piece of furniture putting it together , how many minutes did
      it take her to finish ?
    snippets:
      shape:
      - 3
      - 7
      target:
      - emily bought 4 new chairs and
      - new chairs and 2 new tables for
      - if she spent 8 minutes on each
    tokens:
      shape:
      - 40
      target: '[CLS] emily bought 4 new chairs and 2 new tables for her house . if
        she spent 8 minutes on each piece of furniture putting it together , how many
        minutes did it take her to finish ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: *(N_00, R_00) R_03: *(N_02,
      N_03) R_04: +(R_02, R_03) R_05: *(N_06, R_01) R_06: =(R_04, R_05) R_07: +(N_02,
      R_00) R_08: =(R_01, R_07) R_09: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the cost of coffee a coffee a pound of coffee
      N_02:
      - the number of pounds of $ 1. 44 dollar coffee
      N_03:
      - the cost of the first coffee per pound
      N_06:
      - the cost of the mixture coffee a mixture of $ 1 pounds
      X_00:
      - the number of pounds of coffee
      X_01:
      - the number of pounds of the mixture of two coffee
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the cost of a pound of the first coffee
      - the price of a pound of the first kind of coffee
      - the cost of one coffee per pound
      N_02:
      - the number of pounds of the second coffee
      - the number of pounds of the second kind of coffee
      - the amount of the other coffee
      N_03:
      - the cost of a pound of the second coffee
      - the price of a pound of the second kind of coffee
      - the cost of the other coffee per pound
      N_06:
      - the cost of a pound of the mixed coffee of the first coffee and the second
        coffee
      - the price of a pound of mixed kind of coffee
      - the cost of the mixed coffee per pound
      X_00:
      - the number of pounds of the first coffee
      - the number of pounds of the first kind of coffee
      - the amount of one coffee
      X_01:
      - the number of pounds of the mixed coffee of the first coffee and the second
        coffee
      - the number of pounds of the mixed kind of coffee
      - the amount of the mixed coffee
  info:
    answers:
    - c1: '40'
      c2: '60'
    item_id: 604cc853117d71c492a62e32
    numbers:
      N_00: '1.44000000000000'
      N_01: '1'
      N_02: '20'
      N_03: '1.80000000000000'
      N_04: '1'
      N_05: '1'
      N_06: '1.56000000000000'
      N_07: '1'
    split: null
    variables:
    - c1
    - c2
  text:
    numbers:
      shape:
      - 40
      target: __ __ __ __ __ __ __ __  0  0  0  1 __ __ __ __ __  2 __ __ __  3  3  3  4
        __ __ __  5 __ __ __  6  6  6  7 __ __ __ __
    raw: how many pounds of coffee worth $ 1 . 44 a pound should be mixed with 20
      pounds worth $ 1 . 80 a pound to produce a mixture worth $ 1 . 56 a pound ?
    snippets:
      shape:
      - 8
      - 7
      target:
      - coffee worth $ 1 . 44 a
      - 1 . 44 a pound should be
      - be mixed with 20 pounds worth $
      - pounds worth $ 1 . 80 a
      - 1 . 80 a pound to produce
      - pound to produce a mixture worth $
      - mixture worth $ 1 . 56 a
      - 1 . 56 a pound ?
    tokens:
      shape:
      - 40
      target: '[CLS] how many pounds of coffee worth $ 1 . 44 a pound should be mixed
        with 20 pounds worth $ 1 . 80 a pound to produce a mixture worth $ 1 . 56
        a pound ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_04, R_00) R_02: -(N_01, N_03) R_03: =(R_01,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of puppies a pet store had
      N_03:
      - the number of puppies sold
      N_04:
      - the number of puppies in each cage
      X_00:
      - the number of cages needed
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of puppies at the beginning
      - number of puppies
      - the number of puppies they had
      N_03:
      - the number of puppies sold
      - number of puppies sold
      - the number of puppies they sold
      N_04:
      - the number of puppies per cage
      - number of puppies in each cage
      - the number of puppies in each cage
      X_00:
      - the number of cages necessary for the rest puppies
      - the ratio of the puppies left to the number of puppies in each cage
      - the number of cages
  info:
    answers:
    - c: '9'
    item_id: 60f9186c90be09b72239ee3e
    numbers:
      N_00: '1'
      N_01: '102'
      N_02: '1'
      N_03: '21'
      N_04: '9'
    split: null
    variables:
    - c
  text:
    numbers:
      shape:
      - 40
      target: __  0 __ __ __  1 __ __ __ __  2 __ __ __ __  3 __ __ __ __ __ __ __
        __ __ __  4 __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'a pet store had 102 pup ##pies . in one day , they sold 21 of them and put
      the rest into cages , with 9 in each cage . how many cages did they use ?'
    snippets:
      shape:
      - 5
      - 7
      target:
      - a pet store had
      - 'pet store had 102 pup ##pies .'
      - '##pies . in one day , they'
      - ', they sold 21 of them and'
      - cages , with 9 in each cage
    tokens:
      shape:
      - 40
      target: '[CLS] a pet store had 102 pup ##pies . in one day , they sold 21 of
        them and put the rest into cages , with 9 in each cage . how many cages did
        they use ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: *(N_00, R_00) R_03: *(N_02,
      R_01) R_04: +(R_02, R_03) R_05: -(0, N_03) R_06: =(R_04, R_05) R_07: *(N_04,
      R_00) R_08: *(N_06, R_01) R_09: -(R_07, R_08) R_10: =(N_08, R_09) R_11: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the multiplier for the first number
      N_02:
      - a number in the phrase " four times another number "
      N_03:
      - the sum of the first and the second number
      N_04:
      - a number in the phrase " twice the first number "
      N_06:
      - a number in the phrase " twice the first number "
      N_08:
      - the sum of twice the first number and four times the second number
      X_00:
      - the first number
      X_01:
      - the second number
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - a number in the phrase " three times a number and four "
      - a number in the phrase " three times a number "
      - a number multiplied by the first number in the first equation
      N_02:
      - a number in the phrase " four times another number "
      - a number in the phrase " four times another number "
      - a number multiplied by the second number in the first equation
      N_03:
      - the negated sum of 3 times the first number and 4 times the second number
      - the negative of the sum of three times the first number and four times the
        second number
      - the negative of the sum of three times the first number and four times the
        second number
      N_04:
      - a number in the phrase " twice the first number "
      - a number in the phrase " twice the first number "
      - a number multiplied by the first number in the second equation
      N_06:
      - a number in the phrase " three times the second number "
      - a number in the phrase " three times the second number "
      - a number multiplied by the second number in the second equation
      N_08:
      - the value of 2 times the first number minus 3 times the second number
      - the value of twice the first number minus three times the second number
      - the value of twice the first number minus 3 times the second number
      X_00:
      - the first number
      - the value of the first number
      - the value of the first number
      X_01:
      - the second number
      - the value of the second number
      - the value of the second number
  info:
    answers:
    - n1: '-3'
      n2: '-4'
    item_id: 604cc853117d71c492a62e89
    numbers:
      N_00: '3'
      N_01: '1'
      N_02: '4'
      N_03: '25'
      N_04: '2'
      N_05: '1'
      N_06: '3'
      N_07: '2'
      N_08: '6'
      N_09: '2'
    split: null
    variables:
    - n1
    - n2
  text:
    numbers:
      shape:
      - 40
      target: __ __ __ __  0 __  1 __ __  2 __ __ __ __ __  3 __  4 __  5 __ __ __
        __  6 __ __  7 __ __  8  8 __ __ __  9 __ __ __ __
    raw: 'the sum of three times a number and four times another number is negative
      25 . twice the first number sub ##tracted by three times the second number is
      six . what are the two numbers ?'
    snippets:
      shape:
      - 10
      - 7
      target:
      - the sum of three times a number
      - of three times a number and four
      - a number and four times another number
      - number is negative 25 . twice the
      - negative 25 . twice the first number
      - '. twice the first number sub ##tracted'
      - 'sub ##tracted by three times the second'
      - three times the second number is six
      - second number is six . what are
      - what are the two numbers ?
    tokens:
      shape:
      - 40
      target: '[CLS] the sum of three times a number and four times another number
        is negative 25 . twice the first number sub ##tracted by three times the second
        number is six . what are the two numbers ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: /(N_01, 100) R_03: *(R_00,
      R_02) R_04: /(N_02, 100) R_05: *(R_01, R_04) R_06: +(R_03, R_05) R_07: /(N_05,
      100) R_08: *(N_03, R_07) R_09: =(R_06, R_08) R_10: +(R_00, R_01) R_11: =(N_03,
      R_10) R_12: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the percentage of copper in the metals
      N_02:
      - the percentage of copper in the another alloy
      N_03:
      - the number of grams of the mixed alloy of the first alloy and the second alloy
      N_05:
      - the percentage of copper in the mixed alloy of the first alloy and the second
        alloy
      X_00:
      - the number of grams of an alloy
      X_01:
      - the number of grams of the second alloy
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the percentage of copper in the first alloy
      - the percentage of copper in the first alloy
      - the concentration of copper on 25 % copper
      N_02:
      - the percentage of copper in the second alloy
      - the percentage of copper in the second alloy
      - the concentration of copper on 50 % copper
      N_03:
      - the amount of the mixture of two alloys
      - the sum of the number of grams of the mixed alloy of the first alloy and the
        second alloy
      - the total amount of alloy of metals
      N_05:
      - the percentage of copper in the mixture
      - the percentage of copper in the mixed alloy of the first alloy and the second
        alloy
      - the concentration of copper on the alloy of metals
      X_00:
      - the amount of the first alloy
      - the number of grams of the first alloy
      - the amount of 25 % copper
      X_01:
      - the amount of the second alloy
      - the number of grams of the second alloy
      - the amount of 50 % copper
  info:
    answers:
    - a1: '200'
      a2: '800'
    item_id: 604cc853117d71c492a63085
    numbers:
      N_00: '1'
      N_01: '25'
      N_02: '50'
      N_03: '1000'
      N_04: '1'
      N_05: '45'
    split: null
    variables:
    - a1
    - a2
  text:
    numbers:
      shape:
      - 40
      target: __  0 __ __ __ __  1 __ __ __ __ __ __  2 __ __ __ __ __ __ __ __ __
        __ __ __ __  3 __ __  4 __ __ __  5 __ __ __ __ __
    raw: an alloy of metals is 25 % copper . another alloy is 50 % copper . how much
      of each alloy should be used to make 1000 grams of an alloy that is 45 % copper
      ?
    snippets:
      shape:
      - 6
      - 7
      target:
      - an alloy of metals
      - of metals is 25 % copper .
      - another alloy is 50 % copper .
      - used to make 1000 grams of an
      - 1000 grams of an alloy that is
      - alloy that is 45 % copper ?
    tokens:
      shape:
      - 40
      target: '[CLS] an alloy of metals is 25 % copper . another alloy is 50 % copper
        . how much of each alloy should be used to make 1000 grams of an alloy that
        is 45 % copper ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_01) R_02: *(N_02, R_01) R_03: =(R_00,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of new chairs
      N_01:
      - the number of new tables
      N_02:
      - the time it takes to finish each piece
      X_00:
      - the time it take her furniture
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of chairs
      - the number of wendy's new chairs
      - the number of new chairs for wendy's house
      N_01:
      - the number of tables
      - the number of wendy's new tables
      - the number of new tables for wendy's house
      N_02:
      - the number of minutes spent on each piece of furniture
      - the length of minutes needed to put each piece of furniture
      - the length of time for spending on each piece of furniture putting it together
        in minutes
      X_00:
      - the total number of minutes spent
      - the whole minutes to finish putting all new furniture
      - the total length of time for spending on all furnitures putting them together
        in minutes
  info:
    answers:
    - m: '48'
    item_id: 60f9186c90be09b72239ed82
    numbers:
      N_00: '4'
      N_01: '4'
      N_02: '6'
    split: null
    variables:
    - m
  text:
    numbers:
      shape:
      - 40
      target: __ __ __  0 __ __ __  1 __ __ __ __ __ __ __ __ __  2 __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: wendy bought 4 new chairs and 4 new tables for her house . if she spent 6
      minutes on each piece of furniture putting it together , how many minutes did
      it take her to finish ?
    snippets:
      shape:
      - 3
      - 7
      target:
      - wendy bought 4 new chairs and
      - new chairs and 4 new tables for
      - if she spent 6 minutes on each
    tokens:
      shape:
      - 40
      target: '[CLS] wendy bought 4 new chairs and 4 new tables for her house . if
        she spent 6 minutes on each piece of furniture putting it together , how many
        minutes did it take her to finish ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: /(N_02, 100) R_03: *(R_00,
      R_02) R_04: /(N_04, 100) R_05: *(R_01, R_04) R_06: +(R_03, R_05) R_07: /(N_07,
      100) R_08: *(N_05, R_07) R_09: =(R_06, R_08) R_10: +(R_00, R_01) R_11: =(N_05,
      R_10) R_12: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the concentration of 20 % alcohol solution
      N_04:
      - the concentration of 12 % alcohol solution
      N_05:
      - the number of ml % alcohol solution
      N_07:
      - the concentration of the 15 % alcohol solution
      N_08:
      - the concentration of 20 % alcohol solution
      X_00:
      - the number of ml % alcohol solution
      X_01:
      - the amount of 12 % alcohol solution
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the percentage of alcohol in the first solution
      - the percentage of alcohol in the first solution
      - the concentration of one solution
      N_04:
      - the percentage of alcohol in the second solution
      - the percentage of alcohol in the second solution
      - the concentration of the other solution
      N_05:
      - the amount of the mixture of two solutions
      - the sum of the number of ml of the mixed solution of the first solution and
        the second solution
      - the amount of the mixed solution
      N_07:
      - the percentage of acid in the mixture of two solutions
      - the percentage of alcohol in the mixed solution of the first solution and
        the second solution
      - the concentration of the mixed solution
      N_08:
      - the percentage of alcohol in the first solution
      - the percentage of alcohol in the first solution
      - the concentration of one solution
      X_00:
      - the amount of the first solution
      - the number of ml of the first solution
      - the amount of one solution
      X_01:
      - the amount of the second solution
      - the number of ml of the second solution
      - the amount of the other solution
  info:
    answers:
    - s1: '125'
      s2: '75'
    item_id: 604cc853117d71c492a63048
    numbers:
      N_00: '1'
      N_01: '1'
      N_02: '20'
      N_03: '1'
      N_04: '12'
      N_05: '200'
      N_06: '1'
      N_07: '15'
      N_08: '20'
    split: null
    variables:
    - s2
    - s1
  text:
    numbers:
      shape:
      - 40
      target: __  0 __ __  1  2 __ __ __ __  3  4 __ __ __ __ __  5 __ __  6  7 __
        __ __ __ __ __ __ __ __  8 __ __ __ __ __ __ __ __
    raw: a chemist mixed a 20 % alcohol solution with a 12 % alcohol solution to obtain
      200 ml of a 15 % alcohol solution . how many ml of the 20 % solution did he
      use ?
    snippets:
      shape:
      - 9
      - 7
      target:
      - a chemist mixed a
      - a chemist mixed a 20 % alcohol
      - chemist mixed a 20 % alcohol solution
      - alcohol solution with a 12 % alcohol
      - solution with a 12 % alcohol solution
      - solution to obtain 200 ml of a
      - 200 ml of a 15 % alcohol
      - ml of a 15 % alcohol solution
      - ml of the 20 % solution did
    tokens:
      shape:
      - 40
      target: '[CLS] a chemist mixed a 20 % alcohol solution with a 12 % alcohol solution
        to obtain 200 ml of a 15 % alcohol solution . how many ml of the 20 % solution
        did he use ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of passengers who landed in new year
      N_01:
      - the number of passengers who landed late
      X_00:
      - the total number of passengers who landed in new year
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of passengers landed on time
      - the number of passengers landed on time
      - the number of passengers that landed on time
      N_01:
      - the number of passengers landed late
      - the number of passengers who landed late
      - the number of passengers that landed late
      X_00:
      - the total number of passengers
      - the total number of passengers landed
      - the total number of passengers
  info:
    answers:
    - w: '14720'
    item_id: 60f9186c90be09b72239f049
    numbers:
      N_00: '14507'
      N_01: '213'
    split: null
    variables:
    - w
  text:
    numbers:
      shape:
      - 40
      target: __ __ __ __ __ __ __ __ __ __  0  0  0 __ __ __ __ __ __ __  1 __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'last year at new ##berg '' s airport , 145 ##0 ##7 passengers landed on
      time . unfortunately , 213 passengers landed late . in all , how many passengers
      landed in new ##berg last year ?'
    snippets:
      shape:
      - 2
      - 7
      target:
      - 's airport , 145 ##0 ##7 passengers'
      - . unfortunately , 213 passengers landed late
    tokens:
      shape:
      - 40
      target: '[CLS] last year at new ##berg '' s airport , 145 ##0 ##7 passengers
        landed on time . unfortunately , 213 passengers landed late . in all , how
        many passengers landed in new ##berg last year ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_02) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of maple trees currently in the park
      N_02:
      - the number of maple trees that park workers will plant today
      X_00:
      - the number of maple trees planted more by the workers
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of maple trees planted at first
      - the number of maple trees currently in the park
      - the number of maple trees currently in the park
      N_02:
      - the number of maple trees planted additionally
      - the number of maple trees park workers will plant today
      - the number of maple that trees park workers will plant
      X_00:
      - the total number of maple trees planted
      - the number of whole trees
      - the number of maple trees that the park will have
  info:
    answers:
    - w: '11'
    item_id: 60f9186c90be09b72239ee82
    numbers:
      N_00: '2'
      N_01: '5'
      N_02: '9'
    split: null
    variables:
    - w
  text:
    numbers:
      shape:
      - 40
      target: __ __ __  0 __ __ __  1 __ __ __ __ __ __ __ __ __ __ __  2 __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: there are 2 maple trees and 5 popular trees currently in the park . park
      workers will plant 9 maple trees today . how many maple trees will the park
      have when the workers are finished ?
    snippets:
      shape:
      - 3
      - 7
      target:
      - there are 2 maple trees and
      - maple trees and 5 popular trees currently
      - workers will plant 9 maple trees today
    tokens:
      shape:
      - 40
      target: '[CLS] there are 2 maple trees and 5 popular trees currently in the
        park . park workers will plant 9 maple trees today . how many maple trees
        will the park have when the workers are finished ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_01) R_02: +(N_02, R_01) R_03: -(R_02,
      N_03) R_04: =(R_00, R_03) R_05: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the amount of money tanner saved in september
      N_01:
      - the amount of money tanner saved in september
      N_02:
      - the amount of money tanner spent in november
      N_03:
      - the amount of money saved in september
      X_00:
      - the amount of money left
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the amount of savings in september
      - the amount of money saved in september
      - the value of saved money in september
      N_01:
      - the amount of savings in october
      - the amount of money saved in october
      - the value of saved money in october
      N_02:
      - the amount of savings in november
      - the amount of money saved in november
      - the value of saved money in november
      N_03:
      - the amount spent on a video game
      - the amount of money spent
      - the value of spent money on a video game
      X_00:
      - the amount of savings left
      - the remaining amount of money
      - the left money
  info:
    answers:
    - l: '41'
    item_id: 60f9186c90be09b72239ea68
    numbers:
      N_00: '17'
      N_01: '48'
      N_02: '25'
      N_03: '49'
      N_04: '1'
    split: null
    variables:
    - l
  text:
    numbers:
      shape:
      - 40
      target: __ __ __ __  0 __ __ __ __ __ __  1 __ __ __ __  2 __ __ __ __ __ __
        __  3 __  4 __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: tanner saved $ 17 in september . he saved $ 48 in october and $ 25 in november
      . then tanner spent $ 49 on a video game . how much money does tanner have left
      ?
    snippets:
      shape:
      - 5
      - 7
      target:
      - tanner saved $ 17 in september .
      - he saved $ 48 in october and
      - october and $ 25 in november .
      - tanner spent $ 49 on a video
      - $ 49 on a video game .
    tokens:
      shape:
      - 40
      target: '[CLS] tanner saved $ 17 in september . he saved $ 48 in october and
        $ 25 in november . then tanner spent $ 49 on a video game . how much money
        does tanner have left ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_02) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the initial number of short trees
      N_02:
      - the number of short trees
      X_00:
      - the total number of short trees
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of short trees planted at first
      - the number of short trees currently in the park
      - the number of short trees currently in the park
      N_02:
      - the number of trees planted additionally
      - the number of short trees park workers will plant today
      - the number of short trees that park workers will plant
      X_00:
      - the total number of trees planted
      - the number of whole trees
      - the number of short trees that the park will have
  info:
    answers:
    - w: '98'
    item_id: 60f9186c90be09b72239eb40
    numbers:
      N_00: '41'
      N_01: '44'
      N_02: '57'
    split: null
    variables:
    - w
  text:
    numbers:
      shape:
      - 40
      target: __ __ __  0 __ __ __  1 __ __ __ __ __ __ __ __ __ __ __  2 __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: there are 41 short trees and 44 tall trees currently in the park . park workers
      will plant 57 short trees today . how many short trees will the park have when
      the workers are finished ?
    snippets:
      shape:
      - 3
      - 7
      target:
      - there are 41 short trees and
      - short trees and 44 tall trees currently
      - workers will plant 57 short trees today
    tokens:
      shape:
      - 40
      target: '[CLS] there are 41 short trees and 44 tall trees currently in the park
        . park workers will plant 57 short trees today . how many short trees will
        the park have when the workers are finished ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_02) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of orchid bushes currently in the park
      N_02:
      - the number of orchid bushes park workers will plant today
      X_00:
      - the total number of orchid bushes
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the current number of orchid bushes
      - the number of orchid bushes planted at first
      - the number of orchid bushes currently in the park
      N_02:
      - the number of orchid bushes planted
      - the number of bushes planted additionally
      - the number of orchid bushes park workers will plant today
      X_00:
      - the total number of orchid bushes
      - the total number of bushes planted
      - the number of whole bushes
  info:
    answers:
    - w: '35'
    item_id: 60f9186c90be09b72239eec5
    numbers:
      N_00: '22'
      N_01: '40'
      N_02: '13'
    split: null
    variables:
    - w
  text:
    numbers:
      shape:
      - 40
      target: __ __ __  0 __ __ __  1 __ __ __ __ __ __ __ __ __ __ __  2 __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: there are 22 orchid bushes and 40 orange trees currently in the park . park
      workers will plant 13 orchid bushes today . how many orchid bushes will the
      park have when the workers are finished ?
    snippets:
      shape:
      - 3
      - 7
      target:
      - there are 22 orchid bushes and
      - orchid bushes and 40 orange trees currently
      - workers will plant 13 orchid bushes today
    tokens:
      shape:
      - 40
      target: '[CLS] there are 22 orchid bushes and 40 orange trees currently in the
        park . park workers will plant 13 orchid bushes today . how many orchid bushes
        will the park have when the workers are finished ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: /(1, N_01) R_02: /(1, N_02) R_03: +(R_01, R_02)
      R_04: /(2, R_00) R_05: =(R_03, R_04) R_06: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the speed on the return trip to ca hour
      N_02:
      - the speed on the return trip to ca hour
      X_00:
      - the speed of the trip to ca ca ca ca hour
      X_01:
      - the speed of the trip to ca
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the average mile speed of trip to ca
      - the number of miles per hour on a trip to ca
      - the average speed on a trip to ca
      N_02:
      - the average mile speed of return trip
      - the number of miles per hour on a return trip
      - the average speed on the return trip
      X_00:
      - the average mile speed of the trip to ca and back
      - the average speed of the trip to ca and back
      - the average speed of the trip to ca and back
  info:
    answers:
    - s: '54.5454545454545'
    item_id: 60f9186c90be09b72239f0ac
    numbers:
      N_00: '1'
      N_01: '50'
      N_02: '60'
    split: null
    variables:
    - s
  text:
    numbers:
      shape:
      - 40
      target: __ __  0 __ __ __ __ __ __ __  1 __ __ __ __ __ __ __ __ __ __ __  2
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: on a recent trip to ca , we averaged 50 miles per hour . on the return trip
      , we averaged 60 miles per hour . determine the average speed of the trip to
      ca and back .
    snippets:
      shape:
      - 3
      - 7
      target:
      - on a recent trip to
      - ', we averaged 50 miles per hour'
      - ', we averaged 60 miles per hour'
    tokens:
      shape:
      - 40
      target: '[CLS] on a recent trip to ca , we averaged 50 miles per hour . on the
        return trip , we averaged 60 miles per hour . determine the average speed
        of the trip to ca and back . [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: -(N_00, N_01) R_02: +(N_03, R_01) R_03: =(R_00,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of candies robin scored
      N_01:
      - the number of candies eaten
      N_03:
      - the number of candies given to robin by her sister
      X_00:
      - the total number of candies robin has now
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of pieces of candy robin received during halloween
      - the number of candies robin scored
      - the number of pieces of candy scored by robin
      N_01:
      - the number of pieces of candy robin ate
      - the number of candies robin ate
      - the number of pieces of candy eaten by robin
      N_03:
      - the number of pieces of candy her sister gave her
      - the number of candies robin newly got
      - the number of pieces of candy given to robin by robin's sister
      X_00:
      - the number of remaining pieces of candy
      - the current number of candies
      - the number of pieces of candy left to robin
  info:
    answers:
    - n: '37'
    item_id: 60f9186c90be09b72239f0bb
    numbers:
      N_00: '23'
      N_01: '7'
      N_02: '1'
      N_03: '21'
    split: null
    variables:
    - n
  text:
    numbers:
      shape:
      - 40
      target: __ __ __ __ __ __  0 __ __ __ __ __ __  1 __ __  2 __ __ __ __ __ __
        __ __  3 __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: for halloween , robin scored 23 pieces of candy . she ate 7 pieces the first
      night , and then her sister gave her 21 more pieces . how many pieces of candy
      does robin have now ?
    snippets:
      shape:
      - 4
      - 7
      target:
      - ', robin scored 23 pieces of candy'
      - . she ate 7 pieces the first
      - 7 pieces the first night , and
      - sister gave her 21 more pieces .
    tokens:
      shape:
      - 40
      target: '[CLS] for halloween , robin scored 23 pieces of candy . she ate 7 pieces
        the first night , and then her sister gave her 21 more pieces . how many pieces
        of candy does robin have now ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: -(N_00, N_04) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of erasers in the box
      N_02:
      - the number of erasers ernest has
      N_04:
      - the number of erasers ernest has out
      X_00:
      - the number of erasers left in the box
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of erasers in a box
      - the number of erasers in a box
      - the initial number of erasers in the box
      N_04:
      - the number of erasers mark takes out of the box
      - the number of erasers out of the box taken by mark
      - the number of erasers taken out of the box
      X_00:
      - the number of erasers left
      - the number of erasers left in a box
      - the number of erasers left in the box
  info:
    answers:
    - l: '0'
    item_id: 60f9186c90be09b72239ea97
    numbers:
      N_00: '97'
      N_01: '1'
      N_02: '17'
      N_03: '1'
      N_04: '97'
    split: null
    variables:
    - l
  text:
    numbers:
      shape:
      - 40
      target: __ __ __  0 __ __ __  1 __ __ __ __  2 __ __ __  3 __ __ __ __  4 __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'there are 97 erase ##rs in a box . ernest has 17 erase ##rs in a bag . mark
      takes 97 erase ##rs out of the box . how many erase ##rs are left in the box
      ?'
    snippets:
      shape:
      - 5
      - 7
      target:
      - 'there are 97 erase ##rs in'
      - 'erase ##rs in a box . ernest'
      - '. ernest has 17 erase ##rs in'
      - 'erase ##rs in a bag . mark'
      - '. mark takes 97 erase ##rs out'
    tokens:
      shape:
      - 40
      target: '[CLS] there are 97 erase ##rs in a box . ernest has 17 erase ##rs in
        a bag . mark takes 97 erase ##rs out of the box . how many erase ##rs are
        left in the box ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: -(N_00, N_01) R_02: +(N_03, R_01) R_03: =(R_00,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of pieces of candy faye scored
      N_01:
      - the number of pieces of candy faye ate
      N_03:
      - the number of pieces of candy given by her sister
      X_00:
      - the total number of pieces of candy faye has
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of pieces of candy faye scored during halloween
      - the number of candies faye scored
      - the number of pieces of candy
      N_01:
      - the number of pieces of candy faye ate
      - the number of candies faye ate
      - the number of pieces she ate
      N_03:
      - the number of pieces of candy her sister gave her
      - the number of candies faye newly got
      - the number of pieces her sister gave her
      X_00:
      - the number of pieces of candy faye has now
      - the current number of candies
      - the number of pieces of candy in now
  info:
    answers:
    - n: '62'
    item_id: 60f9186c90be09b72239ed09
    numbers:
      N_00: '47'
      N_01: '25'
      N_02: '1'
      N_03: '40'
    split: null
    variables:
    - n
  text:
    numbers:
      shape:
      - 45
      target: __ __ __ __ __ __  0 __ __ __ __ __ __  1 __ __  2 __ __ __ __ __ __
        __ __  3 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: for halloween , faye scored 47 pieces of candy . she ate 25 pieces the first
      night , and then her sister gave her 40 more pieces . how many pieces of candy
      does faye have now ?
    snippets:
      shape:
      - 4
      - 7
      target:
      - ', faye scored 47 pieces of candy'
      - . she ate 25 pieces the first
      - 25 pieces the first night , and
      - sister gave her 40 more pieces .
    tokens:
      shape:
      - 45
      target: '[CLS] for halloween , faye scored 47 pieces of candy . she ate 25 pieces
        the first night , and then her sister gave her 40 more pieces . how many pieces
        of candy does faye have now ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_00, R_00) R_02: +(N_02, N_03) R_03: =(R_01,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of pieces to use clothing
      N_02:
      - the number of shirts to be wash
      N_03:
      - the number of sweaters to be wash
      X_00:
      - the number of loads needed to wash 8 pieces
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the amount of clothing wash at a time
      - the maximum pieces of clothing at one washing
      - the number of clothing the washing machine can wash at once
      N_02:
      - the number of shirts
      - the number of shirts needed to wash
      - the number of shirts to wash
      N_03:
      - the number of sweaters
      - the number of sweaters needed to wash
      - the number of sweaters to wash
      X_00:
      - the number of loads have to do
      - the minimum number of loads for washing all clothes
      - the number of times to run the washing machine
  info:
    answers:
    - l: '9'
    item_id: 60f9186c90be09b72239f06f
    numbers:
      N_00: '8'
      N_01: '1'
      N_02: '39'
      N_03: '33'
    split: null
    variables:
    - l
  text:
    numbers:
      shape:
      - 45
      target: __ __ __ __ __ __ __ __ __ __  0 __ __ __ __  1 __ __ __ __ __ __ __  2
        __ __  3 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'wendy '' s old washing machine could only wash 8 pieces of clothing at a
      time . if she had to wash 39 shirts and 33 sweater ##s , how many loads would
      she have to do ?'
    snippets:
      shape:
      - 4
      - 7
      target:
      - could only wash 8 pieces of clothing
      - of clothing at a time . if
      - had to wash 39 shirts and 33
      - '39 shirts and 33 sweater ##s ,'
    tokens:
      shape:
      - 45
      target: '[CLS] wendy '' s old washing machine could only wash 8 pieces of clothing
        at a time . if she had to wash 39 shirts and 33 sweater ##s , how many loads
        would she have to do ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_01, R_00) R_02: =(N_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of miles from jose's house totimothy's house
      N_01:
      - the number of hours to get there
      X_00:
      - the ratio of all distances to all hours
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the distance between jane's house and jose's house
      - the length from jane's house to jose's house in miles
      - the distance between jose's house to jane's house
      N_01:
      - the hours it takes to get there from jose's house to jane's house
      - the required time from jane's house to jose's house in hours
      - the number of hours it took jose to get to jane's house
      X_00:
      - the speed of jose
      - jose's mean speed from jane's house to jose's house in miles per hour
      - the amount of distance jose went per hour
  info:
    answers:
    - s: '2'
    item_id: 60f9186c90be09b72239eaa7
    numbers:
      N_00: '24'
      N_01: '12'
    split: null
    variables:
    - s
  text:
    numbers:
      shape:
      - 45
      target: __ __ __ __ __ __ __ __ __ __ __  0 __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __  1 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: jose strolled to jane ' s house . it is 24 miles from jose ' s house to jane
      ' s house . it took jose 12 hours to get there . how fast did jose go ?
    snippets:
      shape:
      - 2
      - 7
      target:
      - . it is 24 miles from jose
      - it took jose 12 hours to get
    tokens:
      shape:
      - 45
      target: '[CLS] jose strolled to jane '' s house . it is 24 miles from jose ''
        s house to jane '' s house . it took jose 12 hours to get there . how fast
        did jose go ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(R_00, R_01) R_03: =(N_01,
      R_02) R_04: *(N_04, R_00) R_05: *(N_05, R_01) R_06: +(R_04, R_05) R_07: =(N_02,
      R_06) R_08: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the sum of the number of calculators and the number of calculators
      N_02:
      - the total cost of calculators
      N_04:
      - the cost of one calculators
      N_05:
      - the sum of the number of dollars earned from selling calculators and calculators
      X_00:
      - the number of calculators
      X_01:
      - the number of calculators
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the total number of calculators sold
      - the total number of calculators sold
      - the total number of calculators sold
      N_02:
      - the total value of sold calculators
      - the total amount of sales
      - the total cost of calculators sold
      N_04:
      - the price of a calculator of the first kind
      - the price of the first kind of calculator
      - the cost of a cheaper calculator
      N_05:
      - the price of a calculator of the second kind
      - the price of the second kind of calculator
      - the cost of an expensive calculator
      X_00:
      - the number of calculators of the first kind
      - the number of the first kind of calculators sold
      - the number of cheaper calculators
      X_01:
      - the number of calculators of the second kind
      - the number of the second kind of calculators sold
      - the number of expensive calculators
  info:
    answers:
    - c1: '35'
      c2: '50'
    item_id: 604cc853117d71c492a62f26
    numbers:
      N_00: '1'
      N_01: '85'
      N_02: '3875'
      N_03: '2'
      N_04: '15'
      N_05: '67'
    split: null
    variables:
    - c1
    - c2
  text:
    numbers:
      shape:
      - 45
      target: __  0 __ __  1 __ __ __ __ __ __  2  2  2 __ __ __  3 __ __ __ __ __
        __ __ __ __  4 __ __  5 __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'a bookstore sold 85 cal ##cula ##tors , generating $ 3 , 875 in sales .
      two kinds of cal ##cula ##tors were sold at $ 15 and $ 67 . how many of each
      were sold ?'
    snippets:
      shape:
      - 6
      - 7
      target:
      - a bookstore sold 85
      - 'a bookstore sold 85 cal ##cula ##tors'
      - ', generating $ 3 , 875 in'
      - in sales . two kinds of cal
      - sold at $ 15 and $ 67
      - 15 and $ 67 . how many
    tokens:
      shape:
      - 45
      target: '[CLS] a bookstore sold 85 cal ##cula ##tors , generating $ 3 , 875
        in sales . two kinds of cal ##cula ##tors were sold at $ 15 and $ 67 . how
        many of each were sold ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_01, N_02) R_02: -(N_05, R_01) R_03: =(R_00,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the cost of dollars to rent a football
      N_02:
      - the cost of a baseball she bought
      N_05:
      - the amount paid
      X_00:
      - the change received after paying the purchase
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - cost of a football
      - the price of a football bought by sandy
      - the cost of a football in dollars sandy bought
      N_02:
      - cost of a baseball
      - the price of a baseball bought by sandy
      - the cost of a baseball in dollars sandy bought
      N_05:
      - the total amount of money he gave
      - the amounts of money for sandy to pay all
      - the amount of bill she paid with
      X_00:
      - the amount of change he received
      - the change for sandy to receive from the purchase
      - the amount of change he received from the purchase
  info:
    answers:
    - c: '4.05000000000000'
    item_id: 60f9186c90be09b72239f0ee
    numbers:
      N_00: '1'
      N_01: '9.14000000000000'
      N_02: '6.81000000000000'
      N_03: '1'
      N_04: '1'
      N_05: '20'
    split: null
    variables:
    - c
  text:
    numbers:
      shape:
      - 45
      target: __ __ __ __ __ __ __ __  0 __ __ __  1  1  1 __ __ __  2  2  2 __  3
        __ __  4 __  5 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: sandy bought some toys . she bought a football for $ 9 . 14 and paid $ 6
      . 81 on a baseball with a $ 20 bill . how much change did he receive from the
      purchase ?
    snippets:
      shape:
      - 6
      - 7
      target:
      - . she bought a football for $
      - football for $ 9 . 14 and
      - and paid $ 6 . 81 on
      - . 81 on a baseball with a
      - a baseball with a $ 20 bill
      - with a $ 20 bill . how
    tokens:
      shape:
      - 45
      target: '[CLS] sandy bought some toys . she bought a football for $ 9 . 14 and
        paid $ 6 . 81 on a baseball with a $ 20 bill . how much change did he receive
        from the purchase ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the cost of shorts in dollars he bought
      N_01:
      - the cost of a jacket in dollars he bought
      X_00:
      - the total amount of money in dollars he spent on clothing
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the cost of shorts
      - the price of bought shorts
      - the amount of money jason spent on shorts
      N_01:
      - the cost of a jacket
      - the price of a jacket
      - the amount of money jason spent on a jacket
      X_00:
      - the total cost
      - the total money on clothing
      - the total amount of money he spent on clothing
  info:
    answers:
    - s: '19.0200000000000'
    item_id: 60f9186c90be09b72239ea31
    numbers:
      N_00: '14.2800000000000'
      N_01: '4.74000000000000'
      N_02: '1'
    split: null
    variables:
    - s
  text:
    numbers:
      shape:
      - 45
      target: __ __ __ __ __ __ __ __ __ __ __ __ __ __ __  0  0  0 __ __ __ __  1  1  1
        __  2 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: jason went to the mall on saturday to buy clothes . he spent $ 14 . 28 on
      shorts and $ 4 . 74 on a jacket . in total , how much money did jason spend
      on clothing ?
    snippets:
      shape:
      - 3
      - 7
      target:
      - he spent $ 14 . 28 on
      - shorts and $ 4 . 74 on
      - . 74 on a jacket . in
    tokens:
      shape:
      - 45
      target: '[CLS] jason went to the mall on saturday to buy clothes . he spent
        $ 14 . 28 on shorts and $ 4 . 74 on a jacket . in total , how much money did
        jason spend on clothing ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: /(N_02, 100) R_03: *(R_00,
      R_02) R_04: /(N_05, 100) R_05: *(R_01, R_04) R_06: +(R_03, R_05) R_07: /(N_07,
      100) R_08: *(N_06, R_07) R_09: =(R_06, R_08) R_10: +(R_00, R_01) R_11: =(N_06,
      R_10) R_12: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the concentration of one solution
      N_05:
      - the concentration of a second solution
      N_06:
      - the amount of the mixed solution
      N_07:
      - the concentration of the mixed solution
      X_00:
      - the amount of one solution
      X_01:
      - the amount of second solution
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the percentage of acid in the first solution
      - the percentage of acid in the first solution
      - the concentration of one solution
      N_05:
      - the percentage of acid in the second solution
      - the percentage of acid in the second solution
      - the concentration of the second solution
      N_06:
      - the amount of the mixture of two solutions
      - the total volume of the mixed solution which is a mixture of the first and
        second solution
      - the total amount of the mixed solution
      N_07:
      - the percentage of acid in the mixture
      - the percentage of acid in the mixed solution which is a mixture of the first
        and second solution
      - the concentration of the mixed solution
      X_00:
      - the amount of the first solution
      - the volume of the first solution
      - the amount of one solution
      X_01:
      - the amount of the second solution
      - the volume of the second solution
      - the amount of the second solution
  info:
    answers:
    - s1: '70'
      s2: '30'
    item_id: 604cc853117d71c492a62cd8
    numbers:
      N_00: '1'
      N_01: '1'
      N_02: '15'
      N_03: '1'
      N_04: '2'
      N_05: '25'
      N_06: '100'
      N_07: '18'
    split: null
    variables:
    - s1
    - s2
  text:
    numbers:
      shape:
      - 45
      target: __  0 __ __  1 __ __ __  2 __ __ __  3  4 __ __  5 __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __  6 __ __ __ __  7 __ __ __ __ __ __ __
    raw: 'a chemist has one solution that is 15 % acid and a second that is 25 % acid
      . how many liter ##s of each should be mixed together to get 100 liter ##s that
      are 18 % acid ?'
    snippets:
      shape:
      - 8
      - 7
      target:
      - a chemist has one
      - a chemist has one solution that is
      - solution that is 15 % acid and
      - '% acid and a second that is'
      - acid and a second that is 25
      - second that is 25 % acid .
      - 'together to get 100 liter ##s that'
      - '##s that are 18 % acid ?'
    tokens:
      shape:
      - 45
      target: '[CLS] a chemist has one solution that is 15 % acid and a second that
        is 25 % acid . how many liter ##s of each should be mixed together to get
        100 liter ##s that are 18 % acid ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: -(R_00, R_01) R_03: =(N_01,
      R_02) R_04: +(R_00, R_01) R_05: =(N_02, R_04) R_06: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the value of the number of corrine's votes minus bill's votes
      N_02:
      - the total number of votes
      X_00:
      - the number of corrine's votes
      X_01:
      - the number of bill randall received
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the value of the number of votes for corrine brown minus the number of votes
        for bill randall
      - the value of the number of votes corrine brown received minus the number of
        votes bill randall received
      - the value of the number of corrine brown minus the number of bill randall
      N_02:
      - the total number of votes for two candidates
      - the total number of votes bill randall and corrine brown received
      - the total number of votes
      X_00:
      - the number of votes for corrine brown
      - the number of votes corrine brown received
      - the number of corrine brown
      X_01:
      - the number of votes for bill randall
      - the number of votes bill randall received
      - the number of bill randall
  info:
    answers:
    - b: '66491'
      r: '53135'
    item_id: 604cc853117d71c492a62e4e
    numbers:
      N_00: '1'
      N_01: '13356'
      N_02: '119626'
    split: null
    variables:
    - b
    - r
  text:
    numbers:
      shape:
      - 45
      target: __ __  0 __ __ __ __ __ __ __ __  1  1  1 __ __ __ __ __ __ __ __ __
        __ __ __ __  2  2  2  2 __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'in a recent election , co ##rri ##ne brown received 13 , 356 more votes
      than bill randall . if the total number of votes was 119 , 62 ##6 , find the
      number of votes for each candidate .'
    snippets:
      shape:
      - 3
      - 7
      target:
      - in a recent election ,
      - '##ne brown received 13 , 356 more'
      - 'of votes was 119 , 62 ##6'
    tokens:
      shape:
      - 45
      target: '[CLS] in a recent election , co ##rri ##ne brown received 13 , 356
        more votes than bill randall . if the total number of votes was 119 , 62 ##6
        , find the number of votes for each candidate . [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: -(N_01, N_03) R_02: +(N_04, R_01) R_03: =(R_00,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of lives in the next level
      N_03:
      - the number of lives lost
      N_04:
      - the number of lives lost
      X_00:
      - the total number of lives
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the initial number of lives
      - the number of lives in the video game
      - the number of lives
      N_03:
      - the number of lives lost
      - the number of lost lives in a hard part of the game
      - the number of lost lives
      N_04:
      - the number of lives gotten
      - the number of gotten lives in the next level
      - the number of new lives
      X_00:
      - the number of lives now
      - the number of lives expected in the next level
      - the total number of lives
  info:
    answers:
    - n: '46'
    item_id: 60f9186c90be09b72239ec64
    numbers:
      N_00: '1'
      N_01: '14'
      N_02: '1'
      N_03: '4'
      N_04: '36'
    split: null
    variables:
    - n
  text:
    numbers:
      shape:
      - 45
      target: __ __ __ __  0 __ __ __ __  1 __ __ __  2 __ __ __ __ __ __ __ __  3
        __ __ __ __ __  4 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: haley was playing a video game and had 14 lives . in a hard part of the game
      , she lost 4 lives . if she got 36 more lives in the next level , how many lives
      would she have ?
    snippets:
      shape:
      - 5
      - 7
      target:
      - haley was playing a video game and
      - game and had 14 lives . in
      - lives . in a hard part of
      - ', she lost 4 lives . if'
      - if she got 36 more lives in
    tokens:
      shape:
      - 45
      target: '[CLS] haley was playing a video game and had 14 lives . in a hard part
        of the game , she lost 4 lives . if she got 36 more lives in the next level
        , how many lives would she have ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: *(N_01, R_00) R_03: *(N_02,
      R_01) R_04: +(R_02, R_03) R_05: =(N_00, R_04) R_06: +(R_00, R_01) R_07: =(N_03,
      R_06) R_08: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the total amount of pesos paid
      N_01:
      - the amount of money paid by the first kind
      N_02:
      - the cost of the coins in the second case
      N_03:
      - the total number of bills
      X_00:
      - the number of peso bills
      X_01:
      - the number of coins in the second case
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the total grocery bill amount
      - the total value of bills and coins
      - the total value of bills and coins combined
      N_01:
      - the worth of some peso bills
      - the cost of 20 - peso bills
      - the value of a bill
      N_02:
      - the worth of some peso coins
      - the cost of 5 - peso coins
      - the value of a coin
      N_03:
      - the total number of bills and coins to pay the bill
      - the number of bills and coins
      - the total number of bills and coins combined
      X_00:
      - the number of 20 - peso bills
      - the number of 20 - peso bills
      - the number of bills
      X_01:
      - the number of 5 - peso coins
      - the number of 5 - peso coins
      - the number of coins
  info:
    answers:
    - b1: '11'
      b2: '13'
    item_id: 604cc853117d71c492a630c7
    numbers:
      N_00: '285'
      N_01: '20'
      N_02: '5'
      N_03: '24'
    split: null
    variables:
    - b1
    - b2
  text:
    numbers:
      shape:
      - 45
      target: __ __ __ __ __ __ __ __  0 __ __ __  1 __ __ __ __ __  2 __ __ __ __
        __ __ __ __  3 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'dh ##eo paid his grocery bill of 285 pe ##sos with 20 - pe ##so bills and
      5 - pe ##so coins . if he paid 24 bills and coins all in all , how many had
      he of each kind ?'
    snippets:
      shape:
      - 4
      - 7
      target:
      - 'grocery bill of 285 pe ##sos with'
      - 'pe ##sos with 20 - pe ##so'
      - '##so bills and 5 - pe ##so'
      - if he paid 24 bills and coins
    tokens:
      shape:
      - 45
      target: '[CLS] dh ##eo paid his grocery bill of 285 pe ##sos with 20 - pe ##so
        bills and 5 - pe ##so coins . if he paid 24 bills and coins all in all , how
        many had he of each kind ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(R_00, R_01) R_03: =(N_00,
      R_02) R_04: -(R_01, N_03) R_05: *(N_02, R_04) R_06: +(N_01, R_00) R_07: =(R_05,
      R_06) R_08: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the sum of the age of elisa and the age of elma now
      N_02:
      - the denominator of the ratio of the age of elisa to the age of elma now
      X_00:
      - the age of elisa
      X_01:
      - the age of elma now
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the sum of the age of elisa now and the age of elma now
      - the sum of elisa's age and elma's age
      - the sum of elisa's age now and elma's age now
      N_01:
      - the value of the future minus now
      - the years between now and the future
      - the number of years past
      N_02:
      - the ratio of the age of elisa in the future to the age of elma in the past
      - the ratio of the future age of elisa to the past age of elma
      - the ratio of elisa's age one year later to elma's age one year ago
      N_03:
      - the value of now minus the past
      - the years between now and the past
      - the number of years to go
      X_00:
      - the age of elisa now
      - the age of elisa
      - elisa's age now
      X_01:
      - the age of elma now
      - the age of elma
      - elma's age now
  info:
    answers:
    - e1: '17.1818181818182'
      e2: '2.81818181818182'
    item_id: 604cc853117d71c492a62f3d
    numbers:
      N_00: '20'
      N_01: '1'
      N_02: '10'
      N_03: '1'
    split: null
    variables:
    - e1
    - e2
  text:
    numbers:
      shape:
      - 45
      target: __ __ __ __ __ __ __ __ __ __ __ __ __ __ __  0 __ __ __ __ __  1 __
        __ __ __  2 __ __ __ __ __ __  3 __ __ __ __ __ __ __ __ __ __ __
    raw: 'the sum of elisa '' s age and elm ##a '' s age is 20 . elisa '' s age one
      year from now will ten times elm ##a '' s age one year ago . how old is each
      now ?'
    snippets:
      shape:
      - 4
      - 7
      target:
      - s age is 20 . elisa '
      - ''' s age one year from now'
      - 'from now will ten times elm ##a'
      - ''' s age one year ago .'
    tokens:
      shape:
      - 45
      target: '[CLS] the sum of elisa '' s age and elm ##a '' s age is 20 . elisa
        '' s age one year from now will ten times elm ##a '' s age one year ago .
        how old is each now ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_01) R_02: -(R_01, N_02) R_03: =(R_00,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of pieces of candy that her sister had
      N_01:
      - the number of pieces of candy her sister had
      N_02:
      - the number of pieces of candy eaten by katie
      X_00:
      - the number of pieces of candy eaten by katie
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of candy owned by katie
      - the number of katie's candies
      - the number of pieces of katie's candy
      N_01:
      - the number of candy owned by her sister
      - the number of her sister's candies
      - the number of pieces of candy held by katie's sister
      N_02:
      - the number of candy eaten
      - the number of eaten candies
      - the number of pieces of candy eaten by katie and katie's sister the first
        night
      X_00:
      - the total number of candy left
      - the number of left candies
      - the number of pieces of candy left to katie and katie's sister
  info:
    answers:
    - n: '7'
    item_id: 60f9186c90be09b72239f021
    numbers:
      N_00: '10'
      N_01: '6'
      N_02: '9'
      N_03: '1'
    split: null
    variables:
    - n
  text:
    numbers:
      shape:
      - 45
      target: __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __  0 __ __ __ __ __ __
        __  1 __ __ __ __  2 __ __  3 __ __ __ __ __ __ __ __ __ __ __ __
    raw: for halloween , katie and her sister combined the candy they received . katie
      had 10 pieces of candy while her sister had 6 . if they ate 9 pieces the first
      night , how many pieces do they have left ?
    snippets:
      shape:
      - 4
      - 7
      target:
      - . katie had 10 pieces of candy
      - her sister had 6 . if they
      - if they ate 9 pieces the first
      - 9 pieces the first night , how
    tokens:
      shape:
      - 45
      target: '[CLS] for halloween , katie and her sister combined the candy they
        received . katie had 10 pieces of candy while her sister had 6 . if they ate
        9 pieces the first night , how many pieces do they have left ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: -(N_01, N_03) R_02: +(N_04, R_01) R_03: =(R_00,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of lives in the next level
      N_03:
      - the number of lives lost in the final level
      N_04:
      - the number of lives lost in the next level
      X_00:
      - the total number of lives
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the initial number of lives
      - the number of lives in the video game
      - the number of lives
      N_03:
      - the number of lives lost
      - the number of lost lives in a hard part of the game
      - the number of lost lives
      N_04:
      - the number of lives gotten
      - the number of gotten lives in the next level
      - the number of new lives
      X_00:
      - the number of lives now
      - the number of lives expected in the next level
      - the total number of lives
  info:
    answers:
    - n: '41'
    item_id: 60f9186c90be09b72239ea96
    numbers:
      N_00: '1'
      N_01: '42'
      N_02: '1'
      N_03: '25'
      N_04: '24'
    split: null
    variables:
    - n
  text:
    numbers:
      shape:
      - 45
      target: __ __ __ __  0 __ __ __ __  1 __ __ __  2 __ __ __ __ __ __ __ __  3
        __ __ __ __ __  4 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: emily was playing a video game and had 42 lives . in a hard part of the game
      , she lost 25 lives . if she got 24 more lives in the next level , how many
      lives would she have ?
    snippets:
      shape:
      - 5
      - 7
      target:
      - emily was playing a video game and
      - game and had 42 lives . in
      - lives . in a hard part of
      - ', she lost 25 lives . if'
      - if she got 24 more lives in
    tokens:
      shape:
      - 45
      target: '[CLS] emily was playing a video game and had 42 lives . in a hard part
        of the game , she lost 25 lives . if she got 24 more lives in the next level
        , how many lives would she have ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: *(N_02, R_01) R_03: -(R_00,
      R_02) R_04: =(N_01, R_03) R_05: *(N_04, R_01) R_06: *(N_05, R_00) R_07: +(R_05,
      R_06) R_08: =(N_07, R_07) R_09: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the value of the number of liters to fill a large bucket minus the number
        of liters of a small bucket
      N_02:
      - the coefficient of a small bucket
      N_04:
      - the number of liters that a large bucket holds
      N_05:
      - the number of large buckets
      N_07:
      - the total number of liters of the tank
      X_00:
      - the number of liters of a large bucket
      X_01:
      - the number of liters of the small bucket
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the value of the large bucket minus 2 times the small bucket
      - the value of the number of liters the large bucket can hold minus twice the
        number of liters the small bucket can hold
      - the value of the amount the larger bucket holds minus twice the amount the
        smaller bucket holds
      N_02:
      - a number in the phrase " twice as much as a small bucket "
      - a number in the phrase " twice as much as a small bucket "
      - the constant that is multiplied by the amount the smaller bucket holds
      N_04:
      - a number in the phrase " 2 small buckets "
      - the number of small buckets used to fill the tank
      - a number in the phrase " 2 small buckets "
      N_05:
      - a number in the phrase " 5 large buckets "
      - the number of large buckets used to fill the tank
      - a number in the phrase " 5 large buckets "
      N_07:
      - the total volume of the tank
      - the total number of liters the tank can hold
      - the sum of twice the amount the smaller bucket holds and five times the amount
        the larger bucket holds
      X_00:
      - the large bucket capacity
      - the number of liters the large bucket can hold
      - the amount the larger bucket holds
      X_01:
      - the small bucket capacity
      - the number of liters the small bucket can hold
      - the amount the smaller bucket holds
  info:
    answers:
    - l: '11'
      s: '4'
    item_id: 604cc853117d71c492a62e59
    numbers:
      N_00: '1'
      N_01: '3'
      N_02: '2'
      N_03: '1'
      N_04: '2'
      N_05: '5'
      N_06: '1'
      N_07: '63'
      N_08: '1'
    split: null
    variables:
    - l
    - s
  text:
    numbers:
      shape:
      - 45
      target: __  0 __ __ __  1 __ __ __ __  2 __ __ __  3 __ __ __ __ __  4 __ __
        __ __  5 __ __ __ __ __  6  7 __ __ __ __ __ __  8 __ __ __ __ __
    raw: 'a large bucket holds 3 liter ##s more than twice as much as a small bucket
      . it took 2 small bucket ##s and 5 large bucket ##s to fill a 63 liter tank
      . how much does a large bucket hold ?'
    snippets:
      shape:
      - 9
      - 7
      target:
      - a large bucket holds
      - 'large bucket holds 3 liter ##s more'
      - '##s more than twice as much as'
      - as much as a small bucket .
      - '. it took 2 small bucket ##s'
      - 'bucket ##s and 5 large bucket ##s'
      - '##s to fill a 63 liter tank'
      - to fill a 63 liter tank .
      - how much does a large bucket hold
    tokens:
      shape:
      - 45
      target: '[CLS] a large bucket holds 3 liter ##s more than twice as much as a
        small bucket . it took 2 small bucket ##s and 5 large bucket ##s to fill a
        63 liter tank . how much does a large bucket hold ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_02) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of buckets of trout in the polar bear
      N_02:
      - the number of bucket of salmons
      X_00:
      - the total number of buckets
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of trout buckets
      - the amount of trout the polar bear eats by a bucket
      - the amount of trout the bear eats
      N_02:
      - the number of salmon buckets
      - the amount of salmon the polar bear eats by a bucket
      - the amount of salmon the bear eats
      X_00:
      - the total number of buckets
      - the whole amount of fish by a bucket
      - the total amount of trout and salmon
  info:
    answers:
    - e: '0.600000000000000'
    item_id: 60f9186c90be09b72239e988
    numbers:
      N_00: '0.200000000000000'
      N_01: '1'
      N_02: '0.400000000000000'
      N_03: '1'
    split: null
    variables:
    - e
  text:
    numbers:
      shape:
      - 45
      target: __ __ __ __ __ __ __ __ __ __ __ __ __  0  0  0 __  1 __ __ __ __  2  2  2
        __  3 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'each day , the polar bear at richmond '' s zoo eats 0 . 2 of a bucket of
      trout and 0 . 4 of a bucket of salmon . how many bucket ##s of fish does the
      polar bear eat daily ?'
    snippets:
      shape:
      - 4
      - 7
      target:
      - s zoo eats 0 . 2 of
      - . 2 of a bucket of trout
      - of trout and 0 . 4 of
      - . 4 of a bucket of salmon
    tokens:
      shape:
      - 45
      target: '[CLS] each day , the polar bear at richmond '' s zoo eats 0 . 2 of
        a bucket of trout and 0 . 4 of a bucket of salmon . how many bucket ##s of
        fish does the polar bear eat daily ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, R_00) R_02: =(N_01, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of bales in the barn
      N_01:
      - the number of bales in the barn
      X_00:
      - the number of bales in the barn
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the initial number of bales of hay
      - number of bales of hay that were in the barn
      - the bales of hay in the barn
      N_01:
      - the current total number of bales of hay
      - number of bales of hay now
      - the total bales of hay there are now in the barn
      X_00:
      - the additional number of bales of hay
      - the number of bales tim stacked
      - the bales of hay he stored in the barn
  info:
    answers:
    - s: '26'
    item_id: 60f9186c90be09b72239f128
    numbers:
      N_00: '28'
      N_01: '54'
    split: null
    variables:
    - s
  text:
    numbers:
      shape:
      - 45
      target: __ __ __  0 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __  1 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'there were 28 bal ##es of hay in the barn . tim stacked bal ##es in the
      barn today . there are now 54 bal ##es of hay in the barn . how many bal ##es
      did he store in the barn ?'
    snippets:
      shape:
      - 2
      - 7
      target:
      - 'there were 28 bal ##es of'
      - 'there are now 54 bal ##es of'
    tokens:
      shape:
      - 45
      target: '[CLS] there were 28 bal ##es of hay in the barn . tim stacked bal ##es
        in the barn today . there are now 54 bal ##es of hay in the barn . how many
        bal ##es did he store in the barn ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 13
    tokens: 'R_00: __NEW_VAR(, ) R_01: -(N_01, N_04) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the distance oscar's bus rides
      N_04:
      - the distance charlie's bus
      X_00:
      - the distance oscar's bus rides longer than jachary's
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of miles of oscar's bus ride to school
      - the distance of oscar's bus ride to school
      - the distance of oscar's bus ride to school in miles
      N_04:
      - the number of miles of charlie's bus ride to school
      - the distance of charlie's bus ride to school
      - the distance of charlie's bus ride in miles
      X_00:
      - the number of miles of oscar's bus ride to school minus the number of miles
        of charlie's bus ride to school
      - the value of oscar's bus ride to school minus charlie's bus ride to school
      - the value of the distance of oscar's bus ride to school minus the distance
        of oscar's bus ride to school in miles
  info:
    answers:
    - d: '0.500000000000000'
    item_id: 60f9186c90be09b72239ea2f
    numbers:
      N_00: '2'
      N_01: '0.750000000000000'
      N_02: '1'
      N_03: '2'
      N_04: '0.250000000000000'
      N_05: '1'
      N_06: '2'
    split: null
    variables:
    - d
  text:
    numbers:
      shape:
      - 50
      target: __ __ __ __  0 __ __ __ __  1  1  1 __  2 __ __ __ __ __ __  3 __ __  4  4  4
        __  5 __ __ __ __ __ __ __ __ __  6 __ __ __ __ __ __ __ __ __ __ __ __
    raw: oscar ' s bus ride to school is 0 . 75 of a mile , and charlie ' s bus ride
      is 0 . 25 of a mile . how much longer is oscar ' s bus ride than charlie ' s
      ?
    snippets:
      shape:
      - 7
      - 7
      target:
      - oscar ' s bus ride to school
      - to school is 0 . 75 of
      - . 75 of a mile , and
      - charlie ' s bus ride is 0
      - bus ride is 0 . 25 of
      - . 25 of a mile . how
      - oscar ' s bus ride than charlie
    tokens:
      shape:
      - 50
      target: '[CLS] oscar '' s bus ride to school is 0 . 75 of a mile , and charlie
        '' s bus ride is 0 . 25 of a mile . how much longer is oscar '' s bus ride
        than charlie '' s ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 13
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(R_00, R_01) R_03: =(N_00,
      R_02) R_04: /(N_02, 100) R_05: *(R_00, R_04) R_06: /(N_03, 100) R_07: *(R_01,
      R_06) R_08: +(R_05, R_07) R_09: =(N_01, R_08) R_10: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the total amount of interest
      N_01:
      - the total amount of interest
      N_02:
      - the interest rate of the first kind
      N_03:
      - the interest rate of the first kind
      X_00:
      - the amount of money invested in the first kind
      X_01:
      - the amount of money invested in the second kind
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the total amount invested in two parts
      - the total principal emma has to invest
      - total invested dollars
      N_01:
      - the total interest per year
      - the total amount earned in interest
      - the total interest
      N_02:
      - the interest rate on the first part
      - an interest rate to invest in
      - the interest ratio at one part
      N_03:
      - the interest rate on the second part
      - another interest rate the rest to be invested in
      - the interest ratio at another part
      X_00:
      - the amount invested in the first part
      - the principal invested at 9 % interest rate
      - the invested dollars at one part
      X_01:
      - the amount invested in the second part
      - the principal invested at 11 % interest rate
      - the invested dollars at another part
  info:
    answers:
    - i1: '4000'
      i2: '6000'
    item_id: 604cc853117d71c492a62ef1
    numbers:
      N_00: '10000'
      N_01: '980'
      N_02: '9'
      N_03: '11'
    split: null
    variables:
    - i2
    - i1
  text:
    numbers:
      shape:
      - 50
      target: __ __ __ __ __ __ __  0  0  0 __ __ __ __ __ __ __ __ __  1 __ __ __
        __ __ __ __ __ __ __ __  2 __ __ __ __ __ __ __ __ __  3 __ __ __ __ __ __
        __ __
    raw: 'emma kn ##ut ##t has $ 10 , 000 to invest . she would like to earn $ 980
      per year in interest . how much should she invest at 9 % if the rest is to be
      invested at 11 % ?'
    snippets:
      shape:
      - 4
      - 7
      target:
      - '##t has $ 10 , 000 to'
      - to earn $ 980 per year in
      - she invest at 9 % if the
      - be invested at 11 % ?
    tokens:
      shape:
      - 50
      target: '[CLS] emma kn ##ut ##t has $ 10 , 000 to invest . she would like to
        earn $ 980 per year in interest . how much should she invest at 9 % if the
        rest is to be invested at 11 % ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 13
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: *(N_01, R_00) R_03: *(N_03,
      R_01) R_04: +(R_02, R_03) R_05: =(N_06, R_04) R_06: +(R_00, R_01) R_07: =(N_05,
      R_06) R_08: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the dollars cost for an adult ticket
      N_03:
      - the price of a child ticket
      N_05:
      - the total number of tickets sold
      N_06:
      - the total value of all tickets sold
      X_00:
      - the number of adult tickets sold
      X_01:
      - the number of child tickets sold
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the price of an adult ticket
      - the cost per adult ticket
      - the cost of an adult ticket
      N_03:
      - the price of a child ticket
      - the cost per child ticket
      - the cost of a child ticket
      N_05:
      - the total number of tickets sold
      - the total number of people
      - the total number of tickets sold
      N_06:
      - the total amount of money gained by selling tickets
      - the total cost of tickets
      - the total cost of tickets sold
      X_00:
      - the number of adult tickets sold
      - the number of adults tickets
      - the number of adult tickets sold
      X_01:
      - the number of child tickets sold
      - the number of child tickets
      - the number of child tickets sold
  info:
    answers:
    - a: '40'
      c: '90'
    item_id: 604cc853117d71c492a62cde
    numbers:
      N_00: '1'
      N_01: '12'
      N_02: '1'
      N_03: '4'
      N_04: '1'
      N_05: '130'
      N_06: '840'
    split: null
    variables:
    - a
    - c
  text:
    numbers:
      shape:
      - 50
      target: __ __ __  0 __ __ __ __ __ __  1 __ __  2 __ __  3 __ __  4 __ __ __  5
        __ __ __ __ __ __ __ __  6 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __
    raw: tickets for a play at the community theater cost 12 dollars for an adult
      and 4 dollars for a child . if 130 tickets were sold and the total receipts
      were 840 dollars , how many adult tickets and child tickets were sold ?
    snippets:
      shape:
      - 7
      - 7
      target:
      - tickets for a play at the
      - community theater cost 12 dollars for an
      - 12 dollars for an adult and 4
      - an adult and 4 dollars for a
      - 4 dollars for a child . if
      - child . if 130 tickets were sold
      - total receipts were 840 dollars , how
    tokens:
      shape:
      - 50
      target: '[CLS] tickets for a play at the community theater cost 12 dollars for
        an adult and 4 dollars for a child . if 130 tickets were sold and the total
        receipts were 840 dollars , how many adult tickets and child tickets were
        sold ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 13
    tokens: 'R_00: __NEW_VAR(, ) R_01: /(R_00, 100) R_02: *(N_01, R_01) R_03: =(N_02,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of dollars the wagners included
      N_02:
      - the value of the real bill minus the price of the wagner district
      X_00:
      - the ratio of the amount of dollars the wagner family gave to the high school
        district
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of dollars the wagners'real estate bill included for local schools
      - the included price for local schools
      - the amount of money paid to the local schools
      N_02:
      - the number of dollars went to the high school district
      - the amount to the high school district
      - the amount of money paid to the high school district
      X_00:
      - the number of percentage the wagner family paid to the high school district
      - the percentage of the high school district in the price for local schools
      - the percentage of the ratio of the money paid to the high school district
        compared to the total money paid to local schools
  info:
    answers:
    - p: '25'
    item_id: 60f9186c90be09b72239efea
    numbers:
      N_00: '1'
      N_01: '600'
      N_02: '150'
    split: null
    variables:
    - p
  text:
    numbers:
      shape:
      - 50
      target: __ __  0 __ __ __ __ __ __ __ __ __ __  1 __ __ __ __ __ __ __ __ __  2
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __
    raw: 'during 1 year , the wagner ##s '' real estate bill included 600 dollars
      for local schools . of this amount , 150 dollars went to the high school district
      . what percent did the wagner family pay to the high school district ?'
    snippets:
      shape:
      - 3
      - 7
      target:
      - during 1 year , the
      - estate bill included 600 dollars for local
      - this amount , 150 dollars went to
    tokens:
      shape:
      - 50
      target: '[CLS] during 1 year , the wagner ##s '' real estate bill included 600
        dollars for local schools . of this amount , 150 dollars went to the high
        school district . what percent did the wagner family pay to the high school
        district ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 13
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_02, R_00) R_02: *(N_03, R_00) R_03: +(R_01,
      R_02) R_04: =(N_04, R_03) R_05: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the speed of transport a
      N_03:
      - the speed of transport b
      N_04:
      - the distance between the transport a and transport b
      X_00:
      - the number of hours of traveling time of transport a before meeting transport
        b
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the speed of transport a
      - the speed of transport a
      - the speed of transport a in opposite direction from transport b
      N_03:
      - the speed of transport b
      - the speed of transport b
      - the speed of transport b in opposite direction from transport a
      N_04:
      - the final distance between transport a and transport b
      - the distance between transport a and b after they traveled
      - the distance between transport a and transport b
      X_00:
      - the number of hours of traveling in opposite directions after starting from
        the same dock
      - the time required to travel for both transport a and b
      - the traveling hours for them to be 348 miles apart
  info:
    answers:
    - h: '2.71875000000000'
    item_id: 604cc853117d71c492a62df9
    numbers:
      N_00: '1'
      N_01: '1'
      N_02: '60'
      N_03: '68'
      N_04: '348'
    split: null
    variables:
    - h
  text:
    numbers:
      shape:
      - 50
      target: __ __  0 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __  1 __ __  2
        __ __ __ __ __ __  3 __ __ __ __ __ __ __ __ __ __  4  4 __ __ __ __ __ __
        __
    raw: 'transport a and transport b left the loading dock at noon and headed in
      opposite directions . if transport a traveled at 60 mph and transport b traveled
      at 68 mph , how many hours was it before they were 34 ##8 miles apart ?'
    snippets:
      shape:
      - 5
      - 7
      target:
      - transport a and transport b
      - . if transport a traveled at 60
      - a traveled at 60 mph and transport
      - b traveled at 68 mph , how
      - 'before they were 34 ##8 miles apart'
    tokens:
      shape:
      - 50
      target: '[CLS] transport a and transport b left the loading dock at noon and
        headed in opposite directions . if transport a traveled at 60 mph and transport
        b traveled at 68 mph , how many hours was it before they were 34 ##8 miles
        apart ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 13
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(R_00, R_01) R_03: =(N_02,
      R_02) R_04: *(N_03, R_00) R_05: *(N_04, R_01) R_06: +(R_04, R_05) R_07: =(N_05,
      R_06) R_08: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the total number of tickets sold
      N_03:
      - the price of a senior citizen ticket
      N_04:
      - the price of a regular citizen ticket
      N_05:
      - the total cost of tickets sold
      X_00:
      - the number of senior citizen tickets
      X_01:
      - the number of regular tickets
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the sum of the number of senior tickets and the number of regular tickets
      - the total number of tickets sold
      - the number of sold tickets
      N_03:
      - the price of a senior citizen ticket
      - the price of a senior citizen ticket
      - the cost of a citizen ticket
      N_04:
      - the price of a regular ticket
      - the price of a regular ticket
      - the cost of a regular ticket
      N_05:
      - the sum of the number of dollars earned from selling senior citizen tickets
        and the number of dollars earned from selling regular tickets
      - the total amount of sales
      - the total sales
      X_00:
      - the number of senior citizen tickets
      - the number of senior citizen tickets sold
      - the number of citizen tickets
      X_01:
      - the number of regular tickets
      - the number of regular tickets sold
      - the number of regular tickets
  info:
    answers:
    - r: '41'
      s: '24'
    item_id: 604cc853117d71c492a62c21
    numbers:
      N_00: '1'
      N_01: '2'
      N_02: '65'
      N_03: '10'
      N_04: '15'
      N_05: '855'
    split: null
    variables:
    - s
    - r
  text:
    numbers:
      shape:
      - 50
      target: __  0 __  1 __ __  2 __ __ __ __ __ __  3 __ __ __ __ __ __  4 __ __
        __ __ __ __  5  5 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __
    raw: 'a local bus tour sold 65 tickets . senior citizen tickets cost 10 dollars
      , and regular tickets cost 15 dollars . the total sales were 85 ##5 dollars
      . how many senior citizen tickets were sold ? how many regular tickets were
      sold ?'
    snippets:
      shape:
      - 6
      - 7
      target:
      - a local bus tour
      - a local bus tour sold 65
      - bus tour sold 65 tickets . senior
      - citizen tickets cost 10 dollars , and
      - regular tickets cost 15 dollars . the
      - 'total sales were 85 ##5 dollars .'
    tokens:
      shape:
      - 50
      target: '[CLS] a local bus tour sold 65 tickets . senior citizen tickets cost
        10 dollars , and regular tickets cost 15 dollars . the total sales were 85
        ##5 dollars . how many senior citizen tickets were sold ? how many regular
        tickets were sold ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 13
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_02) R_02: -(R_01, N_03) R_03: =(R_00,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of tickets originally won
      N_02:
      - the number of tickets won
      N_03:
      - the number of tickets spent
      X_00:
      - the number of tickets left
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of tickets tom won by playing'whack a mole '
      - the number of tickets playing'whack a mole'earned by tom
      - the number of tickets playing'whack a mole '
      N_02:
      - the number of tickets tom won by playing'skee ball '
      - the number of tickets playing'skee ball'earned by tom
      - the number of tickets playing'skee ball '
      N_03:
      - the number of tickets tom spent on a hat
      - the number of tickets used by tom
      - the number of tickets he would spend
      X_00:
      - the number of tickets tom have left
      - the number of remaining tickets
      - the final number of tickets left
  info:
    answers:
    - l: '50'
    item_id: 60f9186c90be09b72239ea12
    numbers:
      N_00: '32'
      N_01: '1'
      N_02: '25'
      N_03: '7'
      N_04: '1'
    split: null
    variables:
    - l
  text:
    numbers:
      shape:
      - 50
      target: __ __ __ __ __ __ __  0 __ __ __ __ __ __  1 __ __ __  2 __ __ __ __
        __ __ __ __ __ __ __  3 __ __ __ __  4 __ __ __ __ __ __ __ __ __ __ __ __
        __ __
    raw: 'at the arcade , tom won 32 tickets playing '' w ##ha ##ck a mole '' and
      25 tickets playing '' sk ##ee ball . '' if he spent 7 of his tickets on a hat
      , how many tickets does tom have left ?'
    snippets:
      shape:
      - 5
      - 7
      target:
      - ', tom won 32 tickets playing '''
      - 'w ##ha ##ck a mole '' and'
      - mole ' and 25 tickets playing '
      - if he spent 7 of his tickets
      - his tickets on a hat , how
    tokens:
      shape:
      - 50
      target: '[CLS] at the arcade , tom won 32 tickets playing '' w ##ha ##ck a mole
        '' and 25 tickets playing '' sk ##ee ball . '' if he spent 7 of his tickets
        on a hat , how many tickets does tom have left ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 13
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(R_00, R_01) R_03: =(N_02,
      R_02) R_04: *(N_04, R_00) R_05: -(R_01, R_04) R_06: =(N_03, R_05) R_07: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the total number of seats
      N_03:
      - the value of the number of coach - class seats minus 4 - class seats
      N_04:
      - a number in the phrase " 4 - class seats
      X_00:
      - the number of first class seats
      X_01:
      - the number of coach - class seats
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the total number of seats
      - the sum of the number of first - class seats and the number of coach class
        seats
      - the number of seats the airplane has
      N_03:
      - the value of the number of coach class seats minus 4 times the number of first
        - class seats
      - the value of the number of coach class seats minus 4 times the first - class
        seats
      - the value of the number of coach seats minus 4 times the number of first -
        class seats
      N_04:
      - a number in the phrase " 4 times the number of first - class seats "
      - the multiplier for the number of first - class seats
      - a number in the phrase " 4 times the number of first - class seats "
      X_00:
      - the number of first - class seats
      - the number of first - class seats
      - the number of first - class seats
      X_01:
      - the number of coach class seats
      - the number of coach class seats
      - the number of coach class seats
  info:
    answers:
    - c: '310'
      f: '77'
    item_id: 604cc852117d71c492a62be1
    numbers:
      N_00: '1'
      N_01: '1'
      N_02: '387'
      N_03: '2'
      N_04: '4'
      N_05: '1'
      N_06: '1'
    split: null
    variables:
    - f
    - c
  text:
    numbers:
      shape:
      - 50
      target: __  0 __ __  1 __ __  2  2 __ __ __ __ __ __ __ __ __  3 __ __  4 __
        __ __ __  5  5  5 __ __ __ __  6  6  6 __ __ __ __ __ __ __ __ __ __ __ __
        __ __
    raw: 'an airplane has a total of 38 ##7 seats . the number of coach class seats
      is 2 more than 4 times the number of first - class seats . how many first -
      class and coach class seats are there on the plane ?'
    snippets:
      shape:
      - 7
      - 7
      target:
      - an airplane has a
      - an airplane has a total of 38
      - 'a total of 38 ##7 seats .'
      - class seats is 2 more than 4
      - 2 more than 4 times the number
      - the number of first - class seats
      - . how many first - class and
    tokens:
      shape:
      - 50
      target: '[CLS] an airplane has a total of 38 ##7 seats . the number of coach
        class seats is 2 more than 4 times the number of first - class seats . how
        many first - class and coach class seats are there on the plane ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 13
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: *(N_01, R_00) R_03: *(N_02,
      R_01) R_04: +(R_02, R_03) R_05: =(N_05, R_04) R_06: +(R_00, R_01) R_07: =(N_03,
      R_06) R_08: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the cost of a ceramic store
      N_02:
      - the cost of a ceramic store
      N_03:
      - the total number of cups
      N_05:
      - the total cost of cups
      X_00:
      - the number of plastic cups
      X_01:
      - the number of ceramic cups
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the unit price of a plastic cup
      - the cost of plastic cups
      - the cost of one plastic cup
      N_02:
      - the unit price of a ceramic cup
      - the cost of ceramic cups
      - the cost of one ceramic cup
      N_03:
      - the sum of the number of plastic cups and ceramic cups
      - total number of cups sold
      - the total number of cups
      N_05:
      - the sum of the price of plastic cups and ceramic cups
      - total income from selling cups
      - the total receipts
      X_00:
      - the number of plastic cups
      - the number of plastic cups sold
      - the number of plastic cups
      X_01:
      - the number of ceramic cups
      - the number of ceramic cups sold
      - the number of ceramic cups
  info:
    answers:
    - c: '372'
      p: '128'
    item_id: 604cc853117d71c492a62d14
    numbers:
      N_00: '1'
      N_01: '3.25000000000000'
      N_02: '4.50000000000000'
      N_03: '500'
      N_04: '1'
      N_05: '2090'
    split: null
    variables:
    - p
    - c
  text:
    numbers:
      shape:
      - 50
      target: __  0 __ __ __ __ __ __  1  1  1 __ __ __ __ __ __  2  2  2 __ __ __
        __  3 __ __ __ __  4 __ __  5  5 __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __
    raw: 'a discount store sold plastic cups for 3 . 25 dollars each and ceramic cups
      for 4 . 50 dollars each . if 500 cups were sold for a total of 209 ##0 dollars
      , how many plastic cups and ceramic cups were sold ?'
    snippets:
      shape:
      - 6
      - 7
      target:
      - a discount store sold
      - plastic cups for 3 . 25 dollars
      - ceramic cups for 4 . 50 dollars
      - each . if 500 cups were sold
      - were sold for a total of 209
      - 'a total of 209 ##0 dollars ,'
    tokens:
      shape:
      - 50
      target: '[CLS] a discount store sold plastic cups for 3 . 25 dollars each and
        ceramic cups for 4 . 50 dollars each . if 500 cups were sold for a total of
        209 ##0 dollars , how many plastic cups and ceramic cups were sold ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 13
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: /(1, N_00) R_03: /(1, N_02)
      R_04: +(R_02, R_03) R_05: *(R_00, R_04) R_06: =(R_01, R_05) R_07: /(1, N_00)
      R_08: *(N_03, R_07) R_09: -(1, R_08) R_10: =(R_01, R_09) R_11: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of hours taken for the fast painter to paint 6 hours
      N_02:
      - the number of hours taken for the fast painter to paint 6 hours
      N_03:
      - the number of hours that the slower painter takes to paint 6 hours
      X_00:
      - the number of hours taken if they paint at the slow painter
      X_01:
      - the number of hours that the slow painter takes to paint 6 hours
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of hours taken for the slow painter to paint
      - the hours consumed for the slower painter to paint
      - the number of hours the slow painter takes to paint
      N_02:
      - the number of hours taken for the fast painter to paint
      - the hours consumed for the fast painter to paint
      - the number of hours the fast painter takes to paint
      N_03:
      - the number of hours until the fast painter starts after the slow painter started
      - the hours that the faster painter started working later than the slower painter
      - the value of the number of hours the slower painter paints minus that the
        faster painter paints
      X_00:
      - the number of hours taken if they paint together after the slow painter worked
        3 hours
      - the hours consumed when two painters work together
      - the number of hours for which two painters paint together
      X_01:
      - the amount of remaining work after the slow painter worked 3 hours alone
      - the amount of work remained after 3 hours
      - the portion the two painters paint together
  info:
    answers:
    - h: '1.20000000000000'
      r: '0.500000000000000'
    item_id: 604cc853117d71c492a6301c
    numbers:
      N_00: '6'
      N_01: '2'
      N_02: '4'
      N_03: '3'
    split: null
    variables:
    - h
    - r
  text:
    numbers:
      shape:
      - 50
      target: __ __ __ __ __ __ __ __  0 __ __ __ __ __ __  1 __ __ __ __ __ __ __
        __ __ __ __  2 __ __ __ __ __  3 __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __
    raw: if the slower painter , who takes 6 hours to paint , starts at two o ' clock
      , and the fast painter , who takes 4 hours to paint , starts 3 hours later than
      the slow painter , what time do they finish ?
    snippets:
      shape:
      - 4
      - 7
      target:
      - ', who takes 6 hours to paint'
      - ', starts at two o '' clock'
      - ', who takes 4 hours to paint'
      - paint , starts 3 hours later than
    tokens:
      shape:
      - 50
      target: '[CLS] if the slower painter , who takes 6 hours to paint , starts at
        two o '' clock , and the fast painter , who takes 4 hours to paint , starts
        3 hours later than the slow painter , what time do they finish ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 13
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(R_00, R_01) R_03: =(N_00,
      R_02) R_04: /(N_01, 100) R_05: *(R_01, R_04) R_06: +(R_01, R_05) R_07: =(R_00,
      R_06) R_08: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the total amount of darren's fence
      N_01:
      - the percentage of the fence that he has to paint the fence
      X_00:
      - the number of the fence to paint the fence
      X_01:
      - the number of the fence agreed
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the sum of the length that darren and doug will paint
      - the amount of area darren and doug must paint
      - the number of the fence
      N_01:
      - the percentage of the length that doug will paint which is the length that
        darren will paint more
      - the percentage of the fence darren has to paint more than doug
      - the percentage of paint darren uses more
      X_00:
      - the length that darren will paint
      - the amount of area darren must paint
      - the number of fences painted by darren
      X_01:
      - the length that doug will paint
      - the amount of area doug must paint
      - the number of fences painted by doug
  info:
    answers:
    - d1: '432'
      d2: '360'
    item_id: 604cc853117d71c492a62de6
    numbers:
      N_00: '792'
      N_01: '20'
    split: null
    variables:
    - d1
    - d2
  text:
    numbers:
      shape:
      - 50
      target: __ __ __ __ __ __ __  0  0 __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __  1 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __
    raw: 'darren and doug must paint the 79 ##2 - foot fence that en ##ci ##rcle ##s
      their family home . because darren is older , he has agreed to paint 20 % more
      than doug . how much of the fence will each boy paint ?'
    snippets:
      shape:
      - 2
      - 7
      target:
      - 'must paint the 79 ##2 - foot'
      - agreed to paint 20 % more than
    tokens:
      shape:
      - 50
      target: '[CLS] darren and doug must paint the 79 ##2 - foot fence that en ##ci
        ##rcle ##s their family home . because darren is older , he has agreed to
        paint 20 % more than doug . how much of the fence will each boy paint ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 13
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_01) R_02: +(N_02, R_01) R_03: =(R_00,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of mary's seashells
      N_01:
      - the number of melanie's seashells
      N_02:
      - the number of jason's seashells
      X_00:
      - the total number of seashells
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of mary's seashells
      - the number of seashells mary found
      - the number of seashells mary found
      N_01:
      - the number of melanie's seashells
      - the number of seashells melanie found
      - the number of seashells melanie found
      N_02:
      - the number of jason's seashells
      - the number of seashells jason found
      - the number of seashells jason found
      X_00:
      - the total number of seashells
      - the total number of seashells the three people found
      - the total number of seashells they found together
  info:
    answers:
    - s: '100'
    item_id: 60f9186c90be09b72239f052
    numbers:
      N_00: '45'
      N_01: '23'
      N_02: '32'
      N_03: '31'
    split: null
    variables:
    - s
  text:
    numbers:
      shape:
      - 50
      target: __ __ __  0 __ __ __ __ __ __  1 __ __ __ __ __ __ __  2 __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __  3 __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __
    raw: 'mary found 45 seas ##hell ##s , melanie found 23 seas ##hell ##s , and jason
      found 32 seas ##hell ##s on the beach . when they cleaned them , they discovered
      that 31 were cracked . how many seas ##hell ##s did they find together ?'
    snippets:
      shape:
      - 4
      - 7
      target:
      - 'mary found 45 seas ##hell ##s'
      - ', melanie found 23 seas ##hell ##s'
      - 'and jason found 32 seas ##hell ##s'
      - they discovered that 31 were cracked .
    tokens:
      shape:
      - 50
      target: '[CLS] mary found 45 seas ##hell ##s , melanie found 23 seas ##hell
        ##s , and jason found 32 seas ##hell ##s on the beach . when they cleaned
        them , they discovered that 31 were cracked . how many seas ##hell ##s did
        they find together ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 13
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_01) R_02: +(N_02, R_01) R_03: =(R_00,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of keith's seashells
      N_01:
      - the number of jessica's seashells
      N_02:
      - the number of tim's seashells
      X_00:
      - the total number of seashells
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of keith's seashells
      - the number of keith's found seashells
      - the number of seashells keith found
      N_01:
      - the number of jessica's seashells
      - the number of jessica's found seashells
      - the number of seashells jessica found
      N_02:
      - the number of tim's seashells
      - the number of tim's found seashells
      - the number of seashells tim found
      X_00:
      - the total number of seashells
      - the total number of three people's seashells
      - the total number of seashells they found together
  info:
    answers:
    - s: '21'
    item_id: 60f9186c90be09b72239ec86
    numbers:
      N_00: '6'
      N_01: '8'
      N_02: '7'
      N_03: '3'
    split: null
    variables:
    - s
  text:
    numbers:
      shape:
      - 50
      target: __ __ __  0 __ __ __ __ __ __  1 __ __ __ __ __ __ __  2 __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __  3 __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __
    raw: 'keith found 6 seas ##hell ##s , jessica found 8 seas ##hell ##s , and tim
      found 7 seas ##hell ##s on the beach . when they cleaned them , they discovered
      that 3 were cracked . how many seas ##hell ##s did they find together ?'
    snippets:
      shape:
      - 4
      - 7
      target:
      - 'keith found 6 seas ##hell ##s'
      - ', jessica found 8 seas ##hell ##s'
      - 'and tim found 7 seas ##hell ##s'
      - they discovered that 3 were cracked .
    tokens:
      shape:
      - 50
      target: '[CLS] keith found 6 seas ##hell ##s , jessica found 8 seas ##hell ##s
        , and tim found 7 seas ##hell ##s on the beach . when they cleaned them ,
        they discovered that 3 were cracked . how many seas ##hell ##s did they find
        together ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 13
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: -(R_00, R_01) R_03: =(N_02,
      R_02) R_04: *(N_03, R_00) R_05: *(N_03, R_01) R_06: +(R_04, R_05) R_07: =(N_05,
      R_06) R_08: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the value of the speed of the first car minus the speed of the second car
      N_03:
      - the number of hours each car traveled
      N_05:
      - the distance between the 2 cars after 5 hours
      X_00:
      - the speed of the first car
      X_01:
      - the speed of the second car
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the value of one's speed minus the other's speed
      - the value of the speed of one car minus the speed of the other car
      - the value of the speed of the faster car minus the speed of the other car
      N_03:
      - the hours traveled for comparison
      - the travelling time
      - the hours for which the two cars have traveled
      N_05:
      - the distance between the 2 cars after 5 hours
      - the distance between two cars
      - the distance between the two cars after 5 hours
      X_00:
      - the speed of one car
      - the speed of one car
      - the speed of the faster car
      X_01:
      - the speed of the other car
      - the speed of the other car
      - the speed of the other car
  info:
    answers:
    - s1: '35'
      s2: '20'
    item_id: 604cc852117d71c492a62b37
    numbers:
      N_00: '2'
      N_01: '1'
      N_02: '15'
      N_03: '5'
      N_04: '2'
      N_05: '275'
    split: null
    variables:
    - s1
    - s2
  text:
    numbers:
      shape:
      - 50
      target: __  0 __ __ __ __ __ __ __ __ __ __ __ __ __ __  1 __ __ __  2 __ __
        __ __ __ __ __ __ __  3 __ __ __  4 __ __  5 __ __ __ __ __ __ __ __ __ __
        __ __
    raw: 2 cars start at the same place and time and travel in opposite directions
      . one car is traveling 15 kilometers per hour faster than the other . after
      5 hours , the 2 cars are 275 km apart . find the speed of each car .
    snippets:
      shape:
      - 6
      - 7
      target:
      - 2 cars start at
      - opposite directions . one car is traveling
      - car is traveling 15 kilometers per hour
      - other . after 5 hours , the
      - hours , the 2 cars are 275
      - 2 cars are 275 km apart .
    tokens:
      shape:
      - 50
      target: '[CLS] 2 cars start at the same place and time and travel in opposite
        directions . one car is traveling 15 kilometers per hour faster than the other
        . after 5 hours , the 2 cars are 275 km apart . find the speed of each car
        . [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 13
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(R_00, R_01) R_03: =(N_00,
      R_02) R_04: /(N_01, 100) R_05: *(R_00, R_04) R_06: /(N_02, 100) R_07: *(R_01,
      R_06) R_08: +(R_05, R_07) R_09: =(N_03, R_08) R_10: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the total amount of money stan invested
      N_01:
      - the interest rate of the first kind
      N_02:
      - the interest rate of the second kind
      N_03:
      - the amount of interest gained
      N_04:
      - the interest rate of the first kind
      N_05:
      - the interest rate of the second kind
      X_00:
      - the amount of money stan invested in the first case
      X_01:
      - the amount of money stan invested in the second case
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the sum of the number of dollars invested in the first investment and the
        number of dollars invested in the second investment
      - the total amount of money invested
      - the total invested dollar
      N_01:
      - the interest rate of the first investment
      - the interest rate of the first kind
      - the interest ratio of the first part
      N_02:
      - the interest rate of the second investment
      - the interest rate of the second kind
      - the interest ratio of the other part
      N_03:
      - the interest earned from the first investment and the second investment
      - the total amount of interest gained
      - the total interest
      N_04:
      - the interest rate of the first investment
      - the interest rate of the first kind
      - the interest ratio of the first part
      N_05:
      - the interest rate of the second investment
      - the interest rate of the second kind
      - the interest ratio of the other part
      X_00:
      - the number of dollars invested in the first investment
      - the amount of money invested in the first kind
      - the invested dollars off the first part
      X_01:
      - the number of dollars invested at the second investment
      - the amount of money invested in the second kind
      - the invested dollars off the other part
  info:
    answers:
    - i1: '5000'
      i2: '12000'
    item_id: 604cc852117d71c492a62b95
    numbers:
      N_00: '17000'
      N_01: '18'
      N_02: '4'
      N_03: '1380'
      N_04: '18'
      N_05: '4'
    split: null
    variables:
    - i1
    - i2
  text:
    numbers:
      shape:
      - 50
      target: __ __ __  0  0  0 __ __ __ __  1 __ __ __ __  2 __ __ __ __ __ __ __
        __ __ __ __ __ __  3  3  3 __ __ __ __ __ __ __ __  4 __ __ __ __ __  5 __
        __ __
    raw: stan invested 17 , 000 dollars , part at 18 % and part at 4 % . if the total
      interest at the end of the year is 1 , 380 dollars , how much did he invest
      at 18 % ? how much at 4 % ?
    snippets:
      shape:
      - 6
      - 7
      target:
      - stan invested 17 , 000 dollars
      - ', part at 18 % and part'
      - and part at 4 % . if
      - the year is 1 , 380 dollars
      - he invest at 18 % ? how
      - how much at 4 % ?
    tokens:
      shape:
      - 50
      target: '[CLS] stan invested 17 , 000 dollars , part at 18 % and part at 4 %
        . if the total interest at the end of the year is 1 , 380 dollars , how much
        did he invest at 18 % ? how much at 4 % ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 13
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: *(N_01, R_00) R_03: *(N_02,
      R_01) R_04: +(R_02, R_03) R_05: =(N_04, R_04) R_06: +(R_00, R_01) R_07: =(N_03,
      R_06) R_08: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the cost of an advance - day ticket
      N_02:
      - the cost of the tickets sold
      N_03:
      - the total number of tickets sold
      N_04:
      - the total number of tickets sold
      X_00:
      - the number of advance - day tickets sold
      X_01:
      - the number of same tickets sold
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - an advance ticket cost
      - the cost for one advance ticket
      - the cost of an advance ticket
      N_02:
      - a same - day ticket cost
      - the cost for one same - day ticket
      - the cost of a same - day ticket
      N_03:
      - the total number of tickets sold
      - the total number of tickets sold
      - the total number of tickets
      N_04:
      - the total sales from tickets
      - the total receipts
      - the total cost of the tickets
      X_00:
      - the number of advance tickets sold
      - the number of advance tickets
      - the number of advance tickets
      X_01:
      - the number of same - day tickets sold
      - the number of same - day tickets
      - the number of same - day tickets
  info:
    answers:
    - a: '20'
      s: '40'
    item_id: 604cc853117d71c492a62cbe
    numbers:
      N_00: '1'
      N_01: '20'
      N_02: '30'
      N_03: '60'
      N_04: '1600'
    split: null
    variables:
    - a
    - s
  text:
    numbers:
      shape:
      - 50
      target: __ __ __ __  0 __ __  1 __ __ __ __ __ __ __  2 __ __ __ __ __ __ __
        __  3 __ __ __ __  4  4  4 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __
    raw: advance tickets to a show cost 20 , and same - day tickets cost 30 . the
      total number of tickets sold was 60 for total receipts of 1 , 600 . how many
      advance tickets were sold ? how many same - day tickets were sold ?
    snippets:
      shape:
      - 5
      - 7
      target:
      - advance tickets to a show cost 20
      - a show cost 20 , and same
      - day tickets cost 30 . the total
      - tickets sold was 60 for total receipts
      - total receipts of 1 , 600 .
    tokens:
      shape:
      - 50
      target: '[CLS] advance tickets to a show cost 20 , and same - day tickets cost
        30 . the total number of tickets sold was 60 for total receipts of 1 , 600
        . how many advance tickets were sold ? how many same - day tickets were sold
        ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_01, R_00) R_02: *(N_02, R_00) R_03: +(R_01,
      R_02) R_04: =(N_03, R_03) R_05: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the speed of a plane
      N_02:
      - the speed of another plane
      N_03:
      - the distance between the a plane and another plane
      X_00:
      - the number of hours of traveling east if they leave
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the plane speed traveling east
      - speed of the plane traveling east
      - a plane speed to the east per hour
      N_02:
      - the plane speed traveling west
      - speed of the plane traveling west
      - another plane speed to the west per hour
      N_03:
      - the distance between the 2 planes
      - distance between two planes after several hours
      - the distance between planes
      X_00:
      - the time spent traveling
      - the number of hours passed
      - the travel plane time
  info:
    answers:
    - h: '3.50000000000000'
    item_id: 604cc852117d71c492a62b62
    numbers:
      N_00: '1'
      N_01: '325'
      N_02: '275'
      N_03: '2100'
    split: null
    variables:
    - h
  text:
    numbers:
      shape:
      - 57
      target: __  0 __ __ __ __ __  1 __ __ __ __ __ __ __ __ __ __ __  2 __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __  3  3 __ __
        __ __ __ __ __ __ __ __ __
    raw: 'a plane travels due east at 325 miles per hour , and another plane travels
      due west at 275 miles per hour . if they leave at the same time and from the
      same place , in how many hours will they be 210 ##0 miles apart ?'
    snippets:
      shape:
      - 4
      - 7
      target:
      - a plane travels due
      - due east at 325 miles per hour
      - due west at 275 miles per hour
      - 'will they be 210 ##0 miles apart'
    tokens:
      shape:
      - 57
      target: '[CLS] a plane travels due east at 325 miles per hour , and another
        plane travels due west at 275 miles per hour . if they leave at the same time
        and from the same place , in how many hours will they be 210 ##0 miles apart
        ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: /(R_00, R_01) R_03: /(N_01,
      N_02) R_04: =(R_02, R_03) R_05: +(N_04, R_01) R_06: -(R_00, N_05) R_07: =(R_05,
      R_06) R_08: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the numerator of the ratio of the number of boys to the number of girls
      N_02:
      - the denominator of the ratio of the number of boys to the number of girls
      N_04:
      - the value of the number of boys minus the number of girls
      N_05:
      - the value of the number of boys minus the number of girls
      X_00:
      - the number of girls
      X_01:
      - the number of boys
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the numerator of the ratio of the number of girls to the number of boys
      - the numerator of the ratio of the number of girls to boys
      - the nominator of the ratio of the number of girls to the number of boys
      N_02:
      - the denominator of the ratio of the number of girls to the number of boys
      - the denominator of the ratio of the number of girls to boys
      - the denumerator of the ratio of the number of boys to the number of girls
      N_04:
      - the number of boys added to make an equal number of boys and girls
      - the number of boys to be added to make the number of boys and girls equal
      - the number of new boys if there would have been an equal number of boys and
        girls
      N_05:
      - the number of girls subtracted to make an equal number of boys and girls
      - the number of girls to be subtracted to make the number of boys and girls
        equal
      - the number of girls gone if there would have been an equal number of boys
        and girls
      X_00:
      - the number of girls
      - the number of girls
      - the number of girls
      X_01:
      - the number of boys
      - the number of boys
      - the number of boys
  info:
    answers:
    - b: '9'
      g: '15'
    item_id: 604cc853117d71c492a630fc
    numbers:
      N_00: '1'
      N_01: '5'
      N_02: '3'
      N_03: '1'
      N_04: '3'
      N_05: '3'
      N_06: '1'
    split: null
    variables:
    - g
    - b
  text:
    numbers:
      shape:
      - 57
      target: __ __ __ __ __ __ __ __  0 __ __ __  1 __  2 __ __ __ __ __  3 __ __
        __ __ __ __ __ __ __ __  4 __ __ __  5 __ __ __ __ __ __ __ __ __ __  6 __
        __ __ __ __ __ __ __ __ __
    raw: the ratio of girls to boys of a dance group is 5 to 3 . there would have
      been an equal number of boys and girls if there had been 3 more boys and 3 fewer
      girls . how many girls and boys are in a dance group ?
    snippets:
      shape:
      - 7
      - 7
      target:
      - to boys of a dance group is
      - dance group is 5 to 3 .
      - is 5 to 3 . there would
      - would have been an equal number of
      - there had been 3 more boys and
      - more boys and 3 fewer girls .
      - boys are in a dance group ?
    tokens:
      shape:
      - 57
      target: '[CLS] the ratio of girls to boys of a dance group is 5 to 3 . there
        would have been an equal number of boys and girls if there had been 3 more
        boys and 3 fewer girls . how many girls and boys are in a dance group ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, R_00) R_02: =(N_02, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of bales in the barn
      N_01:
      - the number of bales in the shed
      N_02:
      - the number of bales in the barn
      X_00:
      - the total number of bales stacked in the barn
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - number of bales of hay that were in the barn
      - the original number of bales of hay
      - the bales of hay in the barn
      N_02:
      - number of bales of hay now
      - the number of bales of hay in the barn now
      - the total bales of hay there are now in the barn
      X_00:
      - the number of bales jason stacked
      - the additional number of bales jason stacked in the barn
      - the bales of hay he stored in the barn
  info:
    answers:
    - s: '66'
    item_id: 60f9186c90be09b72239eb1a
    numbers:
      N_00: '32'
      N_01: '26'
      N_02: '98'
    split: null
    variables:
    - s
  text:
    numbers:
      shape:
      - 57
      target: __ __ __  0 __ __ __ __ __ __ __ __  1 __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __  2 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __
    raw: 'there were 32 bal ##es of hay in the barn and 26 bal ##es in the shed .
      jason stacked bal ##es in the barn today . there are now 98 bal ##es of hay
      in the barn . how many bal ##es did he store in the barn ?'
    snippets:
      shape:
      - 3
      - 7
      target:
      - 'there were 32 bal ##es of'
      - 'the barn and 26 bal ##es in'
      - 'there are now 98 bal ##es of'
    tokens:
      shape:
      - 57
      target: '[CLS] there were 32 bal ##es of hay in the barn and 26 bal ##es in
        the shed . jason stacked bal ##es in the barn today . there are now 98 bal
        ##es of hay in the barn . how many bal ##es did he store in the barn ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(R_00, R_01) R_03: =(N_01,
      R_02) R_04: /(N_03, 100) R_05: *(R_00, R_04) R_06: /(N_04, 100) R_07: *(R_01,
      R_06) R_08: +(R_05, R_07) R_09: =(N_06, R_08) R_10: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the total invested dollars
      N_03:
      - the interest rate of investment of one part
      N_04:
      - the interest rate of investment of the other part
      N_06:
      - the value of the total interest
      N_07:
      - the interest rate of investment of the other part
      X_00:
      - the invested dollars on one part
      X_01:
      - the invested dollars on another part
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the total number of dollars invested
      - the total amount invested
      - the total amount of investment in dollars
      N_03:
      - the interest of the first investment in dollars
      - one of the interest rates
      - the annual interest rate in the first case
      N_04:
      - the interest of the second investment in dollars
      - the other interest rate
      - the annual interest rate in the second case
      N_06:
      - the total interest made from the investment in dollars
      - the total dollars earned in interest
      - the total amount of interest
      N_07:
      - the interest of the second investment in dollars
      - the other interest rate
      - the annual interest rate in the second case
      X_00:
      - the number of dollars invested in the first investment
      - the amount invested at the 9 % interest rate
      - the amount of investment in the first case in dollars
      X_01:
      - the number of dollars invested in the second investment
      - the amount invested at the 8 % interest rate
      - the amount of investment in the second case in dollars
  info:
    answers:
    - i1: '4000'
      i2: '5000'
    item_id: 604cc852117d71c492a62b8a
    numbers:
      N_00: '1'
      N_01: '9000'
      N_02: '1'
      N_03: '9'
      N_04: '8'
      N_05: '1'
      N_06: '770'
      N_07: '8'
    split: null
    variables:
    - i2
    - i1
  text:
    numbers:
      shape:
      - 57
      target: __ __ __  0 __  1  1 __ __ __ __  2 __ __ __ __ __ __ __ __ __ __ __
        __  3 __ __ __ __ __  4 __ __ __ __  5 __ __  6 __ __ __ __ __ __ __ __ __  7
        __ __ __ __ __ __ __ __
    raw: 'walt made an extra 900 ##0 dollars last year from a part - time job . he
      invested part of the money at 9 % and the rest at 8 % . he made a total of 770
      dollars in interest . how much was invested at 8 % ?'
    snippets:
      shape:
      - 8
      - 7
      target:
      - 'walt made an extra 900 ##0'
      - 'made an extra 900 ##0 dollars last'
      - last year from a part - time
      - the money at 9 % and the
      - the rest at 8 % . he
      - . he made a total of 770
      - a total of 770 dollars in interest
      - was invested at 8 % ?
    tokens:
      shape:
      - 57
      target: '[CLS] walt made an extra 900 ##0 dollars last year from a part - time
        job . he invested part of the money at 9 % and the rest at 8 % . he made a
        total of 770 dollars in interest . how much was invested at 8 % ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: *(N_01, R_00) R_03: *(N_03,
      R_01) R_04: +(R_02, R_03) R_05: *(N_06, N_07) R_06: =(R_04, R_05) R_07: +(R_00,
      R_01) R_08: =(N_06, R_07) R_09: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the cost of some hard candy per pound
      N_03:
      - the cost of the other hard candy per pound
      N_06:
      - the amount of the mixture
      N_07:
      - the cost of a mixture candy per pound
      X_00:
      - the amount of some hard candy
      X_01:
      - the amount of the other hard candy
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the price of the first kind of hard candy per pound
      - the cost of hard candy per pound in the first case
      - the cost per pound of 2 - dollar candy
      N_03:
      - the price of the second kind of hard candy per pound
      - the cost of hard candy per pound in the second case
      - the cost per pound of 3 - dollar candy
      N_06:
      - the number of pounds of the mixture
      - the amount of the candy mixture
      - the total pounds of the mixture
      N_07:
      - the price of the mixture per pound
      - the cost of the candy mixture per pound
      - the cost of the mixture per pound
      X_00:
      - the number of pounds of the first kind of hard candy in the mixture
      - the amount of the hard candy in the first case
      - the amount of 2 - dollar candy
      X_01:
      - the number of pounds of the second kind of hard candy in the mixture
      - the amount of the hard candy in the second case
      - the amount of 3 - dollar candy
  info:
    answers:
    - c1: '64'
      c2: '16'
    item_id: 604cc852117d71c492a62bc9
    numbers:
      N_00: '1'
      N_01: '2'
      N_02: '1'
      N_03: '3'
      N_04: '1'
      N_05: '1'
      N_06: '80'
      N_07: '2.20000000000000'
    split: null
    variables:
    - c1
    - c2
  text:
    numbers:
      shape:
      - 57
      target: __  0 __ __ __ __ __ __  1 __  2 __ __ __ __  3 __  4 __ __ __ __ __
        __  5 __ __  6 __ __ __ __ __ __  7  7  7 __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __
    raw: a dealer has some hard candy worth 2 dollars a pound and some worth 3 dollars
      a pound . he wishes to make a mixture of 80 pounds that he can sell for 2 .
      20 dollars per pound . how many pounds of each kind should he use ?
    snippets:
      shape:
      - 8
      - 7
      target:
      - a dealer has some
      - hard candy worth 2 dollars a pound
      - worth 2 dollars a pound and some
      - and some worth 3 dollars a pound
      - worth 3 dollars a pound . he
      - wishes to make a mixture of 80
      - a mixture of 80 pounds that he
      - can sell for 2 . 20 dollars
    tokens:
      shape:
      - 57
      target: '[CLS] a dealer has some hard candy worth 2 dollars a pound and some
        worth 3 dollars a pound . he wishes to make a mixture of 80 pounds that he
        can sell for 2 . 20 dollars per pound . how many pounds of each kind should
        he use ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_01) R_02: +(N_02, R_01) R_03: =(R_00,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of cups of strawberries
      N_01:
      - the number of cups of yogurt
      N_02:
      - the number of cups of orange juice
      X_00:
      - the total number of cups of ingredients
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of cups of strawberries
      - the number of cups of strawberries
      - the number of cups of strawberries ellen used
      N_01:
      - the number of cups of yogurt
      - the number of cups of yogurt
      - the number of cups of yogurt she used
      N_02:
      - the number of cups of orange juice
      - the number of cups of orange
      - the number of cups of orange juice she used
      X_00:
      - the total number of cups of ingredients
      - the number of all cups
      - the number of cups of ingredients she used
  info:
    answers:
    - c: '0.500000000000000'
    item_id: 60f9186c90be09b72239f27a
    numbers:
      N_00: '0.200000000000000'
      N_01: '0.100000000000000'
      N_02: '0.200000000000000'
    split: null
    variables:
    - c
  text:
    numbers:
      shape:
      - 57
      target: __ __ __ __ __ __ __ __ __ __ __ __  0  0  0 __ __ __ __ __  1  1  1
        __ __ __ __ __ __ __  2  2  2 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __
    raw: 'ellen made smooth ##ies in the blend ##er . she used 0 . 2 cups of straw
      ##berries , 0 . 1 cups of yo ##gur ##t , and 0 . 2 cups of orange juice . how
      many cups of ingredients did ellen use for the smooth ##ies ?'
    snippets:
      shape:
      - 3
      - 7
      target:
      - . she used 0 . 2 cups
      - 'straw ##berries , 0 . 1 cups'
      - '##t , and 0 . 2 cups'
    tokens:
      shape:
      - 57
      target: '[CLS] ellen made smooth ##ies in the blend ##er . she used 0 . 2 cups
        of straw ##berries , 0 . 1 cups of yo ##gur ##t , and 0 . 2 cups of orange
        juice . how many cups of ingredients did ellen use for the smooth ##ies ?
        [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_01, R_00) R_02: =(N_02, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the distance of the odometer
      N_02:
      - the distance of the odometer
      X_00:
      - the total distance traveled by the odometer
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the miles mrs. hilt had traveled
      - the value of hilt's traveled miles before a trip
      - the number that the odometer read before a trip
      N_02:
      - the gauge of the odometer recorded at lunch in a trip
      - the value of hilt's newly traveled miles after she stopped for lunch
      - the number that the odometer read when she stopped for lunch
      X_00:
      - the distance mrs. hilt actually traveled
      - the value of miles for her trip
      - the number of miles
  info:
    answers:
    - m: '159.700000000000'
    item_id: 60f9186c90be09b72239ead8
    numbers:
      N_00: '1'
      N_01: '212.300000000000'
      N_02: '372'
    split: null
    variables:
    - m
  text:
    numbers:
      shape:
      - 57
      target: __ __ __ __ __ __ __ __ __ __ __ __ __ __  0 __ __ __ __ __ __ __ __
        __ __ __  1  1  1 __ __ __ __ __ __ __ __ __ __ __ __ __  2  2 __ __ __ __
        __ __ __ __ __ __ __ __ __
    raw: 'mrs . hilt looked at her car '' s o ##dome ##ter before a trip . the o ##dome
      ##ter showed that she had traveled 212 . 3 miles . when she stopped for lunch
      , the o ##dome ##ter read 37 ##2 . how many miles had she traveled ?'
    snippets:
      shape:
      - 3
      - 7
      target:
      - '##dome ##ter before a trip . the'
      - she had traveled 212 . 3 miles
      - '##dome ##ter read 37 ##2 . how'
    tokens:
      shape:
      - 57
      target: '[CLS] mrs . hilt looked at her car '' s o ##dome ##ter before a trip
        . the o ##dome ##ter showed that she had traveled 212 . 3 miles . when she
        stopped for lunch , the o ##dome ##ter read 37 ##2 . how many miles had she
        traveled ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(N_02, N_05) R_03: *(R_00,
      R_02) R_04: *(N_05, R_01) R_05: =(R_03, R_04) R_06: -(R_01, R_00) R_07: =(N_04,
      R_06) R_08: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the number of hours it takes for the passenger train to overtake the freight
        train
      N_04:
      - the value of the rate of the passenger train minus the rate of the passenger
        train
      N_05:
      - the hours it takes for the passenger train to overtake the freight train
      X_00:
      - the speed of the passenger train
      X_01:
      - the rate of the freight train
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the waiting hours of a passenger train leaving the depot after a freight train
        leaves the same depot
      - time the freight train left the train depot
      - the value of the total traveling hours of the freight train minus the total
        traveling hours of the passenger train
      N_04:
      - the value of the passenger train speed minus the freight train speed
      - the value of passenger train speed minus the freight train speed
      - the value of the rate of the passenger train minus the value of the freight
        train
      N_05:
      - the hours for the passenger train to overtake the freight train
      - hours of the passenger train run to overtake the freight train
      - the hours to take for the passenger train to overtake the freight train
      X_00:
      - the speed of the freight train
      - the freight train speed
      - the rate of the freight train
      X_01:
      - the speed of the passenger train
      - a passenger train speed
      - the rate of the passenger train
  info:
    answers:
    - f: '30'
      p: '50'
    item_id: 604cc853117d71c492a62e69
    numbers:
      N_00: '1'
      N_01: '1'
      N_02: '2'
      N_03: '1'
      N_04: '20'
      N_05: '3'
    split: null
    variables:
    - f
    - p
  text:
    numbers:
      shape:
      - 57
      target: __  0 __ __ __  1 __ __  2 __ __  3 __ __ __ __ __ __ __ __ __ __ __
        __  4 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __  5 __ __ __ __ __ __ __
    raw: 'a passenger train leaves a train depot 2 hours after a freight train leaves
      the same depot . the freight train is traveling 20 mph slower than the passenger
      train . find the rate of each train if the passenger train over ##take ##s the
      freight train in 3 hours .'
    snippets:
      shape:
      - 6
      - 7
      target:
      - a passenger train leaves
      - passenger train leaves a train depot 2
      - a train depot 2 hours after a
      - 2 hours after a freight train leaves
      - train is traveling 20 mph slower than
      - freight train in 3 hours .
    tokens:
      shape:
      - 57
      target: '[CLS] a passenger train leaves a train depot 2 hours after a freight
        train leaves the same depot . the freight train is traveling 20 mph slower
        than the passenger train . find the rate of each train if the passenger train
        over ##take ##s the freight train in 3 hours . [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: /(N_01, 100) R_03: *(R_00,
      R_02) R_04: /(N_03, 100) R_05: *(R_01, R_04) R_06: +(R_03, R_05) R_07: /(N_06,
      100) R_08: *(N_04, R_07) R_09: =(R_06, R_08) R_10: +(R_00, R_01) R_11: =(N_04,
      R_10) R_12: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the concentration of the first kind of acid solution
      N_03:
      - the concentration of the second kind of acid solution
      N_04:
      - the amount of the mixed solution
      N_06:
      - the concentration of the mixed solution
      N_07:
      - the concentration of the mixed kind of solution
      N_08:
      - the concentration of the mixed solution
      X_00:
      - the amount of the first kind of acid solution in the mixed kind of solution
      X_01:
      - the amount of the second kind of acid solution in the mixed kind of solution
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the concentration of the 40 % acid solution
      - the concentration of the acid solution in the first case
      - the concentration of the first solution
      N_03:
      - the concentration of the 55 % acid solution
      - the concentration of the acid solution in the second case
      - the concentration of the second solution
      N_04:
      - the total amount of mixed solution
      - the amount of the mixed solution
      - the amount of the mixed solution
      N_06:
      - the concentration of the mixed solution
      - the concentration of the mixed solution
      - the concentration of the mixed solution
      N_07:
      - the concentration of the 40 % acid solution
      - the concentration of the acid solution in the first case
      - the concentration of the first solution
      N_08:
      - the concentration of the 55 % acid solution
      - the concentration of the acid solution in the second case
      - the concentration of the second solution
      X_00:
      - the amount of the 40 % acid solution
      - the amount of the acid solution in the first case
      - the amount of 40 % acid solution
      X_01:
      - the amount of the 55 % acid solution
      - the amount of the acid solution in the second case
      - the amount of 55 % acid solution
  info:
    answers:
    - s1: '40'
      s2: '20'
    item_id: 604cc853117d71c492a62cbf
    numbers:
      N_00: '1'
      N_01: '40'
      N_02: '1'
      N_03: '55'
      N_04: '60'
      N_05: '1'
      N_06: '45'
      N_07: '40'
      N_08: '55'
    split: null
    variables:
    - s1
    - s2
  text:
    numbers:
      shape:
      - 57
      target: __  0  1 __ __ __ __  2  3 __ __ __ __ __ __ __ __  4 __ __ __  5  6
        __ __ __ __ __ __ __ __ __  7 __ __ __ __ __ __ __ __ __ __ __ __  8 __ __
        __ __ __ __ __ __ __ __ __
    raw: 'a 40 % acid solution and a 55 % acid solution must be mixed to produce 60
      liter ##s of a 45 % acid solution . how many liter ##s of 40 % acid solution
      should be used ? how many liter ##s of 55 % acid solution should be used ?'
    snippets:
      shape:
      - 9
      - 7
      target:
      - a 40 % acid
      - a 40 % acid solution
      - acid solution and a 55 % acid
      - solution and a 55 % acid solution
      - 'mixed to produce 60 liter ##s of'
      - 'liter ##s of a 45 % acid'
      - '##s of a 45 % acid solution'
      - 'liter ##s of 40 % acid solution'
      - 'liter ##s of 55 % acid solution'
    tokens:
      shape:
      - 57
      target: '[CLS] a 40 % acid solution and a 55 % acid solution must be mixed to
        produce 60 liter ##s of a 45 % acid solution . how many liter ##s of 40 %
        acid solution should be used ? how many liter ##s of 55 % acid solution should
        be used ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(R_00, R_01) R_03: =(N_01,
      R_02) R_04: /(N_06, 100) R_05: *(R_01, R_04) R_06: /(N_05, 100) R_07: *(R_00,
      R_06) R_08: +(R_05, R_07) R_09: =(N_03, R_08) R_10: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the total amount of interest gained
      N_03:
      - the total amount of interest gained
      N_04:
      - the total amount of interest gained
      N_05:
      - the interest rate of the first kind
      N_06:
      - the interest rate of the second kind
      N_07:
      - the interest rate of the first kind
      N_08:
      - the interest rate of the second kind
      X_00:
      - the amount of money invested in the first kind
      X_01:
      - the amount of money invested in the second kind
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the total amount invested in two parts
      - totaling investment dollars
      - the total dollars invested
      N_03:
      - the amount of interest for a certain year
      - the total interest
      - the interest income from the two investments
      N_04:
      - the total amount invested in two parts
      - totaling investment dollars
      - the total dollars invested
      N_05:
      - the interest rate on the first part
      - the interest ratio at one part
      - the interest rate of 16 % investment
      N_06:
      - the interest rate on the second part
      - the interest ratio at another part
      - the interest rate of 14 % investment
      N_07:
      - the interest rate on the first part
      - the interest ratio at one part
      - the interest rate of 16 % investment
      N_08:
      - the interest rate on the second part
      - the interest ratio at another part
      - the interest rate of 14 % investment
      X_00:
      - the amount invested in the first part
      - the invested dollars at one part
      - the dollars invested at a 16 % rate
      X_01:
      - the amount invested in the second part
      - the invested dollars at another part
      - the dollars invested at a 14 % rate
  info:
    answers:
    - i1: '4100'
      i2: '4700'
    item_id: 604cc853117d71c492a62c5f
    numbers:
      N_00: '2'
      N_01: '8800'
      N_02: '1'
      N_03: '1326'
      N_04: '8800'
      N_05: '16'
      N_06: '14'
      N_07: '16'
      N_08: '14'
    split: null
    variables:
    - i2
    - i1
  text:
    numbers:
      shape:
      - 57
      target: __  0 __ __ __ __  1  1 __ __ __  2 __ __ __ __ __ __  3  3 __ __ __
        __ __ __ __ __  4  4 __ __ __ __  5 __ __ __ __  6 __ __ __ __ __ __ __  7
        __ __  8 __ __ __ __ __ __
    raw: '2 investments are made totaling 880 ##0 dollars . for a certain year , these
      investments yield 132 ##6 dollars in simple interest . part of the 880 ##0 dollars
      is invested at 16 % and part at 14 % . find the amount invested at 16 % and
      14 % .'
    snippets:
      shape:
      - 9
      - 7
      target:
      - 2 investments are made
      - 'are made totaling 880 ##0 dollars .'
      - dollars . for a certain year ,
      - 'these investments yield 132 ##6 dollars in'
      - 'part of the 880 ##0 dollars is'
      - is invested at 16 % and part
      - and part at 14 % . find
      - amount invested at 16 % and 14
      - 16 % and 14 % .
    tokens:
      shape:
      - 57
      target: '[CLS] 2 investments are made totaling 880 ##0 dollars . for a certain
        year , these investments yield 132 ##6 dollars in simple interest . part of
        the 880 ##0 dollars is invested at 16 % and part at 14 % . find the amount
        invested at 16 % and 14 % . [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(R_00, R_01) R_03: =(N_01,
      R_02) R_04: *(N_03, R_00) R_05: *(N_04, R_01) R_06: +(R_04, R_05) R_07: =(N_02,
      R_06) R_08: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of etchings sold
      N_02:
      - the total cost of etchings sold
      N_03:
      - the cost of one etchings
      N_04:
      - the cost of one etchings in dollars
      N_05:
      - the cost of one etchings
      N_06:
      - the cost of one etchings
      X_00:
      - the number of etchings in the first case
      X_01:
      - the number of etchings
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the sum of the number of the first etchings and the number of the second etchings
      - the total number of etchings sold
      - the total number of etchings
      N_02:
      - the sum of the number of dollars earned from selling the first etchings and
        the number of dollars earned from selling the second etchings
      - the total amount of money gained by selling etchings
      - the total cost of etchings
      N_03:
      - the price of the first etching
      - the price of the first kind of etching
      - the cost of one etching in the first case
      N_04:
      - the price of the second etching
      - the price of the second kind of etching
      - the cost of one etching in the second case
      N_05:
      - the price of the first etching
      - the price of the first kind of etching
      - the cost of one etching in the first case
      N_06:
      - the price of the second etching
      - the price of the second kind of etching
      - the cost of one etching in the second case
      X_00:
      - the number of the first etchings
      - the number of the first kind of etching sold
      - the number of etchings in the first case
      X_01:
      - the number of the second etchings
      - the number of the second kind of etching sold
      - the number of etchings in the second case
  info:
    answers:
    - e1: '9'
      e2: '7'
    item_id: 604cc852117d71c492a62b94
    numbers:
      N_00: '1'
      N_01: '16'
      N_02: '630'
      N_03: '35'
      N_04: '45'
      N_05: '35'
      N_06: '45'
    split: null
    variables:
    - e1
    - e2
  text:
    numbers:
      shape:
      - 57
      target: __  0 __ __ __  1 __ __ __ __  2 __ __ __ __ __ __ __ __  3 __ __ __
        __ __ __  4 __ __ __ __ __ __ __ __ __ __ __ __  5 __ __ __ __ __ __ __ __
        __ __ __  6 __ __ __ __ __
    raw: 'an art dealer sold 16 etc ##hing ##s for 630 dollars . he sold some of them
      at 35 dollars each and the rest at 45 dollars each . how many etc ##hing ##s
      did he sell at 35 dollars ? how many etc ##hing ##s did he sell at 45 dollars
      ?'
    snippets:
      shape:
      - 7
      - 7
      target:
      - an art dealer sold
      - 'art dealer sold 16 etc ##hing ##s'
      - '##hing ##s for 630 dollars . he'
      - of them at 35 dollars each and
      - the rest at 45 dollars each .
      - he sell at 35 dollars ? how
      - he sell at 45 dollars ?
    tokens:
      shape:
      - 57
      target: '[CLS] an art dealer sold 16 etc ##hing ##s for 630 dollars . he sold
        some of them at 35 dollars each and the rest at 45 dollars each . how many
        etc ##hing ##s did he sell at 35 dollars ? how many etc ##hing ##s did he
        sell at 45 dollars ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: *(N_02, R_00) R_03: =(N_04,
      R_02) R_04: *(N_06, R_00) R_05: =(R_01, R_04) R_06: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the weight of a beam
      N_04:
      - the width of the beam that can be support 1. 5 pounds type of 250 pounds
      N_06:
      - the width of the beam
      X_00:
      - the width of the beam
      X_01:
      - the number of pounds that can be support to the same type of beam
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the width of a 1. 5 - inch beam
      - the width in inches of a beam
      - the number of inches wide that can support a load of 250 pounds
      N_04:
      - the maximum load that a 1. 5 - inch beam can support
      - the lead supported by a 1. 5 inches wide beam
      - the amount that a beam 1. 5 inches wide can support
      N_06:
      - the width of a 3. 5 - inch beam
      - the width in inches of the targeted beam
      - the number of inches wide to figure out its supportable load
      X_00:
      - the ratio of the maximum load to the width of a beam
      - the rate of load supported per width
      - the ratio of the load that it can carry to the width of a beam
      X_01:
      - the maximum load of a 3. 5 - inch beam
      - the amount of load supported with a beam width of 3. 5 inches
      - the amount that a beam 3. 5 inches wide can support
  info:
    answers:
    - l1: '583.333333333333'
      l2: '166.666666666667'
    item_id: 604cc852117d71c492a62bd9
    numbers:
      N_00: '1'
      N_01: '1'
      N_02: '1.50000000000000'
      N_03: '1'
      N_04: '250'
      N_05: '1'
      N_06: '3.50000000000000'
    split: null
    variables:
    - l2
    - l1
  text:
    numbers:
      shape:
      - 57
      target: __ __ __ __ __  0 __ __ __ __ __ __ __ __ __ __ __ __  1 __  2  2  2
        __ __ __ __  3 __ __  4 __ __ __ __ __ __  5 __ __ __ __ __ __ __ __ __ __
        __  6  6  6 __ __ __ __ __
    raw: the maximum load that a horizontal beam can carry is directly proportional
      to its width . if a beam 1 . 5 inches wide can support a load of 250 pounds
      , find the load that a beam of the same type can support if its width is 3 .
      5 inches ?
    snippets:
      shape:
      - 7
      - 7
      target:
      - maximum load that a horizontal beam can
      - width . if a beam 1 .
      - if a beam 1 . 5 inches
      - wide can support a load of 250
      - a load of 250 pounds , find
      - the load that a beam of the
      - its width is 3 . 5 inches
    tokens:
      shape:
      - 57
      target: '[CLS] the maximum load that a horizontal beam can carry is directly
        proportional to its width . if a beam 1 . 5 inches wide can support a load
        of 250 pounds , find the load that a beam of the same type can support if
        its width is 3 . 5 inches ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: /(N_03, 100) R_03: *(R_00,
      R_02) R_04: /(N_05, 100) R_05: *(R_01, R_04) R_06: +(R_03, R_05) R_07: /(N_08,
      100) R_08: *(N_06, R_07) R_09: =(R_06, R_08) R_10: +(R_00, R_01) R_11: =(N_06,
      R_10) R_12: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_03:
      - the concentration of the solution in the first case
      N_05:
      - the concentration of the solution in the second case
      N_06:
      - the amount of the mixed solution
      N_08:
      - the concentration of the mixed solution
      X_00:
      - the amount of the solution in the first case
      X_01:
      - the amount of the solution in the second case
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_03:
      - the percentage of acetic acid in the first solution
      - the concentration of white vinegar in the first case
      - the strength of the first solution
      N_05:
      - the percentage of acetic acid in the second solution
      - the concentration of white vinegar in the second case
      - the strength of the second solution
      N_06:
      - the amount of the mixture of two solutions
      - the amount of mixed white vinegar
      - the amount of a 9 % vinegar solution
      N_08:
      - the percentage of acetic acid in the mixture
      - the concentration of mixed white vinegar
      - the strength of the mixture
      X_00:
      - the amount of the first solution
      - the amount of white vinegar in the first case
      - the amount of a 5 % solution
      X_01:
      - the amount of the second solution
      - the amount of white vinegar in the second case
      - the amount of a 10 % solution
  info:
    answers:
    - s1: '40'
      s2: '10'
    item_id: 604cc852117d71c492a62c07
    numbers:
      N_00: '1'
      N_01: '2'
      N_02: '1'
      N_03: '5'
      N_04: '1'
      N_05: '10'
      N_06: '50'
      N_07: '1'
      N_08: '9'
    split: null
    variables:
    - s2
    - s1
  text:
    numbers:
      shape:
      - 57
      target: __ __ __ __  0 __ __ __ __ __ __ __ __ __ __  1 __ __ __ __ __  2  3
        __ __ __  4  5 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __  6 __ __ __
        __  7  8 __ __ __ __ __ __
    raw: 'white vinegar is a solution of ace ##tic acid in water . there are two strengths
      of white vinegar , a 5 % solution and a 10 % solution . how many mill ##ili
      ##ters of each solution must be mixed to make 50 mill ##ili ##ters of a 9 %
      vinegar solution ?'
    snippets:
      shape:
      - 9
      - 7
      target:
      - white vinegar is a solution of ace
      - . there are two strengths of white
      - white vinegar , a 5 % solution
      - vinegar , a 5 % solution and
      - '% solution and a 10 % solution'
      - solution and a 10 % solution .
      - 'mixed to make 50 mill ##ili ##ters'
      - '##ili ##ters of a 9 % vinegar'
      - '##ters of a 9 % vinegar solution'
    tokens:
      shape:
      - 57
      target: '[CLS] white vinegar is a solution of ace ##tic acid in water . there
        are two strengths of white vinegar , a 5 % solution and a 10 % solution .
        how many mill ##ili ##ters of each solution must be mixed to make 50 mill
        ##ili ##ters of a 9 % vinegar solution ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(R_00, R_01) R_03: =(N_01,
      R_02) R_04: *(N_05, R_01) R_05: -(R_04, R_00) R_06: =(N_04, R_05) R_07: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the total amount of dollars donated by class a and class b
      N_04:
      - the ratio of the amount of dollars donated by class a to the amount of dollars
        donated by class b
      N_05:
      - the ratio of the amount of dollars donated by class a to the amount of dollars
        donated by class b
      X_00:
      - the amount of amount donated by class a
      X_01:
      - the amount of amount of amount donated by class b
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the sum of the number of dollars donated by class a and the number of dollars
        donated by class b
      - the total amount donated to the orphanage
      - the total class fund donated by the two classes
      N_04:
      - the value of the number of dollars donated by class b times 0. 6667 minus
        the number of dollars donated by class a
      - the value of 0. 6667 times the amount donated by class b minus the amount
        donated by class a
      - the value of 0. 6667 times class b minus class a
      N_05:
      - the multiplier for the number of dollars donated by class b
      - a rate to compare class b to class a
      - a number in the phrase " 0. 6667 "
      X_00:
      - the number of dollars donated by class a
      - the amount donated by class a
      - the money donated by class a
      X_01:
      - the number of dollars donated by class b
      - the amount donated by class b
      - the money donated by class b
  info:
    answers:
    - c1: '46.6016079678406'
      c2: '80.3983920321594'
    item_id: 604cc852117d71c492a62b69
    numbers:
      N_00: '1'
      N_01: '127'
      N_02: '1'
      N_03: '1'
      N_04: '7'
      N_05: '0.666700000000000'
      N_06: '1'
    split: null
    variables:
    - c1
    - c2
  text:
    numbers:
      shape:
      - 57
      target: __ __  0 __ __ __ __ __ __ __ __  1 __ __  2 __ __ __ __ __ __ __  3
        __  4 __ __ __  5  5  5  5  5 __ __ __ __ __ __ __ __ __ __ __ __  6 __ __
        __ __ __ __ __ __ __ __ __
    raw: 'class a and class b donated their class fund totaling 127 dollars to an
      orphanage . the amount donated by class a is 7 dollars short of 0 . 66 ##6 ##7
      of the amount donated by class b . how much did class a donate ? how much to
      class b donate ?'
    snippets:
      shape:
      - 7
      - 7
      target:
      - class a and class b
      - class fund totaling 127 dollars to an
      - 127 dollars to an orphanage . the
      - donated by class a is 7 dollars
      - class a is 7 dollars short of
      - 'dollars short of 0 . 66 ##6'
      - much did class a donate ? how
    tokens:
      shape:
      - 57
      target: '[CLS] class a and class b donated their class fund totaling 127 dollars
        to an orphanage . the amount donated by class a is 7 dollars short of 0 .
        66 ##6 ##7 of the amount donated by class b . how much did class a donate
        ? how much to class b donate ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_02, R_00) R_02: +(N_01, R_01) R_03: *(N_05,
      R_00) R_04: +(N_04, R_03) R_05: =(R_02, R_04) R_06: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the daily charge of the first agency
      N_02:
      - the charge of the second agency per mile
      N_04:
      - the basic dollars of the second agency
      N_05:
      - the charge of the second agency per mile
      X_00:
      - the distance of driving before the first agency
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the daily charge of the first agency
      - the amount the first agency charges per day
      - the cost per day in the first agency
      N_02:
      - the charge per mile of the first agency
      - the amount the first agency charges per mile
      - the cost per mile in the first agency
      N_04:
      - the daily charge of the second agency
      - the amount the second agency charges per day
      - the cost per day in the second agency
      N_05:
      - the charge per mile of the second agency
      - the amount the second agency charges per mile
      - the cost per mile in the second agency
      X_00:
      - the number of miles when the two agencies charge the same amount
      - the miles to drive
      - the number of miles
  info:
    answers:
    - m: '25'
    item_id: 604cc852117d71c492a62bab
    numbers:
      N_00: '1'
      N_01: '20.2500000000000'
      N_02: '0.140000000000000'
      N_03: '2'
      N_04: '18.2500000000000'
      N_05: '0.220000000000000'
      N_06: '1'
      N_07: '2'
    split: null
    variables:
    - m
  text:
    numbers:
      shape:
      - 57
      target: __ __  0 __ __  1  1  1 __ __ __ __  2  2  2 __ __ __ __ __  3 __ __  4  4  4
        __ __ __ __  5  5  5 __ __ __ __ __ __ __ __ __ __ __ __ __ __  6 __ __ __
        __ __ __  7  7 __
    raw: the first agency charges 20 . 25 dollars per day and 0 . 14 dollars per mile
      . the second agency charges 18 . 25 dollars per day and 0 . 22 dollars per mile
      . how many miles would you have to drive before the first agency is less expensive
      than the second ?
    snippets:
      shape:
      - 8
      - 7
      target:
      - the first agency charges 20
      - first agency charges 20 . 25 dollars
      - per day and 0 . 14 dollars
      - mile . the second agency charges 18
      - second agency charges 18 . 25 dollars
      - per day and 0 . 22 dollars
      - drive before the first agency is less
      - expensive than the second ?
    tokens:
      shape:
      - 57
      target: '[CLS] the first agency charges 20 . 25 dollars per day and 0 . 14 dollars
        per mile . the second agency charges 18 . 25 dollars per day and 0 . 22 dollars
        per mile . how many miles would you have to drive before the first agency
        is less expensive than the second ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_03, R_00) R_02: *(N_02, R_00) R_03: -(R_01,
      R_02) R_04: =(N_01, R_03) R_05: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the cost of their unit in dollars
      N_02:
      - the cost of each cd in dollars
      N_03:
      - the cost of the cd unit
      X_00:
      - the number of dollars they must manufacture
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the price of a new cd producing machine
      - the number of dollars for a cd producing machine
      - the amount of money one machine costs
      N_02:
      - the unit cost of producing a cd
      - the number of dollars for their labor and other unit costs per cd
      - the amount of money other unit costs cost per cd
      N_03:
      - the selling price of a cd
      - the number of dollars for a cd
      - the cost of one cd
      X_00:
      - the number of cds needed to buy the machine
      - the number of cds they must manufacture before they pay for their new machine
      - the total number of cds that is enough to pay for the machine
  info:
    answers:
    - c: '1000'
    item_id: 60f9186c90be09b72239eebb
    numbers:
      N_00: '1'
      N_01: '5000'
      N_02: '5'
      N_03: '10'
    split: null
    variables:
    - c
  text:
    numbers:
      shape:
      - 57
      target: __ __ __ __ __ __ __ __  0 __ __ __ __ __ __ __ __  1 __ __ __ __ __
        __ __ __ __ __  2 __ __ __ __ __ __ __ __ __ __  3 __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __
    raw: wild and crazy productions wants to purchase a new cd producing machine .
      its cost is 5000 dollars . if their labor and other unit costs are 5 dollars
      per cd and they can sell the cd for 10 dollars each , how many must they manufacture
      before they pay for their new machine ?
    snippets:
      shape:
      - 4
      - 7
      target:
      - wants to purchase a new cd producing
      - its cost is 5000 dollars . if
      - unit costs are 5 dollars per cd
      - the cd for 10 dollars each ,
    tokens:
      shape:
      - 57
      target: '[CLS] wild and crazy productions wants to purchase a new cd producing
        machine . its cost is 5000 dollars . if their labor and other unit costs are
        5 dollars per cd and they can sell the cd for 10 dollars each , how many must
        they manufacture before they pay for their new machine ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 21
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_01, N_02) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of ladybugs with spots
      N_02:
      - the number of ladybugs with spots
      X_00:
      - the total number of ladybugs in whole insects
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of ladybugs with spots
      - the number of ladybugs with spots
      - the number of ladybugs with spots
      N_02:
      - the number of ladybugs without spots
      - the number of ladybugs without spots
      - the number of ladybugs without spots
      X_00:
      - the total number of ladybugs
      - the total number of ladybugs
      - the total number of ladybugs there are
  info:
    answers:
    - l: '67082'
    item_id: 60f9186c90be09b72239ec34
    numbers:
      N_00: '1'
      N_01: '12170'
      N_02: '54912'
    split: null
    variables:
    - l
  text:
    numbers:
      shape:
      - 105
      target: __ __ __ __ __ __ __ __ __ __  0 __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __  1  1 __ __ __ __ __ __  2  2  2 __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __
    raw: 'some insects , called ap ##hid ##s , attack a large farm . in response ,
      the farmer releases lady ##bu ##gs onto the fields . there are 121 ##70 lady
      ##bu ##gs with spots and 54 ##9 ##12 lady ##bu ##gs without spots . how many
      lady ##bu ##gs are there in all ?'
    snippets:
      shape:
      - 3
      - 7
      target:
      - '##s , attack a large farm .'
      - '. there are 121 ##70 lady ##bu'
      - 'with spots and 54 ##9 ##12 lady'
    tokens:
      shape:
      - 105
      target: '[CLS] some insects , called ap ##hid ##s , attack a large farm . in
        response , the farmer releases lady ##bu ##gs onto the fields . there are
        121 ##70 lady ##bu ##gs with spots and 54 ##9 ##12 lady ##bu ##gs without
        spots . how many lady ##bu ##gs are there in all ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 21
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_02) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of pounds of green peppers bought by green peppers
      N_02:
      - the number of pounds of red peppers bought
      X_00:
      - the total number of pounds of peppers
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the value of bought green peppers expressed in pounds
      - the number of pounds of green pepper the restaurant bought
      - the amounts of green peppers bought by hannah's vegetarian restaurant
      N_02:
      - the value of bought red peppers expressed in pounds
      - the number of pounds of red peppers the restaurant bought
      - the amounts of red peppers bought by hannah's vegetarian restaurant
      X_00:
      - the value of bought pepper expressed in pounds
      - the total number of pounds of peppers the restaurant bought
      - the total amounts of peppers bought by hannah's vegetarian restaurant
  info:
    answers:
    - p: '0.666666666666667'
    item_id: 60f9186c90be09b72239e9a1
    numbers:
      N_00: '0.333333333333333'
      N_01: '1'
      N_02: '0.333333333333333'
      N_03: '1'
    split: null
    variables:
    - p
  text:
    numbers:
      shape:
      - 105
      target: __ __ __ __ __ __ __  0  0  0  0  0  0  0  0  0  0 __  1 __ __ __ __
        __  2  2  2  2  2  2  2  2  2  2 __  3 __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __
    raw: 'hannah '' s vegetarian restaurant bought 0 . 333 ##33 ##33 ##33 ##33 ##33
      ##33 ##3 of a pound of green peppers and 0 . 333 ##33 ##33 ##33 ##33 ##33 ##33
      ##3 of a pound of red peppers . how many pounds of peppers did hannah '' s vegetarian
      restaurant buy in all ?'
    snippets:
      shape:
      - 4
      - 7
      target:
      - 'vegetarian restaurant bought 0 . 333 ##33'
      - '##33 ##3 of a pound of green'
      - 'green peppers and 0 . 333 ##33'
      - '##33 ##3 of a pound of red'
    tokens:
      shape:
      - 105
      target: '[CLS] hannah '' s vegetarian restaurant bought 0 . 333 ##33 ##33 ##33
        ##33 ##33 ##33 ##3 of a pound of green peppers and 0 . 333 ##33 ##33 ##33
        ##33 ##33 ##33 ##3 of a pound of red peppers . how many pounds of peppers
        did hannah '' s vegetarian restaurant buy in all ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 21
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: *(N_01, R_00) R_03: *(N_02,
      R_01) R_04: +(R_02, R_03) R_05: =(N_00, R_04) R_06: -(R_00, R_01) R_07: =(N_03,
      R_06) R_08: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the total cost of letters in dollars
      N_01:
      - the cost of a package of packages
      N_02:
      - the number of letters to mail letters
      N_03:
      - the value of the number of letters minus the number of packages
      X_00:
      - the number of letters
      X_01:
      - the number of packages
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the total cost of mailing letters and packages
      - the total amount of money carolina spent on letters and packages
      - the total cost
      N_01:
      - the price of mailing a letter
      - the price of a letter
      - the cost of each letter
      N_02:
      - the price of mailing a package
      - the price of a package
      - the cost of each package
      N_03:
      - the value of the number of letters minus the number of packages
      - the value of the number of letters minus the number of packages
      - the value of the number of letters minus the number of packages
      X_00:
      - the number of letters
      - the number of letters
      - the number of letters
      X_01:
      - the number of packages
      - the number of packages
      - the number of packages
  info:
    answers:
    - l: '5'
      p: '3'
    item_id: 604cc853117d71c492a62d96
    numbers:
      N_00: '4.49000000000000'
      N_01: '0.370000000000000'
      N_02: '0.880000000000000'
      N_03: '2'
    split: null
    variables:
    - l
    - p
  text:
    numbers:
      shape:
      - 105
      target: __ __ __ __ __ __ __ __ __ __ __ __ __  0  0  0 __ __ __ __ __ __ __
        __ __  1  1  1 __ __ __ __ __ __ __  2  2  2 __ __ __ __ __ __  3 __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __
    raw: the last time carolina visited the post office , she spent $ 4 . 49 to mail
      letters and packages . each letter costs 0 . 37 to mail , while each package
      costs 0 . 88 to mail . if she sent two more letters than packages , how many
      letters did she mail ?
    snippets:
      shape:
      - 4
      - 7
      target:
      - she spent $ 4 . 49 to
      - each letter costs 0 . 37 to
      - each package costs 0 . 88 to
      - if she sent two more letters than
    tokens:
      shape:
      - 105
      target: '[CLS] the last time carolina visited the post office , she spent $
        4 . 49 to mail letters and packages . each letter costs 0 . 37 to mail , while
        each package costs 0 . 88 to mail . if she sent two more letters than packages
        , how many letters did she mail ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 21
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: *(N_01, R_00) R_03: *(N_02,
      R_01) R_04: +(R_02, R_03) R_05: =(N_04, R_04) R_06: *(N_06, R_00) R_07: *(N_07,
      R_01) R_08: +(R_06, R_07) R_09: =(N_08, R_08) R_10: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of pounds of coffee bought by coffee
      N_02:
      - the number of pounds of butter bought by the man
      N_04:
      - the total cost of the first case
      N_06:
      - the number of pounds of butter bought later
      N_07:
      - the number of pounds of butter bought by the day
      N_08:
      - the total cost of coffee and butter
      X_00:
      - the price of a pound of coffee
      X_01:
      - the cost of a pound of butter
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of pounds of coffee in the first combination
      - the pounds of coffee bought in the first visit
      - the pound of the coffee in the first order
      N_02:
      - the number of pounds of butter in the first combination
      - the pounds of butter bought in the first visit
      - the pound of butter in the first order
      N_04:
      - the sum of the number of dollars it takes to buy the first combination
      - the total worth of what the man bought in the first visit
      - the total cost of coffee and butter in the first order
      N_06:
      - the number of pounds of coffee in the second combination
      - the pounds of coffee bought in the second visit
      - the pound of the coffee in the second - order
      N_07:
      - the number of pounds of butter in the second combination
      - the pounds of butter bought in the second visit
      - the pound of butter in the second - order
      N_08:
      - the sum of the number of dollars it takes to buy the second combination
      - the total worth of what the man bought in the second visit
      - the total cost of coffee and butter in the second - order
      X_00:
      - the cost per pound of coffee
      - the dollar cost of coffee per pound
      - the cost of the coffee per pound
      X_01:
      - the cost per pound of butter
      - the dollar cost of butter per pound
      - the cost of the butter per pound
  info:
    answers:
    - b: '3.75000000000000'
      c: '3'
    item_id: 604cc853117d71c492a630c6
    numbers:
      N_00: '1'
      N_01: '7'
      N_02: '10'
      N_03: '1'
      N_04: '58.5000000000000'
      N_05: '1'
      N_06: '7'
      N_07: '5'
      N_08: '39.7500000000000'
    split: null
    variables:
    - c
    - b
  text:
    numbers:
      shape:
      - 105
      target: __  0 __ __  1 __ __ __ __  2 __ __ __ __  3 __ __ __  4  4  4 __  5
        __ __ __ __ __ __ __ __ __ __ __ __  6 __ __ __ __  7 __ __ __ __ __  8  8  8
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __
    raw: a man bought 7 pounds of coffee and 10 pounds of butter for a total of $
      58 . 50 . a day later , the prices had not changed , and he bought 7 pounds
      of coffee and 5 pounds of butter for $ 39 . 75 . find the price per pound of
      the butter .
    snippets:
      shape:
      - 9
      - 7
      target:
      - a man bought 7
      - a man bought 7 pounds of coffee
      - of coffee and 10 pounds of butter
      - of butter for a total of $
      - total of $ 58 . 50 .
      - . 50 . a day later ,
      - and he bought 7 pounds of coffee
      - of coffee and 5 pounds of butter
      - butter for $ 39 . 75 .
    tokens:
      shape:
      - 105
      target: '[CLS] a man bought 7 pounds of coffee and 10 pounds of butter for a
        total of $ 58 . 50 . a day later , the prices had not changed , and he bought
        7 pounds of coffee and 5 pounds of butter for $ 39 . 75 . find the price per
        pound of the butter . [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 21
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: *(N_01, R_00) R_03: *(N_02,
      R_01) R_04: +(R_02, R_03) R_05: =(N_04, R_04) R_06: *(N_06, R_00) R_07: *(N_07,
      R_01) R_08: +(R_06, R_07) R_09: =(N_08, R_08) R_10: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of bath towels
      N_02:
      - the number of washcloths
      N_04:
      - the total cost of the first purchase
      N_06:
      - the number of bath towels in the second purchase
      N_07:
      - the number of washcloths
      N_08:
      - the total cost of the first purchase
      X_00:
      - the cost of a bath
      X_01:
      - the cost of one washcloth
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of bath towels in the first purchase
      - the number of bath towels in the first case
      - the number of bath towels at first purchase
      N_02:
      - the number of washcloths in the first purchase
      - the number of washcloths in the first case
      - the number of washcloths at the first purchase
      N_04:
      - the total cost of bath towels and washcloths in the first purchase
      - the total amount of money used on bath towels and washcloths in the first
        case
      - the total cost of dollars at the first purchase
      N_06:
      - the number of bath towels in the second purchase
      - the number of bath towels in the second case
      - the number of bath towels at the second purchase
      N_07:
      - the number of washcloths in the second purchase
      - the number of washcloths in the second case
      - the number of washcloths at the second purchase
      N_08:
      - the total cost of bath towels and washcloths in the second purchase
      - the total amount of money used on bath towels and washcloths in the second
        case
      - the total cost of dollars at the second purchase
      X_00:
      - the price of a bath towel
      - the price of a bath towel
      - the number of towels
      X_01:
      - the price of a washcloth
      - the price of a washcloth
      - the number of washcloths
  info:
    answers:
    - t: '12'
      w: '5.50000000000000'
    item_id: 604cc852117d71c492a62b92
    numbers:
      N_00: '1'
      N_01: '38'
      N_02: '61'
      N_03: '1'
      N_04: '791.500000000000'
      N_05: '2'
      N_06: '54'
      N_07: '50'
      N_08: '923'
    split: null
    variables:
    - t
    - w
  text:
    numbers:
      shape:
      - 105
      target: __  0 __ __  1 __ __ __  2 __ __ __ __  3 __ __ __  4  4  4  4 __ __
        __  5 __ __  6 __ __ __  7 __ __ __ __ __ __ __ __ __ __  8  8 __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __
    raw: 'a hotel purchased 38 bath towels and 61 wash ##cloth ##s for a total cost
      of 79 ##1 . 50 dollars . the second purchase of 54 bath towels and 50 wash ##cloth
      ##s , at the same prices , cost 92 ##3 dollars . find the individual prices
      of the bath towels and wash ##cloth ##s .'
    snippets:
      shape:
      - 9
      - 7
      target:
      - a hotel purchased 38
      - a hotel purchased 38 bath towels and
      - 'bath towels and 61 wash ##cloth ##s'
      - '##cloth ##s for a total cost of'
      - 'total cost of 79 ##1 . 50'
      - dollars . the second purchase of 54
      - second purchase of 54 bath towels and
      - 'bath towels and 50 wash ##cloth ##s'
      - 'prices , cost 92 ##3 dollars .'
    tokens:
      shape:
      - 105
      target: '[CLS] a hotel purchased 38 bath towels and 61 wash ##cloth ##s for
        a total cost of 79 ##1 . 50 dollars . the second purchase of 54 bath towels
        and 50 wash ##cloth ##s , at the same prices , cost 92 ##3 dollars . find
        the individual prices of the bath towels and wash ##cloth ##s . [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 21
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(N_01, R_00) R_03: =(R_01,
      R_02) R_04: *(N_01, N_02) R_05: *(N_03, R_00) R_06: +(R_04, R_05) R_07: *(N_05,
      R_01) R_08: =(R_06, R_07) R_09: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of gallons of the first gasoline
      N_02:
      - the price of a gallon of the second gasoline
      N_03:
      - the price of a gallon of the first gasoline
      N_04:
      - the price of a gallon of the second gasoline
      N_05:
      - the price of a gallon of the second gasoline
      X_00:
      - the number of gallons of the first gasoline
      X_01:
      - the number of gallons of the second gasoline
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the gallons of gasoline owner has
      - the amount of gasoline a gas station owner has
      - the number of gallons of the original gasoline
      N_02:
      - the price per gallon of owner's gasoline
      - the dollars per gallon he charges for 30 gallons of gasoline
      - the first price of one gallon of the original gasoline
      N_03:
      - the price per gallon of other brand gasoline
      - the dollars per gallon he charges some for which
      - the price of one gallon of the added gasoline
      N_04:
      - the price per gallon of other brand gasoline
      - the dollars per gallon he charges some for which
      - the price of one gallon of the added gasoline
      N_05:
      - the price of the gasoline mixture
      - the dollars per gallon of mixture gasoline
      - the price of one gallon of the gasoline mixture
      X_00:
      - the amount of the other brand gasoline needed to make the gasoline mixture
      - the amount of gasoline the owner must mix
      - the number of gallons of the added gasoline
      X_01:
      - the whole amount of the gasoline mixture
      - the amount of mixture gasoline
      - the total number of gallons of the original and added gasoline
  info:
    answers:
    - g: '16.3043478260870'
      m: '46.3043478260870'
    item_id: 60f9186c90be09b72239f254
    numbers:
      N_00: '1'
      N_01: '30'
      N_02: '3.03000000000000'
      N_03: '3.74000000000000'
      N_04: '3.74000000000000'
      N_05: '3.28000000000000'
    split: null
    variables:
    - g
    - m
  text:
    numbers:
      shape:
      - 105
      target: __  0 __ __ __ __  1 __ __ __ __ __ __ __  2  2  2 __ __ __ __ __ __
        __ __ __  3  3  3 __ __ __ __ __ __ __ __ __  4  4  4 __ __ __ __ __ __ __
        __ __ __ __ __  5  5  5 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __
    raw: a gas station owner has 30 gallons of gasoline for which he charges 3 . 03
      dollars per gallon and some for which he charges 3 . 74 dollars per gallon .
      how many gallons of the 3 . 74 dollars brand must the owner mix in to produce
      gasoline that costs 3 . 28 dollars per gallon ?
    snippets:
      shape:
      - 6
      - 7
      target:
      - a gas station owner
      - station owner has 30 gallons of gasoline
      - which he charges 3 . 03 dollars
      - which he charges 3 . 74 dollars
      - gallons of the 3 . 74 dollars
      - gasoline that costs 3 . 28 dollars
    tokens:
      shape:
      - 105
      target: '[CLS] a gas station owner has 30 gallons of gasoline for which he charges
        3 . 03 dollars per gallon and some for which he charges 3 . 74 dollars per
        gallon . how many gallons of the 3 . 74 dollars brand must the owner mix in
        to produce gasoline that costs 3 . 28 dollars per gallon ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 21
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: *(N_03, R_00) R_03: *(N_04,
      R_01) R_04: +(R_02, R_03) R_05: =(N_01, R_04) R_06: *(N_05, R_00) R_07: *(N_06,
      R_01) R_08: +(R_06, R_07) R_09: =(N_07, R_08) R_10: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the total cost of the second order
      N_03:
      - the number of milkshakes for the next order
      N_04:
      - the number of burgers on the first order
      N_05:
      - the number of milkshakes for the next order
      N_06:
      - the number of burgers for the first order
      N_07:
      - the total cost of the each the each order
      X_00:
      - the cost of a milk
      X_01:
      - the cost of a burger
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of dollars of the first order
      - the cost of an order of 6 milkshakes and 8 burgers
      - the total cost of the first order
      N_03:
      - the number of milkshakes in the first order
      - the number of milkshakes in the first order
      - the number of milkshakes in the first order
      N_04:
      - the number of burgers in the first order
      - the number of burgers in the first order
      - the number of burgers in the first order
      N_05:
      - the number of milkshakes in the second order
      - the number of milkshakes in the second order
      - the number of milkshakes in the second order
      N_06:
      - the number of burgers in the second order
      - the number of burgers in the second order
      - the number of burgers in the second order
      N_07:
      - the number of dollars of the second order
      - the cost of an order of 3 milkshakes and 5 burgers
      - the total cost of the second order
      X_00:
      - the cost of a milkshake
      - the number of milkshakes
      - the cost of one milkshake
      X_01:
      - the cost of a burger
      - the number of burgers
      - the cost of one burger
  info:
    answers:
    - b: '1.95000000000000'
      m: '1.50000000000000'
    item_id: 604cc853117d71c492a62f8c
    numbers:
      N_00: '1'
      N_01: '24.6000000000000'
      N_02: '1'
      N_03: '6'
      N_04: '8'
      N_05: '3'
      N_06: '5'
      N_07: '14.2500000000000'
    split: null
    variables:
    - m
    - b
  text:
    numbers:
      shape:
      - 105
      target: __ __ __ __ __ __ __ __ __ __ __ __  0 __ __ __  1  1  1 __  2 __ __  3
        __ __ __ __  4 __ __ __ __ __ __ __ __  5 __ __ __ __  6 __ __ __ __ __ __
        __ __  7  7  7 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __
    raw: 'the cash ##ier at the fast - food outlet rings up a bill of $ 24 . 60 for
      an order of 6 milk ##sha ##kes and 8 burger ##s . the next order is for 3 milk
      ##sha ##kes and 5 burger ##s , and the bill is $ 14 . 25 . determine the cost
      of each item .'
    snippets:
      shape:
      - 8
      - 7
      target:
      - outlet rings up a bill of $
      - bill of $ 24 . 60 for
      - . 60 for an order of 6
      - 'an order of 6 milk ##sha ##kes'
      - '##sha ##kes and 8 burger ##s .'
      - 'order is for 3 milk ##sha ##kes'
      - '##sha ##kes and 5 burger ##s ,'
      - bill is $ 14 . 25 .
    tokens:
      shape:
      - 105
      target: '[CLS] the cash ##ier at the fast - food outlet rings up a bill of $
        24 . 60 for an order of 6 milk ##sha ##kes and 8 burger ##s . the next order
        is for 3 milk ##sha ##kes and 5 burger ##s , and the bill is $ 14 . 25 . determine
        the cost of each item . [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 21
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: *(N_01, R_00) R_03: *(N_02,
      R_01) R_04: +(R_02, R_03) R_05: =(N_03, R_04) R_06: +(R_00, R_01) R_07: =(N_04,
      R_06) R_08: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the price of an adult ticket
      N_02:
      - the price of a child ticket
      N_03:
      - the total cost of tickets sold
      N_04:
      - the total number of tickets sold
      X_00:
      - the number of adult tickets sold
      X_01:
      - the number of child tickets sold
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the price of an adult ticket in dollars
      - the cost of an adult ticket
      - the ticket cost of one adult
      N_02:
      - the price of a children ticket in dollars
      - the cost of a child ticket
      - the ticket cost of one child
      N_03:
      - the sum of the number of dollars earned from selling adult tickets and the
        number of dollars earned from selling children tickets
      - the amount of dollars collected in sales by the end of the week
      - the total cost of tickets sold
      N_04:
      - the sum of the number of adult tickets sold and the number of children tickets
        sold
      - the number of tickets sold
      - the total number of tickets
      X_00:
      - the total number of adult tickets sold
      - the number of adult tickets sold
      - the number of adult tickets
      X_01:
      - the total number of children tickets sold
      - the number of child tickets sold
      - the number of child tickets
  info:
    answers:
    - a: '26'
      c: '16'
    item_id: 604cc852117d71c492a62bc0
    numbers:
      N_00: '1'
      N_01: '5'
      N_02: '3'
      N_03: '178'
      N_04: '42'
    split: null
    variables:
    - a
    - c
  text:
    numbers:
      shape:
      - 105
      target: __ __ __ __ __ __ __  0 __ __ __ __ __ __ __ __ __ __ __ __ __  1 __
        __ __ __ __ __ __  2 __ __ __ __ __ __ __ __ __ __ __  3 __ __ __ __  4 __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __
    raw: the school is selling tickets to a performance . they have adult and child
      tickets . each adult ticket is 5 dollars , and each child ticket is 3 dollars
      . by the end of the week , there were 178 dollars in sales from 42 tickets sold
      . how many adult tickets were sold ? how many child tickets ?
    snippets:
      shape:
      - 5
      - 7
      target:
      - selling tickets to a performance . they
      - adult ticket is 5 dollars , and
      - child ticket is 3 dollars . by
      - ', there were 178 dollars in sales'
      - in sales from 42 tickets sold .
    tokens:
      shape:
      - 105
      target: '[CLS] the school is selling tickets to a performance . they have adult
        and child tickets . each adult ticket is 5 dollars , and each child ticket
        is 3 dollars . by the end of the week , there were 178 dollars in sales from
        42 tickets sold . how many adult tickets were sold ? how many child tickets
        ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 21
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: *(N_02, R_00) R_03: *(N_03,
      R_01) R_04: +(R_02, R_03) R_05: =(N_06, R_04) R_06: +(R_00, R_01) R_07: =(N_05,
      R_06) R_08: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the cost of a adult ticket
      N_03:
      - the price of an adult ticket
      N_05:
      - the total number of people entered
      N_06:
      - the total cost of tickets sold
      X_00:
      - the number of children attended
      X_01:
      - the number of adult tickets
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the price of a children's ticket
      - the ticket cost for one child
      - the cost of a child ticket
      N_03:
      - the price of an adult ticket
      - the ticket cost for one adult
      - the cost of an adult ticket
      N_05:
      - the total number of people
      - the total number of tickets sold
      - the number of children and adults
      N_06:
      - the total cost of tickets sold
      - the total cost of tickets sold
      - the admission fee collected in total
      X_00:
      - the number of children admitted
      - the number of children
      - the number of children
      X_01:
      - the number of adults admitted
      - the number of adults
      - the number of the adults
  info:
    answers:
    - a: '150'
      c: '128'
    item_id: 604cc853117d71c492a62c88
    numbers:
      N_00: '1'
      N_01: '2'
      N_02: '1.50000000000000'
      N_03: '4'
      N_04: '1'
      N_05: '278'
      N_06: '792'
    split: null
    variables:
    - c
    - a
  text:
    numbers:
      shape:
      - 105
      target: __  0 __ __ __  1 __ __ __ __ __ __ __ __  2  2  2 __ __ __ __ __  3
        __ __ __  4 __ __ __  5 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __  6  6
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __
    raw: 'an amusement park sells 2 kinds of tickets . tickets for children cost 1
      . 50 dollars . adult tickets cost 4 dollars . on a certain day , 278 people
      entered the park . on that same day , the admission fees collected totaled 79
      ##2 dollars . how many children were admitted on that day ? how many adults
      were admitted ?'
    snippets:
      shape:
      - 7
      - 7
      target:
      - an amusement park sells
      - amusement park sells 2 kinds of tickets
      - for children cost 1 . 50 dollars
      - adult tickets cost 4 dollars . on
      - dollars . on a certain day ,
      - certain day , 278 people entered the
      - 'fees collected totaled 79 ##2 dollars .'
    tokens:
      shape:
      - 105
      target: '[CLS] an amusement park sells 2 kinds of tickets . tickets for children
        cost 1 . 50 dollars . adult tickets cost 4 dollars . on a certain day , 278
        people entered the park . on that same day , the admission fees collected
        totaled 79 ##2 dollars . how many children were admitted on that day ? how
        many adults were admitted ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 21
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: *(N_01, N_02) R_03: +(R_00,
      R_02) R_04: =(R_01, R_03) R_05: *(N_01, N_02) R_06: /(N_05, 100) R_07: *(R_05,
      R_06) R_08: /(N_06, 100) R_09: *(R_01, R_08) R_10: =(R_07, R_09) R_11: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the total number of rings
      N_02:
      - the percentage of silver in the mixed gold
      N_04:
      - the percentage of silver in the first gold
      N_05:
      - the percentage of gold in the second gold
      N_06:
      - the percentage of silver in the alloy of the original gold and the second
        gold
      N_08:
      - the percentage of silver in the alloy of 10 % silver
      X_00:
      - the volume of the first gold silver
      X_01:
      - the volume of the mixture of the original gold rings and pure silver
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of rings
      - the number of rings a jeweler has
      - the number of rings
      N_02:
      - the weight of each ring
      - the number of grams for each ring
      - the weight of each ring
      N_05:
      - the percentage of gold in each ring
      - the percentage of gold for each ring
      - the gold content of an alloy of 10 % silver and 90 % gold
      N_06:
      - the percentage of gold in the mixture of all rings and pure silver
      - the percentage of gold for each ring that reduced gold
      - the gold content of the new mixture
      N_08:
      - the percentage of gold in the mixture of all rings and pure silver
      - the percentage of gold for each ring that reduced gold
      - the gold content of the new mixture
      X_00:
      - the weight of pure silver added
      - the number of grams of silver for all rings that reduced gold
      - the weight of pure silver that must be added for the mixture to have a gold
        content of 75 %
      X_01:
      - the weight of the mixture
      - the number of grams for all rings that reduced gold
      - the weight of the new mixture
  info:
    answers:
    - m: '108'
      s: '18'
    item_id: 60f9186c90be09b72239f150
    numbers:
      N_00: '1'
      N_01: '5'
      N_02: '18'
      N_03: '1'
      N_04: '10'
      N_05: '90'
      N_06: '75'
      N_07: '1'
      N_08: '75'
    split: null
    variables:
    - s
    - m
  text:
    numbers:
      shape:
      - 105
      target: __  0 __ __ __  1 __ __ __ __  2 __ __ __ __  3 __ __  4 __ __ __  5
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __  6 __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __  7 __ __ __  8 __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __
    raw: 'a jewel ##er has 5 rings , each weighing 18 grams , made of an alloy of
      10 % silver and 90 % gold . he decides to melt down the rings and add enough
      silver to reduce the gold content to 75 % . how many grams of pure silver must
      be added for the mixture to have a gold content of 75 % ?'
    snippets:
      shape:
      - 9
      - 7
      target:
      - 'a jewel ##er has'
      - 'jewel ##er has 5 rings , each'
      - ', each weighing 18 grams , made'
      - ', made of an alloy of 10'
      - an alloy of 10 % silver and
      - '% silver and 90 % gold .'
      - gold content to 75 % . how
      - mixture to have a gold content of
      - gold content of 75 % ?
    tokens:
      shape:
      - 105
      target: '[CLS] a jewel ##er has 5 rings , each weighing 18 grams , made of an
        alloy of 10 % silver and 90 % gold . he decides to melt down the rings and
        add enough silver to reduce the gold content to 75 % . how many grams of pure
        silver must be added for the mixture to have a gold content of 75 % ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 21
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(R_00, R_01) R_03: =(N_00,
      R_02) R_04: /(R_00, N_01) R_05: /(R_01, N_03) R_06: +(R_04, R_05) R_07: =(N_05,
      R_06) R_08: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the distance of the travel
      N_01:
      - the speed due to the east
      N_03:
      - the miles per hour traveled east
      N_05:
      - the total time of travel
      X_00:
      - the speed of tom in the east
      X_01:
      - the distance traveled by tom for one period
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the length of miles tom quig traveled
      - the distance of the travel to the east of st louis
      - the total number of miles traveled
      N_01:
      - the speed of tom quig in miles per hour
      - the most speed of the travel
      - the number of miles traveled per hour before being slowed down
      N_03:
      - the reduced speed of tom quig in miles per hour due to a major accident
      - the slowed speed of the travel after one period of time
      - the number of miles traveled per hour after being slowed down
      N_05:
      - the total length of traveled hours
      - the total time of travel
      - the total number of hours traveled
      X_00:
      - the length of miles tom quig traveled at normal speed
      - the distance of the travel with the fast speed
      - the number of miles traveled at the faster speed
      X_01:
      - the length of miles tom quig traveled at reduced speed
      - the distance of the travel with the slow speed
      - the number of miles traveled at the slower speed
  info:
    answers:
    - f: '210'
      s: '60'
    item_id: 60f9186c90be09b72239eda1
    numbers:
      N_00: '270'
      N_01: '70'
      N_02: '1'
      N_03: '20'
      N_04: '1'
      N_05: '6'
    split: null
    variables:
    - f
    - s
  text:
    numbers:
      shape:
      - 105
      target: __ __ __ __ __  0 __ __ __ __ __ __ __ __ __ __ __ __ __ __  1 __ __
        __ __ __ __  2 __ __ __ __ __ __ __ __  3 __ __ __ __ __  4 __ __ __ __ __
        __ __ __ __ __  5 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __
    raw: 'tom qui ##g traveled 270 miles east of st louis . for most of the trip ,
      he traveled 70 miles per hour , but for one period of time , he was slowed to
      20 miles per hour due to a major accident . if the total time of travel was
      6 hours , how many miles did he drive at the reduced speed ?'
    snippets:
      shape:
      - 6
      - 7
      target:
      - 'qui ##g traveled 270 miles east of'
      - ', he traveled 70 miles per hour'
      - ', but for one period of time'
      - was slowed to 20 miles per hour
      - hour due to a major accident .
      - of travel was 6 hours , how
    tokens:
      shape:
      - 105
      target: '[CLS] tom qui ##g traveled 270 miles east of st louis . for most of
        the trip , he traveled 70 miles per hour , but for one period of time , he
        was slowed to 20 miles per hour due to a major accident . if the total time
        of travel was 6 hours , how many miles did he drive at the reduced speed ?
        [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 21
    tokens: 'R_00: __NEW_VAR(, ) R_01: -(R_00, N_07) R_02: *(N_06, R_01) R_03: +(N_04,
      R_02) R_04: -(R_00, N_13) R_05: *(N_12, R_04) R_06: +(N_10, R_05) R_07: =(R_03,
      R_06) R_08: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_04:
      - the monthly fee of the second plan
      N_05:
      - the length of the monthly fee in the first plan in dollars
      N_06:
      - the additional fee for each minute in the second plan
      N_07:
      - the cost of the second plan in dollars
      N_10:
      - the monthly fee of the second plan
      N_11:
      - the length of the monthly fee in the first plan in dollars
      N_12:
      - the monthly fee of the second plan
      N_13:
      - the amount used for the second plan
      X_00:
      - the monthly fee of the plans
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_04:
      - the monthly fee of the first kind of plan for 500 minutes
      - the basic fee of one plan
      - the initial fee for the first 500 minutes of the first plan
      N_05:
      - the base number of minutes for the first kind of plan
      - the amount of time given for the basic fee of one plan
      - the number of minutes that the initial fee is paid for in the first plan
      N_06:
      - the additional fee of the first kind of plan per minute over the 500
      - the additional fee per minute of one plan over 500 minutes
      - the additional fee per minute of the first plan
      N_07:
      - the base number of minutes for the first kind of plan
      - the amount of time given for the basic fee of one plan
      - the number of minutes that the initial fee is paid for in the first plan
      N_10:
      - the monthly fee of the second kind of plan for 1000 minutes
      - the basic fee of the other plan
      - the initial fee for the first 1000 minutes of the second plan
      N_11:
      - the base number of minutes for the second kind of plan
      - the amount of time given for the basic fee of the other plan
      - the number of minutes that the initial fee is paid for in the second plan
      N_12:
      - the additional fee for the second kind of plan per minute over 1000
      - the additional fee per minute of the other plan over 1000 minutes
      - the additional fee per minute of the second plan
      N_13:
      - the base number of minutes for the second kind of plan
      - the amount of time given for the basic fee of the other plan
      - the number of minutes that the initial fee is paid for in the second plan
      X_00:
      - the total number of minutes the person has to use the phone for the monthly
        cost of each plan to be equal
      - the total time both plans are used for the monthly costs of them are equal
      - the number of minutes after which the monthly costs of the plans equal
  info:
    answers:
    - m: '2500'
    item_id: 604cc853117d71c492a630d0
    numbers:
      N_00: '1'
      N_01: '2'
      N_02: '1'
      N_03: '1'
      N_04: '50'
      N_05: '500'
      N_06: '0.350000000000000'
      N_07: '500'
      N_08: '2'
      N_09: '1'
      N_10: '75'
      N_11: '1000'
      N_12: '0.450000000000000'
      N_13: '1000'
    split: null
    variables:
    - m
  text:
    numbers:
      shape:
      - 105
      target: __  0 __ __ __ __  1 __ __ __ __  2 __  3 __ __ __ __  4 __  5 __ __
        __  6  6  6 __ __ __ __ __  7 __ __  8 __ __  9 __ __ __ __ 10 __ 11 __ __
        __ 12 12 12 __ __ __ __ __ 13 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __
    raw: a person is choosing between 2 cellular phone plans . one has a monthly fee
      of $ 50 for 500 minutes plus $ 0 . 35 for each minute over the 500 . the second
      plan has a monthly fee of $ 75 for 1000 minutes plus $ 0 . 45 for each minute
      over the 1000 . after how many minutes used are the monthly costs of the plans
      equal ?
    snippets:
      shape:
      - 14
      - 7
      target:
      - a person is choosing
      - is choosing between 2 cellular phone plans
      - phone plans . one has a monthly
      - . one has a monthly fee of
      - fee of $ 50 for 500 minutes
      - $ 50 for 500 minutes plus $
      - minutes plus $ 0 . 35 for
      - minute over the 500 . the second
      - 500 . the second plan has a
      - second plan has a monthly fee of
      - fee of $ 75 for 1000 minutes
      - $ 75 for 1000 minutes plus $
      - minutes plus $ 0 . 45 for
      - minute over the 1000 . after how
    tokens:
      shape:
      - 105
      target: '[CLS] a person is choosing between 2 cellular phone plans . one has
        a monthly fee of $ 50 for 500 minutes plus $ 0 . 35 for each minute over the
        500 . the second plan has a monthly fee of $ 75 for 1000 minutes plus $ 0
        . 45 for each minute over the 1000 . after how many minutes used are the monthly
        costs of the plans equal ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 21
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: __NEW_VAR(, ) R_03: *(N_02,
      R_00) R_04: *(N_05, R_01) R_05: +(R_03, R_04) R_06: *(N_08, R_02) R_07: +(R_05,
      R_06) R_08: =(N_12, R_07) R_09: /(N_03, 100) R_10: *(R_00, R_09) R_11: *(N_06,
      R_01) R_12: +(R_10, R_11) R_13: *(N_09, R_02) R_14: +(R_12, R_13) R_15: =(N_14,
      R_14) R_16: +(R_00, R_01) R_17: +(R_02, R_16) R_18: =(N_11, R_17) R_19: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the number of ounces of coffee
      N_03:
      - the cost of a 10 oz cup of coffee
      N_05:
      - the number of ounces of the first cup of coffee
      N_06:
      - the price of a 10 oz cup of coffee
      N_08:
      - the number of ounces of coffee
      N_09:
      - the price of a 20 oz cup of coffee
      N_11:
      - the total number of cups of coffee
      N_12:
      - the number of ounces of a 10 oz cup of coffee
      N_14:
      - the total cost of coffee
      X_00:
      - the number of ounces of coffee
      X_01:
      - the number of ounces of the second cup of coffee
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the number of oz of the first type of coffee
      - the amount of 10 oz cup
      - the amount of one cup of the first type of coffee
      N_03:
      - the cost per oz of the first type of coffee in cents
      - the cost of the 10 oz cup of coffee by cent
      - the cost of the first type of coffee in cents
      N_05:
      - the number of oz of the second type of coffee
      - the amount of 14 oz cup
      - the amount of one cup of the second type of coffee
      N_06:
      - the cost per oz of the second type of coffee in dollars
      - the cost of the 14 oz cup of coffee by dollars
      - the cost of the second type of coffee in dollars
      N_08:
      - the number of oz of the third type of coffee
      - the amount of 20 oz cup
      - the amount of one cup of the third type of coffee
      N_09:
      - the cost per oz of the third type of coffee in dollars
      - the cost of the 20 oz cup of coffee by dollars
      - the cost of the third type of coffee in dollars
      N_11:
      - the total number of cups sold
      - the total cup of coffee
      - the total number of cups of coffee
      N_12:
      - the number of oz of coffee sold
      - the total number of ounces of coffee
      - the total amount of coffee sold
      N_14:
      - the total number of dollars earned from selling coffee
      - the total cost of the coffee
      - the total cost of coffee sold
      X_00:
      - the number of cups sold for the first type of coffee
      - the number of the 10 oz cup of coffee
      - the number of cups of coffee of the first type
      X_01:
      - the number of cups sold for the second type of coffee
      - the number of the 14 oz cup of coffee
      - the number of cups of coffee of the second type
      X_02:
      - the number of cups sold for the third type of coffee
      - the number of the 20 oz cup of coffee
      - the number of cups of coffee of the third type
  info:
    answers:
    - c1: '6'
      c2: '6'
      c3: '12'
    item_id: 604cc853117d71c492a6301f
    numbers:
      N_00: '1'
      N_01: '1'
      N_02: '10'
      N_03: '95'
      N_04: '1'
      N_05: '14'
      N_06: '1.15000000000000'
      N_07: '1'
      N_08: '20'
      N_09: '1.50000000000000'
      N_10: '1'
      N_11: '24'
      N_12: '384'
      N_13: '1'
      N_14: '30.6000000000000'
    split: null
    variables:
    - c1
    - c2
    - c3
  text:
    numbers:
      shape:
      - 105
      target: __ __ __ __  0 __ __ __ __ __  1  2 __ __ __ __ __  3 __ __  4  5 __
        __ __ __ __ __  6  6  6 __ __  7  8 __ __ __ __  9  9  9 __ __ 10 __ __ __
        __ __ 11 __ __ __ __ __ 12 12 __ __ __ __ __ __ __ 13 __ __ __ 14 14 14 __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __
    raw: 'kyle works at a don ##ut shop , where a 10 oz cup of coffee costs 95 cents
      , a 14 oz cup of coffee costs $ 1 . 15 , and a 20 oz cup costs $ 1 . 50 . during
      one busy period , kyle served 24 cups of coffee , using 38 ##4 ounce ##s of
      coffee , while collecting a total of $ 30 . 60 . how many cups of each size
      did kyle fill ?'
    snippets:
      shape:
      - 15
      - 7
      target:
      - 'kyle works at a don ##ut shop'
      - shop , where a 10 oz cup
      - ', where a 10 oz cup of'
      - of coffee costs 95 cents , a
      - 95 cents , a 14 oz cup
      - cents , a 14 oz cup of
      - coffee costs $ 1 . 15 ,
      - 15 , and a 20 oz cup
      - ', and a 20 oz cup costs'
      - cup costs $ 1 . 50 .
      - 50 . during one busy period ,
      - ', kyle served 24 cups of coffee'
      - 'coffee , using 38 ##4 ounce ##s'
      - ', while collecting a total of $'
      - total of $ 30 . 60 .
    tokens:
      shape:
      - 105
      target: '[CLS] kyle works at a don ##ut shop , where a 10 oz cup of coffee costs
        95 cents , a 14 oz cup of coffee costs $ 1 . 15 , and a 20 oz cup costs $
        1 . 50 . during one busy period , kyle served 24 cups of coffee , using 38
        ##4 ounce ##s of coffee , while collecting a total of $ 30 . 60 . how many
        cups of each size did kyle fill ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 21
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_01, N_02) R_02: +(N_03, R_01) R_03: =(R_00,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the amount of rocky cream
      N_02:
      - the amount of cookie cream
      N_03:
      - the amount of strawberry cheese
      X_00:
      - the total amount of ice cream
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of cartons of the leftover rocky road ice cream after a sundae
        party
      - the number of a cartons of rocky road ice cream
      - the amount of rocky road ice cream left
      N_02:
      - the number of cartons of the leftover cookie dough ice cream after a sundae
        party
      - the number of a cartons of cookie dough ice cream
      - the amount of cookie dough ice cream left
      N_03:
      - the number of cartons of the leftover strawberry cheesecake ice cream after
        a sundae party
      - the number of a cartons of strawberry cheesecake ice cream
      - the amount of strawberry cheesecake ice cream left
      X_00:
      - the number of cartons of the whole leftover ice cream after a sundae party
      - the total number of a cartons of all ice creams
      - the total amount of ice cream left
  info:
    answers:
    - c: '0.833333333333333'
    item_id: 60f9186c90be09b72239f017
    numbers:
      N_00: '1'
      N_01: '0.333333333333333'
      N_02: '0.333333333333333'
      N_03: '0.166666666666667'
    split: null
    variables:
    - c
  text:
    numbers:
      shape:
      - 105
      target: __ __ __ __ __ __ __ __ __  0 __ __ __ __ __ __  1  1  1  1  1  1  1  1  1  1
        __ __ __ __ __ __ __ __  2  2  2  2  2  2  2  2  2  2 __ __ __ __ __ __ __
        __ __  3  3  3  3  3  3  3  3  3  3 __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __
    raw: 'allie counted the left ##over ice cream after a sun ##dae party . she had
      0 . 333 ##33 ##33 ##33 ##33 ##33 ##33 ##3 cart ##ons of rocky road ice cream
      , 0 . 333 ##33 ##33 ##33 ##33 ##33 ##33 ##3 cart ##ons of cookie dough ice cream
      , and 0 . 1666 ##66 ##66 ##66 ##66 ##66 ##66 ##6 cart ##ons of strawberry cheese
      ##cake ice cream . how many cart ##ons of ice cream did allie have in all ?'
    snippets:
      shape:
      - 4
      - 7
      target:
      - 'ice cream after a sun ##dae party'
      - '. she had 0 . 333 ##33'
      - 'ice cream , 0 . 333 ##33'
      - 'cream , and 0 . 1666 ##66'
    tokens:
      shape:
      - 105
      target: '[CLS] allie counted the left ##over ice cream after a sun ##dae party
        . she had 0 . 333 ##33 ##33 ##33 ##33 ##33 ##33 ##3 cart ##ons of rocky road
        ice cream , 0 . 333 ##33 ##33 ##33 ##33 ##33 ##33 ##3 cart ##ons of cookie
        dough ice cream , and 0 . 1666 ##66 ##66 ##66 ##66 ##66 ##66 ##6 cart ##ons
        of strawberry cheese ##cake ice cream . how many cart ##ons of ice cream did
        allie have in all ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 21
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_01, N_03) R_02: +(N_05, R_01) R_03: =(R_00,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the amount of rocky cream
      N_03:
      - the amount of cookiecake ice cream
      N_05:
      - the amount of strawberry cheese
      X_00:
      - the total amount of ice cream
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of the cartons of leftover rocky road ice cream after a sundae
        party
      - the amount of rocky road ice cream
      - the number of a carton of rocky road ice cream
      N_03:
      - the number of the cartons of leftover cookie dough ice cream after a sundae
        party
      - the amount of cookie dough ice cream
      - the number of a carton of cookie dough ice cream
      N_05:
      - the number of the cartons of leftover strawberry cheesecake ice cream after
        a sundae party
      - the amount of strawberry cheesecake ice cream
      - the number of a carton of strawberry cheesecake ice cream
      X_00:
      - the number of cartons of leftover ice cream after a sundae party
      - the whole amount of ice cream
      - the total number of a carton of all ice creams
  info:
    answers:
    - c: '0.833333333333333'
    item_id: 60f9186c90be09b72239ec93
    numbers:
      N_00: '1'
      N_01: '0.333333333333333'
      N_02: '1'
      N_03: '0.333333333333333'
      N_04: '1'
      N_05: '0.166666666666667'
      N_06: '1'
    split: null
    variables:
    - c
  text:
    numbers:
      shape:
      - 105
      target: __ __ __ __ __ __ __ __ __  0 __ __ __ __ __ __  1  1  1  1  1  1  1  1  1  1
        __  2 __ __ __ __ __ __ __ __  3  3  3  3  3  3  3  3  3  3 __  4 __ __ __
        __ __ __ __ __ __  5  5  5  5  5  5  5  5  5  5 __  6 __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __
    raw: 'allie counted the left ##over ice cream after a sun ##dae party . she had
      0 . 333 ##33 ##33 ##33 ##33 ##33 ##33 ##3 of a cart ##on of rocky road ice cream
      , 0 . 333 ##33 ##33 ##33 ##33 ##33 ##33 ##3 of a cart ##on of cookie dough ice
      cream , and 0 . 1666 ##66 ##66 ##66 ##66 ##66 ##66 ##6 of a cart ##on of strawberry
      cheese ##cake ice cream . how many cart ##ons of ice cream did allie have in
      all ?'
    snippets:
      shape:
      - 7
      - 7
      target:
      - 'ice cream after a sun ##dae party'
      - '. she had 0 . 333 ##33'
      - '##33 ##3 of a cart ##on of'
      - 'ice cream , 0 . 333 ##33'
      - '##33 ##3 of a cart ##on of'
      - 'cream , and 0 . 1666 ##66'
      - '##66 ##6 of a cart ##on of'
    tokens:
      shape:
      - 105
      target: '[CLS] allie counted the left ##over ice cream after a sun ##dae party
        . she had 0 . 333 ##33 ##33 ##33 ##33 ##33 ##33 ##3 of a cart ##on of rocky
        road ice cream , 0 . 333 ##33 ##33 ##33 ##33 ##33 ##33 ##3 of a cart ##on
        of cookie dough ice cream , and 0 . 1666 ##66 ##66 ##66 ##66 ##66 ##66 ##6
        of a cart ##on of strawberry cheese ##cake ice cream . how many cart ##ons
        of ice cream did allie have in all ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 21
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_05, R_00) R_02: +(N_04, R_01) R_03: *(N_07,
      R_00) R_04: =(R_02, R_03) R_05: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_04:
      - the fixed cost
      N_05:
      - the variable cost of a book
      N_07:
      - the selling price of a book
      X_00:
      - the total number of books
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_04:
      - the fixed cost
      - the one - time fixed cost
      - the one - time fixed costs in the first plan
      N_05:
      - the variable cost of a book
      - the variable cost per book
      - the variable cost per book in the first plan
      N_07:
      - the selling price of the book
      - the selling price of a book
      - the variable cost per book in the second plan
      X_00:
      - the number of books
      - the number of books the publisher must print and sell so that the production
        costs equal the money obtained from sales
      - the number of books
  info:
    answers:
    - b: '4332'
    item_id: 604cc853117d71c492a62d38
    numbers:
      N_00: '1'
      N_01: '1'
      N_02: '1'
      N_03: '1'
      N_04: '54150'
      N_05: '12.5000000000000'
      N_06: '1'
      N_07: '25.0000000000000'
    split: null
    variables:
    - b
  text:
    numbers:
      shape:
      - 105
      target: __  0 __ __ __ __ __ __ __  1 __ __ __ __ __ __ __ __  2  2  2 __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __  3  3  3 __ __ __ __ __  4  4  4
        __ __ __ __ __ __  5  5  5 __ __ __ __ __ __ __ __ __ __ __ __ __ __  6 __
        __ __  7  7  7 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __
    raw: 'a small publishing company is planning to publish a new book . the production
      costs will include one - time fixed costs ( such as editing ) and variable costs
      ( such as printing ) . the one - time fixed costs will amount to 54 , 150 .
      the variable costs will be 12 . 50 per book . the publisher will sell the finished
      product to bookstore ##s at a price of $ 25 . 00 per book . how many books must
      the publisher print and sell so that the production costs will equal the money
      obtained from sales ?'
    snippets:
      shape:
      - 8
      - 7
      target:
      - a small publishing company
      - planning to publish a new book .
      - costs will include one - time fixed
      - ) . the one - time fixed
      - will amount to 54 , 150 .
      - costs will be 12 . 50 per
      - 'bookstore ##s at a price of $'
      - price of $ 25 . 00 per
    tokens:
      shape:
      - 105
      target: '[CLS] a small publishing company is planning to publish a new book
        . the production costs will include one - time fixed costs ( such as editing
        ) and variable costs ( such as printing ) . the one - time fixed costs will
        amount to 54 , 150 . the variable costs will be 12 . 50 per book . the publisher
        will sell the finished product to bookstore ##s at a price of $ 25 . 00 per
        book . how many books must the publisher print and sell so that the production
        costs will equal the money obtained from sales ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_01, R_00) R_02: =(N_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of golf balls
      N_01:
      - the number of golf balls in one dozen
      X_00:
      - the number of dozen golf balls
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of golf balls
      - the number of golf balls sara has
      - the number of golf balls sara has
      N_01:
      - the number of golf balls composing one dozen
      - the unit of dozen
      - the value of a dozen
      X_00:
      - the number of dozens of golf balls
      - the number of dozen golfs she has
      - the number of dozen golf balls sara has
  info:
    answers:
    - d: '16'
    item_id: 60f9186c90be09b72239ef46
    numbers:
      N_00: '192'
      N_01: '12'
    split: null
    variables:
    - d
  text:
    numbers:
      shape:
      - 30
      target: __ __ __  0 __ __ __ __ __  1 __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __
    raw: sara has 192 golf balls . how many dozen golf balls does she have ?
    snippets:
      shape:
      - 2
      - 7
      target:
      - sara has 192 golf balls .
      - . how many dozen golf balls does
    tokens:
      shape:
      - 30
      target: '[CLS] sara has 192 golf balls . how many dozen golf balls does she
        have ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: -(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the weight of mildred
      N_01:
      - the weight of carol
      X_00:
      - the value of mildred's weight minus carol's weight
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the weight of mildred
      - the number of pounds mildred weighs
      - the weight of mildred
      N_01:
      - the weight of carol
      - the number of pounds carol weighs
      - the weight of carol
      X_00:
      - the value of the weight of mildred minus and the weight of carol
      - the value of mildred's weights minus carol's weights
      - the value of mildred's weight minus carol's weight
  info:
    answers:
    - d: '50'
    item_id: 60f9186c90be09b72239f134
    numbers:
      N_00: '59'
      N_01: '9'
    split: null
    variables:
    - d
  text:
    numbers:
      shape:
      - 30
      target: __ __ __  0 __ __ __ __  1 __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __
    raw: mildred weighs 59 pounds . carol weighs 9 pounds . how much heavier is mildred
      than carol ?
    snippets:
      shape:
      - 2
      - 7
      target:
      - mildred weighs 59 pounds . carol
      - . carol weighs 9 pounds . how
    tokens:
      shape:
      - 30
      target: '[CLS] mildred weighs 59 pounds . carol weighs 9 pounds . how much heavier
        is mildred than carol ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: -(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of pounds bridget weighs
      N_01:
      - the number of pounds martha weighs
      X_00:
      - the value of bridget's weight minus martha's weight
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the weight of bridget
      - the amount of pounds of bridget
      - the weight of bridget
      N_01:
      - the weight of martha
      - the amount of pounds of martha
      - the weight of martha
      X_00:
      - the value of the weight of bridget minus and the weight of martha
      - the value of bridget's weights minus martha's weights
      - the value of bridget's weight minus martha's weight
  info:
    answers:
    - d: '37'
    item_id: 60f9186c90be09b72239eb78
    numbers:
      N_00: '39'
      N_01: '2'
    split: null
    variables:
    - d
  text:
    numbers:
      shape:
      - 30
      target: __ __ __  0 __ __ __ __  1 __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __
    raw: bridget weighs 39 pounds . martha weighs 2 pounds . how much heavier is bridget
      than martha ?
    snippets:
      shape:
      - 2
      - 7
      target:
      - bridget weighs 39 pounds . martha
      - . martha weighs 2 pounds . how
    tokens:
      shape:
      - 30
      target: '[CLS] bridget weighs 39 pounds . martha weighs 2 pounds . how much
        heavier is bridget than martha ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_00, R_00) R_02: *(N_03, R_00) R_03: -(R_02,
      N_02) R_04: +(R_01, R_03) R_05: =(N_04, R_04) R_06: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the multiplier of the number
      N_02:
      - a number in the phrase " 6 "
      N_03:
      - the coefficient of the number
      N_04:
      - the value of 8 times the number minus 3
      X_00:
      - the value of the number
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the multiplier of the number
      - the multiplier of a number
      - the number of multiples making a number equal to the value of 34 minus 6 less
        than twice the number
      N_02:
      - the value to minus from twice the number
      - the subtractor for twice the number
      - the value of twice a number minus another number
      N_03:
      - the other multiplier of the number
      - the multiplier of twice the number
      - the ratio of another number plus 6 to a number
      N_04:
      - the value of 8 times the number plus 6 less than twice the number
      - the result of 8 times a number plus 6 less than twice the number
      - the sum of 8 times a number, plus 6 less than twice the number
      X_00:
      - the value that satisfies 8 times of it plus 6 less than twice of it is 34
      - the number presented
      - the original or target number
  info:
    answers:
    - n: '4'
    item_id: 60f9186c90be09b72239ec8b
    numbers:
      N_00: '8'
      N_01: '1'
      N_02: '6'
      N_03: '2'
      N_04: '34'
    split: null
    variables:
    - n
  text:
    numbers:
      shape:
      - 30
      target: __  0 __  1 __ __ __  2 __ __  3 __ __ __  4 __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __
    raw: 8 times a number , plus 6 less than twice the number is 34 . what is the
      number ?
    snippets:
      shape:
      - 5
      - 7
      target:
      - 8 times a number
      - 8 times a number , plus
      - number , plus 6 less than twice
      - 6 less than twice the number is
      - the number is 34 . what is
    tokens:
      shape:
      - 30
      target: '[CLS] 8 times a number , plus 6 less than twice the number is 34 .
        what is the number ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(R_00, R_01) R_03: =(N_01,
      R_02) R_04: *(N_04, R_01) R_05: -(R_04, R_00) R_06: =(N_03, R_05) R_07: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the sum of the two numbers
      N_03:
      - the value of twice the other number minus one number
      N_04:
      - a number in the phrase " twice the other "
      X_00:
      - the value of one number
      X_01:
      - the value of the other number
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the sum of two numbers
      - the sum of two numbers
      - the sum of the two numbers
      N_03:
      - the value of 2 times the other number minus the one number
      - the value of twice the other number minus one number
      - the value of twice the other minus one number
      N_04:
      - a number in the phrase " twice the other "
      - a number in the phrase " twice the other "
      - a number in the phrase " twice the other "
      X_00:
      - the one number
      - the value of one number
      - the value of one number
      X_01:
      - the other number
      - the value of the other number
      - the value of the other number
  info:
    answers:
    - n1: '65'
      n2: '35'
    item_id: 604cc853117d71c492a63011
    numbers:
      N_00: '2'
      N_01: '100'
      N_02: '1'
      N_03: '5'
      N_04: '2'
    split: null
    variables:
    - n1
    - n2
  text:
    numbers:
      shape:
      - 30
      target: __ __ __ __  0 __ __  1 __  2 __ __  3 __ __  4 __ __ __ __ __ __ __
        __ __ __ __ __ __ __
    raw: the sum of two numbers is 100 . one number is 5 less than twice the other
      . find the numbers .
    snippets:
      shape:
      - 5
      - 7
      target:
      - the sum of two numbers is 100
      - two numbers is 100 . one number
      - is 100 . one number is 5
      - one number is 5 less than twice
      - 5 less than twice the other .
    tokens:
      shape:
      - 30
      target: '[CLS] the sum of two numbers is 100 . one number is 5 less than twice
        the other . find the numbers . [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: -(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of pencils josh had
      N_01:
      - the number of pencils josh gave to dorothy
      X_00:
      - the number of pencils left
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of pencils josh had
      - number of pencils josh had
      - the number of josh's pencils in the past
      N_01:
      - the number of pencils he gave to dorothy
      - number of pencils he gave to dorothy
      - the number of pencils he gave to dorothy
      X_00:
      - the number of all pencils
      - number of pencils he had left
      - the number of josh's pencils left
  info:
    answers:
    - p: '111'
    item_id: 60f9186c90be09b72239f1fb
    numbers:
      N_00: '142'
      N_01: '31'
    split: null
    variables:
    - p
  text:
    numbers:
      shape:
      - 30
      target: __ __ __  0 __ __ __ __ __  1 __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __
    raw: 'josh had 142 pencil ##s . he gave 31 pencil ##s to dorothy . how many pencil
      ##s does josh have left ?'
    snippets:
      shape:
      - 2
      - 7
      target:
      - 'josh had 142 pencil ##s .'
      - '. he gave 31 pencil ##s to'
    tokens:
      shape:
      - 30
      target: '[CLS] josh had 142 pencil ##s . he gave 31 pencil ##s to dorothy .
        how many pencil ##s does josh have left ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_01, R_00) R_02: =(N_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of boxes
      N_01:
      - the number of boxes
      X_00:
      - the number of blocks in each box
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of blocks
      - the number of blocks michael stores in boxes
      - the total number of blocks
      N_01:
      - the number of boxes
      - the number of boxes
      - the total number of boxes
      X_00:
      - the number of blocks in each box
      - the number of blocks in each box
      - the number of blocks that go in one box
  info:
    answers:
    - p: '2'
    item_id: 60f9186c90be09b72239ed6e
    numbers:
      N_00: '16'
      N_01: '8'
    split: null
    variables:
    - p
  text:
    numbers:
      shape:
      - 30
      target: __ __ __  0 __ __ __ __ __ __ __ __  1 __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __
    raw: michael has 16 blocks stored in boxes . if there are 8 boxes , how many blocks
      must go in each box ?
    snippets:
      shape:
      - 2
      - 7
      target:
      - michael has 16 blocks stored in
      - if there are 8 boxes , how
    tokens:
      shape:
      - 30
      target: '[CLS] michael has 16 blocks stored in boxes . if there are 8 boxes
        , how many blocks must go in each box ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of fish held by mrs. sheridan
      N_01:
      - the number of fish given more to her sister
      X_00:
      - the total number of fish
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the initial number of fish
      - the number of fishes
      - the number of mrs. sheridan's fish
      N_01:
      - the number of fish given by the sister
      - the newly got fishes
      - the number of fish more given to mrs. sheridan by sheridan's sister
      X_00:
      - the number of fish now
      - the whole number of fishes
      - the number of fish held by mrs. sheridan
  info:
    answers:
    - f: '69'
    item_id: 60f9186c90be09b72239edce
    numbers:
      N_00: '22'
      N_01: '47'
    split: null
    variables:
    - f
  text:
    numbers:
      shape:
      - 30
      target: __ __ __ __ __  0 __ __ __ __ __ __  1 __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __
    raw: mrs . sheridan has 22 fish . her sister gave her 47 more fish . how many
      fish does she have now ?
    snippets:
      shape:
      - 2
      - 7
      target:
      - . sheridan has 22 fish . her
      - sister gave her 47 more fish .
    tokens:
      shape:
      - 30
      target: '[CLS] mrs . sheridan has 22 fish . her sister gave her 47 more fish
        . how many fish does she have now ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the length of hair before
      N_01:
      - the number of inches her hair grows
      X_00:
      - the whole amount of hair
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the length of the hair
      - the length of isabella's hair
      - the original length of isabella's hair
      N_01:
      - the length of the hair grown more
      - how much her hair grew
      - the number of inches isabella's hair grew
      X_00:
      - the current length of the hair
      - the length of isabella's hair now
      - the length of isabella's hair now
  info:
    answers:
    - h: '22'
    item_id: 60f9186c90be09b72239f14c
    numbers:
      N_00: '18'
      N_01: '4'
    split: null
    variables:
    - h
  text:
    numbers:
      shape:
      - 30
      target: __ __ __ __ __ __  0 __ __ __ __ __ __ __ __  1 __ __ __ __ __ __ __
        __ __ __ __ __ __ __
    raw: 'isabella '' s hair is 18 cube ##s long . if her hair grows 4 more inches
      , how long will it be ?'
    snippets:
      shape:
      - 2
      - 7
      target:
      - 's hair is 18 cube ##s long'
      - her hair grows 4 more inches ,
    tokens:
      shape:
      - 30
      target: '[CLS] isabella '' s hair is 18 cube ##s long . if her hair grows 4
        more inches , how long will it be ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_01, R_00) R_02: =(N_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of candies peter has
      N_01:
      - the number of boxes
      X_00:
      - the number of candies for each box
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the total number of candies
      - the number of candies
      - the total number of candies
      N_01:
      - the number of boxes for storing candies
      - the number of boxes
      - the total number of boxes
      X_00:
      - the number of candies in each box
      - the number of candies in each box
      - the number of candies that go in one box
  info:
    answers:
    - p: '1'
    item_id: 60f9186c90be09b72239ec56
    numbers:
      N_00: '3'
      N_01: '3'
    split: null
    variables:
    - p
  text:
    numbers:
      shape:
      - 30
      target: __ __ __  0 __ __ __ __ __ __ __ __ __  1 __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __
    raw: 'peter has 3 candi ##es stored in boxes . if there are 3 boxes , how many
      candi ##es must go in each box ?'
    snippets:
      shape:
      - 2
      - 7
      target:
      - 'peter has 3 candi ##es stored'
      - if there are 3 boxes , how
    tokens:
      shape:
      - 30
      target: '[CLS] peter has 3 candi ##es stored in boxes . if there are 3 boxes
        , how many candi ##es must go in each box ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of melanie's turnips
      N_01:
      - the number of turnips benny grew
      X_00:
      - the number of turnips they grew
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of turnips grown by melanie
      - the number of turnips melanie grew
      - the number of turnips grown by melanie
      N_01:
      - the number of turnips grown by benny
      - the number of turnips benny grew
      - the number of turnips grown by benny
      X_00:
      - the total number of turnips
      - the number of turnips they grew
      - the total number of turnips grown by melanie and benny
  info:
    answers:
    - t: '252'
    item_id: 60f9186c90be09b72239eacb
    numbers:
      N_00: '139'
      N_01: '113'
    split: null
    variables:
    - t
  text:
    numbers:
      shape:
      - 30
      target: __ __ __  0 __ __ __ __ __ __  1 __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __
    raw: 'melanie grew 139 turn ##ip ##s . benny grew 113 turn ##ip ##s . how many
      turn ##ip ##s did they grow in all ?'
    snippets:
      shape:
      - 2
      - 7
      target:
      - 'melanie grew 139 turn ##ip ##s'
      - '. benny grew 113 turn ##ip ##s'
    tokens:
      shape:
      - 30
      target: '[CLS] melanie grew 139 turn ##ip ##s . benny grew 113 turn ##ip ##s
        . how many turn ##ip ##s did they grow in all ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of scissors in the drawer
      N_01:
      - the number of scissors keith placed in the drawer
      X_00:
      - the total number of scissors now in the drawer
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - number of scissors in the drawer
      - the number of scissors in the drawer
      - the number of scissors in the drawer at first
      N_01:
      - number of scissors keith additionally put in the drawer
      - the number of additional scissors keith placed in the drawer
      - the number of scissors keith placed more in the drawer
      X_00:
      - the total number of scissors in the drawer
      - the total number of scissors in the drawer
      - the number of scissors in the drawer now
  info:
    answers:
    - s: '76'
    item_id: 60f9186c90be09b72239eb38
    numbers:
      N_00: '54'
      N_01: '22'
    split: null
    variables:
    - s
  text:
    numbers:
      shape:
      - 30
      target: __ __ __  0 __ __ __ __ __ __ __  1 __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __
    raw: there are 54 scissors in the drawer . keith placed 22 more scissors in the
      drawer . how many scissors are now there in all ?
    snippets:
      shape:
      - 2
      - 7
      target:
      - there are 54 scissors in the
      - . keith placed 22 more scissors in
    tokens:
      shape:
      - 30
      target: '[CLS] there are 54 scissors in the drawer . keith placed 22 more scissors
        in the drawer . how many scissors are now there in all ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: -(N_00, R_00) R_02: =(N_01, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of leaves mikey had
      N_01:
      - the number of leaves left
      X_00:
      - the number of leaves left
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the initial number of leaves
      - the number of leaves mikey originally had
      - the initial number of leaves
      N_01:
      - the number of leaves blown away
      - the number of leaves mikey has left
      - the number of leaves left
      X_00:
      - the remaining number of leaves
      - the number of leaves that were blown away
      - the number of leaves blown away
  info:
    answers:
    - b: '244'
    item_id: 60f9186c90be09b72239ec7f
    numbers:
      N_00: '356'
      N_01: '112'
    split: null
    variables:
    - b
  text:
    numbers:
      shape:
      - 30
      target: __ __ __  0 __ __ __ __ __ __ __ __ __ __ __ __  1 __ __ __ __ __ __
        __ __ __ __ __ __ __
    raw: mikey had 356 leaves . some of her leaves blew away . now she has 112 leaves
      left . how many of her leaves blew away ?
    snippets:
      shape:
      - 2
      - 7
      target:
      - mikey had 356 leaves . some
      - now she has 112 leaves left .
    tokens:
      shape:
      - 30
      target: '[CLS] mikey had 356 leaves . some of her leaves blew away . now she
        has 112 leaves left . how many of her leaves blew away ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the amounts of the snow on monday in inches
      N_01:
      - the amounts of the snow on tuesday in inches
      X_00:
      - the total amounts of the snow on monday and tuesday
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the amount of snow on monday
      - the number of inches of snow that fell on monday
      - the snowfall on monday
      N_01:
      - the amount of snow on tuesday
      - the number of inches of snow that fell on tuesday
      - the snowfall on tuesday
      X_00:
      - the combined amount of snow
      - the total number of inches of snow that fell
      - the value combining snowfall on monday and snowfall on tuesday
  info:
    answers:
    - s: '0.530000000000000'
    item_id: 60f9186c90be09b72239ed98
    numbers:
      N_00: '0.320000000000000'
      N_01: '0.210000000000000'
    split: null
    variables:
    - s
  text:
    numbers:
      shape:
      - 30
      target: __ __ __ __  0  0  0 __ __ __ __  1  1  1 __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __
    raw: 'it snow ##ed 0 . 32 inches on monday and 0 . 21 inches on tuesday . how
      much did it snow on monday and tuesday combined ?'
    snippets:
      shape:
      - 2
      - 7
      target:
      - 'it snow ##ed 0 . 32 inches'
      - on monday and 0 . 21 inches
    tokens:
      shape:
      - 30
      target: '[CLS] it snow ##ed 0 . 32 inches on monday and 0 . 21 inches on tuesday
        . how much did it snow on monday and tuesday combined ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_01, N_02) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the cost of each chair
      N_02:
      - the number of chairs
      X_00:
      - the total amount of money spent on chairs
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the price of each chair
      - the number of dollars each chair
      - the cost of each chair in dollars
      N_02:
      - the number of chairs
      - the number of chairs ellen bought
      - the number of chairs she bought
      X_00:
      - the whole price of chairs
      - the total cost of 12 chairs
      - the amount of money she spent on
  info:
    answers:
    - c: '180'
    item_id: 60f9186c90be09b72239eea9
    numbers:
      N_00: '1'
      N_01: '15'
      N_02: '12'
    split: null
    variables:
    - c
  text:
    numbers:
      shape:
      - 30
      target: __ __ __ __  0 __ __ __ __ __ __ __ __ __  1 __ __ __ __ __ __ __ __
        __  2 __ __ __ __ __
    raw: ellen went to a garage sale to buy chairs . each chair is 15 dollars . how
      much did ellen spend on the 12 chairs she bought ?
    snippets:
      shape:
      - 3
      - 7
      target:
      - ellen went to a garage sale to
      - each chair is 15 dollars . how
      - spend on the 12 chairs she bought
    tokens:
      shape:
      - 30
      target: '[CLS] ellen went to a garage sale to buy chairs . each chair is 15
        dollars . how much did ellen spend on the 12 chairs she bought ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of hot dogs hilt bought
      N_01:
      - the cost of each hot dog
      X_00:
      - the total cost of the hot dogs
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of hot dogs mrs. hilt bought
      - the number of hot dogs mrs. hilt bought
      - the number of hot dogs bought by mrs. hilt
      N_01:
      - the cost for each hot dog in cents
      - the cost of each hot dog
      - the price of each hot dog in cents
      X_00:
      - the value of all of the hot dogs mrs. hilt bought in cents
      - the total cost of hot dogs
      - the total cost of hot dogs bought by mrs. hilt
  info:
    answers:
    - t: '300'
    item_id: 60f9186c90be09b72239f1cf
    numbers:
      N_00: '6'
      N_01: '50'
    split: null
    variables:
    - t
  text:
    numbers:
      shape:
      - 30
      target: __ __ __ __ __  0 __ __ __ __ __ __ __  1 __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __
    raw: mrs . hilt bought 6 hot dogs . each hot dog costs 50 cents . how much money
      did she pay for all of the hot dogs ?
    snippets:
      shape:
      - 2
      - 7
      target:
      - . hilt bought 6 hot dogs .
      - hot dog costs 50 cents . how
    tokens:
      shape:
      - 30
      target: '[CLS] mrs . hilt bought 6 hot dogs . each hot dog costs 50 cents .
        how much money did she pay for all of the hot dogs ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_01, N_02) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the distance that the family drove each day
      X_00:
      - the distance of the one - way vacation
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of days of the vacation
      - the number of days for vacation
      - the number of days
      N_02:
      - the number of miles driven on each day
      - the number of miles to drive per day
      - the number of miles each day they drove
      X_00:
      - the total number of miles driven during the vacation
      - the total number of miles to drive over vacation
      - the total number of miles they drove
  info:
    answers:
    - t: '1250'
    item_id: 60f9186c90be09b72239ec25
    numbers:
      N_00: '1'
      N_01: '5'
      N_02: '250'
    split: null
    variables:
    - t
  text:
    numbers:
      shape:
      - 40
      target: __ __ __ __ __ __  0  1 __ __ __ __ __ __ __ __ __ __  2 __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'the sum ##ata family took a 5 - day vacation by car . each day they drove
      250 miles . how many total miles did they drive ?'
    snippets:
      shape:
      - 3
      - 7
      target:
      - '##ata family took a 5 - day'
      - family took a 5 - day vacation
      - day they drove 250 miles . how
    tokens:
      shape:
      - 40
      target: '[CLS] the sum ##ata family took a 5 - day vacation by car . each day
        they drove 250 miles . how many total miles did they drive ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: -(N_01, N_02) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of bags of dog food
      N_02:
      - the number of bags of cat food
      X_00:
      - the value of the number of bags of dog food minus the number of bags of cat
        food
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of bags of dog food the pet supply store has
      - the number of bags of dog food in a pet supply store
      - the number of bags of dog food
      N_02:
      - the number of bags of cat food the pet supply store has
      - the number of bags of cat food in a pet supply store
      - the number of bags of cat food
      X_00:
      - the value of the number of bags of dog food minus the number of bags of cat
        food
      - the value of the number of bags of dog food minus the number of bags of cat
        food in a pet supply store
      - the value of the number of bags of dog food minus the number of bags of cat
        food
  info:
    answers:
    - d: '273'
    item_id: 60f9186c90be09b72239ee3b
    numbers:
      N_00: '1'
      N_01: '600'
      N_02: '327'
    split: null
    variables:
    - d
  text:
    numbers:
      shape:
      - 40
      target: __  0 __ __ __ __  1 __ __ __ __ __  2 __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: a pet supply store has 600 bags of dog food and 327 bags of cat food . how
      many more bags of dog food are there than cat food ?
    snippets:
      shape:
      - 3
      - 7
      target:
      - a pet supply store
      - supply store has 600 bags of dog
      - dog food and 327 bags of cat
    tokens:
      shape:
      - 40
      target: '[CLS] a pet supply store has 600 bags of dog food and 327 bags of cat
        food . how many more bags of dog food are there than cat food ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: -(N_00, N_01) R_02: +(N_03, R_01) R_03: =(R_00,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of socks george had
      N_01:
      - the number of socks he threw away
      N_03:
      - the number of new socks
      X_00:
      - the number of socks he would have
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the initial number of socks
      - the number of socks george had
      - the number of socks
      N_01:
      - the number of socks thrown away
      - the number of socks george threw away
      - the number of socks thrown away
      N_03:
      - the number of new socks
      - the number of socks george newly bought
      - the number of socks newly bought
      X_00:
      - the total number of socks
      - the number of george's current socks
      - the current number of socks
  info:
    answers:
    - n: '60'
    item_id: 60f9186c90be09b72239ee30
    numbers:
      N_00: '28'
      N_01: '4'
      N_02: '1'
      N_03: '36'
      N_04: '1'
    split: null
    variables:
    - n
  text:
    numbers:
      shape:
      - 40
      target: __ __ __  0 __ __ __ __ __ __  1 __  2 __ __ __ __ __ __ __  3 __  4  4
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: george had 28 socks . if he threw away 4 old ones that didn ' t fit and bought
      36 new ones , how many socks would he have ?
    snippets:
      shape:
      - 5
      - 7
      target:
      - george had 28 socks . if
      - he threw away 4 old ones that
      - away 4 old ones that didn '
      - fit and bought 36 new ones ,
      - bought 36 new ones , how many
    tokens:
      shape:
      - 40
      target: '[CLS] george had 28 socks . if he threw away 4 old ones that didn ''
        t fit and bought 36 new ones , how many socks would he have ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(N_00, R_00) R_03: =(R_01,
      R_02) R_04: +(R_00, R_01) R_05: =(N_02, R_04) R_06: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the sum of riza and her son's born
      N_02:
      - the sum of riza and her son's born
      X_00:
      - the age of riza
      X_01:
      - the age of riza
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the past age of riza
      - riza's age of his first son's birth
      - the age of riza when her first son was born
      N_02:
      - the sum of the present age of riza and the present age of riza's son
      - the sum of riza and her son's age today
      - the sum of their ages today
      X_00:
      - the present age of riza's son
      - the son's age today
      - the age of the son today
      X_01:
      - the age present of riza
      - riza's age today
      - the age of riza today
  info:
    answers:
    - r: '65'
      s: '40'
    item_id: 604cc853117d71c492a62c7c
    numbers:
      N_00: '25'
      N_01: '1'
      N_02: '105'
    split: null
    variables:
    - s
    - r
  text:
    numbers:
      shape:
      - 40
      target: __ __ __ __  0 __ __  1 __ __ __ __ __ __ __ __ __ __ __  2 __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'ri ##za was 25 when her first son was born . today the sum of their ages
      is 105 . how old are ri ##za and her son now ?'
    snippets:
      shape:
      - 3
      - 7
      target:
      - 'ri ##za was 25 when her first'
      - 25 when her first son was born
      - their ages is 105 . how old
    tokens:
      shape:
      - 40
      target: '[CLS] ri ##za was 25 when her first son was born . today the sum of
        their ages is 105 . how old are ri ##za and her son now ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_02, R_00) R_02: +(N_00, N_01) R_03: =(R_01,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of dollars earned by luke before a week
      N_01:
      - the number of weeds spent eating
      N_02:
      - the number of dollars spent a week
      X_00:
      - the total number of dollars the money the money the money the money the money
        the weed would made
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of dollars luke earned from mowing lawns
      - the number of dollars by mowing lawns
      - the amount of money luke made by mowing lawns
      N_01:
      - the number of dollars luke earned from weed eating
      - the number of dollars by weed eating
      - the amount of money luke made by weed eating
      N_02:
      - the number of dollars luke spends per week
      - the number of dollars he spends a week
      - the amount of money he spends per week
      X_00:
      - the number of weeks luke last with his money
      - the number of weeks the money will last
      - the number of weeks the money would last him
  info:
    answers:
    - w: '9'
    item_id: 60f9186c90be09b72239f1b8
    numbers:
      N_00: '9'
      N_01: '18'
      N_02: '3'
      N_03: '1'
    split: null
    variables:
    - w
  text:
    numbers:
      shape:
      - 40
      target: __ __ __  0 __ __ __ __ __ __  1 __ __ __ __ __ __ __ __  2 __  3 __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'luke made 9 dollars mo ##wing lawn ##s and 18 dollars weed eating . if he
      only spent 3 dollars a week , how long would the money last him ?'
    snippets:
      shape:
      - 4
      - 7
      target:
      - 'luke made 9 dollars mo ##wing'
      - 'lawn ##s and 18 dollars weed eating'
      - he only spent 3 dollars a week
      - spent 3 dollars a week , how
    tokens:
      shape:
      - 40
      target: '[CLS] luke made 9 dollars mo ##wing lawn ##s and 18 dollars weed eating
        . if he only spent 3 dollars a week , how long would the money last him ?
        [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: /(R_00, R_01) R_03: /(N_00,
      N_01) R_04: =(R_02, R_03) R_05: +(R_00, R_01) R_06: =(N_02, R_05) R_07: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the numerator of the ratio of boys to girls
      N_01:
      - the denominator of the ratio of boys to girls
      N_02:
      - the sum of the number of boys and girls
      X_00:
      - the number of boys
      X_01:
      - the number of girls
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the numerator of the ratio of boys to girls
      - the numerator of the ratio of boys to girls
      - the numerator of the ratio of boys to girls
      N_01:
      - the denominator of the ratio of boys to girls
      - the denominator of the ratio of boys to girls
      - the denominator of the ratio of boys to girls
      N_02:
      - the total number of students
      - the total number of students
      - the total number of boys and girls
      X_00:
      - the number of boys
      - the number of boys
      - the number of boys
      X_01:
      - the number of girls
      - the number of girls
      - the number of girls
  info:
    answers:
    - b: '63'
      g: '28'
    item_id: 604cc852117d71c492a62b1a
    numbers:
      N_00: '9'
      N_01: '4'
      N_02: '91'
    split: null
    variables:
    - b
    - g
  text:
    numbers:
      shape:
      - 40
      target: __ __ __ __ __ __ __ __  0 __  1 __ __ __ __ __  2 __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: the ratio of boys to girls is 9 to 4 . you know there are 91 total students
      . how many of them are boys ? how many are girls ?
    snippets:
      shape:
      - 3
      - 7
      target:
      - to girls is 9 to 4 .
      - is 9 to 4 . you know
      - know there are 91 total students .
    tokens:
      shape:
      - 40
      target: '[CLS] the ratio of boys to girls is 9 to 4 . you know there are 91
        total students . how many of them are boys ? how many are girls ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: *(N_00, R_00) R_03: =(R_01,
      R_02) R_04: +(R_00, R_01) R_05: =(N_01, R_04) R_06: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the ratio of the number of students to the number of professors
      N_01:
      - the total number of students
      X_00:
      - the number of professors
      X_01:
      - the number of students
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the ratio of the number of students to the number of professors
      - the ratio of the number of students to the number of professors
      - the ratio of the students to the professors
      N_01:
      - the total number of students and professors
      - the sum of the number of students and the number of professors
      - the number of the students and the professors
      X_00:
      - the number of professors
      - the number of professors
      - the number of the professors
      X_01:
      - the number of students
      - the number of students
      - the number of the students
  info:
    answers:
    - p: '2500'
      s: '37500'
    item_id: 604cc853117d71c492a62c66
    numbers:
      N_00: '15'
      N_01: '40000'
    split: null
    variables:
    - p
    - s
  text:
    numbers:
      shape:
      - 40
      target: __ __ __ __ __ __  0 __ __ __ __ __ __ __ __ __ __ __ __ __ __  1  1  1
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: in college , there are 15 times as many students as professors . if together
      the students and professors number 40 , 000 , how many students are there in
      college ?
    snippets:
      shape:
      - 2
      - 7
      target:
      - ', there are 15 times as many'
      - and professors number 40 , 000 ,
    tokens:
      shape:
      - 40
      target: '[CLS] in college , there are 15 times as many students as professors
        . if together the students and professors number 40 , 000 , how many students
        are there in college ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: *(N_00, R_00) R_03: *(N_01,
      R_01) R_04: +(R_02, R_03) R_05: =(N_02, R_04) R_06: *(N_03, R_00) R_07: *(N_04,
      R_01) R_08: +(R_06, R_07) R_09: =(N_05, R_08) R_10: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of apples in the first case
      N_01:
      - the number of oranges in the second case
      N_02:
      - the total cost of apples and oranges in the first case
      N_03:
      - the number of oranges in the second case
      N_04:
      - the number of oranges in the first case
      N_05:
      - the total cost of apples and oranges in the second case
      X_00:
      - the price of a apple
      X_01:
      - the price of a orange
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of apples in the first case
      - the number of apples in the first case
      - the number of apples in the first case
      N_01:
      - the number of oranges in the first case
      - the number of oranges in the first case
      - the number of oranges in the first case
      N_02:
      - the total cost of apples and oranges in the first case
      - the total cost in the first case
      - the cost of apples and oranges in the first case
      N_03:
      - the number of apples in the second case
      - the number of apples in the second case
      - the number of apples in the second case
      N_04:
      - the number of oranges in the second case
      - the number of oranges in the second case
      - the number of oranges in the second case
      N_05:
      - the total cost of apples and oranges in the second case
      - the total cost in the second case
      - the cost of apples and oranges in the second case
      X_00:
      - the price of an apple
      - the price of an apple
      - the cost of one apple
      X_01:
      - the price of an orange
      - the price of an orange
      - the cost of one orange
  info:
    answers:
    - a: '0.200000000000000'
      o: '0.100000000000000'
    item_id: 604cc852117d71c492a62b8d
    numbers:
      N_00: '4'
      N_01: '2'
      N_02: '1'
      N_03: '2'
      N_04: '3'
      N_05: '0.700000000000000'
    split: null
    variables:
    - a
    - o
  text:
    numbers:
      shape:
      - 40
      target: __ __  0 __ __  1 __ __ __  2 __ __ __  3 __ __  4 __ __ __  5  5  5
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'if 4 apples and 2 orange ##s equal 1 dollar , and 2 apples and 3 orange
      ##s equal 0 . 70 dollars , how much do each apple and each orange cost ?'
    snippets:
      shape:
      - 6
      - 7
      target:
      - if 4 apples and 2
      - '4 apples and 2 orange ##s equal'
      - 'orange ##s equal 1 dollar , and'
      - dollar , and 2 apples and 3
      - '2 apples and 3 orange ##s equal'
      - 'orange ##s equal 0 . 70 dollars'
    tokens:
      shape:
      - 40
      target: '[CLS] if 4 apples and 2 orange ##s equal 1 dollar , and 2 apples and
        3 orange ##s equal 0 . 70 dollars , how much do each apple and each orange
        cost ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: -(N_01, N_00) R_02: *(N_02, R_01) R_03: =(R_00,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of brownies zoe baked
      N_01:
      - the number of cups of flour zoe baked
      N_02:
      - the number of cups of flour needed to flour
      X_00:
      - the number of cups of flour she needs to flour
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of brownies baked
      - the number of brownies already baked
      - number of brownies zoe baked
      N_01:
      - the number of brownies needed
      - the number of total brownies having to be baked
      - number of brownies she needs
      N_02:
      - the number of cups of flour used on each brownie
      - the number of used cups of flour per browny
      - number of cups needed for each brownie
      X_00:
      - the total number of cups needed
      - the number of necessary cups of flour to achieve the goal
      - the number of cups of flour she needs to make the rest of the brownies
  info:
    answers:
    - c: '42'
    item_id: 60f9186c90be09b72239ef78
    numbers:
      N_00: '5'
      N_01: '11'
      N_02: '7'
      N_03: '1'
    split: null
    variables:
    - c
  text:
    numbers:
      shape:
      - 40
      target: __ __ __  0 __ __ __ __  1 __ __ __ __ __ __ __ __  2 __ __ __ __ __  3  3
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'zoe baked 5 brown ##ies but needed 11 total for her party . if she used
      7 cups of flour on each one , how much cups of flour does she still need ?'
    snippets:
      shape:
      - 4
      - 7
      target:
      - 'zoe baked 5 brown ##ies but'
      - '##ies but needed 11 total for her'
      - if she used 7 cups of flour
      - flour on each one , how much
    tokens:
      shape:
      - 40
      target: '[CLS] zoe baked 5 brown ##ies but needed 11 total for her party . if
        she used 7 cups of flour on each one , how much cups of flour does she still
        need ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: -(R_00, N_02) R_02: *(N_01, R_01) R_03: +(N_00,
      R_00) R_04: =(R_02, R_03) R_05: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of years to go
      N_01:
      - a number in the phrase " he would be twice as old as johnny "
      N_02:
      - the years between the past and the present year
      X_00:
      - the age of johnny now
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of years from now
      - the number of years to be the future
      - the value of the future year minus now
      N_01:
      - the ratio of johnny's age after 2 years to johnny's age 3 years ago
      - a number in the phrase " twice as old as he was "
      - the ratio of the age of johnny in the future to the age of johnny in the past
      N_02:
      - the number of years passed
      - the years to be the past
      - the value of now minus the past year
      X_00:
      - johnny's age now
      - the present age of johnny if in 2 years he would be twice as old as he was
        3 years ago
      - the age of johnny now
  info:
    answers:
    - j: '8'
    item_id: 604cc853117d71c492a62fb4
    numbers:
      N_00: '2'
      N_01: '2'
      N_02: '3'
    split: null
    variables:
    - j
  text:
    numbers:
      shape:
      - 40
      target: __ __ __ __ __ __ __ __ __ __ __ __ __ __  0 __ __ __ __ __  1 __ __
        __ __ __  2 __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: when sally asked johnny how old he was , he replied that in 2 years , he
      would be twice as old as he was 3 years ago . how old is johnny ?
    snippets:
      shape:
      - 3
      - 7
      target:
      - replied that in 2 years , he
      - he would be twice as old as
      - as he was 3 years ago .
    tokens:
      shape:
      - 40
      target: '[CLS] when sally asked johnny how old he was , he replied that in 2
        years , he would be twice as old as he was 3 years ago . how old is johnny
        ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_01, N_02) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of stickers pat had before the first day
      N_02:
      - the number of stickers pat earned during the end of the week
      X_00:
      - the number of stickers pat at the end of the week
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of stickers
      - the number of stickers on the first day of the week
      - the number of stickers pat had before
      N_02:
      - the number of stickers earned during the week
      - the number of stickers on the other days of the week
      - the number of stickers added
      X_00:
      - the total number of stickers
      - the total number of earned stickers
      - the total number of stickers
  info:
    answers:
    - e: '61'
    item_id: 60f9186c90be09b72239e9ca
    numbers:
      N_00: '1'
      N_01: '39'
      N_02: '22'
    split: null
    variables:
    - e
  text:
    numbers:
      shape:
      - 40
      target: __ __ __  0 __ __ __ __ __ __ __  1 __ __ __ __ __  2 __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'on the first day of the week , pat had 39 stick ##ers . pat earned 22 more
      during the week . how many stick ##ers did pat have at the end of the week ?'
    snippets:
      shape:
      - 3
      - 7
      target:
      - on the first day of the
      - ', pat had 39 stick ##ers .'
      - . pat earned 22 more during the
    tokens:
      shape:
      - 40
      target: '[CLS] on the first day of the week , pat had 39 stick ##ers . pat earned
        22 more during the week . how many stick ##ers did pat have at the end of
        the week ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_03, R_00) R_02: +(N_01, N_02) R_03: =(R_01,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of puppies a pet shelter had
      N_02:
      - the number of puppies adopted a pet shelter
      N_03:
      - the number of puppies adopted by a pet shelter
      X_00:
      - the number of puppies it takes to be adopted
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the initial number of puppies
      - the number of puppies
      - the number of puppies a pet shelter had
      N_02:
      - the additional number of puppies
      - the number of new puppies
      - the number of puppies another pet shelter had
      N_03:
      - the number of puppies adopted per day
      - the number of adopted puppies a day
      - the number of puppies adopted per day
      X_00:
      - the number of days it takes for all the puppies to be adopted
      - the ratio of all puppies to the number of adopted puppies a day
      - the number of days it would take for all of them to be adopted
  info:
    answers:
    - d: '9'
    item_id: 60f9186c90be09b72239eace
    numbers:
      N_00: '1'
      N_01: '17'
      N_02: '55'
      N_03: '8'
      N_04: '1'
    split: null
    variables:
    - d
  text:
    numbers:
      shape:
      - 40
      target: __  0 __ __ __  1 __ __ __ __  2 __ __ __ __ __  3 __ __  4 __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'a pet shelter had 17 pup ##pies when another 55 were brought in . if 8 pup
      ##pies a day are adopted , how long would it take for all of them to be adopted
      ?'
    snippets:
      shape:
      - 5
      - 7
      target:
      - a pet shelter had
      - 'pet shelter had 17 pup ##pies when'
      - '##pies when another 55 were brought in'
      - 'in . if 8 pup ##pies a'
      - '8 pup ##pies a day are adopted'
    tokens:
      shape:
      - 40
      target: '[CLS] a pet shelter had 17 pup ##pies when another 55 were brought
        in . if 8 pup ##pies a day are adopted , how long would it take for all of
        them to be adopted ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_04, R_00) R_02: -(N_01, N_03) R_03: =(R_01,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of puppies
      N_03:
      - the number of puppies sold
      N_04:
      - the number of puppies in each cage
      X_00:
      - the number of cages
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of puppies at the beginning
      - the number of puppies the pet store originally had
      - the number of puppies they had
      N_03:
      - the number of puppies sold
      - the number of puppies they sold
      - the number of puppies they sold
      N_04:
      - the number of puppies per cage
      - the number of puppies they put in each cage
      - the number of puppies in each cage
      X_00:
      - the number of cages necessary for the rest puppies
      - the number of cages they used
      - the number of cages
  info:
    answers:
    - c: '6'
    item_id: 60f9186c90be09b72239f071
    numbers:
      N_00: '1'
      N_01: '78'
      N_02: '1'
      N_03: '30'
      N_04: '8'
    split: null
    variables:
    - c
  text:
    numbers:
      shape:
      - 40
      target: __  0 __ __ __  1 __ __ __ __  2 __ __ __ __  3 __ __ __ __ __ __ __
        __ __ __  4 __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'a pet store had 78 pup ##pies . in one day , they sold 30 of them and put
      the rest into cages , with 8 in each cage . how many cages did they use ?'
    snippets:
      shape:
      - 5
      - 7
      target:
      - a pet store had
      - 'pet store had 78 pup ##pies .'
      - '##pies . in one day , they'
      - ', they sold 30 of them and'
      - cages , with 8 in each cage
    tokens:
      shape:
      - 40
      target: '[CLS] a pet store had 78 pup ##pies . in one day , they sold 30 of
        them and put the rest into cages , with 8 in each cage . how many cages did
        they use ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: /(N_01, 100) R_03: *(R_00,
      R_02) R_04: /(N_03, 100) R_05: *(R_01, R_04) R_06: +(R_03, R_05) R_07: =(N_05,
      R_06) R_08: +(R_00, R_01) R_09: =(N_07, R_08) R_10: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the hourly wage of a worker
      N_03:
      - the price of a overtime hour
      N_05:
      - the value of the total amount of money
      N_07:
      - the total number of hours
      X_00:
      - the number of hours
      X_01:
      - the number of hours
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the hourly wage on ordinary time in cents
      - the wage per hour for a worker in ordinary time
      - the hourly rate for ordinary time in cent
      N_03:
      - the hourly wage on overtime in cents
      - the wage per hour for a worker in overtime
      - the hourly rate for overtime in cent
      N_05:
      - the total amount of dollars from two jobs
      - total dollars received
      - the total income in dollar
      N_07:
      - the total number of working hours
      - total hours worked
      - the number of hours for which she works
      X_00:
      - the number of hours of working ordinary time
      - the hours worked in ordinary time
      - the number of hours of ordinary working
      X_01:
      - the number of hours of working overtime
      - the hours worked in overtime
      - the number of hours of working overtime
  info:
    answers:
    - o1: '42'
      o2: '8'
    item_id: 604cc853117d71c492a62cf6
    numbers:
      N_00: '1'
      N_01: '60'
      N_02: '1'
      N_03: '90'
      N_04: '1'
      N_05: '32.4000000000000'
      N_06: '1'
      N_07: '50'
    split: null
    variables:
    - o1
    - o2
  text:
    numbers:
      shape:
      - 40
      target: __  0 __ __  1 __  2 __ __ __ __ __  3 __  4 __ __ __ __ __ __ __  5  5  5
        __ __  6  7 __ __ __ __ __ __ __ __ __ __ __
    raw: a worker gets 60 cents an hour for ordinary time and 90 cents an hour for
      overtime . if she gets 32 . 40 dollars for a 50 hour week , how many hours are
      overtime ?
    snippets:
      shape:
      - 8
      - 7
      target:
      - a worker gets 60
      - a worker gets 60 cents an hour
      - gets 60 cents an hour for ordinary
      - ordinary time and 90 cents an hour
      - and 90 cents an hour for overtime
      - if she gets 32 . 40 dollars
      - 40 dollars for a 50 hour week
      - dollars for a 50 hour week ,
    tokens:
      shape:
      - 40
      target: '[CLS] a worker gets 60 cents an hour for ordinary time and 90 cents
        an hour for overtime . if she gets 32 . 40 dollars for a 50 hour week , how
        many hours are overtime ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_04, R_00) R_02: -(N_01, N_03) R_03: =(R_01,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of puppies a pet store had
      N_03:
      - the number of puppies sold
      N_04:
      - the number of puppies in each cage
      X_00:
      - the number of cages needed
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of puppies at the beginning
      - number of puppies
      - the number of puppies the pet store originally had
      N_03:
      - the number of puppies sold
      - number of puppies sold
      - the number of puppies they sold
      N_04:
      - the number of puppies per cage
      - number of puppies in each cage
      - the number of puppies they put in each cage
      X_00:
      - the number of cages necessary for the rest puppies
      - the ratio of the puppies left to the number of puppies in each cage
      - the number of cages they used
  info:
    answers:
    - c: '9'
    item_id: 60f9186c90be09b72239f268
    numbers:
      N_00: '1'
      N_01: '64'
      N_02: '1'
      N_03: '28'
      N_04: '4'
    split: null
    variables:
    - c
  text:
    numbers:
      shape:
      - 40
      target: __  0 __ __ __  1 __ __ __ __  2 __ __ __ __  3 __ __ __ __ __ __ __
        __ __ __  4 __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'a pet store had 64 pup ##pies . in one day , they sold 28 of them and put
      the rest into cages , with 4 in each cage . how many cages did they use ?'
    snippets:
      shape:
      - 5
      - 7
      target:
      - a pet store had
      - 'pet store had 64 pup ##pies .'
      - '##pies . in one day , they'
      - ', they sold 28 of them and'
      - cages , with 4 in each cage
    tokens:
      shape:
      - 40
      target: '[CLS] a pet store had 64 pup ##pies . in one day , they sold 28 of
        them and put the rest into cages , with 4 in each cage . how many cages did
        they use ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: /(1, N_01) R_02: /(1, N_02) R_03: +(R_01, R_02)
      R_04: *(R_00, R_03) R_05: =(1, R_04) R_06: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the time required to paint a room for taylor
      N_02:
      - the time required to paint a room for jennifer
      X_00:
      - the hours required if taylor and jennifer paint together
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of hours taken for taylor to paint a room
      - the number of hours it takes for taylor to paint the room
      - the number of hours it takes for taylor to paint the room
      N_02:
      - the number of hours taken for jennifer to do it
      - the number of hours it takes for jennifer to paint the room
      - the number of hours it takes for jennifer to paint the room
      X_00:
      - the number of hours taken if they work together
      - the number of hours it takes to paint the room if taylor and jennifer paint
        the house together
      - the number of hours it takes for taylor and jennifer to paint the room together
  info:
    answers:
    - h: '5.45454545454545'
    item_id: 604cc853117d71c492a62f5f
    numbers:
      N_00: '1'
      N_01: '12'
      N_02: '10'
    split: null
    variables:
    - h
  text:
    numbers:
      shape:
      - 40
      target: __ __ __ __  0 __ __  1 __ __ __ __ __ __ __ __  2 __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: taylor can paint a room in 12 hours . jennifer can paint the room in 10 hours
      . how long does it take for both taylor and jennifer to paint the room if they
      are working together ?
    snippets:
      shape:
      - 3
      - 7
      target:
      - taylor can paint a room in 12
      - a room in 12 hours . jennifer
      - the room in 10 hours . how
    tokens:
      shape:
      - 40
      target: '[CLS] taylor can paint a room in 12 hours . jennifer can paint the
        room in 10 hours . how long does it take for both taylor and jennifer to paint
        the room if they are working together ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_01, R_00) R_02: =(N_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of miles from patrick's house to aaron's house
      N_01:
      - the number of hours patrick took to get there
      X_00:
      - the number of speed patrick went
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the distance of jogging
      - the distance between patrick's house and aaron's house
      - the distance between patrick's house to aaron's house
      N_01:
      - the number of hours of jogging
      - the number of hours it took for patrick to go to aaron's house
      - the time spent jogging
      X_00:
      - the speed of jogging
      - the speed of patrick
      - the jogging speed
  info:
    answers:
    - s: '7'
    item_id: 60f9186c90be09b72239f13f
    numbers:
      N_00: '14'
      N_01: '2'
    split: null
    variables:
    - s
  text:
    numbers:
      shape:
      - 81
      target: __ __ __ __ __ __ __ __ __ __ __  0 __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __  1 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __
    raw: patrick jogged to aaron ' s house . it is 14 miles from patrick ' s house
      to aaron ' s house . it took patrick 2 hours to get there . how fast did patrick
      go ?
    snippets:
      shape:
      - 2
      - 7
      target:
      - . it is 14 miles from patrick
      - it took patrick 2 hours to get
    tokens:
      shape:
      - 81
      target: '[CLS] patrick jogged to aaron '' s house . it is 14 miles from patrick
        '' s house to aaron '' s house . it took patrick 2 hours to get there . how
        fast did patrick go ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_02, R_00) R_02: -(N_00, N_01) R_03: =(R_01,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the total number of games
      N_01:
      - the number of games sold
      N_02:
      - the number of games sold
      X_00:
      - the number of boxes needed
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the initial number of old games
      - number of games luke started out with
      - the number of old games held by luke
      N_01:
      - the number of old games sold
      - number of games luke sold
      - the number of games sold by luke
      N_02:
      - the number of old games in each box
      - number of games in each box
      - the number of games put into each box
      X_00:
      - the number of boxes
      - number of boxes used to pack the rest of the games
      - the number of boxes needed to pack all games
  info:
    answers:
    - b: '9'
    item_id: 60f9186c90be09b72239ef57
    numbers:
      N_00: '57'
      N_01: '39'
      N_02: '2'
    split: null
    variables:
    - b
  text:
    numbers:
      shape:
      - 81
      target: __ __ __ __ __ __ __ __ __ __ __ __  0 __ __  1 __ __ __ __ __ __ __
        __ __ __  2 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __
    raw: luke was selling his old games . he started out with 57 but sold 39 of them
      . he packed the rest up , putting 2 games into each box . how many boxes did
      he have to use ?
    snippets:
      shape:
      - 3
      - 7
      target:
      - started out with 57 but sold 39
      - 57 but sold 39 of them .
      - up , putting 2 games into each
    tokens:
      shape:
      - 81
      target: '[CLS] luke was selling his old games . he started out with 57 but sold
        39 of them . he packed the rest up , putting 2 games into each box . how many
        boxes did he have to use ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_01) R_02: -(R_01, R_00) R_03: =(N_02,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of cupcakes wendy baked
      N_02:
      - the number of cupcakes wendy had
      X_00:
      - the number of pastcakes
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of cupcakes for the sale
      - the number of cupcakes baked by wendy
      - the number of cupcakes
      N_01:
      - the number of cookies for the sale
      - the number of cookies baked by wendy
      - the number of cookies
      N_02:
      - the number of pastries left after the sale
      - the value of the number of pastries baked by wendy minus the number of pastries
        sold
      - the number of pastries left
      X_00:
      - the number of pastries sold
      - the number of pastries sold
      - the number of total pastries minus " 24 "
  info:
    answers:
    - s: '9'
    item_id: 60f9186c90be09b72239ec98
    numbers:
      N_00: '4'
      N_01: '29'
      N_02: '24'
    split: null
    variables:
    - s
  text:
    numbers:
      shape:
      - 81
      target: __ __ __ __ __ __ __ __ __ __ __ __ __ __ __  0 __ __ __ __  1 __ __
        __ __ __ __ __ __  2 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __
    raw: 'for the school ba ##ke sale , wendy made past ##ries . she baked 4 cup ##cake
      ##s and 29 cookies . after the sale , she had 24 to take back home . how many
      past ##ries did she sell ?'
    snippets:
      shape:
      - 3
      - 7
      target:
      - '. she baked 4 cup ##cake ##s'
      - '##cake ##s and 29 cookies . after'
      - ', she had 24 to take back'
    tokens:
      shape:
      - 81
      target: '[CLS] for the school ba ##ke sale , wendy made past ##ries . she baked
        4 cup ##cake ##s and 29 cookies . after the sale , she had 24 to take back
        home . how many past ##ries did she sell ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: -(N_01, N_03) R_02: +(N_04, R_01) R_03: =(R_00,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of lives in the next level
      N_03:
      - the number of lives lost
      N_04:
      - the number of lives lost
      X_00:
      - the total number of lives
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of lives
      - the number of lives in the video game
      - the number of lives
      N_03:
      - the number of lives lost
      - the number of lost lives in a hard part of the game
      - the number of lost lives
      N_04:
      - the number of lives earned in the next level
      - the number of gotten lives in the next level
      - the number of new lives
      X_00:
      - the total number of lives in the next level
      - the number of lives expected in the next level
      - the total number of lives
  info:
    answers:
    - n: '32'
    item_id: 60f9186c90be09b72239ef73
    numbers:
      N_00: '1'
      N_01: '10'
      N_02: '1'
      N_03: '4'
      N_04: '26'
    split: null
    variables:
    - n
  text:
    numbers:
      shape:
      - 81
      target: __ __ __ __  0 __ __ __ __  1 __ __ __  2 __ __ __ __ __ __ __ __  3
        __ __ __ __ __  4 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __
    raw: rachel was playing a video game and had 10 lives . in a hard part of the
      game , she lost 4 lives . if she got 26 more lives in the next level , how many
      lives would she have ?
    snippets:
      shape:
      - 5
      - 7
      target:
      - rachel was playing a video game and
      - game and had 10 lives . in
      - lives . in a hard part of
      - ', she lost 4 lives . if'
      - if she got 26 more lives in
    tokens:
      shape:
      - 81
      target: '[CLS] rachel was playing a video game and had 10 lives . in a hard
        part of the game , she lost 4 lives . if she got 26 more lives in the next
        level , how many lives would she have ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_01, N_03) R_02: +(N_05, R_01) R_03: =(R_00,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the cost of a superman game
      N_03:
      - the cost of a strategy game
      N_05:
      - the cost of a superman game
      X_00:
      - the cost of 3 games in all
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the cost of the batman game melanie bought in dollars
      - cost of the batman game
      - the price of a batman game bought by melanie in dollars
      N_03:
      - the cost of the strategy game melanie bought in dollars
      - cost of the strategy game
      - the price of a strategy game bought by melanie in dollars
      N_05:
      - the cost of the superman game melanie bought in dollars
      - cost of the superman game
      - the price of a superman game bought by melanie in dollars
      X_00:
      - the total cost of the 3 games melanie bought in dollars
      - the total amount of money spent on video games
      - the total cost of buying all games
  info:
    answers:
    - s: '22.5800000000000'
    item_id: 60f9186c90be09b72239edf8
    numbers:
      N_00: '1'
      N_01: '6.95000000000000'
      N_02: '1'
      N_03: '7.90000000000000'
      N_04: '1'
      N_05: '7.73000000000000'
      N_06: '4'
    split: null
    variables:
    - s
  text:
    numbers:
      shape:
      - 81
      target: __ __ __  0 __ __ __ __  1  1  1 __  2 __ __ __ __  3  3  3 __ __  4
        __ __ __ __  5  5  5 __ __ __ __  6 __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __
    raw: melanie bought a batman game for $ 6 . 95 , a strategy game for $ 7 . 9 ,
      and a superman game for $ 7 . 73 . melanie already owns 4 games . how much did
      melanie spend on video games ?
    snippets:
      shape:
      - 7
      - 7
      target:
      - melanie bought a batman game for
      - game for $ 6 . 95 ,
      - . 95 , a strategy game for
      - game for $ 7 . 9 ,
      - 9 , and a superman game for
      - game for $ 7 . 73 .
      - melanie already owns 4 games . how
    tokens:
      shape:
      - 81
      target: '[CLS] melanie bought a batman game for $ 6 . 95 , a strategy game for
        $ 7 . 9 , and a superman game for $ 7 . 73 . melanie already owns 4 games
        . how much did melanie spend on video games ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: *(N_01, R_00) R_03: *(N_02,
      R_01) R_04: +(R_02, R_03) R_05: =(N_04, R_04) R_06: +(R_00, R_01) R_07: =(N_03,
      R_06) R_08: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the daily pay of a heavy operators
      N_02:
      - the daily pay of a general laborer
      N_03:
      - the total number of operators and laborers
      N_04:
      - the total amount of payroll
      X_00:
      - the number of heavy operators
      X_01:
      - the number of general laborers
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the daily pay of a heavy operator
      - the cost of heavy operators per day
      - the cost to employ one heavy operator per day
      N_02:
      - the daily pay of a general laborer
      - the cost of general laborers per day
      - the cost to employ one general laborer per day
      N_03:
      - the total number of people hired
      - the number of peoples
      - the total number of people hired
      N_04:
      - the total amount of payroll
      - the total payroll
      - the total payroll
      X_00:
      - the number of heavy operators employed
      - the number of heavy operators
      - the number of heavy operators
      X_01:
      - the number of laborers employed
      - the number of general laborers
      - the number of general laborers
  info:
    answers:
    - l: '1'
      o: '30'
    item_id: 604cc853117d71c492a62c4b
    numbers:
      N_00: '1'
      N_01: '129'
      N_02: '82'
      N_03: '31'
      N_04: '3952'
    split: null
    variables:
    - o
    - l
  text:
    numbers:
      shape:
      - 81
      target: __  0 __ __ __ __ __ __ __ __ __  1 __ __ __ __ __ __  2 __ __ __ __
        __  3 __ __ __ __ __ __ __  4  4 __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __
    raw: 'an employment agency specializing in temporary help pays heavy operators
      129 dollars per day and general laborers 82 dollars per day . if 31 people were
      hired and the payroll was 395 ##2 dollars , how many heavy operators were employed
      ? how many laborers ?'
    snippets:
      shape:
      - 5
      - 7
      target:
      - an employment agency specializing
      - pays heavy operators 129 dollars per day
      - and general laborers 82 dollars per day
      - day . if 31 people were hired
      - 'the payroll was 395 ##2 dollars ,'
    tokens:
      shape:
      - 81
      target: '[CLS] an employment agency specializing in temporary help pays heavy
        operators 129 dollars per day and general laborers 82 dollars per day . if
        31 people were hired and the payroll was 395 ##2 dollars , how many heavy
        operators were employed ? how many laborers ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: *(N_04, R_00) R_03: *(N_05,
      R_01) R_04: +(R_02, R_03) R_05: =(N_01, R_04) R_06: +(R_00, R_01) R_07: =(N_03,
      R_06) R_08: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of students at one time
      N_03:
      - the number of students
      N_04:
      - the number of students at one time
      N_05:
      - the number of students that the lab can set up
      N_06:
      - the number of students that the lab can set up
      X_00:
      - the number of work - stations
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the total number of students
      - the total number of students the chemistry lab can accommodate
      - the number of students that 16 work - stations can accommodate
      N_03:
      - the total number of work - stations
      - the number of work - stations the lab has
      - the total number of work - stations
      N_04:
      - the seating capacity of the first work - station type
      - the number of students the first kind of work - station can accommodate
      - the number of students a work station set up for 2 students can accommodate
      N_05:
      - the seating capacity of the second work - station type
      - the number of students the second kind of work - station can accommodate
      - the number of students a work station set up for 3 students can accommodate
      N_06:
      - the seating capacity of the first work - station type
      - the number of students the first kind of work - station can accommodate
      - the number of students a work station set up for 2 students can accommodate
      X_00:
      - the number of the first type of work - stations
      - the number of the first kind of work - stations
      - the number of work - stations set up for 2 students
      X_01:
      - the number of the second type of work - stations
      - the number of the second kind of work - stations
      - the number of work - stations set up for 3 students
  info:
    answers:
    - c1: '10'
      c2: '6'
    item_id: 604cc852117d71c492a62bd2
    numbers:
      N_00: '1'
      N_01: '38'
      N_02: '1'
      N_03: '16'
      N_04: '2'
      N_05: '3'
      N_06: '2'
    split: null
    variables:
    - c1
    - c2
  text:
    numbers:
      shape:
      - 81
      target: __  0 __ __ __ __ __ __  1 __ __  2 __ __ __ __ __  3 __ __ __ __ __
        __ __ __  4 __ __ __ __ __ __ __ __  5 __ __ __ __ __ __ __ __  6 __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __
    raw: a chemistry lab can be used by 38 students at one time . the lab has 16 work
      - stations . some set up for 2 students , and the others set up for 3 students
      . how many work - stations accommodate 2 students ?
    snippets:
      shape:
      - 7
      - 7
      target:
      - a chemistry lab can
      - be used by 38 students at one
      - 38 students at one time . the
      - the lab has 16 work - stations
      - set up for 2 students , and
      - set up for 3 students . how
      - '- stations accommodate 2 students ?'
    tokens:
      shape:
      - 81
      target: '[CLS] a chemistry lab can be used by 38 students at one time . the
        lab has 16 work - stations . some set up for 2 students , and the others set
        up for 3 students . how many work - stations accommodate 2 students ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: /(N_01, 100) R_03: *(R_00,
      R_02) R_04: /(N_03, 100) R_05: *(R_01, R_04) R_06: +(R_03, R_05) R_07: /(N_05,
      100) R_08: *(N_06, R_07) R_09: =(R_06, R_08) R_10: +(R_00, R_01) R_11: =(N_06,
      R_10) R_12: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the concentration of the first solution
      N_03:
      - the concentration of the second solution
      N_05:
      - the concentration of the mixed solution
      N_06:
      - the amount of the final solution
      X_00:
      - the amount of the first solution
      X_01:
      - the amount of the other solution
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the percentage of ethanol in the first solution
      - the density of an ethanol solution
      - the concentration of 14 % ethanol solution
      N_03:
      - the percentage of ethanol in the second solution
      - the density of another ethanol solution
      - the concentration of 45 % ethanol solution
      N_05:
      - the percentage of ethanol in the mixture of two solutions
      - the density of the final mixed solution
      - the concentration of mixed ethanol solution
      N_06:
      - the amount of the mixture
      - the volume of the final mixed solution
      - the amount of the mixed solution
      X_00:
      - the amount of the first solution
      - the volume of the 14 % solution
      - the amount of 14 % ethanol solution
      X_01:
      - the amount of the second solution
      - the volume of the 45 % solution
      - the amount of 45 % ethanol solution
  info:
    answers:
    - s1: '48.3870967741936'
      s2: '51.6129032258064'
    item_id: 604cc853117d71c492a630d2
    numbers:
      N_00: '1'
      N_01: '14'
      N_02: '1'
      N_03: '45'
      N_04: '1'
      N_05: '30'
      N_06: '100'
    split: null
    variables:
    - s1
    - s2
  text:
    numbers:
      shape:
      - 81
      target: __  0  1 __ __ __ __ __ __ __ __  2  3 __ __ __ __ __  4 __ __ __ __  5
        __ __ __ __ __ __ __ __  6 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __
    raw: 'a 14 % ethanol solution is to be mixed with a 45 % ethanol solution to produce
      a final solution which is 30 % ethanol . if the final solution is 100 gallons
      , find the amount of each solution needed for del ##isha to mix .'
    snippets:
      shape:
      - 7
      - 7
      target:
      - a 14 % ethanol
      - a 14 % ethanol solution
      - be mixed with a 45 % ethanol
      - mixed with a 45 % ethanol solution
      - solution to produce a final solution which
      - solution which is 30 % ethanol .
      - final solution is 100 gallons , find
    tokens:
      shape:
      - 81
      target: '[CLS] a 14 % ethanol solution is to be mixed with a 45 % ethanol solution
        to produce a final solution which is 30 % ethanol . if the final solution
        is 100 gallons , find the amount of each solution needed for del ##isha to
        mix . [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_00, N_02) R_02: *(N_01, N_03) R_03: -(R_01,
      R_02) R_04: =(R_00, R_03) R_05: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of cartons of ice cream that seth bought
      N_01:
      - the number of cartons of yogurt
      N_02:
      - the cost of each carton of ice cream
      N_03:
      - the cost of each carton of yogurt
      X_00:
      - the value of the number of cream cream cream more than yogurt
      X_01:
      - the value of the number of cartons of yogurt
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of ice cream cartons
      - the cartons of ice cream
      - the number of cartons of ice cream bought
      N_01:
      - the number of yogurt cartons
      - the cartons of yogurt
      - the number of cartons of yogurt bought
      N_02:
      - the of an ice cream carton
      - the price of each ice cream
      - the cost of one carton of ice cream
      N_03:
      - the of a yogurt carton
      - the price of each yogurt
      - the cost of one carton of yogurt
      X_00:
      - the value of the total price of ice cream cartons minus the total price of
        yogurt cartons
      - the value of cost of ice cream minus of yogurt
      - the value of the total cost of ice cream minus the total cost of yogurt
  info:
    answers:
    - d: '118'
    item_id: 60f9186c90be09b72239ea2e
    numbers:
      N_00: '20'
      N_01: '2'
      N_02: '6'
      N_03: '1'
    split: null
    variables:
    - d
  text:
    numbers:
      shape:
      - 81
      target: __ __ __  0 __ __ __ __ __ __  1 __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __  2 __ __ __ __ __ __ __ __ __ __ __  3 __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __
    raw: 'seth bought 20 cart ##ons of ice cream and 2 cart ##ons of yo ##gur ##t
      . each cart ##on of ice cream cost $ 6 , and each cart ##on of yo ##gur ##t
      cost $ 1 . how much more did seth spend on ice cream than on yo ##gur ##t ?'
    snippets:
      shape:
      - 4
      - 7
      target:
      - 'seth bought 20 cart ##ons of'
      - 'ice cream and 2 cart ##ons of'
      - cream cost $ 6 , and each
      - '##t cost $ 1 . how much'
    tokens:
      shape:
      - 81
      target: '[CLS] seth bought 20 cart ##ons of ice cream and 2 cart ##ons of yo
        ##gur ##t . each cart ##on of ice cream cost $ 6 , and each cart ##on of yo
        ##gur ##t cost $ 1 . how much more did seth spend on ice cream than on yo
        ##gur ##t ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(R_00, R_01) R_03: =(N_00,
      R_02) R_04: *(N_03, R_00) R_05: *(N_04, R_01) R_06: +(R_04, R_05) R_07: =(N_05,
      R_06) R_08: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of douglas fir and ponderosa pine trees bought
      N_03:
      - the average price of a douglas fir tree
      N_04:
      - the average price of a ponderosa pine tree
      N_05:
      - the total cost of buying trees
      X_00:
      - the number of douglas fir trees
      X_01:
      - the number of ponderosa pine trees
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of douglas fir and ponderosa pine trees bought
      - the sum of the number of douglas fir and ponderosa pine trees
      - the total number of trees
      N_03:
      - the average price of a douglas fir tree
      - the cost of a douglas fir
      - the cost of one douglas fir
      N_04:
      - the average price of a ponderosa pine tree
      - the cost of a ponderosa pine tree
      - the cost of one ponderosa pine tree
      N_05:
      - the total cost of buying trees
      - the number of dollars it takes to buy the douglas fir and ponderosa pine trees
      - the total cost that the company paid for the trees
      X_00:
      - the number of douglas fir trees
      - the number of douglas fir
      - the number of douglas firs
      X_01:
      - the number of ponderosa pine trees
      - the number of ponderosa pine trees
      - the number of ponderosa pine trees
  info:
    answers:
    - f: '350'
      p: '500'
    item_id: 604cc853117d71c492a62dc1
    numbers:
      N_00: '850'
      N_01: '1'
      N_02: '1'
      N_03: '300'
      N_04: '225'
      N_05: '217500'
    split: null
    variables:
    - f
    - p
  text:
    numbers:
      shape:
      - 81
      target: __ __ __  0 __ __ __ __ __ __ __ __  1 __ __ __ __ __ __ __ __ __ __
        __ __ __ __  2 __ __ __  3 __ __ __ __ __ __  4 __ __ __ __ __ __ __ __ __
        __ __  5  5  5 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __
    raw: 'there are 850 douglas fir and ponder ##osa pine trees in a section of the
      forest bought by saw ##z logging co . the company paid an average of $ 300 for
      each douglas fir and $ 225 for each ponder ##osa pine . if the company paid
      $ 217 , 500 for the trees , how many of each kind did the company buy ?'
    snippets:
      shape:
      - 6
      - 7
      target:
      - there are 850 douglas fir and
      - pine trees in a section of the
      - the company paid an average of $
      - average of $ 300 for each douglas
      - fir and $ 225 for each ponder
      - company paid $ 217 , 500 for
    tokens:
      shape:
      - 81
      target: '[CLS] there are 850 douglas fir and ponder ##osa pine trees in a section
        of the forest bought by saw ##z logging co . the company paid an average of
        $ 300 for each douglas fir and $ 225 for each ponder ##osa pine . if the company
        paid $ 217 , 500 for the trees , how many of each kind did the company buy
        ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: *(N_01, R_00) R_03: *(N_02,
      R_01) R_04: +(R_02, R_03) R_05: =(N_05, R_04) R_06: +(R_00, R_01) R_07: =(N_04,
      R_06) R_08: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the cost of the calendar
      N_02:
      - the cost of one date
      N_04:
      - the total number of promotional calendars
      N_05:
      - the cost of the date
      X_00:
      - the number of promotional items
      X_01:
      - the number of dates
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the cost of a calendar in dollars
      - the dollar cost of a caldendar
      - the cost of the calendars
      N_02:
      - the cost of a datebook in dollars
      - the dollar cost of a datebook
      - the cost of datebooks
      N_04:
      - the sum of the number of calendars and datebooks
      - the total number of promotional items ordered
      - the total number of items
      N_05:
      - the sum of the number of dollars spent on buying calendars and datebooks
      - the total cost of promotional items ordered
      - the total spend dollars
      X_00:
      - the number of calendars
      - the number of calendars ordered
      - the number of calendars
      X_01:
      - the number of datebooks
      - the number of datebooks ordererd
      - the number of datebooks
  info:
    answers:
    - c: '200'
      d: '300'
    item_id: 604cc853117d71c492a62d32
    numbers:
      N_00: '1'
      N_01: '0.750000000000000'
      N_02: '0.500000000000000'
      N_03: '1'
      N_04: '500'
      N_05: '300'
    split: null
    variables:
    - c
    - d
  text:
    numbers:
      shape:
      - 81
      target: __  0 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __  1  1  1 __ __ __ __ __ __ __ __  2  2  2 __ __ __ __  3
        __ __  4 __ __ __ __ __  5 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __
    raw: 'a real estate sales ##person bought promotional calendar ##s and date ##books
      to give to her customers at the end of the year . the calendar costs $ 0 . 75
      each , and the date ##book costs $ 0 . 50 each . she ordered a total of 500
      promotional items and spent $ 300 . how many of each item did she order ?'
    snippets:
      shape:
      - 6
      - 7
      target:
      - a real estate sales
      - calendar costs $ 0 . 75 each
      - '##book costs $ 0 . 50 each'
      - . she ordered a total of 500
      - a total of 500 promotional items and
      - and spent $ 300 . how many
    tokens:
      shape:
      - 81
      target: '[CLS] a real estate sales ##person bought promotional calendar ##s
        and date ##books to give to her customers at the end of the year . the calendar
        costs $ 0 . 75 each , and the date ##book costs $ 0 . 50 each . she ordered
        a total of 500 promotional items and spent $ 300 . how many of each item did
        she order ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(R_00, R_01) R_03: =(N_01,
      R_02) R_04: /(N_05, 100) R_05: *(R_00, R_04) R_06: /(N_08, 100) R_07: *(R_01,
      R_06) R_08: +(R_05, R_07) R_09: /(N_03, 100) R_10: *(N_01, R_09) R_11: =(R_08,
      R_10) R_12: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the amount of the mixed anti - freeze
      N_03:
      - the concentration of the other anti - freeze
      N_05:
      - the concentration of the other anti - freeze
      N_08:
      - the concentration of the other anti - freeze
      N_09:
      - the concentration of one anti - freeze
      N_10:
      - the concentration of the other anti - freeze
      N_11:
      - the amount of the mixed anti - freeze
      N_12:
      - the concentration of the mixed anti - freeze
      X_00:
      - the amount of one anti - freeze
      X_01:
      - the amount of the other anti - freeze
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the total volume of the mixture of the first anti - freeze and the second
        anti - freeze
      - the volume of anti - freeze with a 30 percent glycol concentration needed
      - the amount of the mixed solution
      N_03:
      - the percentage of glycol concentration in the mixture of the first anti -
        freeze and the second anti - freeze
      - the glycol concentration percent needed
      - the concentration of the mixed solution
      N_05:
      - the percentage of glycol concentration in the first anti - freeze
      - one glycol concentration percent possessed
      - the concentration of one solution
      N_08:
      - the percentage of glycol concentration in the second anti - freeze
      - another glycol concentration percent possessed
      - the concentration of the other solution
      N_09:
      - the percentage of glycol concentration in the first anti - freeze
      - one glycol concentration percent possessed
      - the concentration of one solution
      N_10:
      - the percentage of glycol concentration in the second anti - freeze
      - another glycol concentration percent possessed
      - the concentration of the other solution
      N_11:
      - the total volume of the mixture of the first anti - freeze and the second
        anti - freeze
      - the volume of anti - freeze with a 30 percent glycol concentration needed
      - the amount of the mixed solution
      N_12:
      - the percentage of glycol concentration in the mixture of the first anti -
        freeze and the second anti - freeze
      - the glycol concentration percent needed
      - the concentration of the mixed solution
      X_00:
      - the volume of the first anti - freeze
      - the volume of the 30 percent glycol concentration
      - the amount of one solution
      X_01:
      - the volume of the second anti - freeze
      - the volume of the 10 percent glycol concentration
      - the amount of the other solution
  info:
    answers:
    - s1: '8'
      s2: '16'
    item_id: 604cc853117d71c492a62d67
    numbers:
      N_00: '1'
      N_01: '24'
      N_02: '1'
      N_03: '30'
      N_04: '1'
      N_05: '40'
      N_06: '1'
      N_07: '1'
      N_08: '10'
      N_09: '40'
      N_10: '10'
      N_11: '24'
      N_12: '30'
    split: null
    variables:
    - s2
    - s1
  text:
    numbers:
      shape:
      - 81
      target: __  0 __ __ __  1 __ __ __ __ __ __  2  3 __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __  4  5 __ __ __ __ __ __  6 __  7  8 __ __ __ __ __ __ __
        __ __ __  9 __ __ __ __ __ __ 10 __ __ __ __ 11 __ __ 12 __ __ __ __ __ __
        __ __ __ __ __ __ __ __
    raw: 'an auto mechanic needs 24 gallons of anti - freeze with a 30 percent g ##ly
      ##col concentration . he has on hand only anti - freeze with a 40 percent g
      ##ly ##col concentration and one with a 10 percent g ##ly ##col concentration
      . how much of the 40 percent should he mix with the 10 percent to get the 24
      gallons of 30 percent solution he needs ?'
    snippets:
      shape:
      - 13
      - 7
      target:
      - an auto mechanic needs
      - auto mechanic needs 24 gallons of anti
      - '- freeze with a 30 percent g'
      - 'freeze with a 30 percent g ##ly'
      - '- freeze with a 40 percent g'
      - 'freeze with a 40 percent g ##ly'
      - '##col concentration and one with a 10'
      - and one with a 10 percent g
      - 'one with a 10 percent g ##ly'
      - much of the 40 percent should he
      - mix with the 10 percent to get
      - to get the 24 gallons of 30
      - 24 gallons of 30 percent solution he
    tokens:
      shape:
      - 81
      target: '[CLS] an auto mechanic needs 24 gallons of anti - freeze with a 30
        percent g ##ly ##col concentration . he has on hand only anti - freeze with
        a 40 percent g ##ly ##col concentration and one with a 10 percent g ##ly ##col
        concentration . how much of the 40 percent should he mix with the 10 percent
        to get the 24 gallons of 30 percent solution he needs ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: *(N_04, R_00) R_03: *(N_05,
      R_01) R_04: +(R_02, R_03) R_05: =(N_09, R_04) R_06: *(N_06, R_00) R_07: =(R_01,
      R_06) R_08: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_04:
      - the cost per pound of type of coffee
      N_05:
      - the cost per pound of type of coffee
      N_06:
      - the ratio of the number of pounds of the blend of two coffee to the number
        of pounds of type of coffee
      N_09:
      - the total cost of the blend
      X_00:
      - the number of pounds of type of coffee
      X_01:
      - the number of pounds of type of coffee
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_04:
      - the price per pound of type a coffee
      - the worth per pound for type a
      - the cost of type a coffee per pound
      N_05:
      - the price per pound of type b coffee
      - the worth per pound for type b
      - the cost of type b coffee per pound
      N_06:
      - the ratio of the amount of type b coffee in the blend to the amount of type
        a coffee in the blend
      - the a number in the phrase " twice as many pounds of type b coffee as type
        a "
      - the ratio of the pounds of type b coffee to that of type a coffee
      N_09:
      - the total cost of the blend of coffee a and coffee b
      - the total cost of the two coffee types
      - the total cost of the two types of coffee
      X_00:
      - the number of pounds of type a coffee
      - the pounds of type a
      - the pounds of type a coffee
      X_01:
      - the number of pounds of type b coffee
      - the pounds of type b
      - the pounds of type b coffee
  info:
    answers:
    - t1: '31'
      t2: '62'
    item_id: 604cc853117d71c492a62e48
    numbers:
      N_00: '1'
      N_01: '1'
      N_02: '2'
      N_03: '1'
      N_04: '4.60000000000000'
      N_05: '5.95000000000000'
      N_06: '2'
      N_07: '1'
      N_08: '1'
      N_09: '511.500000000000'
      N_10: '1'
    split: null
    variables:
    - t1
    - t2
  text:
    numbers:
      shape:
      - 81
      target: __ __ __ __ __ __ __  0 __ __ __  1 __ __  2 __ __ __ __ __  3 __ __
        __  4  4  4 __ __ __ __ __ __ __ __ __  5  5  5 __ __ __ __ __ __ __ __ __  6
        __ __ __ __ __ __ __ __ __  7 __  8 __ __ __ __  9  9  9  9 __ __ __ __ __
        __ 10 __ __ __ __ __
    raw: 'amanda '' s coffee shop makes a blend that is a mixture of two types of
      coffee . type a coffee costs $ 4 . 60 per pound , and type b coffee costs $
      5 . 95 per pound . this month '' s blend used twice as many pounds of type b
      coffee as type a for a total cost of $ 51 ##1 . 50 . how many pounds of type
      a coffee were used ?'
    snippets:
      shape:
      - 11
      - 7
      target:
      - coffee shop makes a blend that is
      - blend that is a mixture of two
      - a mixture of two types of coffee
      - coffee . type a coffee costs $
      - coffee costs $ 4 . 60 per
      - coffee costs $ 5 . 95 per
      - s blend used twice as many pounds
      - coffee as type a for a total
      - type a for a total cost of
      - 'cost of $ 51 ##1 . 50'
      - pounds of type a coffee were used
    tokens:
      shape:
      - 81
      target: '[CLS] amanda '' s coffee shop makes a blend that is a mixture of two
        types of coffee . type a coffee costs $ 4 . 60 per pound , and type b coffee
        costs $ 5 . 95 per pound . this month '' s blend used twice as many pounds
        of type b coffee as type a for a total cost of $ 51 ##1 . 50 . how many pounds
        of type a coffee were used ? [SEP]'
var: -1.3972602739726028
