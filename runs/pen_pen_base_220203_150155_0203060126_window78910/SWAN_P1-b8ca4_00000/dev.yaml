# Output of experiment dev in iteration 499.
# Total 365 items are tested.
BLEURT: 0.6940763039674637
Bleu_4: 0.8274209818712936
CIDEr: 3.4540486175044722
ROUGE_L: 0.7811355224711566
correct: 0.0
dump:
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_00, R_00) R_02: *(N_02, R_00) R_03: -(R_01,
      R_02) R_04: =(N_01, R_03) R_05: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - &id001 !!python/name:builtins.list ''
    dictitems:
      N_00:
      - a number in the phrase " double "
      N_01:
      - the value of the double of the number minus the double of the number
      N_02:
      - a number in the phrase " 0. 5 than 0. 5 than 0. 5 than 0. 5 than 0. 5 than
        0. 5 than 0. 5 than 0. 5 "
      X_00:
      - the number we want to find
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the first multiplier of the number
      - the ratio of 45 greater than 0. 5 the number to the number
      - the coefficients of the number whose double
      N_01:
      - the value of the first multiplication of the number minus the second multiplication
        of the number
      - the number added to 0. 5 the number
      - the value of the number whose double minus its 0. 5
      N_02:
      - the second multiplier of the number
      - a number in the phrase " 45 greater than its 0. 5 "
      - the coefficient of the 0. 5 number
      X_00:
      - the value of the number
      - the number we want to get
      - the value of the number
  info:
    answers:
    - n: '30.0000000000000'
    item_id: 60f9186c90be09b72239f271
    numbers:
      N_00: '2'
      N_01: '45'
      N_02: '0.500000000000000'
    split: null
    variables:
    - n
  text:
    numbers:
      shape:
      - 23
      target: __ __ __ __ __  0 __  1 __ __ __  2  2  2 __ __ __ __ __ __ __ __ __
    raw: find the number whose double is 45 greater than its 0 . 5 ?
    snippets:
      shape:
      - 3
      - 15
      target:
      - find the number whose double is 45 greater than its 0 .
      - find the number whose double is 45 greater than its 0 . 5 ?
      - whose double is 45 greater than its 0 . 5 ?
    tokens:
      shape:
      - 23
      target: '[CLS] find the number whose double is 45 greater than its 0 . 5 ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_02, R_00) R_02: -(R_01, N_00) R_03: =(N_01,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the value of 8 times the number minus the less than 8
      N_01:
      - the value of 8 times the number minus the 8
      N_02:
      - the coefficient of the number
      X_00:
      - the value of the number
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the value subtracted from 8 times the number
      - 4 less than 8 times a number
      - a number in the phrase " 17 "
      N_01:
      - the value of 8 times the number minus 17
      - the value of 8 times a number minus 17
      - the value of 8 times the number minus 17
      N_02:
      - the multiplier of the number
      - the value of the coefficient of the number
      - a number in the phrase " 8 "
      X_00:
      - the value of the number
      - the number of the number
      - the value of the number
  info:
    answers:
    - n: '2.62500000000000'
    item_id: 604cc853117d71c492a62caa
    numbers:
      N_00: '17'
      N_01: '4'
      N_02: '8'
      N_03: '1'
    split: null
    variables:
    - n
  text:
    numbers:
      shape:
      - 23
      target: __  0 __  1 __ __  2 __  3 __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 17 is 4 less than 8 times a number . find the number .
    snippets:
      shape:
      - 4
      - 15
      target:
      - 17 is 4 less than 8 times a
      - 17 is 4 less than 8 times a number .
      - 17 is 4 less than 8 times a number . find the number
      - 17 is 4 less than 8 times a number . find the number .
    tokens:
      shape:
      - 23
      target: '[CLS] 17 is 4 less than 8 times a number . find the number . [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_02, R_00) R_02: *(N_00, R_00) R_03: -(R_01,
      R_02) R_04: =(N_03, R_03) R_05: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the value of the multiplier to the number in the first equation
      N_02:
      - the number multiplied by the number in the first equation
      N_03:
      - the value of four times the number minus seven
      X_00:
      - the value of the number
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - a number in the phrase " four times a number "
      - a number in the phrase " four times a number "
      - a number in the phrase " four "
      N_02:
      - a number in the phrase " seven times the number is 9 "
      - a number in the phrase " seven times the number "
      - a number in the phrase " seven "
      N_03:
      - the value of 7 times the number minus 4 times the number
      - the value of seven times a number minus four times the number
      - the value of seven times the number minus four times the number
      X_00:
      - the number to find
      - the number we want to find
      - the value of the number
  info:
    answers:
    - n: '3'
    item_id: 604cc853117d71c492a63096
    numbers:
      N_00: '4'
      N_01: '1'
      N_02: '7'
      N_03: '9'
    split: null
    variables:
    - n
  text:
    numbers:
      shape:
      - 23
      target: __ __ __ __  0 __  1 __ __  2 __ __ __ __  3 __ __ __ __ __ __ __ __
    raw: the difference of four times a number and seven times the number is 9 .
    snippets:
      shape:
      - 4
      - 15
      target:
      - the difference of four times a number and seven times the
      - the difference of four times a number and seven times the number is
      - difference of four times a number and seven times the number is 9 .
      - number and seven times the number is 9 .
    tokens:
      shape:
      - 23
      target: '[CLS] the difference of four times a number and seven times the number
        is 9 . [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_01, N_02) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the weight of one pencil
      N_02:
      - the number of pencils
      X_00:
      - the total weight of one pencil
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of grams for one pencil
      - the weight of one pencil
      - the weight of a pencil in grams
      N_02:
      - the number of pencils
      - the number of pencils
      - the number of pencils
      X_00:
      - the weight of 5 pencils
      - the number of 5 pencils
      - the weight of 5 pencils
  info:
    answers:
    - w: '141.500000000000'
    item_id: 60f9186c90be09b72239ed2a
    numbers:
      N_00: '1'
      N_01: '28.3000000000000'
      N_02: '5'
    split: null
    variables:
    - w
  text:
    numbers:
      shape:
      - 23
      target: __  0 __ __  1  1  1 __ __ __ __ __  2 __ __ __ __ __ __ __ __ __ __
    raw: 'one pencil weighs 28 . 3 grams . how much do 5 pencil ##s weigh ?'
    snippets:
      shape:
      - 3
      - 15
      target:
      - one pencil weighs 28 . 3 grams .
      - one pencil weighs 28 . 3 grams . how much do
      - '. 3 grams . how much do 5 pencil ##s weigh ?'
    tokens:
      shape:
      - 23
      target: '[CLS] one pencil weighs 28 . 3 grams . how much do 5 pencil ##s weigh
        ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of tim's books
      N_01:
      - the number of mike's books
      X_00:
      - the total number of books
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of books owned by tim
      - the number of tim's books
      - the number of books tim has
      N_01:
      - the number of books owned by mike
      - the number of mike's books
      - the number of books mike has
      X_00:
      - the total number of books
      - the number of all books
      - the number of books they have
  info:
    answers:
    - b: '42'
    item_id: 60f9186c90be09b72239ebb7
    numbers:
      N_00: '22'
      N_01: '20'
    split: null
    variables:
    - b
  text:
    numbers:
      shape:
      - 23
      target: __ __ __  0 __ __ __ __  1 __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: tim has 22 books . mike has 20 books . how many books do they have together
      ?
    snippets:
      shape:
      - 2
      - 15
      target:
      - tim has 22 books . mike has 20 books .
      - tim has 22 books . mike has 20 books . how many books do they
    tokens:
      shape:
      - 23
      target: '[CLS] tim has 22 books . mike has 20 books . how many books do they
        have together ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(R_00, R_01) R_03: =(N_01,
      R_02) R_04: -(R_00, R_01) R_05: =(N_02, R_04) R_06: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the sum of 2 numbers
      N_02:
      - the value of the first number minus the second number
      X_00:
      - the first number
      X_01:
      - the second number
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the sum of the 2 numbers
      - the sum of the two numbers
      - the sum of 2 numbers
      N_02:
      - the value of the first number minus the second number
      - the value of the larger number minus the smaller number
      - the value of one number minus the other number
      X_00:
      - the first number
      - the value of the larger number
      - the value of one number
      X_01:
      - the second number
      - the value of the smaller number
      - the value of the other number
  info:
    answers:
    - n1: '62'
      n2: '45'
    item_id: 604cc853117d71c492a62d7d
    numbers:
      N_00: '2'
      N_01: '107'
      N_02: '17'
    split: null
    variables:
    - n1
    - n2
  text:
    numbers:
      shape:
      - 23
      target: __ __ __ __ __  0 __ __  1 __ __ __ __  2 __ __ __ __ __ __ __ __ __
    raw: if the sum of 2 numbers is 107 and the difference is 17 , find the number
      .
    snippets:
      shape:
      - 3
      - 15
      target:
      - if the sum of 2 numbers is 107 and the difference is
      - if the sum of 2 numbers is 107 and the difference is 17 , find
      - numbers is 107 and the difference is 17 , find the number .
    tokens:
      shape:
      - 23
      target: '[CLS] if the sum of 2 numbers is 107 and the difference is 17 , find
        the number . [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of keith's books
      N_01:
      - the number of jason's books
      X_00:
      - the total number of books
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of books owned by keith
      - the number of keith's books
      - the number of books that keith has
      N_01:
      - the number of books owned by jason
      - the number of jason's books
      - the number of books that jason has
      X_00:
      - the total number of books
      - the number of all books
      - the number of books that they have
  info:
    answers:
    - b: '41'
    item_id: 60f9186c90be09b72239ed16
    numbers:
      N_00: '20'
      N_01: '21'
    split: null
    variables:
    - b
  text:
    numbers:
      shape:
      - 23
      target: __ __ __  0 __ __ __ __  1 __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: keith has 20 books . jason has 21 books . how many books do they have together
      ?
    snippets:
      shape:
      - 2
      - 15
      target:
      - keith has 20 books . jason has 21 books .
      - keith has 20 books . jason has 21 books . how many books do they
    tokens:
      shape:
      - 23
      target: '[CLS] keith has 20 books . jason has 21 books . how many books do they
        have together ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(R_00, R_01) R_03: =(N_01,
      R_02) R_04: -(R_00, R_01) R_05: =(N_02, R_04) R_06: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the sum of the two numbers
      N_02:
      - the value of one number minus the other number
      X_00:
      - the value of one number
      X_01:
      - the value of the other number
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the sum of the first number and the second number
      - the sum of the two numbers
      - the sum of the two numbers
      N_02:
      - the value of the first number minus the second number
      - the value of the larger number minus the smaller number
      - the value of the larger number minus the smaller number
      X_00:
      - the value of the first number
      - the value of the larger number
      - the value of the larger number
      X_01:
      - the value of the second number
      - the value of the smaller number
      - the value of the smaller number
  info:
    answers:
    - n1: '20'
      n2: '13'
    item_id: 604cc853117d71c492a62e77
    numbers:
      N_00: '2'
      N_01: '33'
      N_02: '7'
      N_03: '2'
    split: null
    variables:
    - n1
    - n2
  text:
    numbers:
      shape:
      - 23
      target: __ __ __ __  0 __ __  1 __ __ __ __  2 __ __ __ __  3 __ __ __ __ __
    raw: the sum of two numbers is 33 . their difference is 7 . what are the two numbers
      ?
    snippets:
      shape:
      - 4
      - 15
      target:
      - the sum of two numbers is 33 . their difference is
      - the sum of two numbers is 33 . their difference is 7 . what
      - numbers is 33 . their difference is 7 . what are the two numbers ?
      - difference is 7 . what are the two numbers ?
    tokens:
      shape:
      - 23
      target: '[CLS] the sum of two numbers is 33 . their difference is 7 . what are
        the two numbers ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of geese
      N_01:
      - the number of ducks in the marsh
      X_00:
      - the number of birds in the marsh
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of geese
      - the number of geese in the marsh
      - the number of geese
      N_01:
      - the number of ducks
      - the number of ducks in the marsh
      - the number of ducks
      X_00:
      - the total number of birds
      - the number of birds in the marsh
      - the total number of geese and ducks
  info:
    answers:
    - b: '95'
    item_id: 60f9186c90be09b72239ee64
    numbers:
      N_00: '58'
      N_01: '37'
    split: null
    variables:
    - b
  text:
    numbers:
      shape:
      - 23
      target: __ __ __  0 __ __  1 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: there were 58 geese and 37 ducks in the marsh . how many birds were there
      in all ?
    snippets:
      shape:
      - 2
      - 15
      target:
      - there were 58 geese and 37 ducks in the marsh
      - there were 58 geese and 37 ducks in the marsh . how many
    tokens:
      shape:
      - 23
      target: '[CLS] there were 58 geese and 37 ducks in the marsh . how many birds
        were there in all ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of bugs mrs. hilt eat
      N_01:
      - the number of flowers eaten
      X_00:
      - the total number of flowers
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of bugs
      - the number of bugs
      - the number of bugs
      N_01:
      - the number of flowers each bug ate
      - the number of flowers a bug eats
      - the number of flowers each bug ate
      X_00:
      - the number of flowers bugs ate totally
      - the whole number of flowers eaten by bugs
      - the number of flowers bugs ate
  info:
    answers:
    - f: '6'
    item_id: 60f9186c90be09b72239edc9
    numbers:
      N_00: '3'
      N_01: '2'
    split: null
    variables:
    - f
  text:
    numbers:
      shape:
      - 23
      target: __ __ __ __ __  0 __ __  1 __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: mrs . hilt saw 3 bugs eat 2 flowers each . how many flowers total did the
      bugs eat ?
    snippets:
      shape:
      - 2
      - 15
      target:
      - mrs . hilt saw 3 bugs eat 2 flowers each . how
      - mrs . hilt saw 3 bugs eat 2 flowers each . how many flowers total
    tokens:
      shape:
      - 23
      target: '[CLS] mrs . hilt saw 3 bugs eat 2 flowers each . how many flowers total
        did the bugs eat ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(R_00, R_01) R_03: =(N_01,
      R_02) R_04: -(R_00, R_01) R_05: =(N_02, R_04) R_06: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the sum of the two numbers
      N_02:
      - the value of the one number minus the other number
      X_00:
      - the value of the one number
      X_01:
      - the value of the other number
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the sum of the two numbers
      - the sum of the first and second numbers
      - the sum of the two numbers
      N_02:
      - the value of the first number minus the second number
      - the value of the first number minus the second number
      - the value of one number minus the other number
      X_00:
      - the first number
      - the first number
      - the value of one number
      X_01:
      - the second number
      - the second number
      - the value of the other number
  info:
    answers:
    - n1: '27'
      n2: '12'
    item_id: 604cc853117d71c492a62e84
    numbers:
      N_00: '2'
      N_01: '39'
      N_02: '15'
      N_03: '2'
    split: null
    variables:
    - n1
    - n2
  text:
    numbers:
      shape:
      - 23
      target: __ __ __ __  0 __ __  1 __ __ __ __ __  2 __ __ __ __  3 __ __ __ __
    raw: the sum of two numbers is 39 , and the difference is 15 . what are the two
      numbers ?
    snippets:
      shape:
      - 4
      - 15
      target:
      - the sum of two numbers is 39 , and the difference
      - the sum of two numbers is 39 , and the difference is 15 .
      - is 39 , and the difference is 15 . what are the two numbers ?
      - difference is 15 . what are the two numbers ?
    tokens:
      shape:
      - 23
      target: '[CLS] the sum of two numbers is 39 , and the difference is 15 . what
        are the two numbers ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_00, R_00) R_02: -(R_01, N_02) R_03: *(N_03,
      R_00) R_04: =(R_02, R_03) R_05: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - a number in the phrase " 3 "
      N_02:
      - the value of 3 times the number minus 1 times the number
      N_03:
      - a number in the phrase " twice a number "
      X_00:
      - the value of the number
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the multiplier for the number
      - a number in the phrase " 3 times a number "
      - a number in the phrase " 3 "
      N_02:
      - the value of 3 times the number minus 2 times the number
      - the value of 3 times a number minus twice the number
      - the value of three times the number minus two times the number
      N_03:
      - the another multiplier for the number
      - a number in the phrase " twice a number "
      - a number in the phrase " twice "
      X_00:
      - the value of the number
      - the number we want to find
      - the value of the number
  info:
    answers:
    - n: '1'
    item_id: 604cc852117d71c492a62bbf
    numbers:
      N_00: '3'
      N_01: '1'
      N_02: '1'
      N_03: '2'
      N_04: '1'
    split: null
    variables:
    - n
  text:
    numbers:
      shape:
      - 23
      target: __ __ __ __  0 __  1 __ __  2 __ __ __ __  3  4 __ __ __ __ __ __ __
    raw: the difference between 3 times a number and 1 is the same as twice a number
      . find the number .
    snippets:
      shape:
      - 5
      - 15
      target:
      - the difference between 3 times a number and 1 is the
      - the difference between 3 times a number and 1 is the same as
      - difference between 3 times a number and 1 is the same as twice a number
      - number and 1 is the same as twice a number . find the number .
      - and 1 is the same as twice a number . find the number .
    tokens:
      shape:
      - 23
      target: '[CLS] the difference between 3 times a number and 1 is the same as
        twice a number . find the number . [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_00, R_00) R_02: =(N_01, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of books for each shelf
      N_01:
      - the number of books jason's shelves
      X_00:
      - the number of shelves needed
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of books for each shelf
      - the number of books that one shelf can be held
      - the number of books one shelf holds
      N_01:
      - the number of jason's books
      - the number of books
      - the total number of books
      X_00:
      - the ratio of jason's books to 45
      - the number of shelves needed to hold all books
      - the number of shelves needed
  info:
    answers:
    - s: '7'
    item_id: 60f9186c90be09b72239e983
    numbers:
      N_00: '45'
      N_01: '315'
    split: null
    variables:
    - s
  text:
    numbers:
      shape:
      - 23
      target: __ __ __ __ __ __  0 __ __ __ __ __ __ __ __ __ __ __ __  1 __ __ __
    raw: jason ' s shelves hold 45 books each . how many shelves will jason need if
      jason has 315 books ?
    snippets:
      shape:
      - 2
      - 15
      target:
      - jason ' s shelves hold 45 books each . how many shelves will
      - shelves will jason need if jason has 315 books ?
    tokens:
      shape:
      - 23
      target: '[CLS] jason '' s shelves hold 45 books each . how many shelves will
        jason need if jason has 315 books ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: /(R_00, R_01) R_03: /(N_01,
      N_02) R_04: =(R_02, R_03) R_05: +(R_00, R_01) R_06: *(N_03, R_05) R_07: =(N_04,
      R_06) R_08: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the numerator of the ratio of 3 - fifths to 7
      N_02:
      - the denominator of the ratio of 3 - fifths to 7
      N_03:
      - the denominator of the ratio of 3 - fifths to 7
      N_04:
      - the sum of the two numbers
      X_00:
      - the first number
      X_01:
      - the second number
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the numerator of the ratio of 3 to 7
      - the numerator of the ratio of one number to another number
      - the numerator of the ratio of the first number to the second number
      N_02:
      - the denominator of the ratio of 3 to 7
      - the denominator of the ratio of one number to another number
      - the denominator of the ratio of the first number to the second number
      N_03:
      - a number in the phrase " two - fifths of their sum "
      - a number in the phrase " two - fifths of their sum "
      - a number in the phrase " two - fifths "
      N_04:
      - two - fifths of the two numbers'sum
      - two - fifths of the sum of two numbers
      - two - fifths of the sum of the two numbers
      X_00:
      - the first number
      - the value of one number
      - the first number
      X_01:
      - the second number
      - the value of another number
      - the second number
  info:
    answers:
    - n1: '24'
      n2: '56'
    item_id: 604cc853117d71c492a63045
    numbers:
      N_00: '2'
      N_01: '3'
      N_02: '7'
      N_03: '0.400000000000000'
      N_04: '32'
    split: null
    variables:
    - n1
    - n2
  text:
    numbers:
      shape:
      - 23
      target: __  0 __ __ __ __ __ __  1 __  2 __  3  3  3  3 __ __ __ __  4 __ __
    raw: 'two numbers are in the ratio of 3 to 7 . two - fifth ##s of their sum is
      32 .'
    snippets:
      shape:
      - 5
      - 15
      target:
      - two numbers are in the ratio of 3
      - 'two numbers are in the ratio of 3 to 7 . two - fifth ##s'
      - 'are in the ratio of 3 to 7 . two - fifth ##s of their'
      - 'the ratio of 3 to 7 . two - fifth ##s of their sum is'
      - '- fifth ##s of their sum is 32 .'
    tokens:
      shape:
      - 23
      target: '[CLS] two numbers are in the ratio of 3 to 7 . two - fifth ##s of their
        sum is 32 . [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: -(R_00, R_01) R_03: =(N_01,
      R_02) R_04: *(N_03, R_01) R_05: -(R_04, R_00) R_06: =(N_02, R_05) R_07: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the value of the larger number minus the smaller number
      N_02:
      - the value of 6 times the smaller number minus the larger number
      N_03:
      - a number in the phrase " 6 "
      X_00:
      - the value of the larger number
      X_01:
      - the value of the smaller number
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the value of the larger number minus the smaller number
      - the value of the larger number minus the smaller number
      - the value of the larger number minus the smaller number
      N_02:
      - the value of 6 times the smaller number minus the larger number
      - the value of 6 times the smaller number minus the larger number
      - the value of 6 times the smaller number minus the larger number
      N_03:
      - a number in the phrase " 6 times the smaller "
      - a number in the phrase " 6 times the smaller number "
      - a number in the phrase " 6 times the smaller number "
      X_00:
      - the larger number
      - the larger number
      - the value of the larger number
      X_01:
      - the smaller number
      - the smaller number
      - the value of the smaller number
  info:
    answers:
    - l: '81'
      s: '14'
    item_id: 604cc853117d71c492a62f7c
    numbers:
      N_00: '2'
      N_01: '67'
      N_02: '3'
      N_03: '6'
    split: null
    variables:
    - l
    - s
  text:
    numbers:
      shape:
      - 23
      target: __ __ __ __  0 __ __  1 __ __ __ __ __  2 __ __  3 __ __ __ __ __ __
    raw: the difference between two numbers is 67 . the larger number is three less
      than 6 times the smaller number .
    snippets:
      shape:
      - 4
      - 15
      target:
      - the difference between two numbers is 67 . the larger number
      - the difference between two numbers is 67 . the larger number is three less
      - is 67 . the larger number is three less than 6 times the smaller number
      - the larger number is three less than 6 times the smaller number .
    tokens:
      shape:
      - 23
      target: '[CLS] the difference between two numbers is 67 . the larger number
        is three less than 6 times the smaller number . [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of girls on the playground
      N_01:
      - the number of boys on the playground
      X_00:
      - the number of children on the playground
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of girls
      - number of girls on the playground
      - the number of girls on the playground
      N_01:
      - the number of boys
      - number of boys on the playground
      - the number of boys on the playground
      X_00:
      - the number of all children
      - the total number of children on the playground
      - the total number of children there were
  info:
    answers:
    - c: '63'
    item_id: 60f9186c90be09b72239ecfa
    numbers:
      N_00: '28'
      N_01: '35'
    split: null
    variables:
    - c
  text:
    numbers:
      shape:
      - 23
      target: __ __ __  0 __ __  1 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: there were 28 girls and 35 boys on the playground at recess . how many children
      were there in all ?
    snippets:
      shape:
      - 2
      - 15
      target:
      - there were 28 girls and 35 boys on the playground
      - there were 28 girls and 35 boys on the playground at recess .
    tokens:
      shape:
      - 23
      target: '[CLS] there were 28 girls and 35 boys on the playground at recess .
        how many children were there in all ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_00, R_00) R_02: *(N_03, R_00) R_03: -(R_01,
      R_02) R_04: =(N_02, R_03) R_05: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the multiple to modify a number
      N_02:
      - the value of 0. 5 of a number minus 0. 25 of the number
      N_03:
      - the value to multiply the number to
      X_00:
      - the number to find
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - a number in the phrase " 0. 5 of a number "
      - the coefficient of a number
      - a number in the phrase " 0. 5 "
      N_02:
      - the value of 0. 5 of a number minus 0. 25 of the number
      - the value of 0. 5 of a number minus 0. 25 of the number
      - the value of 0. 5 of the number minus 0. 25 of the number
      N_03:
      - a number in the phrase " 0. 25 of the number "
      - the coefficient of the number
      - a number in the phrase " 0. 25 "
      X_00:
      - the unknown number
      - the number of the target number
      - the value of the number
  info:
    answers:
    - n: '8'
    item_id: 604cc852117d71c492a62bb7
    numbers:
      N_00: '0.500000000000000'
      N_01: '1'
      N_02: '2'
      N_03: '0.250000000000000'
    split: null
    variables:
    - n
  text:
    numbers:
      shape:
      - 26
      target: __  0  0  0 __  1 __ __  2 __ __  3  3  3 __ __ __ __ __ __ __ __ __
        __ __ __
    raw: 0 . 5 of a number is 2 more than 0 . 25 of the number . find the number .
    snippets:
      shape:
      - 4
      - 15
      target:
      - 0 . 5 of a number is 2
      - 0 . 5 of a number is 2 more than 0 .
      - 0 . 5 of a number is 2 more than 0 . 25 of the
      - of a number is 2 more than 0 . 25 of the number . find
    tokens:
      shape:
      - 26
      target: '[CLS] 0 . 5 of a number is 2 more than 0 . 25 of the number . find
        the number . [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of trees mark has
      N_01:
      - the number of trees he plants more
      X_00:
      - the number of trees he has
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the initial number of trees
      - the number of trees
      - the number of trees that he has
      N_01:
      - the number of trees planted more
      - the number of trees will be newly planted
      - the number of trees that he plants
      X_00:
      - the number of trees after planting more
      - the expected whole number of trees
      - the number of trees that he will have
  info:
    answers:
    - t: '25'
    item_id: 60f9186c90be09b72239eea3
    numbers:
      N_00: '13'
      N_01: '12'
    split: null
    variables:
    - t
  text:
    numbers:
      shape:
      - 26
      target: __ __ __  0 __ __ __ __ __ __ __ __  1 __ __ __ __ __ __ __ __ __ __
        __ __ __
    raw: mark has 13 trees in his backyard . if he plants 12 more , how many trees
      will he have ?
    snippets:
      shape:
      - 2
      - 15
      target:
      - mark has 13 trees in his backyard . if he
      - in his backyard . if he plants 12 more , how many trees will he
    tokens:
      shape:
      - 26
      target: '[CLS] mark has 13 trees in his backyard . if he plants 12 more , how
        many trees will he have ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: -(R_00, R_01) R_03: =(N_00,
      R_02) R_04: +(R_00, R_01) R_05: =(N_01, R_04) R_06: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the value of jim's age minus janice's age
      N_01:
      - the sum of their ages
      X_00:
      - the age of jim
      X_01:
      - the age of janice
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the value of jim's age minus janice's age
      - the value of jim's age minus janice's age
      - the value of the age of jim minus the age of janice
      N_01:
      - the sum of their ages
      - the sum of jim's and janice's age
      - the sum of their ages
      X_00:
      - jim's age now
      - the age of jim
      - the age of jim
      X_01:
      - janice's age now
      - the age of janice
      - the age of janice
  info:
    answers:
    - j1: '17'
      j2: '24'
    item_id: 604cc853117d71c492a63013
    numbers:
      N_00: '7'
      N_01: '41'
    split: null
    variables:
    - j2
    - j1
  text:
    numbers:
      shape:
      - 26
      target: __ __ __  0 __ __ __ __ __ __ __ __ __ __ __  1 __ __ __ __ __ __ __
        __ __ __
    raw: jim is seven years older than janice . the sum of their ages is 41 . how
      old is each person ?
    snippets:
      shape:
      - 2
      - 15
      target:
      - jim is seven years older than janice . the sum
      - . the sum of their ages is 41 . how old is each person ?
    tokens:
      shape:
      - 26
      target: '[CLS] jim is seven years older than janice . the sum of their ages
        is 41 . how old is each person ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(3, N_00) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of pencils each person has
      X_00:
      - the total number of pencils
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of pencils per person
      - the number of pencils each person of jessica, sandy, and jason has
      - the number of pencils each to have jessica, sandy, and jason
      X_00:
      - the total number of pencils
      - the number of pencils they have in all
      - the total number of pencils
  info:
    answers:
    - p: '24'
    item_id: 60f9186c90be09b72239f21b
    numbers:
      N_00: '8'
    split: null
    variables:
    - p
  text:
    numbers:
      shape:
      - 26
      target: __ __ __ __ __ __ __ __ __  0 __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __
    raw: 'jessica , sandy , and jason each have 8 pencil ##s . how many pencil ##s
      do they have in all ?'
    snippets:
      shape:
      - 1
      - 15
      target:
      - ', sandy , and jason each have 8 pencil ##s . how many pencil ##s'
    tokens:
      shape:
      - 26
      target: '[CLS] jessica , sandy , and jason each have 8 pencil ##s . how many
        pencil ##s do they have in all ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of bottle caps one child has
      N_01:
      - the number of children
      X_00:
      - the total number of bottle caps
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of bottle caps each child has
      - the number of bottle caps each child has.
      - the number of caps each child has
      N_01:
      - the number of children
      - the number of children
      - the number of children
      X_00:
      - the whole number of bottle caps children have
      - the total number of bottle caps
      - the total number of caps
  info:
    answers:
    - p: '45'
    item_id: 60f9186c90be09b72239eb97
    numbers:
      N_00: '5'
      N_01: '9'
    split: null
    variables:
    - p
  text:
    numbers:
      shape:
      - 26
      target: __ __ __ __  0 __ __ __ __ __ __  1 __ __ __ __ __ __ __ __ __ __ __
        __ __ __
    raw: each child has 5 bottle caps . if there are 9 children , how many bottle
      caps are there in total ?
    snippets:
      shape:
      - 2
      - 15
      target:
      - each child has 5 bottle caps . if there are 9
      - 5 bottle caps . if there are 9 children , how many bottle caps are
    tokens:
      shape:
      - 26
      target: '[CLS] each child has 5 bottle caps . if there are 9 children , how
        many bottle caps are there in total ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: -(R_00, R_01) R_03: =(N_01,
      R_02) R_04: *(N_07, R_01) R_05: *(N_04, R_00) R_06: -(R_04, R_05) R_07: =(N_06,
      R_06) R_08: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the value of the first number minus the second number
      N_04:
      - a number in the phrase " twice the first number "
      N_06:
      - the value of three times the second number minus twice the first number
      N_07:
      - a number in the phrase " three times the second "
      X_00:
      - the first number
      X_01:
      - the second number
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the value of the first number minus the second number
      - the value of the first number minus the second number
      - the value of one number minus a second number
      N_04:
      - a number in the phrase " twice the first "
      - a number in the phrase " twice the first "
      - the coefficient of the first number
      N_06:
      - the value of 3 times the second number minus 2 times the first number
      - the value of three times the second minus twice the first
      - the value of three times the second minus twice the first
      N_07:
      - a number in the phrase " three times the second "
      - a number in the phrase " three times the second "
      - the coefficient of the second number
      X_00:
      - the first number
      - the value of the first number
      - the value of one number
      X_01:
      - the second number
      - the value of the second number
      - the value of a second number
  info:
    answers:
    - n1: '10'
      n2: '8'
    item_id: 604cc853117d71c492a62daf
    numbers:
      N_00: '1'
      N_01: '2'
      N_02: '1'
      N_03: '2'
      N_04: '2'
      N_05: '1'
      N_06: '4'
      N_07: '3'
      N_08: '2'
    split: null
    variables:
    - n1
    - n2
  text:
    numbers:
      shape:
      - 26
      target: __  0 __ __  1 __ __  2  3 __ __  4 __  5 __  6 __ __  7 __ __  8  8
        __ __ __
    raw: one number is two more than a second number . twice the first is four less
      than three times the second .
    snippets:
      shape:
      - 9
      - 15
      target:
      - one number is two more than a second
      - one number is two more than a second number . twice
      - one number is two more than a second number . twice the first is
      - one number is two more than a second number . twice the first is four
      - two more than a second number . twice the first is four less than three
      - than a second number . twice the first is four less than three times the
      - second number . twice the first is four less than three times the second .
      - twice the first is four less than three times the second .
      - is four less than three times the second .
    tokens:
      shape:
      - 26
      target: '[CLS] one number is two more than a second number . twice the first
        is four less than three times the second . [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: -(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the initial number of cards
      N_01:
      - the number of cards eaten by a hippopotamus
      X_00:
      - the number of remaining cards
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the initial number of cards
      - the number of cards jennifer has
      - the number of jennifer's cards
      N_01:
      - the number of cards eaten by a hippopotamus
      - the number of cards eaten by a hippopotamus
      - the number of cards eaten by a hippopotamus
      X_00:
      - the number of cards left
      - the number of cards jennifer have
      - the number of cards left to jennifer
  info:
    answers:
    - c: '11'
    item_id: 60f9186c90be09b72239edb3
    numbers:
      N_00: '72'
      N_01: '61'
      N_02: '1'
    split: null
    variables:
    - c
  text:
    numbers:
      shape:
      - 26
      target: __ __ __  0 __ __  1 __ __ __  2 __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __
    raw: 'jennifer has 72 cards . 61 are eaten by a hip ##pop ##ota ##mus . how many
      cards will jennifer have ?'
    snippets:
      shape:
      - 3
      - 15
      target:
      - jennifer has 72 cards . 61 are eaten by a
      - 'jennifer has 72 cards . 61 are eaten by a hip ##pop ##ota'
      - '72 cards . 61 are eaten by a hip ##pop ##ota ##mus . how many'
    tokens:
      shape:
      - 26
      target: '[CLS] jennifer has 72 cards . 61 are eaten by a hip ##pop ##ota ##mus
        . how many cards will jennifer have ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: -(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the initial number of blocks
      N_01:
      - the number of blocks eaten by a hippopotamus
      X_00:
      - the number of blocks roger has
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of blocks roger has
      - the number of blocks that roger has
      - the number of roger's blocks
      N_01:
      - the number of blocks eaten by a hippopotamus
      - the number of blocks that are eaten
      - the number of blocks eaten by a hippopotamus
      X_00:
      - the number of blocks left
      - the number of blocks that roger will have
      - the number of blocks left to roger
  info:
    answers:
    - b: '90'
    item_id: 60f9186c90be09b72239f1d9
    numbers:
      N_00: '92'
      N_01: '2'
      N_02: '1'
    split: null
    variables:
    - b
  text:
    numbers:
      shape:
      - 26
      target: __ __ __  0 __ __  1 __ __ __  2 __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __
    raw: 'roger has 92 blocks . 2 are eaten by a hip ##pop ##ota ##mus . how many
      blocks will roger have ?'
    snippets:
      shape:
      - 3
      - 15
      target:
      - roger has 92 blocks . 2 are eaten by a
      - 'roger has 92 blocks . 2 are eaten by a hip ##pop ##ota'
      - '92 blocks . 2 are eaten by a hip ##pop ##ota ##mus . how many'
    tokens:
      shape:
      - 26
      target: '[CLS] roger has 92 blocks . 2 are eaten by a hip ##pop ##ota ##mus
        . how many blocks will roger have ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_02, R_00) R_02: +(N_01, R_01) R_03: -(R_02,
      R_00) R_04: =(N_03, R_03) R_05: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the value of the left side result minus the right side result
      N_02:
      - the multiplier of a number on the right side
      N_03:
      - the value of twice the number minus a number
      X_00:
      - the value of the number
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - a number in the phrase " 5 more than "
      - a number in the phrase " 5 more than "
      - the value of the added number to twice the number
      N_02:
      - a number in the phrase " twice the number "
      - a number in the phrase " twice the number "
      - the coefficient of the number
      N_03:
      - the value of the sum of 5 and twice the number minus the number
      - the value of 5 more than twice the number minus the number
      - the value of 5 more than twice the number minus the number
      X_00:
      - the unknown number
      - the number we want to find
      - the value of the number
  info:
    answers:
    - n: '4'
    item_id: 60f9186c90be09b72239eaef
    numbers:
      N_00: '1'
      N_01: '5'
      N_02: '2'
      N_03: '9'
    split: null
    variables:
    - n
  text:
    numbers:
      shape:
      - 26
      target: __ __  0 __ __ __ __ __  1 __ __  2 __ __ __ __ __ __  3 __ __ __ __
        __ __ __
    raw: 'if a number is sub ##tracted from 5 more than twice the number , the result
      is 9 . find the number .'
    snippets:
      shape:
      - 4
      - 15
      target:
      - 'if a number is sub ##tracted from 5 more'
      - 'if a number is sub ##tracted from 5 more than twice the number , the'
      - 'is sub ##tracted from 5 more than twice the number , the result is 9'
      - twice the number , the result is 9 . find the number .
    tokens:
      shape:
      - 26
      target: '[CLS] if a number is sub ##tracted from 5 more than twice the number
        , the result is 9 . find the number . [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: -(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the weight of heather
      N_01:
      - the weight of heather
      N_02:
      - the weight of elizabeth
      X_00:
      - the value of heather's weight minus elizabeth's weight
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the weight of heather
      - the weight of heather
      - the value of heather's weight
      N_01:
      - the weight of emily
      - the weight of emily
      - the value of emily's weight
      X_00:
      - the value of the weight of heather minus the weight of emily
      - the value of the weight of heather minus the weight of emily
      - the value of heather's weight minus emily's weight
  info:
    answers:
    - d: '78'
    item_id: 60f9186c90be09b72239e99f
    numbers:
      N_00: '87'
      N_01: '9'
      N_02: '8'
    split: null
    variables:
    - d
  text:
    numbers:
      shape:
      - 26
      target: __ __ __  0 __ __ __ __  1 __ __ __ __  2 __ __ __ __ __ __ __ __ __
        __ __ __
    raw: heather weighs 87 pounds . emily weighs 9 pounds . elizabeth weighs 8 pounds
      . how much heavier is heather than emily ?
    snippets:
      shape:
      - 3
      - 15
      target:
      - heather weighs 87 pounds . emily weighs 9 pounds .
      - heather weighs 87 pounds . emily weighs 9 pounds . elizabeth weighs 8 pounds
        .
      - emily weighs 9 pounds . elizabeth weighs 8 pounds . how much heavier is heather
    tokens:
      shape:
      - 26
      target: '[CLS] heather weighs 87 pounds . emily weighs 9 pounds . elizabeth
        weighs 8 pounds . how much heavier is heather than emily ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: -(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of pumpkins sara grew
      N_01:
      - the number of pumpkins eaten
      X_00:
      - the number of pumpkins left
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of pumpkins at first
      - the number of pumpkins
      - the total number of pumpkins
      N_01:
      - the number of pumpkins ate
      - the number of pumpkins that the rabbits ate
      - the number of pumpkins eaten by rabbits
      X_00:
      - the number of remaining pumpkins
      - the rest amount of the pumpkins after the rabbits'ambush
      - the number of pumpkins left
  info:
    answers:
    - r: '20'
    item_id: 60f9186c90be09b72239e9ab
    numbers:
      N_00: '43'
      N_01: '23'
    split: null
    variables:
    - r
  text:
    numbers:
      shape:
      - 26
      target: __ __ __  0 __ __ __ __ __ __ __  1 __ __ __ __ __ __ __ __ __ __ __
        __ __ __
    raw: 'sara grew 43 pumpkin ##s , but the rabbits ate 23 pumpkin ##s . how many
      pumpkin ##s does sara have left ?'
    snippets:
      shape:
      - 2
      - 15
      target:
      - 'sara grew 43 pumpkin ##s , but the rabbits ate'
      - 'pumpkin ##s , but the rabbits ate 23 pumpkin ##s . how many pumpkin ##s'
    tokens:
      shape:
      - 26
      target: '[CLS] sara grew 43 pumpkin ##s , but the rabbits ate 23 pumpkin ##s
        . how many pumpkin ##s does sara have left ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of skittles that cheryl starts with
      N_01:
      - the number of skittles given to cheryl
      X_00:
      - the number of skittles now
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of skittles
      - number of skittles cheryl starts with
      - the number of cheryl's skittles
      N_01:
      - the number of skittles added
      - number of skittles kathryn gave
      - the number of skittles given more to cheryl by kathryn
      X_00:
      - the number of skittles in all
      - the total number of skittles cheryl has
      - the number of skittles held by cheryl
  info:
    answers:
    - s: '97'
    item_id: 60f9186c90be09b72239eedc
    numbers:
      N_00: '8'
      N_01: '89'
    split: null
    variables:
    - s
  text:
    numbers:
      shape:
      - 26
      target: __ __ __ __  0 __ __ __ __ __ __ __  1 __ __ __ __ __ __ __ __ __ __
        __ __ __
    raw: 'cheryl starts with 8 ski ##ttle ##s . kathryn gives cheryl 89 more . how
      many ski ##ttle ##s does cheryl end with ?'
    snippets:
      shape:
      - 2
      - 15
      target:
      - 'cheryl starts with 8 ski ##ttle ##s . kathryn gives cheryl'
      - 'ski ##ttle ##s . kathryn gives cheryl 89 more . how many ski ##ttle ##s'
    tokens:
      shape:
      - 26
      target: '[CLS] cheryl starts with 8 ski ##ttle ##s . kathryn gives cheryl 89
        more . how many ski ##ttle ##s does cheryl end with ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(R_00, R_01) R_03: =(N_01,
      R_02) R_04: *(N_02, R_01) R_05: +(N_03, R_04) R_06: =(R_00, R_05) R_07: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the sum of the two numbers
      N_02:
      - the ratio of the greater number to the smaller number
      X_00:
      - the greater number
      X_01:
      - the smaller number
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the sum of the two numbers
      - the sum of the two numbers
      - the sum of the two numbers
      N_02:
      - the multiplier for the smaller number
      - the coefficient of the smaller number
      - a number multiplied by the smaller number
      N_03:
      - the value of the greater number minus 17 times the smaller number
      - the value to be added to seventeen times the smaller number that is the same
        value about greater number
      - the value of the greater number minus 17 times the smaller number
      X_00:
      - the value of the greater number
      - the value of the greater number
      - the value of the greater number
      X_01:
      - the value of the smaller number
      - the value of the smaller number
      - the value of the smaller number
  info:
    answers:
    - g: '52'
      s: '3'
    item_id: 604cc853117d71c492a62f03
    numbers:
      N_00: '2'
      N_01: '55'
      N_02: '17'
      N_03: '1'
    split: null
    variables:
    - g
    - s
  text:
    numbers:
      shape:
      - 26
      target: __ __ __ __  0 __ __  1 __ __ __ __ __  2 __ __ __ __ __  3  3 __ __
        __ __ __
    raw: the sum of two numbers is 55 . the greater number is seventeen times the
      smaller number plus one . find the numbers .
    snippets:
      shape:
      - 4
      - 15
      target:
      - the sum of two numbers is 55 . the greater number
      - the sum of two numbers is 55 . the greater number is seventeen times
      - is 55 . the greater number is seventeen times the smaller number plus one
        .
      - is seventeen times the smaller number plus one . find the numbers .
    tokens:
      shape:
      - 26
      target: '[CLS] the sum of two numbers is 55 . the greater number is seventeen
        times the smaller number plus one . find the numbers . [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: -(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of apples the farmer had
      N_01:
      - the number of apples the farmer gave to his neighbor
      X_00:
      - the number of apples the farmer had now
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the initial number of apples
      - the number of farmer's apples at first
      - the number of apples the farmer had in the past
      N_01:
      - the number of apples given away
      - the number of apples given to his neighbor
      - the number of apples the farmer gave to his neighbor
      X_00:
      - the number of apples left
      - the number of apples remaining for the farmer
      - the number of apples the farmer has in now
  info:
    answers:
    - a: '39'
    item_id: 60f9186c90be09b72239edd4
    numbers:
      N_00: '127'
      N_01: '88'
    split: null
    variables:
    - a
  text:
    numbers:
      shape:
      - 26
      target: __ __ __ __  0 __ __ __ __ __  1 __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __
    raw: the farmer had 127 apples . the farmer gave 88 apples to his neighbor . how
      many apples does the farmer have now ?
    snippets:
      shape:
      - 2
      - 15
      target:
      - the farmer had 127 apples . the farmer gave 88 apples
      - had 127 apples . the farmer gave 88 apples to his neighbor . how many
    tokens:
      shape:
      - 26
      target: '[CLS] the farmer had 127 apples . the farmer gave 88 apples to his
        neighbor . how many apples does the farmer have now ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(R_00, R_01) R_03: =(N_01,
      R_02) R_04: -(R_00, R_01) R_05: =(N_03, R_04) R_06: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the sum of the two numbers
      N_03:
      - the value of the larger number minus the smaller number
      X_00:
      - the value of the larger number
      X_01:
      - the value of the smaller number
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the sum of the two numbers
      - the sum of two numbers
      - the sum of two numbers
      N_03:
      - the value of the first number minus the second number
      - the value of the first number minus the second number
      - the value of one number minus the other number
      X_00:
      - the first number
      - the first number
      - the value of one number
      X_01:
      - the second number
      - the second number
      - the value of the other number
  info:
    answers:
    - n1: '27.5000000000000'
      n2: '15.5000000000000'
    item_id: 604cc853117d71c492a62dc3
    numbers:
      N_00: '2'
      N_01: '43'
      N_02: '2'
      N_03: '12'
      N_04: '2'
    split: null
    variables:
    - n1
    - n2
  text:
    numbers:
      shape:
      - 26
      target: __ __ __ __  0 __ __  1 __ __ __ __ __ __  2 __ __  3 __ __ __ __  4
        __ __ __
    raw: the sum of two numbers is 43 . the difference between the same two numbers
      is 12 . what are the two numbers ?
    snippets:
      shape:
      - 5
      - 15
      target:
      - the sum of two numbers is 43 . the difference between
      - the sum of two numbers is 43 . the difference between the same two
      - 43 . the difference between the same two numbers is 12 . what are the
      - difference between the same two numbers is 12 . what are the two numbers ?
      - numbers is 12 . what are the two numbers ?
    tokens:
      shape:
      - 26
      target: '[CLS] the sum of two numbers is 43 . the difference between the same
        two numbers is 12 . what are the two numbers ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: *(N_00, R_00) R_03: =(R_01,
      R_02) R_04: +(R_00, R_01) R_05: =(N_01, R_04) R_06: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the ratio of tom's age to anton's age
      N_01:
      - the sum of their age
      X_00:
      - the age of anton
      X_01:
      - the age of tom
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the ratio of the age of tom to the age of antonette
      - the ratio of the age of tom to the age of antonette
      - the ratio of the age of tom to the age of antonette
      N_01:
      - the sum of the age of tom and the age of antonette
      - the sum of their age
      - the sum of their age
      X_00:
      - the age of antonette
      - the age of antonette
      - the age of antonette
      X_01:
      - the age of tom
      - the age of tom
      - the age of tom
  info:
    answers:
    - a: '13.5000000000000'
      t: '40.5000000000000'
    item_id: 604cc853117d71c492a62f5d
    numbers:
      N_00: '3'
      N_01: '54'
    split: null
    variables:
    - a
    - t
  text:
    numbers:
      shape:
      - 26
      target: __ __ __  0  0 __ __ __ __ __ __ __ __ __ __ __ __ __  1 __ __ __ __
        __ __ __
    raw: 'tom is th ##rice the age of anton ##ette . if the sum of their age is 54
      , what are their ages ?'
    snippets:
      shape:
      - 2
      - 15
      target:
      - 'tom is th ##rice the age of anton ##ette .'
      - if the sum of their age is 54 , what are their ages ?
    tokens:
      shape:
      - 26
      target: '[CLS] tom is th ##rice the age of anton ##ette . if the sum of their
        age is 54 , what are their ages ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 11
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: -(R_00, R_01) R_03: =(N_00,
      R_02) R_04: +(R_00, R_01) R_05: =(N_01, R_04) R_06: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the value of jenna's age minus darius's age
      N_01:
      - the sum of their ages
      X_00:
      - jenna's age now
      X_01:
      - darius's age now
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the value of the age of jenna minus the age of darius
      - the value of the age of jenna minus the age of darius
      - the value of jenna's age minus darius's age
      N_01:
      - the sum of the age of jenna and the age of darius
      - the sum of their ages
      - the sum of their ages
      X_00:
      - the age of jenna
      - the age of jenna
      - the age of jenna
      X_01:
      - the age of darius
      - the age of darius
      - the age of darius
  info:
    answers:
    - d: '8'
      j: '13'
    item_id: 604cc853117d71c492a63088
    numbers:
      N_00: '5'
      N_01: '21'
    split: null
    variables:
    - j
    - d
  text:
    numbers:
      shape:
      - 29
      target: __ __ __  0 __ __ __ __ __ __ __ __ __ __ __  1 __ __ __ __ __ __ __
        __ __ __ __ __ __
    raw: jenna is 5 years older than darius . the sum of their ages is 21 years .
      how old are jenna and darius ?
    snippets:
      shape:
      - 2
      - 15
      target:
      - jenna is 5 years older than darius . the sum
      - . the sum of their ages is 21 years . how old are jenna and
    tokens:
      shape:
      - 29
      target: '[CLS] jenna is 5 years older than darius . the sum of their ages is
        21 years . how old are jenna and darius ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 11
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_02, R_00) R_02: =(N_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of students at a school
      N_02:
      - the number of students at each classroom
      X_00:
      - the number of classrooms
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of students at a school
      - the total number of students at a school
      - the total number of students
      N_02:
      - the number of students for each classroom capacity
      - the number of students each classroom can hold
      - the number of students one classroom holds
      X_00:
      - the ratio of the number of students to classroom capacity
      - the number of classrooms needed at the school
      - the number of classrooms needed
  info:
    answers:
    - c: '37'
    item_id: 60f9186c90be09b72239e9b0
    numbers:
      N_00: '1110'
      N_01: '1'
      N_02: '30'
    split: null
    variables:
    - c
  text:
    numbers:
      shape:
      - 29
      target: __ __ __  0  0 __ __  1 __ __ __ __ __ __  2 __ __ __ __ __ __ __ __
        __ __ __ __ __ __
    raw: 'there are 111 ##0 students at a school . if each classroom holds 30 students
      , how many classrooms are needed at the school ?'
    snippets:
      shape:
      - 3
      - 15
      target:
      - 'there are 111 ##0 students at a school . if'
      - 'there are 111 ##0 students at a school . if each classroom holds 30'
      - a school . if each classroom holds 30 students , how many classrooms are needed
    tokens:
      shape:
      - 29
      target: '[CLS] there are 111 ##0 students at a school . if each classroom holds
        30 students , how many classrooms are needed at the school ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 11
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of boxes
      N_01:
      - the number of dogs in each box
      X_00:
      - the total number of dogs
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of boxes of toy dogs
      - the number of boxes
      - the number of boxes of stuffed toy dogs
      N_01:
      - the number of toy dogs in each box
      - the number of dogs in each box
      - the number of dogs for each box
      X_00:
      - the total number of toy dogs
      - the number of dogs in the boxes in all
      - the number of all dogs
  info:
    answers:
    - d: '28'
    item_id: 60f9186c90be09b72239ee5e
    numbers:
      N_00: '7'
      N_01: '4'
    split: null
    variables:
    - d
  text:
    numbers:
      shape:
      - 29
      target: __ __ __  0 __ __ __ __ __ __ __ __ __  1 __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __
    raw: david has 7 boxes of stuffed toy dogs . each box has 4 dogs in it . how many
      dogs are there in all ?
    snippets:
      shape:
      - 2
      - 15
      target:
      - david has 7 boxes of stuffed toy dogs . each
      - stuffed toy dogs . each box has 4 dogs in it . how many dogs
    tokens:
      shape:
      - 29
      target: '[CLS] david has 7 boxes of stuffed toy dogs . each box has 4 dogs in
        it . how many dogs are there in all ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 11
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(R_00, R_01) R_03: =(N_01,
      R_02) R_04: *(N_03, R_01) R_05: -(R_04, R_00) R_06: =(N_02, R_05) R_07: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the sum of the larger number and the smaller number
      N_02:
      - the value of 2 times the smaller number minus the larger number
      N_03:
      - the multiplier for the smaller number
      X_00:
      - the value of the larger number
      X_01:
      - the value of the smaller number
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the sum of the two numbers
      - the sum of the two numbers
      - the sum of two numbers
      N_02:
      - the value of twice the smaller minus larger number
      - a value of twice the smaller number minus the larger number
      - the value of twice the smaller number minus the larger number
      N_03:
      - the coefficient of the smaller number
      - a number in the phrase " twice the smaller number "
      - a number in the phrase " twice "
      X_00:
      - the value of the larger number
      - the value of the larger number
      - the value of the larger number
      X_01:
      - the value of the smaller number
      - the value of the smaller number
      - the value of the smaller number
  info:
    answers:
    - l: '61'
      s: '33'
    item_id: 604cc853117d71c492a63097
    numbers:
      N_00: '2'
      N_01: '94'
      N_02: '5'
      N_03: '2'
    split: null
    variables:
    - l
    - s
  text:
    numbers:
      shape:
      - 29
      target: __ __ __ __  0 __ __  1 __ __ __ __ __ __  2 __ __  3 __ __ __ __ __
        __ __ __ __ __ __
    raw: the sum of two numbers is 94 , and the larger number is 5 less than twice
      the smaller number . find the numbers .
    snippets:
      shape:
      - 4
      - 15
      target:
      - the sum of two numbers is 94 , and the larger
      - the sum of two numbers is 94 , and the larger number is 5
      - 94 , and the larger number is 5 less than twice the smaller number .
      - the larger number is 5 less than twice the smaller number . find the numbers
    tokens:
      shape:
      - 29
      target: '[CLS] the sum of two numbers is 94 , and the larger number is 5 less
        than twice the smaller number . find the numbers . [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 11
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(R_00, R_01) R_03: =(N_01,
      R_02) R_04: -(R_00, R_01) R_05: =(N_02, R_04) R_06: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the sum of the the smaller number and the larger number
      N_02:
      - the value of the smaller number minus the larger number
      X_00:
      - the value of the smaller number
      X_01:
      - the value of the larger number
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the sum of the first number and the second number
      - the sum of the two numbers
      - the sum of the two numbers
      N_02:
      - the value of the first number minus the second number
      - the value of the larger number minus the smaller number
      - the value of the larger number minus the smaller number
      X_00:
      - the value of the first number
      - the value of the larger number
      - the value of the larger number
      X_01:
      - the value of the second number
      - the value of the smaller number
      - the value of the smaller number
  info:
    answers:
    - n1: '34'
      n2: '30'
    item_id: 604cc852117d71c492a62b7b
    numbers:
      N_00: '2'
      N_01: '64'
      N_02: '4'
    split: null
    variables:
    - n1
    - n2
  text:
    numbers:
      shape:
      - 29
      target: __ __  0 __ __ __ __  1 __ __ __ __  2 __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __
    raw: find 2 numbers whose sum is 64 and whose difference is 4 . what is the smaller
      number ? what is the larger number ?
    snippets:
      shape:
      - 3
      - 15
      target:
      - find 2 numbers whose sum is 64 and whose
      - find 2 numbers whose sum is 64 and whose difference is 4 . what
      - sum is 64 and whose difference is 4 . what is the smaller number ?
    tokens:
      shape:
      - 29
      target: '[CLS] find 2 numbers whose sum is 64 and whose difference is 4 . what
        is the smaller number ? what is the larger number ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 11
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of strawberries paul had at first
      N_01:
      - the number of strawberries he picked more
      X_00:
      - the number of strawberries he has in his basket
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the initial number of strawberries
      - the number of strawberries paul had
      - the initial number of strawberries
      N_01:
      - the number of additional strawberries
      - the number of strawberries he picked
      - the number of strawberries added
      X_00:
      - the total number of strawberries
      - the total number of strawberries he had
      - the total number of strawberries now
  info:
    answers:
    - w: '63'
    item_id: 60f9186c90be09b72239ebda
    numbers:
      N_00: '28'
      N_01: '35'
    split: null
    variables:
    - w
  text:
    numbers:
      shape:
      - 29
      target: __ __ __  0 __ __ __ __ __ __ __ __  1 __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __
    raw: 'paul had 28 straw ##berries in his basket . he picked 35 more straw ##berries
      . how many straw ##berries did he have then ?'
    snippets:
      shape:
      - 2
      - 15
      target:
      - 'paul had 28 straw ##berries in his basket . he'
      - '##berries in his basket . he picked 35 more straw ##berries . how many straw'
    tokens:
      shape:
      - 29
      target: '[CLS] paul had 28 straw ##berries in his basket . he picked 35 more
        straw ##berries . how many straw ##berries did he have then ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 11
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_00, N_02) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the time it takes to bake one pan
      N_01:
      - the number of pans of cookies
      N_02:
      - the number of pans to bake one pan
      X_00:
      - the time it takes to bake 4 pans
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of minutes for baking one pan of cookies
      - the minutes it takes to bake one pan of cookies
      - the number of minutes baking one pan takes
      N_02:
      - the number of pans of cookies to bake
      - the number of pans of cookies
      - the total number of pans to bake
      X_00:
      - the total number of minutes for bake all cookies
      - the minutes it takes to bake 4 pans of cookies
      - the total number of minutes
  info:
    answers:
    - m: '28'
    item_id: 60f9186c90be09b72239f0c8
    numbers:
      N_00: '7'
      N_01: '1'
      N_02: '4'
    split: null
    variables:
    - m
  text:
    numbers:
      shape:
      - 29
      target: __ __ __  0 __ __ __ __  1 __ __ __ __ __ __ __ __ __ __ __ __  2 __
        __ __ __ __ __ __
    raw: 'it takes 7 minutes to ba ##ke one pan of cookies . how long will it take
      to ba ##ke 4 pan ##s of cookies ?'
    snippets:
      shape:
      - 3
      - 15
      target:
      - 'it takes 7 minutes to ba ##ke one pan of'
      - 'it takes 7 minutes to ba ##ke one pan of cookies . how long will'
      - 'long will it take to ba ##ke 4 pan ##s of cookies ?'
    tokens:
      shape:
      - 29
      target: '[CLS] it takes 7 minutes to ba ##ke one pan of cookies . how long will
        it take to ba ##ke 4 pan ##s of cookies ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 11
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_01, R_00) R_02: -(N_00, N_02) R_03: =(R_01,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of dollars sam had
      N_01:
      - the number of books to spend on each book
      N_02:
      - the cost of each book
      X_00:
      - the cost of each book in dollars
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of dollars sam had
      - the number of dollars sam spent on books
      - the money he had
      N_01:
      - the number of books sam bought
      - the number of books
      - the number of books
      N_02:
      - the number of dollars sam had after buying the books
      - the number of dollars he had after buying books
      - the money he had after buying 9 books
      X_00:
      - the dollar cost of each book
      - the number of dollars for each book
      - the cost of each book
  info:
    answers:
    - b: '7'
    item_id: 60f9186c90be09b72239ed21
    numbers:
      N_00: '79'
      N_01: '9'
      N_02: '16'
    split: null
    variables:
    - b
  text:
    numbers:
      shape:
      - 29
      target: __ __ __  0 __ __ __ __  1 __ __ __ __ __ __ __ __  2 __ __ __ __ __
        __ __ __ __ __ __
    raw: sam had 79 dollars to spend on 9 books . after buying them , he had 16 dollars
      . how much did each book cost ?
    snippets:
      shape:
      - 3
      - 15
      target:
      - sam had 79 dollars to spend on 9 books .
      - sam had 79 dollars to spend on 9 books . after buying them , he
      - . after buying them , he had 16 dollars . how much did each book
    tokens:
      shape:
      - 29
      target: '[CLS] sam had 79 dollars to spend on 9 books . after buying them ,
        he had 16 dollars . how much did each book cost ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 11
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(N_00, R_00) R_03: =(R_01,
      R_02) R_04: /(N_01, 100) R_05: *(N_00, R_04) R_06: /(N_03, 100) R_07: *(R_01,
      R_06) R_08: =(R_05, R_07) R_09: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the amount of the original mixture
      N_01:
      - the percentage of alcohol in the original mixture
      N_03:
      - the percentage of alcohol in the mixture
      X_00:
      - the amount of pure water added
      X_01:
      - the amount of the mixed mixture
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of gallons of mixture which is 80 percent alcohol
      - the number of gallons of mixture
      - amount of gallons of the current mixture
      N_01:
      - the number of alcohol percent of the mixture
      - the percentage of alcohol of mixture
      - percentage of alcohol in the current mixture
      N_03:
      - the number of goal alcohol percent of the mixture
      - the percentage of alcohol of the mixture after reducing the alcohol
      - the wanted percentage of alcohol of the mixture
      X_00:
      - the number of gallons to add on mixture to make it to goal mixture
      - the number of gallons of water to make a 75 percent mixture
      - amount of gallons of water needed to be added
      X_01:
      - the number of gallons of goal mixture which is 75 percent alcohol
      - the number of gallons of the 75 percent alcohol mixture
      - amount of gallons of the reduced state
  info:
    answers:
    - m: '213.333333333333'
      w: '13.3333333333333'
    item_id: 60f9186c90be09b72239efaf
    numbers:
      N_00: '200'
      N_01: '80'
      N_02: '1'
      N_03: '75'
    split: null
    variables:
    - w
    - m
  text:
    numbers:
      shape:
      - 29
      target: __ __ __ __ __ __ __ __  0 __ __ __ __ __  1 __ __ __ __ __ __ __  2  3
        __ __ __ __ __
    raw: how much water must be added to 200 gallons of mixture which is 80 percent
      alcohol , to reduce it to a 75 percent mixture ?
    snippets:
      shape:
      - 4
      - 15
      target:
      - how much water must be added to 200 gallons of mixture which is 80 percent
      - to 200 gallons of mixture which is 80 percent alcohol , to reduce it to
      - percent alcohol , to reduce it to a 75 percent mixture ?
      - alcohol , to reduce it to a 75 percent mixture ?
    tokens:
      shape:
      - 29
      target: '[CLS] how much water must be added to 200 gallons of mixture which
        is 80 percent alcohol , to reduce it to a 75 percent mixture ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 11
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(2, R_00) R_02: =(N_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of trout caught by nancy
      X_00:
      - the number of trouts per trout
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of trout caught
      - the number of trout nancy and joan catch
      - the total number of trout caught
      X_00:
      - the number of trout split equally to 2 person
      - the number of trout for each person
      - the number of trout one person gets
  info:
    answers:
    - p: '9'
    item_id: 60f9186c90be09b72239f27e
    numbers:
      N_00: '18'
      N_01: '1'
    split: null
    variables:
    - p
  text:
    numbers:
      shape:
      - 29
      target: __ __ __ __ __ __ __ __ __  0 __ __ __ __ __ __ __ __ __ __ __ __ __
        __  1 __ __ __ __
    raw: nancy goes fishing with joan . they catch 18 trout . if they equally split
      up the trout , how many will each one get ?
    snippets:
      shape:
      - 2
      - 15
      target:
      - goes fishing with joan . they catch 18 trout . if they equally split up
      - the trout , how many will each one get ?
    tokens:
      shape:
      - 29
      target: '[CLS] nancy goes fishing with joan . they catch 18 trout . if they
        equally split up the trout , how many will each one get ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 11
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: *(N_02, R_01) R_03: -(R_00,
      R_02) R_04: =(N_01, R_03) R_05: +(R_00, R_01) R_06: -(R_05, N_03) R_07: =(N_04,
      R_06) R_08: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the value of one number minus twice another number
      N_02:
      - a number in the phrase " twice "
      N_03:
      - a number in the phrase " nine "
      N_04:
      - the value of the sum of the two numbers minus nine
      X_00:
      - the value of one number
      X_01:
      - the value of another number
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the value of the one number minus 2 times the other number
      - the value of one number minus twice the other number
      - the value of one number minus twice another number
      N_02:
      - a number in the phrase " twice another "
      - the coefficient of the other number
      - a number in the phrase " twice "
      N_03:
      - a number in the phrase " their sum is decreased by nine "
      - the value of the decreased number from their sum
      - a number in the phrase " nine "
      N_04:
      - the value of the sum of the two numbers minus 9
      - the value of their sum minus nine
      - the value of the sum of two numbers minus nine
      X_00:
      - the one number
      - the value of one number
      - the value of one number
      X_01:
      - the other number
      - the value of the other number
      - the value of another number
  info:
    answers:
    - n1: '17'
      n2: '5'
    item_id: 604cc853117d71c492a62ff2
    numbers:
      N_00: '1'
      N_01: '7'
      N_02: '2'
      N_03: '9'
      N_04: '13'
    split: null
    variables:
    - n1
    - n2
  text:
    numbers:
      shape:
      - 29
      target: __  0 __ __  1 __ __  2 __ __ __ __ __ __ __ __  3  3 __ __ __  4  4
        __ __ __ __ __ __
    raw: one number is seven more than twice another . if their sum is decreased by
      nine , the result is thirteen . find the numbers .
    snippets:
      shape:
      - 5
      - 15
      target:
      - one number is seven more than twice another
      - one number is seven more than twice another . if their
      - one number is seven more than twice another . if their sum is decreased
      - . if their sum is decreased by nine , the result is thirteen . find
      - decreased by nine , the result is thirteen . find the numbers .
    tokens:
      shape:
      - 29
      target: '[CLS] one number is seven more than twice another . if their sum is
        decreased by nine , the result is thirteen . find the numbers . [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 11
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of boxes
      N_01:
      - the number of crayons per box
      X_00:
      - the total number of crayons
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of boxes of crayons
      - the number of boxes of crayons
      - the number of boxes
      N_01:
      - the number of crayons for each box
      - the number of crayons per box
      - the number of crayons each box holds
      X_00:
      - the total number of crayons
      - the total number of crayons
      - the number of crayons
  info:
    answers:
    - c: '35'
    item_id: 60f9186c90be09b72239f1ff
    numbers:
      N_00: '7'
      N_01: '5'
    split: null
    variables:
    - c
  text:
    numbers:
      shape:
      - 29
      target: __ __ __  0 __ __ __ __ __ __ __ __ __  1 __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __
    raw: 'michelle has 7 boxes of cr ##ayo ##ns . each box holds 5 cr ##ayo ##ns .
      how many cr ##ayo ##ns does michelle have ?'
    snippets:
      shape:
      - 2
      - 15
      target:
      - 'michelle has 7 boxes of cr ##ayo ##ns . each'
      - 'cr ##ayo ##ns . each box holds 5 cr ##ayo ##ns . how many cr'
    tokens:
      shape:
      - 29
      target: '[CLS] michelle has 7 boxes of cr ##ayo ##ns . each box holds 5 cr ##ayo
        ##ns . how many cr ##ayo ##ns does michelle have ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 11
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of goals scored by jorge
      N_01:
      - the number of goals scored by jorge this season
      X_00:
      - the total number of goals scored
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of goals last season
      - the number of goals jorge scored last season
      - the number of goals jorge scored last season
      N_01:
      - the number of goals this season
      - the number of goals he scored this season
      - the number of goals jorge scored this season
      X_00:
      - the total number of goals
      - the number of all goals
      - the total number of goals jorge scored
  info:
    answers:
    - s: '343'
    item_id: 60f9186c90be09b72239ef29
    numbers:
      N_00: '156'
      N_01: '187'
    split: null
    variables:
    - s
  text:
    numbers:
      shape:
      - 29
      target: __ __ __  0 __ __ __ __ __ __ __ __ __ __  1 __ __ __ __ __ __ __ __
        __ __ __ __ __ __
    raw: jorge scored 156 goals playing soccer last season . this season he scored
      187 goals . what is the total number of goals jorge scored ?
    snippets:
      shape:
      - 2
      - 15
      target:
      - jorge scored 156 goals playing soccer last season . this
      - last season . this season he scored 187 goals . what is the total number
    tokens:
      shape:
      - 29
      target: '[CLS] jorge scored 156 goals playing soccer last season . this season
        he scored 187 goals . what is the total number of goals jorge scored ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 11
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(R_00, R_01) R_03: =(N_01,
      R_02) R_04: -(R_00, R_01) R_05: =(N_02, R_04) R_06: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the sum of the 2 numbers
      N_02:
      - the value of the first number minus the second number
      X_00:
      - the value of the first number
      X_01:
      - the value of the second number
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the sum of 2 numbers
      - the sum of the 2 numbers
      - the sum of 2 numbers
      N_02:
      - the value of their difference
      - the value of the first number minus the second number
      - the value of the first number minus the second number
      X_00:
      - the number of one number
      - the value of the first number
      - the value of the first number
      X_01:
      - the number of the other number
      - the value of the second number
      - the value of the second number
  info:
    answers:
    - f: '41'
      s: '23'
    item_id: 604cc853117d71c492a62c2d
    numbers:
      N_00: '2'
      N_01: '64'
      N_02: '18'
      N_03: '1'
      N_04: '2'
    split: null
    variables:
    - f
    - s
  text:
    numbers:
      shape:
      - 29
      target: __ __ __ __  0 __ __  1 __ __ __ __ __  2 __ __ __ __  3 __ __ __ __
        __  4 __ __ __ __
    raw: the sum of 2 numbers is 64 , and their difference is 18 . what is the first
      number ? what is the second number ?
    snippets:
      shape:
      - 5
      - 15
      target:
      - the sum of 2 numbers is 64 , and their difference
      - the sum of 2 numbers is 64 , and their difference is 18 .
      - is 64 , and their difference is 18 . what is the first number ?
      - difference is 18 . what is the first number ? what is the second number
      - the first number ? what is the second number ?
    tokens:
      shape:
      - 29
      target: '[CLS] the sum of 2 numbers is 64 , and their difference is 18 . what
        is the first number ? what is the second number ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 11
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_02) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of birds that were sitting in the tree
      N_02:
      - the number of birds that flew up to the tree
      X_00:
      - the total number of birds that were sitting in the tree
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of birds sitting in a tree
      - the number of birds sitting in a tree first time
      - the number of birds that were sitting in a tree
      N_02:
      - the number of new birds
      - the number of birds flew up to the tree
      - the number of birds that flew up to the tree
      X_00:
      - the number of all birds
      - the total number of birds sitting in a tree altogether
      - the total number of birds
  info:
    answers:
    - b: '35'
    item_id: 60f9186c90be09b72239ed51
    numbers:
      N_00: '14'
      N_01: '1'
      N_02: '21'
    split: null
    variables:
    - b
  text:
    numbers:
      shape:
      - 29
      target: __  0 __ __ __ __  1 __ __  2 __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __
    raw: 14 birds were sitting in a tree . 21 more birds flew up to the tree . how
      many birds were there altogether in the tree ?
    snippets:
      shape:
      - 3
      - 15
      target:
      - 14 birds were sitting in a tree .
      - 14 birds were sitting in a tree . 21 more birds flew up
      - birds were sitting in a tree . 21 more birds flew up to the tree
    tokens:
      shape:
      - 29
      target: '[CLS] 14 birds were sitting in a tree . 21 more birds flew up to the
        tree . how many birds were there altogether in the tree ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 11
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_02) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of erasers in a box
      N_02:
      - the number of erasers patrick puts inside
      X_00:
      - the number of erasers in the box now
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the initial number of erasers
      - the number of erasers in a box
      - the number of erasers in a box at first
      N_02:
      - the number of erasers added
      - the number of erasers put more inside a box by patrick
      - the number of erasers patrick puts more inside
      X_00:
      - the number of erasers now
      - the total number of erasers in a box now
      - the total number of erasers in the box
  info:
    answers:
    - c: '85'
    item_id: 60f9186c90be09b72239ecde
    numbers:
      N_00: '76'
      N_01: '1'
      N_02: '9'
    split: null
    variables:
    - c
  text:
    numbers:
      shape:
      - 29
      target: __ __ __ __  0 __ __ __  1 __ __ __ __  2 __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __
    raw: 'if there are 76 erase ##rs in a box and patrick puts 9 more erase ##rs inside
      , how many erase ##rs are in the box ?'
    snippets:
      shape:
      - 3
      - 15
      target:
      - 'if there are 76 erase ##rs in a box and patrick'
      - 'if there are 76 erase ##rs in a box and patrick puts 9 more erase'
      - '##rs in a box and patrick puts 9 more erase ##rs inside , how many'
    tokens:
      shape:
      - 29
      target: '[CLS] if there are 76 erase ##rs in a box and patrick puts 9 more erase
        ##rs inside , how many erase ##rs are in the box ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(R_00, R_01) R_03: =(N_01,
      R_02) R_04: *(N_05, R_01) R_05: *(N_02, R_00) R_06: -(R_04, R_05) R_07: =(N_04,
      R_06) R_08: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the sum of the two numbers
      N_02:
      - the coefficient of the other number
      N_04:
      - the value of five times the other minus three times one of the numbers
      N_05:
      - the coefficient of the number
      X_00:
      - the number of the first number
      X_01:
      - the number of the others
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the sum of two numbers
      - the sum of the two numbers
      - the sum of the two numbers
      N_02:
      - a number in the phrase " three times one of the numbers is 11 less than five
        times the other "
      - a number in the phrase " three times one of the numbers "
      - the coefficient of one number on one part
      N_04:
      - the value of 5 times the other number minus 3 times one number
      - the value of five times the other minus three times one of the numbers
      - the value of five times the other number minus three times one number on one
        part
      N_05:
      - a number in the phrase " five times the other "
      - a number in the phrase " five times the other "
      - the coefficient of the other number on one part
      X_00:
      - one of the number
      - the value of one of the numbers
      - the value of one number
      X_01:
      - the other number
      - the value of the other number
      - the value of the other number
  info:
    answers:
    - n1: '8'
      n2: '7'
    item_id: 604cc853117d71c492a62e1c
    numbers:
      N_00: '2'
      N_01: '15'
      N_02: '3'
      N_03: '1'
      N_04: '11'
      N_05: '5'
    split: null
    variables:
    - n1
    - n2
  text:
    numbers:
      shape:
      - 33
      target: __ __ __ __  0 __ __  1 __  2 __  3 __ __ __ __  4 __ __  5 __ __ __
        __ __ __ __ __ __ __ __ __ __
    raw: the sum of two numbers is 15 . three times one of the numbers is 11 less
      than five times the other . find the numbers .
    snippets:
      shape:
      - 6
      - 15
      target:
      - the sum of two numbers is 15 . three times one
      - the sum of two numbers is 15 . three times one of the numbers
      - sum of two numbers is 15 . three times one of the numbers is 11
      - two numbers is 15 . three times one of the numbers is 11 less than
      - three times one of the numbers is 11 less than five times the other .
      - of the numbers is 11 less than five times the other . find the numbers
    tokens:
      shape:
      - 33
      target: '[CLS] the sum of two numbers is 15 . three times one of the numbers
        is 11 less than five times the other . find the numbers . [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: /(N_02, 100) R_02: *(N_05, R_01) R_03: -(N_05,
      R_02) R_04: =(R_00, R_03) R_05: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the percentage of a discount to the item
      N_05:
      - the cost of an item
      X_00:
      - the total cost of an item
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the discount rate in percent
      - the percentage of discount
      - the percentage of discount on all purchases at a clothing store
      N_05:
      - the original cost of the item before the discount
      - the original cost of an item
      - the original price for an item in dollars
      X_00:
      - the payment cost after the discount
      - the cost of an item after discount
      - the price for an item with a discount in dollars
  info:
    answers:
    - p: '16.8000000000000'
    item_id: 60f9186c90be09b72239eab9
    numbers:
      N_00: '1'
      N_01: '1'
      N_02: '20'
      N_03: '1'
      N_04: '1'
      N_05: '21'
    split: null
    variables:
    - p
  text:
    numbers:
      shape:
      - 33
      target: __  0 __ __ __  1  2 __ __ __ __ __ __ __ __ __  3 __ __ __ __  4 __
        __ __  5 __ __ __ __ __ __ __
    raw: 'a clothing store offers a 20 % discount on all purchases . how much would
      a shop ##per pay for an item originally costing 21 dollars ?'
    snippets:
      shape:
      - 6
      - 15
      target:
      - a clothing store offers a 20 % discount
      - a clothing store offers a 20 % discount on all purchases .
      - a clothing store offers a 20 % discount on all purchases . how
      - 'on all purchases . how much would a shop ##per pay for an item originally'
      - 'much would a shop ##per pay for an item originally costing 21 dollars ?'
      - '##per pay for an item originally costing 21 dollars ?'
    tokens:
      shape:
      - 33
      target: '[CLS] a clothing store offers a 20 % discount on all purchases . how
        much would a shop ##per pay for an item originally costing 21 dollars ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: /(N_03, 100) R_02: *(R_00, R_01) R_03: -(R_00,
      R_02) R_04: =(N_00, R_03) R_05: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of dollars amy paid for a pair of running shoes
      N_03:
      - the discount rate of a pair of running shoes
      X_00:
      - the regular price of a pair of running shoes
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the dollar cost of the pair of running shoes during a 35 % off sale
      - the number of dollars amy paid for a pair of running shoes
      - the price of a pair of running shoes during a 35 % sale
      N_03:
      - the rate of discount on sale
      - the discount rate of the running shoes
      - the percentage of the discount compared to the regular price
      X_00:
      - the dollar cost of the pair of running shoes before sale
      - the regular price of the running shoes
      - the regular price of the running shoes
  info:
    answers:
    - r: '84.6000000000000'
    item_id: 60f9186c90be09b72239ecb1
    numbers:
      N_00: '54.9900000000000'
      N_01: '1'
      N_02: '1'
      N_03: '35'
    split: null
    variables:
    - r
  text:
    numbers:
      shape:
      - 33
      target: __ __ __  0  0  0 __ __  1 __ __ __ __ __  2  3 __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __
    raw: amy paid 54 . 99 dollars for a pair of running shoes during a 35 % off sale
      . what was the regular price , in dollars ?
    snippets:
      shape:
      - 4
      - 15
      target:
      - amy paid 54 . 99 dollars for a pair of
      - amy paid 54 . 99 dollars for a pair of running shoes during a 35
      - for a pair of running shoes during a 35 % off sale . what was
      - a pair of running shoes during a 35 % off sale . what was the
    tokens:
      shape:
      - 33
      target: '[CLS] amy paid 54 . 99 dollars for a pair of running shoes during a
        35 % off sale . what was the regular price , in dollars ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, R_00) R_02: *(N_02, R_01) R_03: +(N_01,
      R_00) R_04: =(R_02, R_03) R_05: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the present age of serena
      N_01:
      - the present age of her mother
      N_02:
      - the ratio of the future age of her mother to that of serena
      X_00:
      - the number of years between the future and now
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the age of serena
      - the age of serena now
      - the ages of serena
      N_01:
      - the age of the mother
      - the age of her mother now
      - the ages of mother
      N_02:
      - the ratio of the future age of the mother to the future age of serena
      - the ratio of the age of her mother in the future to the age of serena in the
        future
      - the ratio of future mother's age to future serena's age
      X_00:
      - the number of years into the future
      - the value of the future year minus now
      - the years between now and the future
  info:
    answers:
    - y: '6'
    item_id: 604cc853117d71c492a62dd4
    numbers:
      N_00: '9'
      N_01: '39'
      N_02: '3'
    split: null
    variables:
    - y
  text:
    numbers:
      shape:
      - 33
      target: __ __ __  0 __ __ __ __ __ __  1 __ __ __ __ __ __ __ __ __ __ __  2
        __ __ __ __ __ __ __ __ __ __
    raw: serena is nine years old . her mother is 39 years old . in how many years
      will her mother be three times as old as serena ?
    snippets:
      shape:
      - 3
      - 15
      target:
      - serena is nine years old . her mother is 39
      - nine years old . her mother is 39 years old . in how many years
      - how many years will her mother be three times as old as serena ?
    tokens:
      shape:
      - 33
      target: '[CLS] serena is nine years old . her mother is 39 years old . in how
        many years will her mother be three times as old as serena ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: /(R_00, 100) R_02: *(N_02, R_01) R_03: -(N_02,
      N_03) R_04: =(R_02, R_03) R_05: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the cost of a pair of shoes
      N_03:
      - the price of a pair of shoes
      X_00:
      - the cost of a pair of shoes
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the original price of the pair of shoes in dollars
      - the original cost of the shoes
      - the original cost of a pair of shoes
      N_03:
      - the reduced price of the pair of shoes in dollars
      - the sale price of the shoes
      - the discounted cost of a pair of shoes
      X_00:
      - the percent of discount in this sale
      - the rate of sale
      - the discount rate of the shoes
  info:
    answers:
    - r: '20'
    item_id: 60f9186c90be09b72239f13a
    numbers:
      N_00: '1'
      N_01: '1'
      N_02: '42'
      N_03: '33.6000000000000'
    split: null
    variables:
    - r
  text:
    numbers:
      shape:
      - 33
      target: __ __  0 __ __ __ __ __  1 __ __ __ __ __ __  2 __ __  3  3  3 __ __
        __ __ __ __ __ __ __ __ __ __
    raw: at a sale , the cost of a pair of shoes was reduced from 42 dollars to 33
      . 6 dollars . what was the percent of discount ?
    snippets:
      shape:
      - 4
      - 15
      target:
      - at a sale , the cost of a pair
      - at a sale , the cost of a pair of shoes was reduced from 42
      - a pair of shoes was reduced from 42 dollars to 33 . 6 dollars .
      - shoes was reduced from 42 dollars to 33 . 6 dollars . what was the
    tokens:
      shape:
      - 33
      target: '[CLS] at a sale , the cost of a pair of shoes was reduced from 42 dollars
        to 33 . 6 dollars . what was the percent of discount ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: -(N_01, N_02) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of dimes sam had
      N_02:
      - the number of dimes his sister borrowed
      X_00:
      - the number of dimes left now
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the initial number of dimes
      - the number of dimes in her bank
      - the number of dimes sam had
      N_02:
      - the number of dimes borrowed by the sister
      - the number of dimes that her sister borrowed
      - the number of dimes his sister borrowed
      X_00:
      - the number of dimes now
      - the number of her dimes now
      - the number of dimes sam has now
  info:
    answers:
    - r: '4'
    item_id: 60f9186c90be09b72239f185
    numbers:
      N_00: '7'
      N_01: '8'
      N_02: '4'
    split: null
    variables:
    - r
  text:
    numbers:
      shape:
      - 33
      target: __ __ __  0 __ __ __  1 __ __ __ __ __ __ __ __ __  2 __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __
    raw: 'sam had 7 penn ##ies and 8 dime ##s in his bank . his sister borrowed 4
      dime ##s . how many dime ##s does sam have now ?'
    snippets:
      shape:
      - 3
      - 15
      target:
      - 'sam had 7 penn ##ies and 8 dime ##s in'
      - 'sam had 7 penn ##ies and 8 dime ##s in his bank . his'
      - 'in his bank . his sister borrowed 4 dime ##s . how many dime ##s'
    tokens:
      shape:
      - 33
      target: '[CLS] sam had 7 penn ##ies and 8 dime ##s in his bank . his sister
        borrowed 4 dime ##s . how many dime ##s does sam have now ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: -(N_00, N_01) R_02: +(N_02, R_01) R_03: =(R_00,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of bottles of water zoe had
      N_01:
      - the number of bottles of water zoe drank
      N_02:
      - the number of bottles of water she bought
      X_00:
      - the number of bottles of water she has in her fridge
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the initial number of bottles
      - the number of bottles in the past
      - the number of bottles of water that zoe had
      N_01:
      - the number of bottles drunk
      - the number of bottles she drank
      - the number of bottles of water that zoe drank
      N_02:
      - the number of bottles bought more
      - the number of bottles she bought more
      - the number of bottles of water that zoe bought
      X_00:
      - the number of bottles now
      - the number of bottles in now
      - the number of bottles of water that she would have
  info:
    answers:
    - n: '47'
    item_id: 60f9186c90be09b72239ee4c
    numbers:
      N_00: '42'
      N_01: '25'
      N_02: '30'
    split: null
    variables:
    - n
  text:
    numbers:
      shape:
      - 33
      target: __ __ __  0 __ __ __ __ __ __ __ __ __ __  1 __ __ __ __ __  2 __ __
        __ __ __ __ __ __ __ __ __ __
    raw: zoe had 42 bottles of water in her fridge . if she drank 25 of them and then
      bought 30 more , how many bottles would she have ?
    snippets:
      shape:
      - 3
      - 15
      target:
      - zoe had 42 bottles of water in her fridge .
      - in her fridge . if she drank 25 of them and then bought 30 more
      - drank 25 of them and then bought 30 more , how many bottles would she
    tokens:
      shape:
      - 33
      target: '[CLS] zoe had 42 bottles of water in her fridge . if she drank 25 of
        them and then bought 30 more , how many bottles would she have ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: -(N_00, N_01) R_02: +(N_02, R_01) R_03: =(R_00,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of bottles of water in maria's fridge
      N_01:
      - the number of bottles of water drank
      N_02:
      - the number of bottles bought more
      X_00:
      - the total number of bottles of water now
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the initial number of bottles
      - the number of bottles in the past
      - the number of bottles of water maria had
      N_01:
      - the number of bottles drunk
      - the number of bottles she drank
      - the number of bottles of water maria drank
      N_02:
      - the number of bottles bought more
      - the number of bottles she bought more
      - the number of bottles of water maria bought
      X_00:
      - the number of bottles now
      - the number of bottles in now
      - the number of bottles of water she would have
  info:
    answers:
    - n: '51'
    item_id: 60f9186c90be09b72239ebe7
    numbers:
      N_00: '14'
      N_01: '8'
      N_02: '45'
    split: null
    variables:
    - n
  text:
    numbers:
      shape:
      - 33
      target: __ __ __  0 __ __ __ __ __ __ __ __ __ __  1 __ __ __ __ __  2 __ __
        __ __ __ __ __ __ __ __ __ __
    raw: maria had 14 bottles of water in her fridge . if she drank 8 of them and
      then bought 45 more , how many bottles would she have ?
    snippets:
      shape:
      - 3
      - 15
      target:
      - maria had 14 bottles of water in her fridge .
      - in her fridge . if she drank 8 of them and then bought 45 more
      - drank 8 of them and then bought 45 more , how many bottles would she
    tokens:
      shape:
      - 33
      target: '[CLS] maria had 14 bottles of water in her fridge . if she drank 8
        of them and then bought 45 more , how many bottles would she have ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: -(R_00, R_01) R_03: =(N_01,
      R_02) R_04: *(N_03, R_00) R_05: +(N_02, R_04) R_06: *(N_05, R_01) R_07: =(R_05,
      R_06) R_08: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the value of the first number minus the second number
      N_02:
      - the value of add to the first number
      N_03:
      - the coefficient of the second number
      N_05:
      - the coefficient of the second number
      X_00:
      - the value of the first number
      X_01:
      - the value of the second number
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the value of the first number minus the second number
      - the value of the first number minus the second number
      - the value of the first number minus the second number
      N_02:
      - the number added to the first number
      - the value to be added to 6 times the first number
      - the value of 7 times the second number minus 6 times the first number
      N_03:
      - the multiplier of the first number
      - the multiplied value of the first number
      - a number multiplied by the first number
      N_05:
      - the ratio of the sum of 6 times the first number and 9 to the second number
      - the multiplied value to the second number that is the same value about added
        9 to 6 times the first number
      - a number multiplied by the second number
      X_00:
      - the value of the first number
      - the value of the first number
      - the value of the first number
      X_01:
      - the value of second number
      - the value of the second number
      - the value of the second number
  info:
    answers:
    - f: '51'
      s: '45'
    item_id: 604cc853117d71c492a62f0b
    numbers:
      N_00: '1'
      N_01: '6'
      N_02: '9'
      N_03: '6'
      N_04: '1'
      N_05: '7'
      N_06: '2'
    split: null
    variables:
    - f
    - s
  text:
    numbers:
      shape:
      - 33
      target: __  0 __ __  1 __ __ __ __ __ __ __ __  2 __  3 __ __  4 __ __ __ __
        __  5 __ __  6 __ __ __ __ __
    raw: one number is 6 more than another number . if you add 9 to 6 times the first
      number , the result is 7 times the second number .
    snippets:
      shape:
      - 7
      - 15
      target:
      - one number is 6 more than another number
      - one number is 6 more than another number . if you
      - than another number . if you add 9 to 6 times the first number ,
      - number . if you add 9 to 6 times the first number , the result
      - you add 9 to 6 times the first number , the result is 7 times
      - the first number , the result is 7 times the second number .
      - ', the result is 7 times the second number .'
    tokens:
      shape:
      - 33
      target: '[CLS] one number is 6 more than another number . if you add 9 to 6
        times the first number , the result is 7 times the second number . [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_02, R_00) R_02: =(N_01, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of students
      N_02:
      - the number of seats on each school bus
      X_00:
      - the number of buses
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of students
      - the total number of students
      - the number of students
      N_02:
      - the number of seats on each school bus
      - the number of seats on each school bus
      - the number of seats on each school bus
      X_00:
      - the number of buses needed to take all the students
      - the number of buses needed
      - the number of buses needed to take students
  info:
    answers:
    - b: '4'
    item_id: 60f9186c90be09b72239efd3
    numbers:
      N_00: '1'
      N_01: '28'
      N_02: '7'
      N_03: '2'
      N_04: '2'
    split: null
    variables:
    - b
  text:
    numbers:
      shape:
      - 33
      target: __ __ __ __ __  0 __ __ __ __ __  1 __ __  2 __ __ __ __  3  3 __ __  4
        __ __ __ __ __ __ __ __ __
    raw: the school is planning a field trip . there are 28 students and 7 seats on
      each school bus . how many buses are needed to take the trip ?
    snippets:
      shape:
      - 5
      - 15
      target:
      - the school is planning a field trip . there are 28 students
      - planning a field trip . there are 28 students and 7 seats on each school
      - trip . there are 28 students and 7 seats on each school bus . how
      - students and 7 seats on each school bus . how many buses are needed to
      - on each school bus . how many buses are needed to take the trip ?
    tokens:
      shape:
      - 33
      target: '[CLS] the school is planning a field trip . there are 28 students and
        7 seats on each school bus . how many buses are needed to take the trip ?
        [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: -(N_00, N_01) R_02: +(N_03, R_01) R_03: =(R_00,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of socks oliver had
      N_01:
      - the number of socks that oliver bought
      N_03:
      - the number of socks bought
      X_00:
      - the total number of socks now
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the initial number of socks
      - the number of oliver's socks
      - the number of socks
      N_01:
      - the number of socks thrown away
      - the number of old socks oliver threw away
      - the number of socks thrown away
      N_03:
      - the number of new socks
      - the number of newly bought socks
      - the number of socks newly bought
      X_00:
      - the total number of socks
      - the number of socks oliver has now
      - the current number of socks
  info:
    answers:
    - n: '33'
    item_id: 60f9186c90be09b72239f14e
    numbers:
      N_00: '11'
      N_01: '4'
      N_02: '1'
      N_03: '26'
      N_04: '1'
    split: null
    variables:
    - n
  text:
    numbers:
      shape:
      - 33
      target: __ __ __  0 __ __ __ __ __ __  1 __  2 __ __ __ __ __ __ __  3 __  4  4
        __ __ __ __ __ __ __ __ __
    raw: oliver had 11 socks . if he threw away 4 old ones that didn ' t fit and bought
      26 new ones , how many socks would he have ?
    snippets:
      shape:
      - 5
      - 15
      target:
      - oliver had 11 socks . if he threw away 4
      - 11 socks . if he threw away 4 old ones that didn ' t fit
      - . if he threw away 4 old ones that didn ' t fit and bought
      - that didn ' t fit and bought 26 new ones , how many socks would
      - ''' t fit and bought 26 new ones , how many socks would he have'
    tokens:
      shape:
      - 33
      target: '[CLS] oliver had 11 socks . if he threw away 4 old ones that didn ''
        t fit and bought 26 new ones , how many socks would he have ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: *(N_01, R_00) R_03: -(R_02,
      R_01) R_04: =(N_00, R_03) R_05: +(R_00, R_01) R_06: =(N_02, R_05) R_07: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the value of the number of lost games minus the number of games they won
      N_01:
      - the multiplier for the number of games
      N_02:
      - the sum of the number of the games kings and the number of games they won
      X_00:
      - the number of games they won
      X_01:
      - the number of the games the kings won
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the value of three times the number of loses minus the number of wins
      - the value of three times lost minus won
      - the value of three times the number of losses minus the number of wins
      N_01:
      - a number in the phrase " three times as many games as "
      - the coefficient of they lost
      - a number in the phrase " three times as many games as they lost "
      N_02:
      - the total number of games
      - the total number of games
      - the total number of games
      X_00:
      - the number of loses
      - the number of lost
      - the number of loses
      X_01:
      - the number of wins
      - the number of won
      - the number of wins
  info:
    answers:
    - l: '21'
      w: '61'
    item_id: 604cc852117d71c492a62bcf
    numbers:
      N_00: '2'
      N_01: '3'
      N_02: '82'
    split: null
    variables:
    - l
    - w
  text:
    numbers:
      shape:
      - 33
      target: __ __ __ __  0 __ __  1 __ __ __ __ __ __ __ __ __ __  2 __ __ __ __
        __ __ __ __ __ __ __ __ __ __
    raw: the kings won two less than three times as many games as they lost . they
      played 82 games . how many wins and loses did the team have ?
    snippets:
      shape:
      - 3
      - 15
      target:
      - the kings won two less than three times as many games
      - the kings won two less than three times as many games as they lost
      - games as they lost . they played 82 games . how many wins and loses
    tokens:
      shape:
      - 33
      target: '[CLS] the kings won two less than three times as many games as they
        lost . they played 82 games . how many wins and loses did the team have ?
        [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: -(N_00, N_01) R_02: +(N_03, R_01) R_03: =(R_00,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of socks
      N_01:
      - the number of socks that didn't fit
      N_03:
      - the number of socks bought
      X_00:
      - the total number of socks now
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the initial number of socks
      - the number of sam's socks
      - the number of socks
      N_01:
      - the number of socks thrown away
      - the number of thrown away socks
      - the number of socks thrown away
      N_03:
      - the number of new socks
      - the number of newly bought socks
      - the number of socks newly bought
      X_00:
      - the total number of socks
      - the number of sam's current socks
      - the current number of socks
  info:
    answers:
    - n: '43'
    item_id: 60f9186c90be09b72239ecc7
    numbers:
      N_00: '10'
      N_01: '3'
      N_02: '1'
      N_03: '36'
      N_04: '1'
    split: null
    variables:
    - n
  text:
    numbers:
      shape:
      - 33
      target: __ __ __  0 __ __ __ __ __ __  1 __  2 __ __ __ __ __ __ __  3 __  4  4
        __ __ __ __ __ __ __ __ __
    raw: sam had 10 socks . if he threw away 3 old ones that didn ' t fit and bought
      36 new ones , how many socks would he have ?
    snippets:
      shape:
      - 5
      - 15
      target:
      - sam had 10 socks . if he threw away 3
      - 10 socks . if he threw away 3 old ones that didn ' t fit
      - . if he threw away 3 old ones that didn ' t fit and bought
      - that didn ' t fit and bought 36 new ones , how many socks would
      - ''' t fit and bought 36 new ones , how many socks would he have'
    tokens:
      shape:
      - 33
      target: '[CLS] sam had 10 socks . if he threw away 3 old ones that didn '' t
        fit and bought 36 new ones , how many socks would he have ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_02, R_00) R_02: =(N_01, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of soccer games during the season
      N_02:
      - the number of soccer games during the season
      X_00:
      - the number of games divided equally
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the total number of soccer games
      - the number of soccer games during the 3 month season
      - the total number of the soccer games
      N_02:
      - the number of months
      - the number of months for playing 27 soccer games
      - number of months
      X_00:
      - the number of soccer games per month
      - the number of soccer games for each month
      - number of soccer games per month
  info:
    answers:
    - p: '9'
    item_id: 60f9186c90be09b72239f1c7
    numbers:
      N_00: '1'
      N_01: '27'
      N_02: '3'
      N_03: '1'
    split: null
    variables:
    - p
  text:
    numbers:
      shape:
      - 33
      target: __ __ __  0 __ __  1 __ __ __ __  2 __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __  3 __ __ __ __
    raw: there were a total of 27 soccer games during the 3 month season . if the
      games are equally divided , how many soccer games are played a month ?
    snippets:
      shape:
      - 4
      - 15
      target:
      - there were a total of 27 soccer games during the
      - there were a total of 27 soccer games during the 3 month season
      - total of 27 soccer games during the 3 month season . if the games are
      - ', how many soccer games are played a month ?'
    tokens:
      shape:
      - 33
      target: '[CLS] there were a total of 27 soccer games during the 3 month season
        . if the games are equally divided , how many soccer games are played a month
        ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of bananas david has
      N_01:
      - the number of bananas given to david
      X_00:
      - the total number of bananas david has
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of bananas david has
      - the number of david's bananas
      - the number of david's bananas
      N_01:
      - the number of additional bananas david gets from christopher
      - the number of bananas david newly got from christopher
      - the number of bananas given to david by christopher
      X_00:
      - the total number of bananas david has after receiving some
      - the whole number of david's bananas
      - the total number of bananas held by david
  info:
    answers:
    - b: '58'
    item_id: 60f9186c90be09b72239efb4
    numbers:
      N_00: '8'
      N_01: '50'
      N_02: '9'
    split: null
    variables:
    - b
  text:
    numbers:
      shape:
      - 33
      target: __ __ __  0 __ __ __ __  1 __ __ __ __ __ __ __ __  2 __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __
    raw: david has 8 bananas . he gets 50 more from christopher . later , david buys
      9 cards at the store . how many bananas does david have in all ?
    snippets:
      shape:
      - 3
      - 15
      target:
      - david has 8 bananas . he gets 50 more from
      - david has 8 bananas . he gets 50 more from christopher . later , david
      - from christopher . later , david buys 9 cards at the store . how many
    tokens:
      shape:
      - 33
      target: '[CLS] david has 8 bananas . he gets 50 more from christopher . later
        , david buys 9 cards at the store . how many bananas does david have in all
        ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_02, R_00) R_02: +(N_00, N_01) R_03: =(R_01,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of dollars earned by paul
      N_02:
      - the number of dollars spent a week
      X_00:
      - the number of dollars spent
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of dollars paul earned from mowing lawns
      - the number of dollars by mowing lawns
      - amount of money paul makes by mowing
      N_01:
      - the number of dollars paul earned from weed eating
      - the number of dollars by weed eating
      - amount of money paul makes by weed - eating
      N_02:
      - the number of dollars paul spends per week
      - the number of dollars he spends a week
      - how much money he uses a week
      X_00:
      - the number of weeks paul last with his money
      - the number of weeks the money will last
      - how long paul can last with the money he made
  info:
    answers:
    - w: '2'
    item_id: 60f9186c90be09b72239f06e
    numbers:
      N_00: '3'
      N_01: '3'
      N_02: '3'
      N_03: '1'
    split: null
    variables:
    - w
  text:
    numbers:
      shape:
      - 33
      target: __ __ __  0 __ __ __ __ __ __  1 __ __ __ __ __ __ __ __  2 __  3 __
        __ __ __ __ __ __ __ __ __ __
    raw: 'paul made 3 dollars mo ##wing lawn ##s and 3 dollars weed eating . if he
      only spent 3 dollars a week , how long would the money last him ?'
    snippets:
      shape:
      - 4
      - 15
      target:
      - 'paul made 3 dollars mo ##wing lawn ##s and 3'
      - '3 dollars mo ##wing lawn ##s and 3 dollars weed eating . if he only'
      - weed eating . if he only spent 3 dollars a week , how long would
      - . if he only spent 3 dollars a week , how long would the money
    tokens:
      shape:
      - 33
      target: '[CLS] paul made 3 dollars mo ##wing lawn ##s and 3 dollars weed eating
        . if he only spent 3 dollars a week , how long would the money last him ?
        [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_01, R_00) R_02: =(N_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of seeds to contain each packet
      N_01:
      - the number of seeds for every packet
      X_00:
      - the number of packets needed
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the total number of seedlings
      - the total number of seedlings
      - the number of seedlings in packets
      N_01:
      - the number of seeds contained in each packet
      - the number of seedlings in each packet
      - the number of seeds in each packet
      X_00:
      - the number of packets needed
      - the number of packets
      - the number of needed packets
  info:
    answers:
    - p: '60'
    item_id: 60f9186c90be09b72239eb9b
    numbers:
      N_00: '420'
      N_01: '7'
    split: null
    variables:
    - p
  text:
    numbers:
      shape:
      - 36
      target: __ __ __ __ __ __ __ __ __ __  0 __ __ __ __ __ __ __ __ __ __ __  1
        __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'the junior ranger asked christian to help him place 420 seed ##lings in
      packets . if every packet needs to contain 7 seeds , how many packets do they
      need ?'
    snippets:
      shape:
      - 2
      - 15
      target:
      - 'ranger asked christian to help him place 420 seed ##lings in packets . if
        every'
      - . if every packet needs to contain 7 seeds , how many packets do they
    tokens:
      shape:
      - 36
      target: '[CLS] the junior ranger asked christian to help him place 420 seed
        ##lings in packets . if every packet needs to contain 7 seeds , how many packets
        do they need ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_02) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of houses in lincoln county
      N_02:
      - the number of houses built more
      X_00:
      - the number of houses now
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - number of houses originally
      - the original number of houses in lincoln county
      - the number of houses in the past
      N_02:
      - number of houses built
      - the additional number of houses built on lincoln county
      - the number of houses developers built more
      X_00:
      - the total number of houses
      - the total number of houses in lincoln county now
      - the number of houses in now
  info:
    answers:
    - h: '118558'
    item_id: 60f9186c90be09b72239ea0a
    numbers:
      N_00: '20817'
      N_01: '1'
      N_02: '97741'
    split: null
    variables:
    - h
  text:
    numbers:
      shape:
      - 36
      target: __ __ __ __  0  0 __ __ __ __ __ __  1 __ __ __ __ __  2  2  2 __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'there were originally 208 ##17 houses in lincoln county . during a housing
      boom , developers built 97 ##7 ##41 more . how many houses are there now in
      lincoln county ?'
    snippets:
      shape:
      - 3
      - 15
      target:
      - 'there were originally 208 ##17 houses in lincoln county . during'
      - '##17 houses in lincoln county . during a housing boom , developers built
        97 ##7'
      - 'during a housing boom , developers built 97 ##7 ##41 more . how many houses'
    tokens:
      shape:
      - 36
      target: '[CLS] there were originally 208 ##17 houses in lincoln county . during
        a housing boom , developers built 97 ##7 ##41 more . how many houses are there
        now in lincoln county ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: -(N_00, N_01) R_02: *(N_02, R_01) R_03: =(R_00,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of boxes of chocolate candy
      N_01:
      - the number of pieces of chocolate ned gave to his little brother
      N_02:
      - the number of pieces for each box
      X_00:
      - the total number of pieces of ned's boxes
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the initial number of boxes
      - the number of boxes
      - the number of boxes of chocolate candy ned bought
      N_01:
      - the number of boxes given to the brother
      - the number of boxes given
      - the number of boxes of chocolate candy gave to his little brother
      N_02:
      - the number of pieces inside each box
      - the pieces of chocolate candies in the box
      - the number of pieces inside each box
      X_00:
      - the total number of pieces
      - the quantity of remain pieces
      - the total number of pieces
  info:
    answers:
    - p: '42'
    item_id: 60f9186c90be09b72239f124
    numbers:
      N_00: '14'
      N_01: '7'
      N_02: '6'
    split: null
    variables:
    - p
  text:
    numbers:
      shape:
      - 36
      target: __ __ __  0 __ __ __ __ __ __  1 __ __ __ __ __ __ __ __ __  2 __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: ned bought 14 boxes of chocolate candy and gave 7 to his little brother .
      if each box has 6 pieces inside it , how many pieces did ned still have ?
    snippets:
      shape:
      - 3
      - 15
      target:
      - ned bought 14 boxes of chocolate candy and gave 7
      - 14 boxes of chocolate candy and gave 7 to his little brother . if each
      - little brother . if each box has 6 pieces inside it , how many pieces
    tokens:
      shape:
      - 36
      target: '[CLS] ned bought 14 boxes of chocolate candy and gave 7 to his little
        brother . if each box has 6 pieces inside it , how many pieces did ned still
        have ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: -(N_00, N_01) R_02: *(N_02, R_01) R_03: =(R_00,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of boxes of chocolate candy tom bought
      N_01:
      - the number of pieces of chocolate tom gave to his little brother
      N_02:
      - the number of pieces for each box
      X_00:
      - the total number of pieces of chocolate tom still bought
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the initial number of boxes
      - the number of boxes of chocolate candy tom bought
      - the number of boxes of chocolate candy tom bought
      N_01:
      - the number of boxes given to the brother
      - the number of boxes of chocolate candy gave to his little brother
      - the number of boxes of chocolate candy he gave to his little brother
      N_02:
      - the number of pieces inside each box
      - the number of pieces inside each box
      - the number of chocolate candies in each box
      X_00:
      - the total number of pieces
      - the total number of pieces
      - the number of chocolate candies tom still has
  info:
    answers:
    - p: '30'
    item_id: 60f9186c90be09b72239f1c2
    numbers:
      N_00: '12'
      N_01: '7'
      N_02: '6'
    split: null
    variables:
    - p
  text:
    numbers:
      shape:
      - 36
      target: __ __ __  0 __ __ __ __ __ __  1 __ __ __ __ __ __ __ __ __  2 __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: tom bought 12 boxes of chocolate candy and gave 7 to his little brother .
      if each box has 6 pieces inside it , how many pieces did tom still have ?
    snippets:
      shape:
      - 3
      - 15
      target:
      - tom bought 12 boxes of chocolate candy and gave 7
      - 12 boxes of chocolate candy and gave 7 to his little brother . if each
      - little brother . if each box has 6 pieces inside it , how many pieces
    tokens:
      shape:
      - 36
      target: '[CLS] tom bought 12 boxes of chocolate candy and gave 7 to his little
        brother . if each box has 6 pieces inside it , how many pieces did tom still
        have ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(R_00, R_01) R_03: =(N_01,
      R_02) R_04: *(N_02, R_00) R_05: -(R_01, R_04) R_06: =(N_03, R_05) R_07: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the sum of the smaller number and the larger number
      N_02:
      - the coefficient of the smaller number
      N_03:
      - the value of three times the smaller number minus the larger number
      X_00:
      - the value of the smaller number
      X_01:
      - the value of the smaller number
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the sum of the 2 numbers
      - the sum of 2 numbers
      - the sum of 2 numbers
      N_02:
      - a number in the phrase " three times the smaller number "
      - a number in the phrase " three times the smaller number "
      - a number in the phrase " three "
      N_03:
      - the value of the larger number minus three times the smaller number
      - the value of the larger number minus 3 times the smaller number
      - the value of the larger number minus 3 times the smaller number
      X_00:
      - the smaller number
      - the smaller number
      - the value of the smaller number
      X_01:
      - the larger number
      - the larger number
      - the value of the larger number
  info:
    answers:
    - l: '109'
      s: '29'
    item_id: 604cc853117d71c492a62c80
    numbers:
      N_00: '2'
      N_01: '138'
      N_02: '3'
      N_03: '22'
      N_04: '2'
    split: null
    variables:
    - s
    - l
  text:
    numbers:
      shape:
      - 36
      target: __ __ __ __  0 __ __  1 __ __  2 __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __  3 __ __ __  4 __ __ __ __ __
    raw: 'the sum of 2 numbers is 138 . if three times the smaller number is sub ##tracted
      from the larger number , the result is 22 . find the two numbers .'
    snippets:
      shape:
      - 5
      - 15
      target:
      - the sum of 2 numbers is 138 . if three times
      - the sum of 2 numbers is 138 . if three times the smaller number
      - 'of 2 numbers is 138 . if three times the smaller number is sub ##tracted'
      - the larger number , the result is 22 . find the two numbers .
      - the result is 22 . find the two numbers .
    tokens:
      shape:
      - 36
      target: '[CLS] the sum of 2 numbers is 138 . if three times the smaller number
        is sub ##tracted from the larger number , the result is 22 . find the two
        numbers . [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: -(N_00, N_01) R_02: *(N_02, R_01) R_03: =(R_00,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of boxes of chocolate candy dave bought
      N_01:
      - the number of pieces of chocolate given to each box
      N_02:
      - the number of pieces for each box
      X_00:
      - the total number of pieces dave still bought
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of boxes
      - the number of boxes of chocolate candy dave bought
      - the number of boxes of chocolate candy dave bought
      N_01:
      - the number of boxes given
      - the number of boxes of chocolate candy gave to his little brother
      - the number of boxes of chocolate candy he gave to his little brother
      N_02:
      - the pieces of chocolate candies in the box
      - the number of pieces inside each box
      - the number of chocolate candies in each box
      X_00:
      - the quantity of remain pieces
      - the total number of pieces
      - the total number of chocolate candies dave still has
  info:
    answers:
    - p: '21'
    item_id: 60f9186c90be09b72239eb88
    numbers:
      N_00: '12'
      N_01: '5'
      N_02: '3'
    split: null
    variables:
    - p
  text:
    numbers:
      shape:
      - 36
      target: __ __ __  0 __ __ __ __ __ __  1 __ __ __ __ __ __ __ __ __  2 __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: dave bought 12 boxes of chocolate candy and gave 5 to his little brother
      . if each box has 3 pieces inside it , how many pieces did dave still have ?
    snippets:
      shape:
      - 3
      - 15
      target:
      - dave bought 12 boxes of chocolate candy and gave 5
      - 12 boxes of chocolate candy and gave 5 to his little brother . if each
      - little brother . if each box has 3 pieces inside it , how many pieces
    tokens:
      shape:
      - 36
      target: '[CLS] dave bought 12 boxes of chocolate candy and gave 5 to his little
        brother . if each box has 3 pieces inside it , how many pieces did dave still
        have ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_01, N_02) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the amount of silk dyed to fill an order
      N_02:
      - the amount of pink green green green green green green green green green green
        green green green green green green green green green green green green green
        dyed
      X_00:
      - the amount of silk it dyed
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of yards of dyed green silk to fill the order
      - the number of yards of silk the factory dyed green
      - the number of area of yards of silk green dyed in the factory
      N_02:
      - the number of yards of dyed pink silk to fill the order
      - the number of yards the factory dyed pink
      - the number of area of yards of silk pink dyed in the factory
      X_00:
      - the total number of yards of dyed silk to fill the order
      - the total number of yards of silk the factory dyed
      - the total number of area of yards of silk green and pink dyed in the factory
  info:
    answers:
    - y: '111421'
    item_id: 60f9186c90be09b72239ec6f
    numbers:
      N_00: '1'
      N_01: '61921'
      N_02: '49500'
    split: null
    variables:
    - y
  text:
    numbers:
      shape:
      - 36
      target: __ __ __  0 __ __ __ __ __  1  1  1 __ __ __ __ __  2  2 __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'to fill an order , the factory dyed 61 ##9 ##21 yards of silk green and
      495 ##00 yards pink . how many yards of silk did it dye for that order ?'
    snippets:
      shape:
      - 3
      - 15
      target:
      - 'to fill an order , the factory dyed 61 ##9'
      - 'fill an order , the factory dyed 61 ##9 ##21 yards of silk green and'
      - '##9 ##21 yards of silk green and 495 ##00 yards pink . how many yards'
    tokens:
      shape:
      - 36
      target: '[CLS] to fill an order , the factory dyed 61 ##9 ##21 yards of silk
        green and 495 ##00 yards pink . how many yards of silk did it dye for that
        order ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_02, N_03) R_02: *(N_01, R_01) R_03: =(R_00,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of parrots in the pet store
      N_02:
      - the number of parrots in the pet store
      X_00:
      - the total number of birds
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of bird cages
      - the number of bird cages
      - the number of bird cages
      N_02:
      - the number of parrots in each cage
      - the number of parrots in each cage
      - the number of parrots in each cage
      N_03:
      - the number of parakeets in each cage
      - the number of parakeets in each cage
      - the number of parakeets in each cage
      X_00:
      - the total number of birds
      - the total number of birds
      - the whole number of birds
  info:
    answers:
    - b: '72'
    item_id: 60f9186c90be09b72239eb93
    numbers:
      N_00: '1'
      N_01: '9'
      N_02: '2'
      N_03: '6'
    split: null
    variables:
    - b
  text:
    numbers:
      shape:
      - 36
      target: __  0 __ __ __  1 __ __ __ __ __ __ __  2 __ __ __  3 __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'a pet store has 9 bird cages . if each cage has 2 parrot ##s and 6 para
      ##kee ##ts in it , how many birds does the pet store have total ?'
    snippets:
      shape:
      - 4
      - 15
      target:
      - a pet store has 9 bird cages .
      - a pet store has 9 bird cages . if each cage has
      - 'bird cages . if each cage has 2 parrot ##s and 6 para ##kee ##ts'
      - 'each cage has 2 parrot ##s and 6 para ##kee ##ts in it , how'
    tokens:
      shape:
      - 36
      target: '[CLS] a pet store has 9 bird cages . if each cage has 2 parrot ##s
        and 6 para ##kee ##ts in it , how many birds does the pet store have total
        ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_02, N_03) R_02: *(N_01, R_01) R_03: =(R_00,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of parrots in the pet store
      N_02:
      - the number of parrots in the pet store
      X_00:
      - the total number of birds
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of bird cages
      - the number of bird cages
      - the number of bird cages
      N_02:
      - the number of parrots in each cage
      - the number of parrots in each cage
      - the number of parrots in each cage
      N_03:
      - the number of parakeets in each cage
      - the number of parakeets in each cage
      - the number of parakeets in each cage
      X_00:
      - the total number of birds
      - the whole number of birds
      - the number of all birds
  info:
    answers:
    - b: '72'
    item_id: 60f9186c90be09b72239f166
    numbers:
      N_00: '1'
      N_01: '8'
      N_02: '2'
      N_03: '7'
    split: null
    variables:
    - b
  text:
    numbers:
      shape:
      - 36
      target: __  0 __ __ __  1 __ __ __ __ __ __ __  2 __ __ __  3 __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'a pet store has 8 bird cages . if each cage has 2 parrot ##s and 7 para
      ##kee ##ts in it , how many birds does the pet store have total ?'
    snippets:
      shape:
      - 4
      - 15
      target:
      - a pet store has 8 bird cages .
      - a pet store has 8 bird cages . if each cage has
      - 'bird cages . if each cage has 2 parrot ##s and 7 para ##kee ##ts'
      - 'each cage has 2 parrot ##s and 7 para ##kee ##ts in it , how'
    tokens:
      shape:
      - 36
      target: '[CLS] a pet store has 8 bird cages . if each cage has 2 parrot ##s
        and 7 para ##kee ##ts in it , how many birds does the pet store have total
        ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_02) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of people who born in a country
      N_02:
      - the number of people who immigrated to it
      X_00:
      - the whole number of people born
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of people born in a country
      - the number of people who were born in a country
      - the number of people born in the country
      N_02:
      - the number of immigrants to the country
      - the number of people who immigrated to it
      - the number of people that immigrated to the country
      X_00:
      - the whole population of the country
      - the total number of new people
      - the total number of newborn people and people who immigrated to the country
  info:
    answers:
    - p: '106491'
    item_id: 60f9186c90be09b72239eb63
    numbers:
      N_00: '90171'
      N_01: '1'
      N_02: '16320'
    split: null
    variables:
    - p
  text:
    numbers:
      shape:
      - 36
      target: __ __ __ __  0  0  0 __ __ __ __  1 __ __ __  2  2 __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'last year , 90 ##17 ##1 people were born in a country , and 1632 ##0 people
      immigrated to it . how many new people began living in the country last year
      ?'
    snippets:
      shape:
      - 3
      - 15
      target:
      - 'last year , 90 ##17 ##1 people were born in a'
      - '90 ##17 ##1 people were born in a country , and 1632 ##0 people immigrated'
      - 'were born in a country , and 1632 ##0 people immigrated to it . how'
    tokens:
      shape:
      - 36
      target: '[CLS] last year , 90 ##17 ##1 people were born in a country , and 1632
        ##0 people immigrated to it . how many new people began living in the country
        last year ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_02, N_03) R_02: *(N_01, R_01) R_03: =(R_00,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of bird cages
      N_02:
      - the number of parrots in the pet store
      X_00:
      - the total number of birds
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of bird cages
      - the number of bird cages
      - the number of bird cages
      N_02:
      - the number of parrots in each cage
      - the number of parrots in each cage
      - the number of parrots in each cage
      N_03:
      - the number of parakeets in each cage
      - the number of parakeets in each cage
      - the number of parakeets in each cage
      X_00:
      - the total number of birds
      - the whole number of birds
      - the number of all birds
  info:
    answers:
    - b: '40'
    item_id: 60f9186c90be09b72239f281
    numbers:
      N_00: '1'
      N_01: '4'
      N_02: '8'
      N_03: '2'
    split: null
    variables:
    - b
  text:
    numbers:
      shape:
      - 36
      target: __  0 __ __ __  1 __ __ __ __ __ __ __  2 __ __ __  3 __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'a pet store has 4 bird cages . if each cage has 8 parrot ##s and 2 para
      ##kee ##ts in it , how many birds does the pet store have total ?'
    snippets:
      shape:
      - 4
      - 15
      target:
      - a pet store has 4 bird cages .
      - a pet store has 4 bird cages . if each cage has
      - 'bird cages . if each cage has 8 parrot ##s and 2 para ##kee ##ts'
      - 'each cage has 8 parrot ##s and 2 para ##kee ##ts in it , how'
    tokens:
      shape:
      - 36
      target: '[CLS] a pet store has 4 bird cages . if each cage has 8 parrot ##s
        and 2 para ##kee ##ts in it , how many birds does the pet store have total
        ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_02, N_03) R_02: *(N_01, R_01) R_03: =(R_00,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of parrots in the pet store
      N_02:
      - the number of parrots in the pet store
      X_00:
      - the total number of birds
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of bird cages
      - the number of bird cages
      - the number of bird cages
      N_02:
      - the number of parrots in each cage
      - the number of parrots in each cage
      - the number of parrots in each cage
      N_03:
      - the number of parakeets in each cage
      - the number of parakeets in each cage
      - the number of parakeets in each cage
      X_00:
      - the total number of birds
      - the whole number of birds
      - the number of all birds
  info:
    answers:
    - b: '54'
    item_id: 60f9186c90be09b72239ec41
    numbers:
      N_00: '1'
      N_01: '6'
      N_02: '2'
      N_03: '7'
    split: null
    variables:
    - b
  text:
    numbers:
      shape:
      - 36
      target: __  0 __ __ __  1 __ __ __ __ __ __ __  2 __ __ __  3 __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'a pet store has 6 bird cages . if each cage has 2 parrot ##s and 7 para
      ##kee ##ts in it , how many birds does the pet store have total ?'
    snippets:
      shape:
      - 4
      - 15
      target:
      - a pet store has 6 bird cages .
      - a pet store has 6 bird cages . if each cage has
      - 'bird cages . if each cage has 2 parrot ##s and 7 para ##kee ##ts'
      - 'each cage has 2 parrot ##s and 7 para ##kee ##ts in it , how'
    tokens:
      shape:
      - 36
      target: '[CLS] a pet store has 6 bird cages . if each cage has 2 parrot ##s
        and 7 para ##kee ##ts in it , how many birds does the pet store have total
        ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_01) R_02: *(0.1, R_01) R_03: =(R_00,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of dimes joan found
      N_01:
      - the number of dimes joan found
      X_00:
      - the total amount of money joan found
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of dimes found in her jacket
      - the number of dimes found in the jacket
      - the dimes found in the jacket
      N_01:
      - the number of dimes found in her shorts
      - the number of dimes found in the shorts
      - the dimes found in the shorts
      X_00:
      - the total value of the dimes found
      - the value of found money in dollars
      - the total amount of money found in dollars
  info:
    answers:
    - t: '1.90000000000000'
    item_id: 60f9186c90be09b72239eaf8
    numbers:
      N_00: '15'
      N_01: '4'
    split: null
    variables:
    - t
  text:
    numbers:
      shape:
      - 36
      target: __ __ __ __ __ __ __ __ __ __ __ __ __  0 __ __ __ __ __ __  1 __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'while digging through her clothes for ice cream money , joan found 15 dime
      ##s in her jacket and 4 dime ##s in her shorts . how much money did joan find
      ?'
    snippets:
      shape:
      - 2
      - 15
      target:
      - 'for ice cream money , joan found 15 dime ##s in her jacket and 4'
      - '15 dime ##s in her jacket and 4 dime ##s in her shorts . how'
    tokens:
      shape:
      - 36
      target: '[CLS] while digging through her clothes for ice cream money , joan
        found 15 dime ##s in her jacket and 4 dime ##s in her shorts . how much money
        did joan find ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_01) R_02: *(N_02, R_01) R_03: =(R_00,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of pages
      N_01:
      - the number of pages of reading homework homework
      N_02:
      - the number of problems on each page
      X_00:
      - the total number of problems she had
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of pages of math homework
      - the number of pages of tiffany's math homework
      - the number of pages of math homework
      N_01:
      - the number of pages of reading homework
      - the number of pages of tiffany's reading homework
      - the number of pages of reading homework
      N_02:
      - the number of problems that each page had
      - the number of problems on each page
      - the number of problems on each page
      X_00:
      - the number of problems in total
      - the total number of problems on all pages
      - the total number of problems
  info:
    answers:
    - p: '30'
    item_id: 60f9186c90be09b72239f039
    numbers:
      N_00: '6'
      N_01: '4'
      N_02: '3'
    split: null
    variables:
    - p
  text:
    numbers:
      shape:
      - 36
      target: __ __ __  0 __ __ __ __ __  1 __ __ __ __ __ __ __ __ __  2 __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: tiffany had 6 pages of math homework and 4 pages of reading homework . if
      each page had 3 problems on it , how many problems did she have to complete
      in total ?
    snippets:
      shape:
      - 3
      - 15
      target:
      - tiffany had 6 pages of math homework and 4 pages
      - had 6 pages of math homework and 4 pages of reading homework . if each
      - reading homework . if each page had 3 problems on it , how many problems
    tokens:
      shape:
      - 36
      target: '[CLS] tiffany had 6 pages of math homework and 4 pages of reading homework
        . if each page had 3 problems on it , how many problems did she have to complete
        in total ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_01) R_02: *(N_02, R_01) R_03: =(R_00,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of pages
      N_01:
      - the number of pages of reading homework homework
      N_02:
      - the number of problems inside each page
      X_00:
      - the total number of problems
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - number of pages of math homework
      - the number of pages of katie's math homework
      - the number of pages of math homework
      N_01:
      - number of pages of reading homework
      - the number of pages of katie's reading homework
      - the number of pages of reading homework
      N_02:
      - number of problems on each page
      - the number of problems on each page
      - the number of problems on each page
      X_00:
      - total number of problems in total
      - the total number of problems on all pages
      - the total number of problems
  info:
    answers:
    - p: '90'
    item_id: 60f9186c90be09b72239eecf
    numbers:
      N_00: '7'
      N_01: '3'
      N_02: '9'
    split: null
    variables:
    - p
  text:
    numbers:
      shape:
      - 36
      target: __ __ __  0 __ __ __ __ __  1 __ __ __ __ __ __ __ __ __  2 __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: katie had 7 pages of math homework and 3 pages of reading homework . if each
      page had 9 problems on it , how many problems did she have to complete in total
      ?
    snippets:
      shape:
      - 3
      - 15
      target:
      - katie had 7 pages of math homework and 3 pages
      - had 7 pages of math homework and 3 pages of reading homework . if each
      - reading homework . if each page had 9 problems on it , how many problems
    tokens:
      shape:
      - 36
      target: '[CLS] katie had 7 pages of math homework and 3 pages of reading homework
        . if each page had 9 problems on it , how many problems did she have to complete
        in total ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: /(1, N_01) R_02: /(1, N_02) R_03: +(R_01, R_02)
      R_04: *(R_00, R_03) R_05: =(1, R_04) R_06: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the hours adam requires to paint a house
      N_02:
      - the hours audrey requires to paint a house
      X_00:
      - the hours consumed if they work together
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of hours that adam can paint a house
      - the time for adam to paint a house
      - the hours it takes adam to paint a room
      N_02:
      - the number of hours that audrey can paint a house
      - the time for audrey to paint a house
      - the hours it takes audrey to paint a room
      X_00:
      - the total number of hours it takes to paint a house if adam and audrey work
        together
      - the hours it would take if adam and audrey paint together
      - the hours it takes adam and audrey to paint a room
  info:
    answers:
    - h: '2.72727272727273'
    item_id: 604cc853117d71c492a6309a
    numbers:
      N_00: '1'
      N_01: '5'
      N_02: '6'
    split: null
    variables:
    - h
  text:
    numbers:
      shape:
      - 36
      target: __ __ __ __  0 __ __  1 __ __ __ __ __ __ __ __ __  2 __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: adam can paint a house in 5 hours . audrey can paint the same house in 6
      hours . if they work together , how long will it take to paint the house ?
    snippets:
      shape:
      - 3
      - 15
      target:
      - adam can paint a house in 5 hours . audrey can
      - adam can paint a house in 5 hours . audrey can paint the same
      - audrey can paint the same house in 6 hours . if they work together ,
    tokens:
      shape:
      - 36
      target: '[CLS] adam can paint a house in 5 hours . audrey can paint the same
        house in 6 hours . if they work together , how long will it take to paint
        the house ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 15
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_02, R_00) R_02: +(N_00, N_01) R_03: =(R_01,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of math problems
      N_01:
      - the number of spelling problems
      N_02:
      - the number of problems already solved
      X_00:
      - the number of problems to finish
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of math problems
      - the number of math problems of homework
      - the number of math problems
      N_01:
      - the number of spelling problems
      - the number of spelling problems of homework
      - the number of spelling problems
      N_02:
      - the number of nancy's solving problem per hour
      - the number of solving problems in an hour
      - the number of the problems to finish in an hour
      X_00:
      - the ratio of total problems to nancy's solving problems per hour
      - the total hour for solving all problems
      - the hours it takes her to finish all the problems
  info:
    answers:
    - h: '4'
    item_id: 60f9186c90be09b72239e98c
    numbers:
      N_00: '17'
      N_01: '15'
      N_02: '8'
      N_03: '1'
    split: null
    variables:
    - h
  text:
    numbers:
      shape:
      - 40
      target: __ __ __ __ __ __  0 __ __ __  1 __ __ __ __ __ __ __  2 __ __  3 __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: for homework , nancy had 17 math problems and 15 spelling problems . if she
      can finish 8 problems in an hour , how long will it take her to finish all the
      problems ?
    snippets:
      shape:
      - 4
      - 15
      target:
      - for homework , nancy had 17 math problems and 15 spelling problems .
      - ', nancy had 17 math problems and 15 spelling problems . if she can finish'
      - spelling problems . if she can finish 8 problems in an hour , how long
      - if she can finish 8 problems in an hour , how long will it take
    tokens:
      shape:
      - 40
      target: '[CLS] for homework , nancy had 17 math problems and 15 spelling problems
        . if she can finish 8 problems in an hour , how long will it take her to finish
        all the problems ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 15
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: __NEW_VAR(, ) R_03: +(R_00,
      R_01) R_04: =(R_02, R_03) R_05: *(N_01, R_02) R_06: =(R_00, R_05) R_07: /(N_02,
      100) R_08: *(R_00, R_07) R_09: /(N_03, 100) R_10: *(R_01, R_09) R_11: +(R_08,
      R_10) R_12: =(N_04, R_11) R_13: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the interest rate of the capital
      N_02:
      - the income from the capital
      N_03:
      - the remainder of the capital
      N_04:
      - the total income of the capital and the 4 % capital
      X_00:
      - the number of dollars invested in the capital
      X_01:
      - the number of the remainder of the capital
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the fraction of the capital invested in the first investment
      - the ratio of capital invested at 3 % interests to all of capital
      - the amount of his capital the man invests at 3 %
      N_02:
      - the interest rate of the first investment which is considered as income
      - the number of interests of 3 %
      - the interest rate of 0. 333333 of the capital
      N_03:
      - the interest rate of the second investment which is considered as income
      - the number of interests of 4 %
      - the interest rate of the rest of the capital
      N_04:
      - the total income from interest
      - the number of income for interests in dollars
      - the total income of the man
      X_00:
      - the amount of capital invested in the first investment
      - the number of dollars invested in 3 % interests
      - the 3 % of the capital
      X_01:
      - the amount of capital invested in the second investment
      - the number of dollars invested in 4 % interests
      - the rest of the capital
      X_02:
      - the amount of capital
      - the total number of dollars invested in 3 % or 4 %
      - the total amount of the capital
  info:
    answers:
    - c: '1199999.89090910'
      p1: '399999.563636403'
      p2: '800000.327272697'
    item_id: 60f9186c90be09b72239efde
    numbers:
      N_00: '1'
      N_01: '0.333333000000000'
      N_02: '3'
      N_03: '4'
      N_04: '44000'
    split: null
    variables:
    - p1
    - p2
    - c
  text:
    numbers:
      shape:
      - 40
      target: __  0 __ __ __  1  1  1  1  1 __ __ __ __  2 __ __ __ __ __  3 __ __
        __ __ __ __ __ __ __ __ __  4  4 __ __ __ __ __ __
    raw: 'a man invest ##s 0 . 333 ##33 ##3 of his capital at 3 % and the remainder
      at 4 % . what is the capital if his total income is 440 ##00 dollars ?'
    snippets:
      shape:
      - 5
      - 15
      target:
      - 'a man invest ##s 0 . 333 ##33'
      - 'a man invest ##s 0 . 333 ##33 ##3 of his capital'
      - '333 ##33 ##3 of his capital at 3 % and the remainder at 4 %'
      - at 3 % and the remainder at 4 % . what is the capital if
      - 'the capital if his total income is 440 ##00 dollars ?'
    tokens:
      shape:
      - 40
      target: '[CLS] a man invest ##s 0 . 333 ##33 ##3 of his capital at 3 % and the
        remainder at 4 % . what is the capital if his total income is 440 ##00 dollars
        ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 15
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(R_00, R_01) R_03: =(N_00,
      R_02) R_04: *(0.05, R_00) R_05: *(0.1, R_01) R_06: +(R_04, R_05) R_07: =(N_01,
      R_06) R_08: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the total number of coins
      N_01:
      - the total value of coins
      X_00:
      - the number of nickels
      X_01:
      - the number of dimes
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the total number of nickels and dimes
      - the number of coins
      - the number of nickels and dimes
      N_01:
      - the total value of nickels and dimes
      - the worth of coins in dollars
      - the total value of nickels and dimes combined
      X_00:
      - the number of nickels
      - the number of nickels
      - the number of nickels
      X_01:
      - the number of dimes
      - the number of dimes
      - the number of dimes
  info:
    answers:
    - d: '24'
      n: '4'
    item_id: 604cc853117d71c492a62d54
    numbers:
      N_00: '28'
      N_01: '2.60000000000000'
    split: null
    variables:
    - n
    - d
  text:
    numbers:
      shape:
      - 40
      target: __ __ __ __ __ __ __ __ __ __ __ __ __ __ __  0 __ __ __  1  1  1 __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'george saves nickel ##s and dime ##s for toll ##s . if he has 28 coins worth
      $ 2 . 60 , how many are nickel ##s , and how many are dime ##s ?'
    snippets:
      shape:
      - 2
      - 15
      target:
      - 'for toll ##s . if he has 28 coins worth $ 2 . 60 ,'
      - if he has 28 coins worth $ 2 . 60 , how many are nickel
    tokens:
      shape:
      - 40
      target: '[CLS] george saves nickel ##s and dime ##s for toll ##s . if he has
        28 coins worth $ 2 . 60 , how many are nickel ##s , and how many are dime
        ##s ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 15
    tokens: 'R_00: __NEW_VAR(, ) R_01: -(N_01, N_03) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of football games this year
      N_02:
      - the number of football games keith played at night
      N_03:
      - the number of football games keith missed
      X_00:
      - the number of football games keith attended
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of football games this year in total
      - the number of football games
      - the total number of games
      N_03:
      - the number of football games keith missed this year
      - the number of football games that keith missed
      - the number of games keith missed
      X_00:
      - the number of football games keith went to this year
      - the number of football games that keith went to
      - the number of games keith attended
  info:
    answers:
    - g: '4'
    item_id: 60f9186c90be09b72239f251
    numbers:
      N_00: '1'
      N_01: '8'
      N_02: '4'
      N_03: '4'
    split: null
    variables:
    - g
  text:
    numbers:
      shape:
      - 40
      target: __ __ __  0 __ __  1 __ __ __ __ __  2 __ __ __ __ __ __ __  3 __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: there were a total of 8 football games this year . 4 are played at night
      . keith missed 4 of the games . how many football games did keith go to in total
      ?
    snippets:
      shape:
      - 4
      - 15
      target:
      - there were a total of 8 football games this year
      - there were a total of 8 football games this year . 4 are
      - of 8 football games this year . 4 are played at night . keith missed
      - are played at night . keith missed 4 of the games . how many football
    tokens:
      shape:
      - 40
      target: '[CLS] there were a total of 8 football games this year . 4 are played
        at night . keith missed 4 of the games . how many football games did keith
        go to in total ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 15
    tokens: 'R_00: __NEW_VAR(, ) R_01: -(N_00, N_01) R_02: *(N_02, R_01) R_03: =(R_00,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of boxes of chocolate candy kaleb bought
      N_01:
      - the number of pieces of chocolate kaleb gave to his little brother
      N_02:
      - the number of pieces inside each box
      X_00:
      - the total number of pieces of kalebb still bought
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the initial number of boxes
      - the number of boxes
      - the number of boxes of chocolate candy kaleb bought
      N_01:
      - the number of boxes given to the brother
      - the number of boxes given
      - the number of boxes of chocolate candy he gave to his little brother
      N_02:
      - the number of pieces inside each box
      - the pieces of chocolate candies in the box
      - the number of chocolate candies in each box
      X_00:
      - the total number of pieces
      - the quantity of remain pieces
      - the total number of chocolate candies kaleb still has
  info:
    answers:
    - p: '54'
    item_id: 60f9186c90be09b72239eee5
    numbers:
      N_00: '14'
      N_01: '5'
      N_02: '6'
    split: null
    variables:
    - p
  text:
    numbers:
      shape:
      - 40
      target: __ __ __ __ __  0 __ __ __ __ __ __  1 __ __ __ __ __ __ __ __ __  2
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'ka ##le ##b bought 14 boxes of chocolate candy and gave 5 to his little
      brother . if each box has 6 pieces inside it , how many pieces did ka ##le ##b
      still have ?'
    snippets:
      shape:
      - 3
      - 15
      target:
      - 'ka ##le ##b bought 14 boxes of chocolate candy and gave 5'
      - 14 boxes of chocolate candy and gave 5 to his little brother . if each
      - little brother . if each box has 6 pieces inside it , how many pieces
    tokens:
      shape:
      - 40
      target: '[CLS] ka ##le ##b bought 14 boxes of chocolate candy and gave 5 to
        his little brother . if each box has 6 pieces inside it , how many pieces
        did ka ##le ##b still have ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 15
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: *(N_03, R_00) R_03: *(N_03,
      R_01) R_04: +(R_02, R_03) R_05: =(N_01, R_04) R_06: -(R_00, R_01) R_07: =(N_02,
      R_06) R_08: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the distance between 2 snails
      N_02:
      - the value of the speed of each snail minus the speed of each snail
      N_03:
      - the traveling minutes
      X_00:
      - the speed of each snail
      X_01:
      - the speed of each snail
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the distance between the two snails
      - the distance between 2 snails
      - the distance between the two snails
      N_02:
      - the value of one snail's speed minus the other snail's speed
      - the value of the crawling speed of one snail minus the crawling speed of the
        other snail
      - the value of the rate of the faster snail minus the rate of the slower snail
      N_03:
      - the minutes of them crawled
      - the crawling hours for 2 nails to meet
      - the time for which the two snails crawled
      X_00:
      - the speed of one snail
      - the speed of one snail toward the other snail
      - the rate of the faster snail
      X_01:
      - the speed of the other snail
      - the speed of the other snail toward one snail
      - the rate of the slower snail
  info:
    answers:
    - s1: '9'
      s2: '3'
    item_id: 604cc852117d71c492a62b47
    numbers:
      N_00: '2'
      N_01: '264'
      N_02: '6'
      N_03: '22'
    split: null
    variables:
    - s1
    - s2
  text:
    numbers:
      shape:
      - 40
      target: __  0 __ __  1 __ __ __ __ __ __ __ __ __ __ __ __ __  2 __ __ __ __
        __  3 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 2 snails are 264 centimeters apart . they crawl toward each other at rates
      that differ by 6 centimeters per minute . after 22 minutes , they meet . how
      fast is each snail crawling ?
    snippets:
      shape:
      - 4
      - 15
      target:
      - 2 snails are 264 centimeters apart . they
      - 2 snails are 264 centimeters apart . they crawl toward each
      - each other at rates that differ by 6 centimeters per minute . after 22 minutes
      - by 6 centimeters per minute . after 22 minutes , they meet . how fast
    tokens:
      shape:
      - 40
      target: '[CLS] 2 snails are 264 centimeters apart . they crawl toward each other
        at rates that differ by 6 centimeters per minute . after 22 minutes , they
        meet . how fast is each snail crawling ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 15
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: -(R_00, R_01) R_03: =(N_00,
      R_02) R_04: -(R_01, N_03) R_05: *(N_02, R_04) R_06: +(N_01, R_00) R_07: =(R_05,
      R_06) R_08: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the value of the age of adam now minus the age of eve
      N_01:
      - the number of years into the future
      N_02:
      - the ratio of the future age of eve to the future age of eve
      N_03:
      - the sum of adam's age now and eve's age now
      X_00:
      - the age of adam
      X_01:
      - the age of eve
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the present age of eve minus the present age of adam
      - the value of the age of eve minus the age of adam
      - the value of the age of eve today minus the age of adam today
      N_01:
      - a number in the phrase " in one year, eve will be three times the age of adam
        was four years ago "
      - the years between the future and the now
      - the number of years to go to the future
      N_02:
      - a number in the phrase " eve will be three times the age of adam "
      - the ratio of the future age of eve to the past of adam
      - the ratio of the age of eve one year later to the age of adam four years ago
      N_03:
      - a number in the phrase " four years ago "
      - the years between now and the past
      - the number of years past
      X_00:
      - the present age of eve
      - the age of eve
      - the age of eve today
      X_01:
      - the present age of adam
      - the age of adam
      - the age of adam today
  info:
    answers:
    - a: '9'
      e: '14'
    item_id: 604cc853117d71c492a62ebf
    numbers:
      N_00: '5'
      N_01: '1'
      N_02: '3'
      N_03: '4'
    split: null
    variables:
    - e
    - a
  text:
    numbers:
      shape:
      - 40
      target: __ __ __  0 __ __ __ __ __ __  1 __ __ __ __ __  2 __ __ __ __ __ __  3
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: adam is 5 years younger than eve . in one year , eve will be three times
      the age of adam was four years ago . how old is adam ? how old is eve ?
    snippets:
      shape:
      - 4
      - 15
      target:
      - adam is 5 years younger than eve . in one
      - 5 years younger than eve . in one year , eve will be three times
      - in one year , eve will be three times the age of adam was four
      - three times the age of adam was four years ago . how old is adam
    tokens:
      shape:
      - 40
      target: '[CLS] adam is 5 years younger than eve . in one year , eve will be
        three times the age of adam was four years ago . how old is adam ? how old
        is eve ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 15
    tokens: 'R_00: __NEW_VAR(, ) R_01: /(1, N_01) R_02: /(1, N_02) R_03: +(R_01, R_02)
      R_04: *(R_00, R_03) R_05: =(1, R_04) R_06: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the hours sally can paint a house
      N_02:
      - the hours john can paint a house
      X_00:
      - the hours required if sally and john paint together
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of hours it takes sally to paint a house
      - the hours to paint a house for sally
      - the number of hours in which sally can paint a house
      N_02:
      - the number of hours it takes john to paint a house
      - the hours to paint a house for john
      - the number of hours in which john can paint a house
      X_00:
      - the total number of hours
      - the hours to paint a house when sally and john work together
      - the number of hours in which sally and john can paint a house
  info:
    answers:
    - h: '2.40000000000000'
    item_id: 604cc853117d71c492a62d4c
    numbers:
      N_00: '1'
      N_01: '4'
      N_02: '6'
    split: null
    variables:
    - h
  text:
    numbers:
      shape:
      - 40
      target: __ __ __ __ __  0 __ __  1 __ __ __ __ __ __ __ __ __ __  2 __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: if sally can paint a house in 4 hours , and john can paint the same house
      in 6 hours , how long will it take for both of them to paint the house together
      ?
    snippets:
      shape:
      - 3
      - 15
      target:
      - if sally can paint a house in 4 hours , and john
      - if sally can paint a house in 4 hours , and john can paint the
      - john can paint the same house in 6 hours , how long will it take
    tokens:
      shape:
      - 40
      target: '[CLS] if sally can paint a house in 4 hours , and john can paint the
        same house in 6 hours , how long will it take for both of them to paint the
        house together ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 15
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: /(N_01, 100) R_03: *(R_00,
      R_02) R_04: /(N_03, 100) R_05: *(R_01, R_04) R_06: +(R_03, R_05) R_07: /(N_06,
      100) R_08: *(N_04, R_07) R_09: =(R_06, R_08) R_10: +(R_00, R_01) R_11: =(N_04,
      R_10) R_12: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the concentration of the 10 % hcl solution
      N_03:
      - the concentration of the 30 % hcl solution
      N_04:
      - the amount of the 15 % hcl solution
      N_06:
      - the concentration of the 15 % hcl solution
      X_00:
      - the amount of the 10 % hcl solution
      X_01:
      - the amount of the 30 % hcl solution
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the percentage of hcl in the first solution
      - the concentration of the first kind of solution
      - the concentration of the 10 % hci solution
      N_03:
      - the percentage of hcl in the second solution
      - the concentration of the second kind of solution
      - the concentration of 30 % hci solution
      N_04:
      - the total amount of the mixture of two solutions
      - the number of milliliters of the mixed solution
      - the amount of the 15 % hci mixed solution
      N_06:
      - the percentage of hcl in the mixture
      - the concentration of the mixed solution
      - the concentration of the 15 % hci mixed solution
      X_00:
      - the amount of the first solution
      - the number of milliliters of the first kind of solution
      - the amount of the 10 % hci solution
      X_01:
      - the amount of the second solution
      - the number of milliliters of the second kind of solution
      - the amount of the 30 % hci solution
  info:
    answers:
    - s1: '150'
      s2: '50'
    item_id: 604cc853117d71c492a62e31
    numbers:
      N_00: '1'
      N_01: '10'
      N_02: '1'
      N_03: '30'
      N_04: '200'
      N_05: '1'
      N_06: '15'
    split: null
    variables:
    - s1
    - s2
  text:
    numbers:
      shape:
      - 40
      target: __ __ __ __ __ __ __  0  1 __ __ __ __ __  2  3 __ __ __ __ __ __ __
        __ __  4 __ __ __ __  5  6 __ __ __ __ __ __ __ __
    raw: 'how many mill ##ili ##ters of a 10 % hc ##l solution and a 30 % hc ##l solution
      should be mixed to make 200 mill ##ili ##ters of a 15 % hc ##l solution ?'
    snippets:
      shape:
      - 7
      - 15
      target:
      - 'how many mill ##ili ##ters of a 10 % hc ##l solution and a'
      - 'how many mill ##ili ##ters of a 10 % hc ##l solution and a 30'
      - 'a 10 % hc ##l solution and a 30 % hc ##l solution should be'
      - '10 % hc ##l solution and a 30 % hc ##l solution should be mixed'
      - '##l solution should be mixed to make 200 mill ##ili ##ters of a 15 %'
      - 'to make 200 mill ##ili ##ters of a 15 % hc ##l solution ?'
      - 'make 200 mill ##ili ##ters of a 15 % hc ##l solution ?'
    tokens:
      shape:
      - 40
      target: '[CLS] how many mill ##ili ##ters of a 10 % hc ##l solution and a 30
        % hc ##l solution should be mixed to make 200 mill ##ili ##ters of a 15 %
        hc ##l solution ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 15
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_04, R_00) R_02: -(N_01, N_03) R_03: =(R_01,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of puppies needed to cage a pet store
      N_03:
      - the number of puppies sold
      N_04:
      - the number of puppies in each cage
      X_00:
      - the number of cages needed
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - number of puppies
      - the number of puppies the pet store originally had
      - the number of puppies they had
      N_03:
      - number of puppies sold
      - the number of puppies they sold
      - the number of puppies they sold
      N_04:
      - number of puppies in each cage
      - the number of puppies they put in each cage
      - the number of puppies in each cage
      X_00:
      - the ratio of the puppies left to the number of puppies in each cage
      - the number of cages they used
      - the number of cages
  info:
    answers:
    - c: '3'
    item_id: 60f9186c90be09b72239eff0
    numbers:
      N_00: '1'
      N_01: '13'
      N_02: '1'
      N_03: '7'
      N_04: '2'
    split: null
    variables:
    - c
  text:
    numbers:
      shape:
      - 40
      target: __  0 __ __ __  1 __ __ __ __  2 __ __ __ __  3 __ __ __ __ __ __ __
        __ __ __  4 __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'a pet store had 13 pup ##pies . in one day , they sold 7 of them and put
      the rest into cages , with 2 in each cage . how many cages did they use ?'
    snippets:
      shape:
      - 5
      - 15
      target:
      - 'a pet store had 13 pup ##pies .'
      - 'a pet store had 13 pup ##pies . in one day ,'
      - 'store had 13 pup ##pies . in one day , they sold 7 of them'
      - . in one day , they sold 7 of them and put the rest into
      - put the rest into cages , with 2 in each cage . how many cages
    tokens:
      shape:
      - 40
      target: '[CLS] a pet store had 13 pup ##pies . in one day , they sold 7 of them
        and put the rest into cages , with 2 in each cage . how many cages did they
        use ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 15
    tokens: 'R_00: __NEW_VAR(, ) R_01: /(1, N_01) R_02: /(1, N_02) R_03: +(R_01, R_02)
      R_04: *(R_00, R_03) R_05: =(1, R_04) R_06: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the hours sally can paint a house
      N_02:
      - the hours john can paint a house
      X_00:
      - the hours required if sally and john paint together
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of hours it takes sally to paint a house
      - the hours of sally's painting time
      - the number of hours in which sally can paint a house
      N_02:
      - the number of hours it takes john to paint a house
      - the hours of john's painting time
      - the number of hours in which john can paint a house
      X_00:
      - the total number of hours
      - the hours of painting together
      - the number of hours in which sally and john can paint a house
  info:
    answers:
    - h: '2.40000000000000'
    item_id: 60f9186c90be09b72239f10e
    numbers:
      N_00: '1'
      N_01: '4'
      N_02: '6'
    split: null
    variables:
    - h
  text:
    numbers:
      shape:
      - 40
      target: __ __ __ __ __  0 __ __  1 __ __ __ __ __ __ __ __ __ __  2 __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: if sally can paint a house in 4 hours , and john can paint the same house
      in 6 hours , how many hours will it take for both of them to paint the house
      together ?
    snippets:
      shape:
      - 3
      - 15
      target:
      - if sally can paint a house in 4 hours , and john
      - if sally can paint a house in 4 hours , and john can paint the
      - john can paint the same house in 6 hours , how many hours will it
    tokens:
      shape:
      - 40
      target: '[CLS] if sally can paint a house in 4 hours , and john can paint the
        same house in 6 hours , how many hours will it take for both of them to paint
        the house together ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 15
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: __NEW_VAR(, ) R_03: *(10,
      R_00) R_04: +(R_01, R_03) R_05: =(R_02, R_04) R_06: +(R_00, R_01) R_07: =(N_02,
      R_06) R_08: *(10, R_01) R_09: +(R_00, R_08) R_10: -(R_09, R_02) R_11: =(N_03,
      R_10) R_12: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the sum of the digits of a two - digit number
      N_03:
      - the value of the reversed number minus the original number
      X_00:
      - the value of tens digit in the original number
      X_01:
      - the value of units digit in the original number
      X_02:
      - the value of the original number
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the sum of the tens and units digits of a two - digit numeral
      - the sum of the digits of a two - digit numeral
      - the sum of the digits of a two - digit numeral
      N_03:
      - the value of the sum of 10 times the units digit and the tens digit minus
        the original number
      - the value of the reversed number minus the original number
      - the value of the reversed number minus the original number
      X_00:
      - the digit of the tens '
      - the ten's digit of the original number
      - the digits of tens
      X_01:
      - the digit of the units '
      - the unit's digit of the original number
      - the digits of units
      X_02:
      - the original number
      - the value of the original number
      - the value of the original number
  info:
    answers:
    - o: '35'
      t: '3'
      u: '5'
    item_id: 604cc853117d71c492a62e80
    numbers:
      N_00: '1'
      N_01: '2'
      N_02: '8'
      N_03: '18'
    split: null
    variables:
    - t
    - u
    - o
  text:
    numbers:
      shape:
      - 40
      target: __ __ __ __ __ __ __  0  1  1  1 __ __ __  2 __ __ __ __ __ __ __ __
        __ __ __  3 __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'the sum of the digits of a two - digit nu ##meral is 8 . if the digits are
      reversed , the new number is 18 greater than the original number . find the
      original number .'
    snippets:
      shape:
      - 4
      - 15
      target:
      - 'the sum of the digits of a two - digit nu ##meral is 8'
      - 'the sum of the digits of a two - digit nu ##meral is 8 .'
      - 'a two - digit nu ##meral is 8 . if the digits are reversed ,'
      - are reversed , the new number is 18 greater than the original number . find
    tokens:
      shape:
      - 40
      target: '[CLS] the sum of the digits of a two - digit nu ##meral is 8 . if the
        digits are reversed , the new number is 18 greater than the original number
        . find the original number . [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 15
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: -(R_00, N_00) R_03: *(N_01,
      R_02) R_04: -(R_01, N_00) R_05: =(R_03, R_04) R_06: *(N_02, R_01) R_07: =(R_00,
      R_06) R_08: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the value of now minus the past
      N_01:
      - the ratio of josie's age six years ago to her aunt's age six years ago
      N_02:
      - the ratio of josie's age 4 years ago to her aunt's age six years ago
      X_00:
      - the age of her aunt now
      X_01:
      - the age of josie
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of years into the past
      - the years between now and past
      - the number of years past
      N_01:
      - the ratio between the age of josie in the past to the age dianne in the past
      - the ratio of the past age of josie to page age of dianne
      - the ratio of the age of josie six years ago to the age of dianne six years
        ago
      N_02:
      - the ratio of the age of dianne in the present to the age of josie in the present
      - the ratio of the age of dianne to the age of josie
      - the ratio of the age of dianne today to the age of josie today
      X_00:
      - the age of dianne in the present
      - the age of dianne
      - the age of dianne today
      X_01:
      - the age of josie in the present
      - the age of josie
      - the age of josie today
  info:
    answers:
    - d: '12'
      j: '36'
    item_id: 604cc853117d71c492a62eaa
    numbers:
      N_00: '6'
      N_01: '5'
      N_02: '0.333333333333333'
    split: null
    variables:
    - d
    - j
  text:
    numbers:
      shape:
      - 40
      target: __  0 __ __ __ __ __  1 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __  2  2  2 __ __ __ __ __ __ __ __ __
    raw: 'six years ago , josie was 5 times as old as her niece , dia ##nne . how
      old is dia ##nne now if her age is one - third that of her aunt '' s .'
    snippets:
      shape:
      - 3
      - 15
      target:
      - six years ago , josie was 5 times
      - six years ago , josie was 5 times as old as her niece ,
      - 'dia ##nne now if her age is one - third that of her aunt '''
    tokens:
      shape:
      - 40
      target: '[CLS] six years ago , josie was 5 times as old as her niece , dia ##nne
        . how old is dia ##nne now if her age is one - third that of her aunt '' s
        . [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 15
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_00, R_00) R_02: +(N_02, N_03) R_03: =(R_01,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of shirts she could wash
      N_02:
      - the number of shirts she had
      N_03:
      - the number of sweaters
      X_00:
      - the number of loads
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of clothes a washing machine can wash per load
      - the maximum pieces of clothing at one washing
      - the number of clothing the washing machine can wash at once
      N_02:
      - the number of shirts
      - the number of shirts needed to wash
      - the number of shirts to wash
      N_03:
      - the number of sweaters
      - the number of sweaters needed to wash
      - the number of sweaters to wash
      X_00:
      - the number of loads
      - the minimum number of loads for washing all clothes
      - the number of times to run the washing machine
  info:
    answers:
    - l: '9'
    item_id: 60f9186c90be09b72239e9bf
    numbers:
      N_00: '5'
      N_01: '1'
      N_02: '43'
      N_03: '2'
    split: null
    variables:
    - l
  text:
    numbers:
      shape:
      - 40
      target: __ __ __ __ __ __ __ __ __ __  0 __ __ __ __  1 __ __ __ __ __ __ __  2
        __ __  3 __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'sarah '' s old washing machine could only wash 5 pieces of clothing at a
      time . if she had to wash 43 shirts and 2 sweater ##s , how many loads would
      she have to do ?'
    snippets:
      shape:
      - 4
      - 15
      target:
      - s old washing machine could only wash 5 pieces of clothing at a time .
      - only wash 5 pieces of clothing at a time . if she had to wash
      - 'time . if she had to wash 43 shirts and 2 sweater ##s , how'
      - 'she had to wash 43 shirts and 2 sweater ##s , how many loads would'
    tokens:
      shape:
      - 40
      target: '[CLS] sarah '' s old washing machine could only wash 5 pieces of clothing
        at a time . if she had to wash 43 shirts and 2 sweater ##s , how many loads
        would she have to do ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 15
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: *(N_02, R_00) R_03: -(R_02,
      N_03) R_04: =(R_01, R_03) R_05: +(R_00, R_01) R_06: =(N_04, R_05) R_07: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the ratio of the larger number to the smaller number
      N_03:
      - the value of one number minus the other number
      N_04:
      - the sum of the two numbers
      X_00:
      - the value of one number
      X_01:
      - the value of the other number
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the multiplier for the second number
      - a number in the phrase " one of the numbers is six times the other number
        decreased by 2 "
      - a number in the phrase " six times the other number "
      N_03:
      - the value of 6 times the second number minus the first number
      - a number in the phrase " the other number decreased by 2 "
      - the value of six times the other number minus one number
      N_04:
      - the sum of the first number and the second number
      - the sum of the numbers
      - the sum of the two numbers
      X_00:
      - the value of the second number
      - the other number
      - the value of the other number
      X_01:
      - the value of the first number
      - the one number
      - the value of one number
  info:
    answers:
    - n1: '21.1428571428571'
      n2: '3.85714285714286'
    item_id: 604cc853117d71c492a630c8
    numbers:
      N_00: '2'
      N_01: '1'
      N_02: '6'
      N_03: '2'
      N_04: '25'
    split: null
    variables:
    - n2
    - n1
  text:
    numbers:
      shape:
      - 40
      target: __ __ __ __ __  0 __ __ __ __ __  1 __ __ __ __  2 __ __ __ __ __ __  3
        __ __ __ __ __ __ __ __  4 __ __ __ __ __ __ __
    raw: grant is thinking of two numbers . he says that one of the numbers is six
      times the other number decreased by 2 , and the sum of the numbers is 25 . what
      are the numbers ?
    snippets:
      shape:
      - 5
      - 15
      target:
      - grant is thinking of two numbers . he says that one of
      - of two numbers . he says that one of the numbers is six times the
      - says that one of the numbers is six times the other number decreased by 2
      - six times the other number decreased by 2 , and the sum of the numbers
      - and the sum of the numbers is 25 . what are the numbers ?
    tokens:
      shape:
      - 40
      target: '[CLS] grant is thinking of two numbers . he says that one of the numbers
        is six times the other number decreased by 2 , and the sum of the numbers
        is 25 . what are the numbers ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 15
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_01, R_00) R_02: =(N_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of miles from rachel's house totimothy's house
      N_01:
      - the number of hours to get there
      X_00:
      - the ratio of all distances to all hours
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the distance of strolling
      - the mile distance between rachel and nicholas's house
      - distance from rachel's house to nicholas's house
      N_01:
      - the number of hours of strolling
      - the length of hours for rachel to reach nicholas's house from her house
      - amount of time it took for rachel to get there
      X_00:
      - the speed of strolling
      - the distance of miles rachel strolls per hour
      - the ratio of the distance between the two houses to the time it took
  info:
    answers:
    - s: '2'
    item_id: 60f9186c90be09b72239ec81
    numbers:
      N_00: '10'
      N_01: '5'
    split: null
    variables:
    - s
  text:
    numbers:
      shape:
      - 40
      target: __ __ __ __ __ __ __ __ __ __ __  0 __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __  1 __ __ __ __ __ __ __ __ __ __ __ __
    raw: rachel strolled to nicholas ' s house . it is 10 miles from rachel ' s house
      to nicholas ' s house . it took rachel 5 hours to get there . how fast did rachel
      go ?
    snippets:
      shape:
      - 2
      - 15
      target:
      - nicholas ' s house . it is 10 miles from rachel ' s house to
      - ''' s house . it took rachel 5 hours to get there . how fast'
    tokens:
      shape:
      - 40
      target: '[CLS] rachel strolled to nicholas '' s house . it is 10 miles from
        rachel '' s house to nicholas '' s house . it took rachel 5 hours to get there
        . how fast did rachel go ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: -(N_00, N_04) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of erasers in the box
      N_02:
      - the number of erasers in the box
      N_04:
      - the number of erasers doris takes out of the box
      X_00:
      - the number of erasers left in the box
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of erasers in a box
      - the number of erasers in a box
      - the initial number of erasers in the box
      N_04:
      - the number of erasers doris took out of the box
      - the number of erasers out of the box taken by doris
      - the number of erasers taken out of the box
      X_00:
      - the number of erasers left in the box
      - the number of erasers left in the box
      - the number of erasers left in the box
  info:
    answers:
    - l: '15'
    item_id: 60f9186c90be09b72239ef15
    numbers:
      N_00: '69'
      N_01: '1'
      N_02: '15'
      N_03: '1'
      N_04: '54'
    split: null
    variables:
    - l
  text:
    numbers:
      shape:
      - 46
      target: __ __ __  0 __ __ __  1 __ __ __ __  2 __ __ __  3 __ __ __ __  4 __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'there are 69 erase ##rs in a box . jane has 15 erase ##rs in a bag . doris
      takes 54 erase ##rs out of the box . how many erase ##rs are left in the box
      ?'
    snippets:
      shape:
      - 5
      - 15
      target:
      - 'there are 69 erase ##rs in a box . jane'
      - 'there are 69 erase ##rs in a box . jane has 15 erase ##rs'
      - '##rs in a box . jane has 15 erase ##rs in a bag . doris'
      - '. jane has 15 erase ##rs in a bag . doris takes 54 erase ##rs'
      - '##rs in a bag . doris takes 54 erase ##rs out of the box .'
    tokens:
      shape:
      - 46
      target: '[CLS] there are 69 erase ##rs in a box . jane has 15 erase ##rs in
        a bag . doris takes 54 erase ##rs out of the box . how many erase ##rs are
        left in the box ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the ratio of the budget the montoya spends on groceries to the budget
      N_01:
      - the ratio of the budget to the budget
      X_00:
      - the total amount of budget
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the fraction of their budget spent on groceries
      - the fraction of their budget spent on groceries
      - the ratio of the amount of money spent on groceries to the total amount of
        the budget
      N_01:
      - the fraction of their budget spent on going out to eat
      - the fraction of their budget spent on going out to eat
      - the ratio of the amount of money spent on going out to eat to the total amount
        of the budget
      X_00:
      - the total fraction of their budget they spent
      - the fraction of their budget spent on food
      - the ratio of the total amount of money spent on food to the total amount of
        the budget
  info:
    answers:
    - f: '0.800000000000000'
    item_id: 60f9186c90be09b72239ef5a
    numbers:
      N_00: '0.600000000000000'
      N_01: '0.200000000000000'
    split: null
    variables:
    - f
  text:
    numbers:
      shape:
      - 46
      target: __ __ __ __ __ __  0  0  0 __ __ __ __ __ __ __  1  1  1 __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'the mont ##oya family spends 0 . 6 of their budget on groceries and another
      0 . 2 going out to eat . altogether , what fraction of their budget does the
      mont ##oya family spend on food ?'
    snippets:
      shape:
      - 2
      - 15
      target:
      - 'the mont ##oya family spends 0 . 6 of their budget on groceries'
      - of their budget on groceries and another 0 . 2 going out to eat .
    tokens:
      shape:
      - 46
      target: '[CLS] the mont ##oya family spends 0 . 6 of their budget on groceries
        and another 0 . 2 going out to eat . altogether , what fraction of their budget
        does the mont ##oya family spend on food ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_00, R_00) R_02: =(N_02, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of hayers hayley's closest number of stickers
      N_02:
      - the number of stickers
      X_00:
      - the number of stickers for each person
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of hayley's closest friends who like stickers
      - the number of hayley's closest friends
      - the number of friends
      N_02:
      - the number of stickers hayley plans to give all of her friends
      - the number of hayley's stickers to give her friends
      - the number of stickers
      X_00:
      - the number of stickers each friends will get
      - the number of stickers per friend
      - the number of stickers that each friend will receive
  info:
    answers:
    - p: '8'
    item_id: 60f9186c90be09b72239eee8
    numbers:
      N_00: '9'
      N_01: '1'
      N_02: '72'
    split: null
    variables:
    - p
  text:
    numbers:
      shape:
      - 46
      target: __  0 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __  1 __
        __ __ __ __ __ __ __ __ __ __ __ __ __  2 __ __ __ __ __ __ __ __ __
    raw: '9 of hay ##ley '' s closest friends like stick ##ers . if she plans to give
      all of them an equal number of stick ##ers , how many will each receive if she
      has 72 stick ##ers ?'
    snippets:
      shape:
      - 3
      - 15
      target:
      - '9 of hay ##ley '' s closest friends'
      - 'she plans to give all of them an equal number of stick ##ers , how'
      - 'many will each receive if she has 72 stick ##ers ?'
    tokens:
      shape:
      - 46
      target: '[CLS] 9 of hay ##ley '' s closest friends like stick ##ers . if she
        plans to give all of them an equal number of stick ##ers , how many will each
        receive if she has 72 stick ##ers ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: -(R_00, R_01) R_03: =(N_00,
      R_02) R_04: +(R_00, R_01) R_05: =(N_01, R_04) R_06: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the value of the number of girls minus the number of boys
      N_01:
      - the total number of girls and boys
      X_00:
      - the number of girls
      X_01:
      - the number of boys
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the value of the number of girls minus the number of boys
      - the value of the number of girls minus the number of boys
      - the value of the number of girls minus the number of boys
      N_01:
      - the total number of girls and boys
      - the sum of the number of girls and boys
      - the sum of the number of girls and the number of boys
      X_00:
      - the number of girls
      - the number of girls
      - the number of girls
      X_01:
      - the number of boys
      - the number of boys
      - the number of boys
  info:
    answers:
    - b: '19'
      g: '22'
    item_id: 604cc853117d71c492a62cf8
    numbers:
      N_00: '3'
      N_01: '41'
    split: null
    variables:
    - g
    - b
  text:
    numbers:
      shape:
      - 46
      target: __ __ __  0 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __  1
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: there are 3 more girls than boys in tom ' s class , and the sum of girls
      and boys is 41 . how many boys are in the class ? how many girls are in the
      class ?
    snippets:
      shape:
      - 2
      - 15
      target:
      - there are 3 more girls than boys in tom '
      - the sum of girls and boys is 41 . how many boys are in the
    tokens:
      shape:
      - 46
      target: '[CLS] there are 3 more girls than boys in tom '' s class , and the
        sum of girls and boys is 41 . how many boys are in the class ? how many girls
        are in the class ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_02, R_00) R_02: -(N_00, N_01) R_03: =(R_01,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of games
      N_01:
      - the number of games sold
      N_02:
      - the number of games sold
      X_00:
      - the number of boxes needed
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the starting number of games
      - the initial number of old games
      - number of games luke started out with
      N_01:
      - the number of games sold
      - the number of old games sold
      - number of games luke sold
      N_02:
      - the number of games left packed in each box
      - the number of old games in each box
      - number of games in each box
      X_00:
      - the number of boxes used
      - the number of boxes
      - number of boxes used to pack the rest of the games
  info:
    answers:
    - b: '5'
    item_id: 60f9186c90be09b72239ecd4
    numbers:
      N_00: '39'
      N_01: '19'
      N_02: '4'
    split: null
    variables:
    - b
  text:
    numbers:
      shape:
      - 46
      target: __ __ __ __ __ __ __ __ __ __ __ __  0 __ __  1 __ __ __ __ __ __ __
        __ __ __  2 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: luke was selling his old games . he started out with 39 but sold 19 of them
      . he packed the rest up , putting 4 games into each box . how many boxes did
      he have to use ?
    snippets:
      shape:
      - 3
      - 15
      target:
      - old games . he started out with 39 but sold 19 of them . he
      - he started out with 39 but sold 19 of them . he packed the rest
      - he packed the rest up , putting 4 games into each box . how many
    tokens:
      shape:
      - 46
      target: '[CLS] luke was selling his old games . he started out with 39 but sold
        19 of them . he packed the rest up , putting 4 games into each box . how many
        boxes did he have to use ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: -(N_01, R_00) R_02: =(N_02, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of buckets of seeds
      N_02:
      - the number of buckets after adding some seeds
      X_00:
      - the total number of buckets
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of buckets in the beginning
      - the number of buckets of seed a farmer started the day with
      - number of buckets the farmer started with
      N_02:
      - the number of remaining buckets at finial
      - the number of buckets of seed after sowing seeds
      - number of buckets she has left
      X_00:
      - the number of missing buckets
      - the number of used buckets for sowing
      - the value of buckets the farmer started with minus the number of buckets left
  info:
    answers:
    - s: '2.75000000000000'
    item_id: 60f9186c90be09b72239ea77
    numbers:
      N_00: '1'
      N_01: '8.75000000000000'
      N_02: '6'
    split: null
    variables:
    - s
  text:
    numbers:
      shape:
      - 46
      target: __  0 __ __ __ __ __  1  1  1 __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __  2 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'a farmer started the day with 8 . 75 bucket ##s of seeds . after spending
      the morning so ##wing seeds , she now has 6 bucket ##s . how many bucket ##s
      of seeds did the farmer so ##w ?'
    snippets:
      shape:
      - 3
      - 15
      target:
      - a farmer started the day with 8 .
      - 'a farmer started the day with 8 . 75 bucket ##s of seeds .'
      - 'so ##wing seeds , she now has 6 bucket ##s . how many bucket ##s'
    tokens:
      shape:
      - 46
      target: '[CLS] a farmer started the day with 8 . 75 bucket ##s of seeds . after
        spending the morning so ##wing seeds , she now has 6 bucket ##s . how many
        bucket ##s of seeds did the farmer so ##w ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_01, R_00) R_02: =(N_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the amount of the world grain supply
      N_01:
      - the ratio of the number of the supply of the world to the amount of the world
        demand
      X_00:
      - the number of metric00 of the world
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the total supply of grain
      - the world grain supply
      - the amount of the world grain supply
      N_01:
      - the ratio of the supply of grain to the demand of grain
      - the coefficient of the world grain demand
      - the ratio of the world grain supply to the world grain demand
      X_00:
      - the demand of grain
      - the value of the word grain demand
      - the amount of the world grain demand
  info:
    answers:
    - d: '2400000.00000000'
    item_id: 60f9186c90be09b72239e9da
    numbers:
      N_00: '1800000'
      N_01: '0.750000000000000'
    split: null
    variables:
    - d
  text:
    numbers:
      shape:
      - 46
      target: __ __ __ __ __ __ __ __ __ __ __ __ __  0  0  0 __ __ __ __ __ __ __
        __ __  1  1  1 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'free ##port mc ##mora ##n projects the world grain supply will be 1800 ##00
      ##0 metric tons , and the supply will be only 0 . 75 of the world grain demand
      . what will the world grain demand be ?'
    snippets:
      shape:
      - 2
      - 15
      target:
      - 'projects the world grain supply will be 1800 ##00 ##0 metric tons , and the'
      - ', and the supply will be only 0 . 75 of the world grain demand'
    tokens:
      shape:
      - 46
      target: '[CLS] free ##port mc ##mora ##n projects the world grain supply will
        be 1800 ##00 ##0 metric tons , and the supply will be only 0 . 75 of the world
        grain demand . what will the world grain demand be ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: -(N_01, N_03) R_02: +(N_04, R_01) R_03: =(R_00,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of lives in the next level
      N_03:
      - the number of lives lost in the next level
      N_04:
      - the number of lives lost in the next level
      X_00:
      - the total number of lives
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of lives
      - the number of lives in the video game
      - the number of lives
      N_03:
      - the number of lives lost
      - the number of lost lives in a hard part of the game
      - the number of lost lives
      N_04:
      - the number of lives earned in the next level
      - the number of gotten lives in the next level
      - the number of new lives
      X_00:
      - the total number of lives in the next level
      - the number of lives expected in the next level
      - the total number of lives
  info:
    answers:
    - n: '74'
    item_id: 60f9186c90be09b72239f020
    numbers:
      N_00: '1'
      N_01: '43'
      N_02: '1'
      N_03: '8'
      N_04: '39'
    split: null
    variables:
    - n
  text:
    numbers:
      shape:
      - 46
      target: __ __ __ __  0 __ __ __ __  1 __ __ __  2 __ __ __ __ __ __ __ __  3
        __ __ __ __ __  4 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: wendy was playing a video game and had 43 lives . in a hard part of the game
      , she lost 8 lives . if she got 39 more lives in the next level , how many lives
      would she have ?
    snippets:
      shape:
      - 5
      - 15
      target:
      - wendy was playing a video game and had 43 lives .
      - was playing a video game and had 43 lives . in a hard part of
      - game and had 43 lives . in a hard part of the game , she
      - part of the game , she lost 8 lives . if she got 39 more
      - lost 8 lives . if she got 39 more lives in the next level ,
    tokens:
      shape:
      - 46
      target: '[CLS] wendy was playing a video game and had 43 lives . in a hard part
        of the game , she lost 8 lives . if she got 39 more lives in the next level
        , how many lives would she have ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: -(N_01, N_03) R_02: +(N_04, R_01) R_03: =(R_00,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of lives in tiffany's game
      N_03:
      - the number of lives lost in the next level
      N_04:
      - the number of lives in tiffany's game
      X_00:
      - the total number of lives tiffany has in the next level
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the initial number of lives
      - the number of lives
      - the number of lives
      N_03:
      - the number of lives lost
      - the number of lives lost
      - the number of lost lives
      N_04:
      - the number of lives gotten
      - the number of lives earned in the next level
      - the number of new lives
      X_00:
      - the number of lives now
      - the total number of lives in the next level
      - the total number of lives
  info:
    answers:
    - n: '56'
    item_id: 60f9186c90be09b72239f232
    numbers:
      N_00: '1'
      N_01: '43'
      N_02: '1'
      N_03: '14'
      N_04: '27'
    split: null
    variables:
    - n
  text:
    numbers:
      shape:
      - 46
      target: __ __ __ __  0 __ __ __ __  1 __ __ __  2 __ __ __ __ __ __ __ __  3
        __ __ __ __ __  4 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: tiffany was playing a video game and had 43 lives . in a hard part of the
      game , she lost 14 lives . if she got 27 more lives in the next level , how
      many lives would she have ?
    snippets:
      shape:
      - 5
      - 15
      target:
      - tiffany was playing a video game and had 43 lives .
      - was playing a video game and had 43 lives . in a hard part of
      - game and had 43 lives . in a hard part of the game , she
      - part of the game , she lost 14 lives . if she got 27 more
      - lost 14 lives . if she got 27 more lives in the next level ,
    tokens:
      shape:
      - 46
      target: '[CLS] tiffany was playing a video game and had 43 lives . in a hard
        part of the game , she lost 14 lives . if she got 27 more lives in the next
        level , how many lives would she have ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: __NEW_VAR(, ) R_03: *(10,
      R_00) R_04: +(R_01, R_03) R_05: =(R_02, R_04) R_06: *(10, R_01) R_07: +(R_00,
      R_06) R_08: -(R_07, R_02) R_09: =(N_02, R_08) R_10: +(R_00, R_01) R_11: =(N_03,
      R_10) R_12: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the value of the reversed number minus the original number
      N_03:
      - the sum of the digits of a two - digit number
      X_00:
      - the tens digit
      X_01:
      - the units digit
      X_02:
      - the original number
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the value of 10 times the units digit plus the tens digit minus the original
        number
      - the value of the reversed number minus the original number
      - the value of the number created when the digits are reversed minus the original
        number
      N_03:
      - the sum of the digits of the original number
      - the sum of the digits of the original number
      - the sum of the digits of the original number
      X_00:
      - the digit of the tens '
      - the value of ten's digit
      - the digit of tens of the original number
      X_01:
      - the digit of the units '
      - the value of one's digit
      - the digit of units of the original number
      X_02:
      - the original number
      - the value of the original number
      - the value of the original number
  info:
    answers:
    - o: '67'
      t: '6'
      u: '7'
    item_id: 604cc853117d71c492a62f4e
    numbers:
      N_00: '1'
      N_01: '2'
      N_02: '9'
      N_03: '13'
    split: null
    variables:
    - t
    - u
    - o
  text:
    numbers:
      shape:
      - 46
      target: __ __ __ __ __  0  1  1  1 __ __ __ __ __ __ __ __  2 __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __  3 __ __ __ __ __ __ __ __ __ __
    raw: when the digits of a two - digit number are reversed , the new number is
      9 more than the original number , and the sum of the digits of the original
      number is 13 . what is the original number ?
    snippets:
      shape:
      - 4
      - 15
      target:
      - when the digits of a two - digit number are reversed ,
      - when the digits of a two - digit number are reversed , the
      - are reversed , the new number is 9 more than the original number , and
      - the digits of the original number is 13 . what is the original number ?
    tokens:
      shape:
      - 46
      target: '[CLS] when the digits of a two - digit number are reversed , the new
        number is 9 more than the original number , and the sum of the digits of the
        original number is 13 . what is the original number ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(R_00, R_01) R_03: =(N_01,
      R_02) R_04: *(N_04, R_00) R_05: *(N_05, R_01) R_06: +(R_04, R_05) R_07: =(N_03,
      R_06) R_08: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the total number of tickets sold
      N_03:
      - the price of a child ticket
      N_04:
      - the price of an adult ticket
      N_05:
      - the price of a child ticket
      X_00:
      - the number of adult tickets
      X_01:
      - the number of child tickets
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the sum of the number of adult tickets sold and the number of children tickets
        sold
      - the total number of tickets sold
      - the total number of tickets
      N_03:
      - the number of dollars earned from selling tickets
      - the total amount of money received by selling tickets
      - the total received money
      N_04:
      - the price of an adult ticket
      - the price of an adult ticket
      - the cost of an adult ticket
      N_05:
      - the price of a children ticket
      - the price of a child ticket
      - the cost of a children's ticket
      X_00:
      - the number of adult tickets sold
      - the number of adult tickets sold
      - the number of adult tickets
      X_01:
      - the number of children tickets sold
      - the number of child tickets sold
      - the number of children's tickets
  info:
    answers:
    - a: '205'
      c: '115'
    item_id: 604cc853117d71c492a6301d
    numbers:
      N_00: '1'
      N_01: '320'
      N_02: '1'
      N_03: '1255'
      N_04: '5'
      N_05: '2'
    split: null
    variables:
    - a
    - c
  text:
    numbers:
      shape:
      - 46
      target: __ __ __  0 __ __  1 __ __  2 __ __ __ __ __ __ __  3  3 __ __ __ __
        __ __  4 __ __ __ __ __ __ __  5 __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'michael sold a total of 320 tickets at a fair . the money received was $
      125 ##5 . each adult ticket was $ 5 , and each child ticket was $ 2 . how many
      adult tickets did he sell ?'
    snippets:
      shape:
      - 6
      - 15
      target:
      - michael sold a total of 320 tickets at a fair
      - michael sold a total of 320 tickets at a fair . the money
      - sold a total of 320 tickets at a fair . the money received was $
      - 'fair . the money received was $ 125 ##5 . each adult ticket was $'
      - '##5 . each adult ticket was $ 5 , and each child ticket was $'
      - ', and each child ticket was $ 2 . how many adult tickets did he'
    tokens:
      shape:
      - 46
      target: '[CLS] michael sold a total of 320 tickets at a fair . the money received
        was $ 125 ##5 . each adult ticket was $ 5 , and each child ticket was $ 2
        . how many adult tickets did he sell ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: -(N_01, N_03) R_02: +(N_04, R_01) R_03: =(R_00,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of lives in the next level
      N_03:
      - the number of lives lost in the next level
      N_04:
      - the number of lives lost in the next level
      X_00:
      - the total number of lives
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the initial number of lives
      - the number of lives in the video game
      - the number of lives
      N_03:
      - the number of lives lost
      - the number of lost lives in a hard part of the game
      - the number of lost lives
      N_04:
      - the number of lives gotten
      - the number of gotten lives in the next level
      - the number of new lives
      X_00:
      - the number of lives now
      - the number of lives expected in the next level
      - the total number of lives
  info:
    answers:
    - n: '54'
    item_id: 60f9186c90be09b72239f240
    numbers:
      N_00: '1'
      N_01: '38'
      N_02: '1'
      N_03: '16'
      N_04: '32'
    split: null
    variables:
    - n
  text:
    numbers:
      shape:
      - 46
      target: __ __ __ __  0 __ __ __ __  1 __ __ __  2 __ __ __ __ __ __ __ __  3
        __ __ __ __ __  4 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: janet was playing a video game and had 38 lives . in a hard part of the game
      , she lost 16 lives . if she got 32 more lives in the next level , how many
      lives would she have ?
    snippets:
      shape:
      - 5
      - 15
      target:
      - janet was playing a video game and had 38 lives .
      - was playing a video game and had 38 lives . in a hard part of
      - game and had 38 lives . in a hard part of the game , she
      - part of the game , she lost 16 lives . if she got 32 more
      - lost 16 lives . if she got 32 more lives in the next level ,
    tokens:
      shape:
      - 46
      target: '[CLS] janet was playing a video game and had 38 lives . in a hard part
        of the game , she lost 16 lives . if she got 32 more lives in the next level
        , how many lives would she have ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_02) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - amount of money she spent on a shirt
      N_02:
      - amount of money spent on a jacket
      X_00:
      - the total amount of money she spent
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the cost of a shirt
      - the price of a shirt
      - the cost of a shirt
      N_02:
      - the cost of a jacket
      - the price of a jacket
      - the cost of a jacket
      X_00:
      - the cost of clothes in total
      - the total money spent
      - the cost of a shirt and a jacket
  info:
    answers:
    - t: '25.3100000000000'
    item_id: 60f9186c90be09b72239f0c7
    numbers:
      N_00: '13.0400000000000'
      N_01: '1'
      N_02: '12.2700000000000'
      N_03: '1'
      N_04: '2'
    split: null
    variables:
    - t
  text:
    numbers:
      shape:
      - 46
      target: __ __ __ __ __ __ __ __ __ __  0  0  0 __  1 __ __ __  2  2  2 __  3
        __ __ __ __ __  4 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: mary went to the mall . she spent $ 13 . 04 on a shirt and $ 12 . 27 on a
      jacket . she went to 2 shops . in total , how much money did mary spend on clothing
      ?
    snippets:
      shape:
      - 5
      - 15
      target:
      - to the mall . she spent $ 13 . 04 on a shirt and $
      - she spent $ 13 . 04 on a shirt and $ 12 . 27 on
      - . 04 on a shirt and $ 12 . 27 on a jacket . she
      - shirt and $ 12 . 27 on a jacket . she went to 2 shops
      - on a jacket . she went to 2 shops . in total , how much
    tokens:
      shape:
      - 46
      target: '[CLS] mary went to the mall . she spent $ 13 . 04 on a shirt and $
        12 . 27 on a jacket . she went to 2 shops . in total , how much money did
        mary spend on clothing ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: -(N_01, N_03) R_02: +(N_04, R_01) R_03: =(R_00,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of lives in janet's next level
      N_03:
      - the number of lives lost in the next level
      N_04:
      - the number of lives lost in the next level
      X_00:
      - the total number of lives
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the initial number of lives
      - the number of lives
      - the number of lives
      N_03:
      - the number of lives lost
      - the number of lives lost
      - the number of lost lives
      N_04:
      - the number of lives gotten
      - the number of lives earned in the next level
      - the number of new lives
      X_00:
      - the number of lives now
      - the total number of lives in the next level
      - the total number of lives
  info:
    answers:
    - n: '70'
    item_id: 60f9186c90be09b72239ee4f
    numbers:
      N_00: '1'
      N_01: '47'
      N_02: '1'
      N_03: '23'
      N_04: '46'
    split: null
    variables:
    - n
  text:
    numbers:
      shape:
      - 46
      target: __ __ __ __  0 __ __ __ __  1 __ __ __  2 __ __ __ __ __ __ __ __  3
        __ __ __ __ __  4 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: janet was playing a video game and had 47 lives . in a hard part of the game
      , she lost 23 lives . if she got 46 more lives in the next level , how many
      lives would she have ?
    snippets:
      shape:
      - 5
      - 15
      target:
      - janet was playing a video game and had 47 lives .
      - was playing a video game and had 47 lives . in a hard part of
      - game and had 47 lives . in a hard part of the game , she
      - part of the game , she lost 23 lives . if she got 46 more
      - lost 23 lives . if she got 46 more lives in the next level ,
    tokens:
      shape:
      - 46
      target: '[CLS] janet was playing a video game and had 47 lives . in a hard part
        of the game , she lost 23 lives . if she got 46 more lives in the next level
        , how many lives would she have ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(R_00, R_01) R_03: =(N_01,
      R_02) R_04: /(N_02, 100) R_05: *(R_00, R_04) R_06: /(N_03, 100) R_07: *(R_01,
      R_06) R_08: +(R_05, R_07) R_09: =(N_04, R_08) R_10: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the total number of coins
      N_02:
      - the value of the first number of coins minus the second type of coins
      N_03:
      - the number of c pieces
      N_04:
      - the total value of the coins
      X_00:
      - the number of the first type of coins
      X_01:
      - the number of the second type of coins
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of coins the teller has
      - the total number of coins
      - the total number of coins
      N_02:
      - the worth of certain coin pieces
      - the face value of the first kind of coin in cents
      - the value of the coins in the first case in cents
      N_03:
      - the worth of other coin pieces
      - the face value of the second kind of coin in cents
      - the value of the coins in the second case in cents
      N_04:
      - the total worth of all coins
      - the total value of coins in dollars
      - the total value of coins in dollars
      X_00:
      - the number of 5 cent coins
      - the number of the first kind of coins
      - the number of the coins in the first case
      X_01:
      - the number of 10 cent coins
      - the number of the second kind of coins
      - the number of the coins in the second case
  info:
    answers:
    - c1: '34'
      c2: '16'
    item_id: 604cc853117d71c492a63071
    numbers:
      N_00: '1'
      N_01: '50'
      N_02: '5'
      N_03: '10'
      N_04: '4.20000000000000'
    split: null
    variables:
    - c2
    - c1
  text:
    numbers:
      shape:
      - 46
      target: __  0 __ __ __ __ __ __  1 __ __ __ __ __ __  2 __ __  3 __ __ __ __
        __ __ __ __ __ __ __ __ __  4  4  4 __ __ __ __ __ __ __ __ __ __ __
    raw: a bank teller notices that he has 50 coins , all of which are 5 c and 10
      c pieces . he finds that the value of the coins is $ 4 . 20 . how many of each
      must he have ?
    snippets:
      shape:
      - 5
      - 15
      target:
      - a bank teller notices that he has 50
      - a bank teller notices that he has 50 coins , all of which are 5
      - 50 coins , all of which are 5 c and 10 c pieces . he
      - all of which are 5 c and 10 c pieces . he finds that the
      - the value of the coins is $ 4 . 20 . how many of each
    tokens:
      shape:
      - 46
      target: '[CLS] a bank teller notices that he has 50 coins , all of which are
        5 c and 10 c pieces . he finds that the value of the coins is $ 4 . 20 . how
        many of each must he have ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, R_00) R_02: =(N_01, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of bales in the barn
      N_01:
      - the total number of bales in the barn currently
      X_00:
      - the total number of bales in the barn
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the initial number of bales of hay
      - the original number of bales of hay
      - the bales of hay in the barn
      N_01:
      - the current total number of bales of hay
      - the number of bales of hay in the barn now
      - the total bales of hay there are now in the barn
      X_00:
      - the additional number of bales of hay
      - the additional number of bales jason stacked in the barn
      - the bales of hay he stored in the barn
  info:
    answers:
    - s: '23'
    item_id: 60f9186c90be09b72239ea0e
    numbers:
      N_00: '73'
      N_01: '96'
    split: null
    variables:
    - s
  text:
    numbers:
      shape:
      - 46
      target: __ __ __  0 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __  1 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'there were 73 bal ##es of hay in the barn . jason stacked more bal ##es
      in the barn today . there are now 96 bal ##es of hay in the barn . how many
      bal ##es did he store in the barn ?'
    snippets:
      shape:
      - 2
      - 15
      target:
      - 'there were 73 bal ##es of hay in the barn'
      - 'the barn today . there are now 96 bal ##es of hay in the barn'
    tokens:
      shape:
      - 46
      target: '[CLS] there were 73 bal ##es of hay in the barn . jason stacked more
        bal ##es in the barn today . there are now 96 bal ##es of hay in the barn
        . how many bal ##es did he store in the barn ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: /(1, N_01) R_02: /(1, N_02) R_03: +(R_01, R_02)
      R_04: /(1, N_03) R_05: +(R_03, R_04) R_06: *(R_00, R_05) R_07: =(1, R_06) R_08:
      __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of minutes it takes for jim to fill a pool
      N_02:
      - the number of minutes it takes for tony to do the pool
      N_03:
      - the number of minutes it takes for tony to do the pool
      X_00:
      - the number of minutes it takes for jim and tony to fill the pool together
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of minutes taken for jim to fill the pool
      - the number of minutes it takes for jim to fill the pool
      - the time needed for jim to fill the pool
      N_02:
      - the number of minutes taken for sue to do it
      - the number of minutes it takes for sue to fill the pool
      - the time needed for sue to fill the pool
      N_03:
      - the number of minutes taken for tony to do it
      - the number of minutes it takes for tony to fill the pool
      - the time needed for tony to fill the pool
      X_00:
      - the number of minutes taken if they work together
      - the number of minutes it takes for all three to fill the pool together
      - the time needed for all three to fill the pool
  info:
    answers:
    - m: '15'
    item_id: 604cc853117d71c492a62e21
    numbers:
      N_00: '1'
      N_01: '30'
      N_02: '45'
      N_03: '90'
      N_04: '3'
    split: null
    variables:
    - m
  text:
    numbers:
      shape:
      - 48
      target: __ __ __ __  0 __ __ __ __ __ __ __  1 __ __ __ __ __ __ __ __ __  2
        __ __ __ __ __ __ __ __ __  3 __ __ __ __ __ __  4 __ __ __ __ __ __ __ __
    raw: 'jim can fill a pool carrying bucket ##s of water in 30 minutes . sue can
      do the same job in 45 minutes . tony can do the same job in 90 minutes . how
      quickly can all three fill the pool together ?'
    snippets:
      shape:
      - 5
      - 15
      target:
      - 'jim can fill a pool carrying bucket ##s of water in'
      - 'pool carrying bucket ##s of water in 30 minutes . sue can do the same'
      - sue can do the same job in 45 minutes . tony can do the same
      - tony can do the same job in 90 minutes . how quickly can all three
      - 90 minutes . how quickly can all three fill the pool together ?
    tokens:
      shape:
      - 48
      target: '[CLS] jim can fill a pool carrying bucket ##s of water in 30 minutes
        . sue can do the same job in 45 minutes . tony can do the same job in 90 minutes
        . how quickly can all three fill the pool together ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_02, R_00) R_02: -(N_00, N_01) R_03: =(R_01,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of students trying out for the school's trivia teams
      N_01:
      - the number of groups of students who didn't get picked out
      N_02:
      - the number of groups
      X_00:
      - the number of students in each group
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of students tried for trivia teams
      - the initial number of students
      - the number of students trying out for the team
      N_01:
      - the number of students not picked
      - the number of students who did not get picked
      - the number of students who didn't get picked
      N_02:
      - the number of picked students put in each group
      - the number of groups for the rest of the students
      - the number of groups students were put into
      X_00:
      - the number of groups
      - the number of people in each group
      - the number of students in each group
  info:
    answers:
    - g: '5'
    item_id: 60f9186c90be09b72239f013
    numbers:
      N_00: '25'
      N_01: '15'
      N_02: '2'
    split: null
    variables:
    - g
  text:
    numbers:
      shape:
      - 48
      target: __ __ __  0 __ __ __ __ __ __ __ __ __ __ __ __ __  1 __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __  2 __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'there are 25 students trying out for the school '' s tri ##via teams . if
      15 of them didn '' t get picked for the team and the rest were put into 2 groups
      , how many students would be in each group ?'
    snippets:
      shape:
      - 3
      - 15
      target:
      - there are 25 students trying out for the school '
      - ''' s tri ##via teams . if 15 of them didn '' t get picked'
      - team and the rest were put into 2 groups , how many students would be
    tokens:
      shape:
      - 48
      target: '[CLS] there are 25 students trying out for the school '' s tri ##via
        teams . if 15 of them didn '' t get picked for the team and the rest were
        put into 2 groups , how many students would be in each group ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_02, R_00) R_02: +(N_01, R_01) R_03: *(N_03,
      R_00) R_04: =(R_02, R_03) R_05: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of dollars charged per month for installation
      N_02:
      - the charge per month for installation
      N_03:
      - the number of dollars charged per month for another company
      X_00:
      - the number of months which makes the total cost of the cable service and another
        cable company be the same
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the charge costs for installation from the cable company in dollars
      - the charge for installation for a company
      - the cost of first company charges for installation
      N_02:
      - the monthly charge fee from the cable company in dollars
      - the charge per month for a company
      - the cost of first company charges per month
      N_03:
      - the monthly charge fee in dollars from another cable company that offers free
        installation
      - the charge per month for another company
      - the cost of second company charges per month
      X_00:
      - the length of months needed for two company's charges to become same
      - the number of months it takes for the total cost of the two companies to become
        the same
      - the number of months two company's total cost become same
  info:
    answers:
    - m: '5'
    item_id: 60f9186c90be09b72239ec7a
    numbers:
      N_00: '1'
      N_01: '75'
      N_02: '20'
      N_03: '35'
    split: null
    variables:
    - m
  text:
    numbers:
      shape:
      - 48
      target: __  0 __ __ __  1 __ __ __ __  2 __ __ __ __ __ __ __ __ __ __ __ __  3
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: a cable company charges 75 dollars for installation plus 20 dollars per month
      . another cable company offers free installation but charges 35 dollars per
      month . for how many months of cable service would the total cost from either
      company be the same ?
    snippets:
      shape:
      - 4
      - 15
      target:
      - a cable company charges 75 dollars for installation
      - a cable company charges 75 dollars for installation plus 20 dollars per
      - company charges 75 dollars for installation plus 20 dollars per month . another
        cable company
      - cable company offers free installation but charges 35 dollars per month .
        for how many
    tokens:
      shape:
      - 48
      target: '[CLS] a cable company charges 75 dollars for installation plus 20 dollars
        per month . another cable company offers free installation but charges 35
        dollars per month . for how many months of cable service would the total cost
        from either company be the same ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: -(N_01, N_02) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the distance of traveling one - way
      N_02:
      - the number of miles of gas given to the concert
      N_03:
      - the number of gallons of gas her sister drove
      X_00:
      - the distance of gas left
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the distance to the concert
      - number of miles to the concert
      - the distance in miles to drive to a concert
      N_02:
      - the distance until a stop for gas
      - number of miles they drove before stopping at the gas station
      - the distance in miles they drove
      X_00:
      - the remaining distance to the concert
      - number of miles left after the gas station
      - the distance in miles they have left
  info:
    answers:
    - l: '46'
    item_id: 60f9186c90be09b72239ed40
    numbers:
      N_00: '1'
      N_01: '78'
      N_02: '32'
      N_03: '28'
    split: null
    variables:
    - l
  text:
    numbers:
      shape:
      - 48
      target: __ __ __ __ __ __ __ __ __  0 __  1 __ __ __ __ __  2 __ __ __ __ __
        __ __ __ __ __  3 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: mrs . hilt and her sister drove to a concert 78 miles away . they drove 32
      miles and then stopped for gas . her sister put 28 gallons of gas in the car
      . how many miles did they have left to drive ?
    snippets:
      shape:
      - 4
      - 15
      target:
      - . hilt and her sister drove to a concert 78 miles away . they drove
      - and her sister drove to a concert 78 miles away . they drove 32 miles
      - concert 78 miles away . they drove 32 miles and then stopped for gas .
      - stopped for gas . her sister put 28 gallons of gas in the car .
    tokens:
      shape:
      - 48
      target: '[CLS] mrs . hilt and her sister drove to a concert 78 miles away .
        they drove 32 miles and then stopped for gas . her sister put 28 gallons of
        gas in the car . how many miles did they have left to drive ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: *(N_01, R_01) R_03: -(R_00,
      R_02) R_04: =(N_00, R_03) R_05: -(R_01, 1) R_06: *(N_03, R_05) R_07: -(R_00,
      1) R_08: -(R_06, R_07) R_09: =(N_02, R_08) R_10: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the value of the age of mr. grange minus 3 times the age of his son last year
      N_01:
      - a number in the phrase " 3 times as old as his son "
      N_02:
      - the value of 3 times the son's age minus mr. grange's age last year
      N_03:
      - a number in the phrase " 3 times as old as his son "
      X_00:
      - the age of mr. grange
      X_01:
      - the age of his son now
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the value of the age of mr. granger in the present minus 2 times the age of
        the son in the present
      - the value of the age of mr. granger now minus twice the age of his son now
      - the value of the age of mr. granger now minus twice the age of his son now
      N_01:
      - the multiplier for the age of the son in the present
      - a number in the phrase " twice as old as his son "
      - a number in the phrase " twice as old as his son "
      N_02:
      - the value of 3 times the age of the son last year minus the age of mr. granger
        last year
      - the value of three times the age of his son last year minus the age of mr.
        granger last year
      - the value of 3 times the age of his son last year minus the age of mr. granger
        last year
      N_03:
      - the multiplier for the age of the son in the past
      - a number in the phrase " 3 times as old as his son "
      - a number in the phrase " 3 times as old as his son "
      X_00:
      - the age of mr. granger in the present
      - the age of mr. granger now
      - the age of mr. granger now
      X_01:
      - the age of the son in the present
      - the age of his son now
      - the age of his son now
  info:
    answers:
    - g: '42'
      s: '16'
    item_id: 604cc853117d71c492a6301e
    numbers:
      N_00: '10'
      N_01: '2'
      N_02: '4'
      N_03: '3'
    split: null
    variables:
    - g
    - s
  text:
    numbers:
      shape:
      - 48
      target: __ __ __ __ __ __  0 __ __ __  1 __ __ __ __ __ __ __ __ __ __ __ __  2
        __ __ __  3 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'mr . grange ##r is 10 years more than twice as old as his son . however
      , last year he was 4 years less than 3 times as old as his son . how old are
      mr . grange ##r and his son ?'
    snippets:
      shape:
      - 4
      - 15
      target:
      - 'mr . grange ##r is 10 years more than twice as old as'
      - 'grange ##r is 10 years more than twice as old as his son . however'
      - . however , last year he was 4 years less than 3 times as old
      - year he was 4 years less than 3 times as old as his son .
    tokens:
      shape:
      - 48
      target: '[CLS] mr . grange ##r is 10 years more than twice as old as his son
        . however , last year he was 4 years less than 3 times as old as his son .
        how old are mr . grange ##r and his son ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_02, R_00) R_02: -(N_00, N_01) R_03: =(R_01,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of students trying out for the school's trivia teams
      N_01:
      - the number of groups of students who didn't get picked out
      N_02:
      - the number of groups
      X_00:
      - the number of students in each group
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of students tried for trivia teams
      - the initial number of students
      - the total number of students trying out
      N_01:
      - the number of students not picked
      - the number of students who did not get picked
      - the number of students not picked for the team
      N_02:
      - the number of picked students put in each group
      - the number of groups for the rest of the students
      - the number groups
      X_00:
      - the number of groups
      - the number of people in each group
      - the number of students in one group
  info:
    answers:
    - g: '9'
    item_id: 60f9186c90be09b72239ecc5
    numbers:
      N_00: '36'
      N_01: '9'
      N_02: '3'
    split: null
    variables:
    - g
  text:
    numbers:
      shape:
      - 48
      target: __ __ __  0 __ __ __ __ __ __ __ __ __ __ __ __ __  1 __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __  2 __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'there are 36 students trying out for the school '' s tri ##via teams . if
      9 of them didn '' t get picked for the team and the rest were put into 3 groups
      , how many students would be in each group ?'
    snippets:
      shape:
      - 3
      - 15
      target:
      - there are 36 students trying out for the school '
      - ''' s tri ##via teams . if 9 of them didn '' t get picked'
      - team and the rest were put into 3 groups , how many students would be
    tokens:
      shape:
      - 48
      target: '[CLS] there are 36 students trying out for the school '' s tri ##via
        teams . if 9 of them didn '' t get picked for the team and the rest were put
        into 3 groups , how many students would be in each group ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_02, R_00) R_02: -(N_00, N_01) R_03: =(R_01,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of students trying out for the school's trivia teams
      N_01:
      - the number of students who didn't get picked out
      N_02:
      - the number of groups
      X_00:
      - the number of students in each group
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the initial number of students
      - the number of students trying out for the team
      - the total number of students trying out
      N_01:
      - the number of students who did not get picked
      - the number of students who didn't get picked
      - the number of students not picked for the team
      N_02:
      - the number of groups for the rest of the students
      - the number of groups students were put into
      - the number groups
      X_00:
      - the number of people in each group
      - the number of students in each group
      - the number of students in one group
  info:
    answers:
    - g: '6'
    item_id: 60f9186c90be09b72239ee1a
    numbers:
      N_00: '65'
      N_01: '17'
      N_02: '8'
    split: null
    variables:
    - g
  text:
    numbers:
      shape:
      - 48
      target: __ __ __  0 __ __ __ __ __ __ __ __ __ __ __ __ __  1 __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __  2 __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'there are 65 students trying out for the school '' s tri ##via teams . if
      17 of them didn '' t get picked for the team and the rest were put into 8 groups
      , how many students would be in each group ?'
    snippets:
      shape:
      - 3
      - 15
      target:
      - there are 65 students trying out for the school '
      - ''' s tri ##via teams . if 17 of them didn '' t get picked'
      - team and the rest were put into 8 groups , how many students would be
    tokens:
      shape:
      - 48
      target: '[CLS] there are 65 students trying out for the school '' s tri ##via
        teams . if 17 of them didn '' t get picked for the team and the rest were
        put into 8 groups , how many students would be in each group ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_02, R_00) R_02: -(N_00, N_01) R_03: =(R_01,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of students trying out for the school's students
      N_01:
      - the number of students who didn't get picked out
      N_02:
      - the number of groups
      X_00:
      - the number of students in each group
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of students tried for trivia teams
      - the initial number of students
      - the total number of students trying out
      N_01:
      - the number of students not picked
      - the number of students who did not get picked
      - the number of students not picked for the team
      N_02:
      - the number of picked students put in each group
      - the number of groups for the rest of the students
      - the number groups
      X_00:
      - the number of groups
      - the number of people in each group
      - the number of students in one group
  info:
    answers:
    - g: '7'
    item_id: 60f9186c90be09b72239eb8a
    numbers:
      N_00: '64'
      N_01: '36'
      N_02: '4'
    split: null
    variables:
    - g
  text:
    numbers:
      shape:
      - 48
      target: __ __ __  0 __ __ __ __ __ __ __ __ __ __ __ __ __  1 __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __  2 __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'there are 64 students trying out for the school '' s tri ##via teams . if
      36 of them didn '' t get picked for the team and the rest were put into 4 groups
      , how many students would be in each group ?'
    snippets:
      shape:
      - 3
      - 15
      target:
      - there are 64 students trying out for the school '
      - ''' s tri ##via teams . if 36 of them didn '' t get picked'
      - team and the rest were put into 4 groups , how many students would be
    tokens:
      shape:
      - 48
      target: '[CLS] there are 64 students trying out for the school '' s tri ##via
        teams . if 36 of them didn '' t get picked for the team and the rest were
        put into 4 groups , how many students would be in each group ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_01, N_02) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of pages in each booklet
      N_02:
      - the total number of booklets
      X_00:
      - the number of pages in the short booklet
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of pages for each booklet
      - the number of pages each booklet has
      - the number of pages each booklet has
      N_02:
      - the number of booklets
      - the number of booklets in the short story
      - the number of booklets in the short story section
      X_00:
      - the total number of pages
      - the number of pages jack needs to go through if he plans to read them all
      - the total number of pages
  info:
    answers:
    - p: '441'
    item_id: 60f9186c90be09b72239ef4c
    numbers:
      N_00: '1'
      N_01: '9'
      N_02: '49'
    split: null
    variables:
    - p
  text:
    numbers:
      shape:
      - 48
      target: __ __ __  0 __ __ __ __ __ __ __ __ __ __ __ __  1 __ __ __ __  2 __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'jack has a section filled with short story booklet ##s . if each booklet
      has 9 pages and there are 49 booklet ##s in the short story section , how many
      pages will jack need to go through if he plans to read them all ?'
    snippets:
      shape:
      - 3
      - 15
      target:
      - 'jack has a section filled with short story booklet ##s'
      - 'booklet ##s . if each booklet has 9 pages and there are 49 booklet ##s'
      - 'booklet has 9 pages and there are 49 booklet ##s in the short story section'
    tokens:
      shape:
      - 48
      target: '[CLS] jack has a section filled with short story booklet ##s . if each
        booklet has 9 pages and there are 49 booklet ##s in the short story section
        , how many pages will jack need to go through if he plans to read them all
        ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of cards when she got home
      N_01:
      - the number of cards when she got home
      X_00:
      - the number of get home
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of get - well cards
      - the number of get - well cards
      - the number of get - well cards received from the country
      N_01:
      - the number of new get - well cards got
      - the number of cards from friends
      - the number of cards received from friends and family
      X_00:
      - the whole number of cards
      - the number of all cards
      - the total number of cards received
  info:
    answers:
    - c: '690'
    item_id: 60f9186c90be09b72239ecf3
    numbers:
      N_00: '403'
      N_01: '287'
    split: null
    variables:
    - c
  text:
    numbers:
      shape:
      - 48
      target: __ __ __ __ __ __ __ __ __ __ __  0 __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __  1 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'marie ##la was in the hospital , and she got 403 get - well cards from around
      the country . when she got home , she got 287 more cards from friends and family
      . how many get - well cards did marie ##la get ?'
    snippets:
      shape:
      - 2
      - 15
      target:
      - in the hospital , and she got 403 get - well cards from around the
      - when she got home , she got 287 more cards from friends and family .
    tokens:
      shape:
      - 48
      target: '[CLS] marie ##la was in the hospital , and she got 403 get - well cards
        from around the country . when she got home , she got 287 more cards from
        friends and family . how many get - well cards did marie ##la get ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_02, R_00) R_02: =(N_01, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the amount of the world grain supply
      N_02:
      - the ratio of the number of grain supply of the world to the amount of grain
        in 2010
      X_00:
      - the number of world grain supply of the world
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the amount of the world grain supply
      - the total supply of grain
      - the amount of the world grain supply
      N_02:
      - the ratio of the world grain supply to the world grain demand
      - the ratio of the supply of grain to the demand of grain
      - the ratio of the world grain supply to the world grain demand
      X_00:
      - the amount of the world grain demand
      - the demand of grain
      - the amount of the world grain demand
  info:
    answers:
    - d: '2400000'
    item_id: 604cc852117d71c492a62b78
    numbers:
      N_00: '2010'
      N_01: '1800000'
      N_02: '0.750000000000000'
      N_03: '2010'
    split: null
    variables:
    - d
  text:
    numbers:
      shape:
      - 48
      target: __ __ __ __ __ __ __ __ __  0 __ __ __ __ __ __  1  1  1 __ __ __ __
        __ __ __ __ __  2  2  2 __ __ __ __ __ __ __ __ __ __ __ __ __ __  3 __ __
    raw: 'free ##port mc ##mora ##n projects that in 2010 the world grain supply will
      be 1800 ##00 ##0 metric tons , and the supply will be only 0 . 75 of the world
      grain demand . what will the world grain demand be in 2010 ?'
    snippets:
      shape:
      - 4
      - 15
      target:
      - '##port mc ##mora ##n projects that in 2010 the world grain supply will be
        1800'
      - '2010 the world grain supply will be 1800 ##00 ##0 metric tons , and the'
      - ', and the supply will be only 0 . 75 of the world grain demand'
      - will the world grain demand be in 2010 ?
    tokens:
      shape:
      - 48
      target: '[CLS] free ##port mc ##mora ##n projects that in 2010 the world grain
        supply will be 1800 ##00 ##0 metric tons , and the supply will be only 0 .
        75 of the world grain demand . what will the world grain demand be in 2010
        ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: /(N_02, 100) R_02: *(R_00, R_01) R_03: +(N_01,
      R_02) R_04: =(N_03, R_03) R_05: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the basic monthly fee for long - distance phone service
      N_02:
      - the additional fee per minute for long - distance phone service
      N_03:
      - the total bill for long - distance phone service
      X_00:
      - the minutes for which milan was billed last month
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the fixed monthly fee in dollars
      - the monthly fee for milan's long - distance phone service
      - the monthly fee
      N_02:
      - the unit variable fee per minute in cents
      - the extra costs of 12 cents per minute
      - the cost per minute by cent
      N_03:
      - the total fee in dollars
      - the total long - distance bill
      - the total cost of service by the dollar
      X_00:
      - the total number of minutes
      - the number of minutes used for long - distance calls
      - the total minute
  info:
    answers:
    - m: '178'
    item_id: 604cc853117d71c492a62cc6
    numbers:
      N_00: '1'
      N_01: '2'
      N_02: '12'
      N_03: '23.3600000000000'
    split: null
    variables:
    - m
  text:
    numbers:
      shape:
      - 48
      target: __ __ __ __ __ __ __ __ __ __ __  0  1 __ __ __ __  2 __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __  3  3  3 __ __ __ __ __ __ __ __ __ __ __ __
    raw: for his long - distance phone service , milan pays a 2 dollars monthly fee
      plus 12 cents per minute . last month , milan ' s long - distance bill was 23
      . 36 dollars . for how many minutes was milan billed for ?
    snippets:
      shape:
      - 4
      - 15
      target:
      - '- distance phone service , milan pays a 2 dollars monthly fee plus 12 cents'
      - distance phone service , milan pays a 2 dollars monthly fee plus 12 cents
        per
      - pays a 2 dollars monthly fee plus 12 cents per minute . last month ,
      - ''' s long - distance bill was 23 . 36 dollars . for how many'
    tokens:
      shape:
      - 48
      target: '[CLS] for his long - distance phone service , milan pays a 2 dollars
        monthly fee plus 12 cents per minute . last month , milan '' s long - distance
        bill was 23 . 36 dollars . for how many minutes was milan billed for ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_02, R_00) R_02: +(N_00, N_01) R_03: =(R_01,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of pictures from robin's phone
      N_01:
      - the number of pictures taken from her camera
      N_02:
      - the number of albums
      X_00:
      - the number of pictures in each of the other albums
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of pictures from the phone
      - the number of pictures uploaded from her phone
      - the number of pictures robin uploaded from her phone to facebook
      N_01:
      - the number of pictures from the camera
      - the number of pictures uploaded from her camera
      - the number of pictures robin uploaded from her camera to facebook
      N_02:
      - the number of albums
      - the number of albums
      - the number of albums with the same amount of pics
      X_00:
      - the number of pictures in each album
      - the number of pictures in each of the albums
      - the number of pictures in each of the albums
  info:
    answers:
    - e: '4'
    item_id: 60f9186c90be09b72239f16b
    numbers:
      N_00: '31'
      N_01: '5'
      N_02: '9'
    split: null
    variables:
    - e
  text:
    numbers:
      shape:
      - 48
      target: __ __ __  0 __ __ __ __ __  1 __ __ __ __ __ __ __ __ __ __ __ __ __  2
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'robin uploaded 31 pictures from her phone and 5 from her camera to facebook
      . if she sorted the pic ##s into 9 different albums with the same amount of
      pic ##s in each album , how many pictures were in each of the albums ?'
    snippets:
      shape:
      - 3
      - 15
      target:
      - robin uploaded 31 pictures from her phone and 5 from
      - uploaded 31 pictures from her phone and 5 from her camera to facebook . if
      - 'if she sorted the pic ##s into 9 different albums with the same amount of'
    tokens:
      shape:
      - 48
      target: '[CLS] robin uploaded 31 pictures from her phone and 5 from her camera
        to facebook . if she sorted the pic ##s into 9 different albums with the same
        amount of pic ##s in each album , how many pictures were in each of the albums
        ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_02, R_00) R_02: +(N_00, N_01) R_03: =(R_01,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of pictures on the first step
      N_01:
      - the number of pictures taken from her camera
      N_02:
      - the number of albums her camera uploaded
      X_00:
      - the number of pictures in each album
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of pictures from the phone
      - the number of pictures uploaded from her phone
      - the number of pictures robin uploaded from her phone to facebook
      N_01:
      - the number of pictures from facebook
      - the number of pictures uploaded from her camera
      - the number of pictures robin uploaded from her camera to facebook
      N_02:
      - the number of albums sorted all pictures with the same amount
      - the number of albums
      - the number of albums with the same amount of pics
      X_00:
      - the number of pictures in each album
      - the number of pictures in each of the albums
      - the number of pictures in each of the albums
  info:
    answers:
    - e: '8'
    item_id: 60f9186c90be09b72239eec2
    numbers:
      N_00: '35'
      N_01: '5'
      N_02: '5'
    split: null
    variables:
    - e
  text:
    numbers:
      shape:
      - 48
      target: __ __ __  0 __ __ __ __ __  1 __ __ __ __ __ __ __ __ __ __ __ __ __  2
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'robin uploaded 35 pictures from her phone and 5 from her camera to facebook
      . if she sorted the pic ##s into 5 different albums with the same amount of
      pic ##s in each album , how many pictures were in each of the albums ?'
    snippets:
      shape:
      - 3
      - 15
      target:
      - robin uploaded 35 pictures from her phone and 5 from
      - uploaded 35 pictures from her phone and 5 from her camera to facebook . if
      - 'if she sorted the pic ##s into 5 different albums with the same amount of'
    tokens:
      shape:
      - 48
      target: '[CLS] robin uploaded 35 pictures from her phone and 5 from her camera
        to facebook . if she sorted the pic ##s into 5 different albums with the same
        amount of pic ##s in each album , how many pictures were in each of the albums
        ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_03, R_00) R_02: =(N_02, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the amount of frozen fruit
      N_03:
      - the amount of frozen fruit
      X_00:
      - the amount of fresh fruit sold
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the sum of pounds of fresh and frozen fruit
      - the total pounds of fresh and frozen fruit
      - the amount of fresh and frozen fruit
      N_03:
      - the pounds of frozen fruit
      - the solded pounds of frozen fruit by now
      - the amount of frozen fruit
      X_00:
      - the pound of fresh fruits
      - the left pounds of fresh and frozen fruit
      - the amount of fresh fruit
  info:
    answers:
    - f: '6279'
    item_id: 60f9186c90be09b72239ea02
    numbers:
      N_00: '1'
      N_01: '1'
      N_02: '9792'
      N_03: '3513'
    split: null
    variables:
    - f
  text:
    numbers:
      shape:
      - 48
      target: __ __ __ __  0 __ __ __  1 __ __ __  2  2  2 __ __ __ __ __ __ __ __
        __ __ __ __ __  3  3 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'so far , an orchard has sold a combined total of 97 ##9 ##2 pounds of fresh
      and frozen fruit this season . if they have sold 351 ##3 pounds of frozen fruit
      , how many pounds of fresh fruit have been sold so far ?'
    snippets:
      shape:
      - 4
      - 15
      target:
      - so far , an orchard has sold a combined total of
      - 'so far , an orchard has sold a combined total of 97 ##9 ##2 pounds'
      - 'orchard has sold a combined total of 97 ##9 ##2 pounds of fresh and frozen'
      - 'this season . if they have sold 351 ##3 pounds of frozen fruit , how'
    tokens:
      shape:
      - 48
      target: '[CLS] so far , an orchard has sold a combined total of 97 ##9 ##2 pounds
        of fresh and frozen fruit this season . if they have sold 351 ##3 pounds of
        frozen fruit , how many pounds of fresh fruit have been sold so far ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_02, R_00) R_02: +(N_00, N_01) R_03: =(R_01,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of pictures on the first step
      N_01:
      - the number of pictures taken from her camera
      N_02:
      - the number of albums
      X_00:
      - the number of pictures in each of the other albums
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of pictures from the phone
      - the number of pictures from the phone
      - the number of pictures uploaded from her phone
      N_01:
      - the number of pictures from the camera
      - the number of pictures from facebook
      - the number of pictures uploaded from her camera
      N_02:
      - the number of albums
      - the number of albums sorted all pictures with the same amount
      - the number of albums
      X_00:
      - the number of pictures in each album
      - the number of pictures in each album
      - the number of pictures in each of the albums
  info:
    answers:
    - e: '9'
    item_id: 60f9186c90be09b72239ee80
    numbers:
      N_00: '30'
      N_01: '51'
      N_02: '9'
    split: null
    variables:
    - e
  text:
    numbers:
      shape:
      - 48
      target: __ __ __  0 __ __ __ __ __  1 __ __ __ __ __ __ __ __ __ __ __ __ __  2
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'katie uploaded 30 pictures from her phone and 51 from her camera to facebook
      . if she sorted the pic ##s into 9 different albums with the same amount of
      pic ##s in each album , how many pictures were in each of the albums ?'
    snippets:
      shape:
      - 3
      - 15
      target:
      - katie uploaded 30 pictures from her phone and 51 from
      - uploaded 30 pictures from her phone and 51 from her camera to facebook . if
      - 'if she sorted the pic ##s into 9 different albums with the same amount of'
    tokens:
      shape:
      - 48
      target: '[CLS] katie uploaded 30 pictures from her phone and 51 from her camera
        to facebook . if she sorted the pic ##s into 9 different albums with the same
        amount of pic ##s in each album , how many pictures were in each of the albums
        ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: -(N_03, N_01) R_02: -(N_02, N_00) R_03: /(R_01,
      R_02) R_04: =(R_00, R_03) R_05: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of inquiries in the first week
      N_03:
      - the number of inquiries in the fourth week
      X_00:
      - the average inquiries in the fourth week
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of weeks passed in the first week
      - the first week
      - a week with 15 inquiries
      N_01:
      - the number of inquires in the first week
      - the number of inquiries in the first week
      - the number of inquiries for the first week
      N_02:
      - the number of weeks passed in the fourth week
      - the fourth week
      - a week with 79 inquiries
      N_03:
      - the number of inquires in the fourth week
      - the number of inquiries during four weeks
      - the number of inquiries for the second week
      N_04:
      - the number of weeks passed in the first week
      - the first week
      - a week with 15 inquiries
      N_05:
      - the number of weeks passed in the fourth week
      - the fourth week
      - a week with 79 inquiries
      X_00:
      - the rate of changes in inquires per week
      - the rate of change for three weeks
      - the average rate of change in inquiries from the first week to the fourth
        week
  info:
    answers:
    - r: '21.3333333333333'
    item_id: 60f9186c90be09b72239ef51
    numbers:
      N_00: '1'
      N_01: '15'
      N_02: '4'
      N_03: '79'
      N_04: '1'
      N_05: '4'
    split: null
    variables:
    - r
  text:
    numbers:
      shape:
      - 54
      target: __ __ __ __ __ __  0 __ __  1 __ __ __ __ __ __ __  2 __ __  3 __ __
        __ __ __ __ __ __ __ __ __ __ __ __  4 __ __ __  5 __ __ __ __ __ __ __ __
        __ __ __ __ __ __
    raw: the number of inquiries the first week was 15 . the number of inquiries in
      the fourth week was 79 . find the average rate of change in the number of inquiries
      from the first week to the fourth week , in inquiries per week .
    snippets:
      shape:
      - 6
      - 15
      target:
      - the number of inquiries the first week was 15 . the number of
      - number of inquiries the first week was 15 . the number of inquiries in the
      - . the number of inquiries in the fourth week was 79 . find the average
      - of inquiries in the fourth week was 79 . find the average rate of change
      - in the number of inquiries from the first week to the fourth week , in
      - inquiries from the first week to the fourth week , in inquiries per week .
    tokens:
      shape:
      - 54
      target: '[CLS] the number of inquiries the first week was 15 . the number of
        inquiries in the fourth week was 79 . find the average rate of change in the
        number of inquiries from the first week to the fourth week , in inquiries
        per week . [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_00, N_02) R_02: *(N_01, N_03) R_03: -(R_01,
      R_02) R_04: =(R_00, R_03) R_05: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of packages of cat food
      N_01:
      - the number of cans of dog food
      N_02:
      - the number of cans of cat food
      N_03:
      - the number of cans of dog food
      X_00:
      - the value of the number of cans of cat food minus the number of cans of dog
        food
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of packages of cat food
      - the number of packages of cat food
      - the number of packages of cat food adam bought
      N_01:
      - the number of packages of dog food
      - the number of packages of dog food
      - the number of packages of dog food adam bought
      N_02:
      - the number of cans in each package of cat food
      - the number of cans each package of cat food contained
      - the number of cans each package of cat food contained
      N_03:
      - the number of cans in each package of dog food
      - the number of cans each package of dog food contained
      - the number of cans each package of dog food contained
      X_00:
      - the value of the total number of cans of cat food minus the total number of
        cans of dog food
      - the value of cans of cat food minus cans of dog food
      - the value of the number of cans of cat food minus the number of cans of dog
        food
  info:
    answers:
    - d: '55'
    item_id: 60f9186c90be09b72239f1a1
    numbers:
      N_00: '9'
      N_01: '7'
      N_02: '10'
      N_03: '5'
    split: null
    variables:
    - d
  text:
    numbers:
      shape:
      - 54
      target: __ __ __  0 __ __ __ __ __  1 __ __ __ __ __ __ __ __ __ __ __  2 __
        __ __ __ __ __ __ __ __  3 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __
    raw: adam bought 9 packages of cat food and 7 packages of dog food . each package
      of cat food contained 10 cans , and each package of dog food contained 5 cans
      . how many more cans of cat food than dog food did adam buy ?
    snippets:
      shape:
      - 4
      - 15
      target:
      - adam bought 9 packages of cat food and 7 packages
      - bought 9 packages of cat food and 7 packages of dog food . each package
      - . each package of cat food contained 10 cans , and each package of dog
      - and each package of dog food contained 5 cans . how many more cans of
    tokens:
      shape:
      - 54
      target: '[CLS] adam bought 9 packages of cat food and 7 packages of dog food
        . each package of cat food contained 10 cans , and each package of dog food
        contained 5 cans . how many more cans of cat food than dog food did adam buy
        ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: -(N_02, R_00) R_03: *(N_05,
      R_02) R_04: =(R_01, R_03) R_05: +(N_02, R_00) R_06: *(N_06, R_05) R_07: =(R_01,
      R_06) R_08: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the speed, miles per hour, of the boat in the still water
      N_05:
      - the minutes consumed for the boat to make the trip upstream
      N_06:
      - the minutes consumed for the boat the return
      X_00:
      - the speed, miles per hour, of the current
      X_01:
      - the traveling distance of the boat
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the speed of a motorboat relative to the water
      - the speed of a motorboat
      - the speed of the boat
      N_05:
      - the number of minutes of traveling upstream
      - the time spent traveling upstream
      - the time it takes to travel upstream
      N_06:
      - the number of minutes of returning downstream
      - the time spent to travel the return trip downstream
      - the time it takes to travel downstream
      X_00:
      - the speed of the current
      - the speed of the current
      - the speed of the current
      X_01:
      - the distance of the one - way trip
      - the distance traveling up to a certain point
      - the distance the boat travels
  info:
    answers:
    - c: '2.28571428571429'
      d: '274.285714285714'
    item_id: 604cc853117d71c492a62dbd
    numbers:
      N_00: '1'
      N_01: '1'
      N_02: '16'
      N_03: '1'
      N_04: '1'
      N_05: '20'
      N_06: '15'
    split: null
    variables:
    - c
    - d
  text:
    numbers:
      shape:
      - 54
      target: __  0 __ __ __ __  1 __ __ __  2 __ __ __ __ __ __ __ __ __ __ __  3
        __ __ __  4 __ __ __  5 __ __ __ __ __ __  6 __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __
    raw: 'a motor ##boat can maintain a constant speed of 16 miles per hour relative
      to the water . the boat makes a trip upstream to a certain point in 20 minutes
      ; the return trip takes 15 minutes . what is the speed of the current ?'
    snippets:
      shape:
      - 7
      - 15
      target:
      - 'a motor ##boat can maintain a constant speed'
      - 'a motor ##boat can maintain a constant speed of 16 miles per hour'
      - '##boat can maintain a constant speed of 16 miles per hour relative to the
        water'
      - to the water . the boat makes a trip upstream to a certain point in
      - the boat makes a trip upstream to a certain point in 20 minutes ; the
      - trip upstream to a certain point in 20 minutes ; the return trip takes 15
      - 20 minutes ; the return trip takes 15 minutes . what is the speed of
    tokens:
      shape:
      - 54
      target: '[CLS] a motor ##boat can maintain a constant speed of 16 miles per
        hour relative to the water . the boat makes a trip upstream to a certain point
        in 20 minutes ; the return trip takes 15 minutes . what is the speed of the
        current ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(R_00, R_01) R_03: =(N_02,
      R_02) R_04: *(N_03, R_00) R_05: *(N_04, R_01) R_06: +(R_04, R_05) R_07: =(N_05,
      R_06) R_08: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the total number of tickets sold
      N_03:
      - the price of a main seat ticket
      N_04:
      - the price of a back seat ticket
      N_05:
      - the total cost of tickets sold
      X_00:
      - the number of main seat tickets
      X_01:
      - the number of back seat tickets
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the total number of tickets sold
      - the total number of seats
      - the total number of tickets
      N_03:
      - the price of a main seat ticket
      - the cost of the main seat ticket
      - the cost of one main seat ticket
      N_04:
      - the price of a back seat ticket
      - the cost of the back seat ticket
      - the cost of one back seat ticket
      N_05:
      - the total value of sold tickets
      - the total amount of profit the concert made
      - the total cost of the tickets
      X_00:
      - the number of main seat tickets
      - the number of main seat tickets sold
      - the number of main seat tickets
      X_01:
      - the number of back seat tickets
      - the number of back seat tickets sold
      - the number of back seat tickets
  info:
    answers:
    - b: '14500'
      m: '5500'
    item_id: 604cc853117d71c492a62c86
    numbers:
      N_00: '1'
      N_01: '1'
      N_02: '20000'
      N_03: '55'
      N_04: '45'
      N_05: '955000'
    split: null
    variables:
    - m
    - b
  text:
    numbers:
      shape:
      - 54
      target: __  0 __ __ __  1  2  2  2 __ __ __ __ __ __ __  3 __ __ __ __ __ __
        __  4 __ __ __ __ __  5  5  5  5 __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __
    raw: 'a concert sells out a 20 , 000 seat arena . main seat tickets cost 55 dollars
      , and back seat tickets for 45 dollars . the concert made 95 ##5 , 000 dollars
      . how many main seat tickets and back seat tickets were sold ?'
    snippets:
      shape:
      - 6
      - 15
      target:
      - a concert sells out a 20 , 000
      - a concert sells out a 20 , 000 seat arena . main
      - a concert sells out a 20 , 000 seat arena . main seat
      - seat arena . main seat tickets cost 55 dollars , and back seat tickets for
      - 'dollars , and back seat tickets for 45 dollars . the concert made 95 ##5'
      - 'for 45 dollars . the concert made 95 ##5 , 000 dollars . how many'
    tokens:
      shape:
      - 54
      target: '[CLS] a concert sells out a 20 , 000 seat arena . main seat tickets
        cost 55 dollars , and back seat tickets for 45 dollars . the concert made
        95 ##5 , 000 dollars . how many main seat tickets and back seat tickets were
        sold ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the cost of speakers mike spent on speakers
      N_01:
      - the cost of new tires
      X_00:
      - the total amount of money mike spent
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the cost of speakers
      - the number of dollars mike spent on speakers
      - the dollar of speakers
      N_01:
      - the cost of new tires
      - the number of dollars mike spent on new tires
      - the dollar of new tires
      X_00:
      - the total cost
      - the number of all dollars for speakers and tires
      - the total dollar of speakers and new tires
  info:
    answers:
    - t: '224.870000000000'
    item_id: 60f9186c90be09b72239f206
    numbers:
      N_00: '118.540000000000'
      N_01: '106.330000000000'
      N_02: '3'
      N_03: '4.58000000000000'
    split: null
    variables:
    - t
  text:
    numbers:
      shape:
      - 54
      target: __ __ __ __ __ __ __ __  0  0  0 __ __ __ __  1  1  1 __ __ __ __ __
        __  2 __ __ __  3  3  3 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __
    raw: for his car , mike spent $ 118 . 54 on speakers and $ 106 . 33 on new tires
      . mike wanted 3 cds for $ 4 . 58 but decided not to . in total , how much did
      mike spend on car parts ?
    snippets:
      shape:
      - 4
      - 15
      target:
      - for his car , mike spent $ 118 . 54 on speakers and $ 106
      - 118 . 54 on speakers and $ 106 . 33 on new tires . mike
      - 33 on new tires . mike wanted 3 cds for $ 4 . 58 but
      - . mike wanted 3 cds for $ 4 . 58 but decided not to .
    tokens:
      shape:
      - 54
      target: '[CLS] for his car , mike spent $ 118 . 54 on speakers and $ 106 . 33
        on new tires . mike wanted 3 cds for $ 4 . 58 but decided not to . in total
        , how much did mike spend on car parts ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(N_01, R_00) R_03: =(R_01,
      R_02) R_04: /(N_03, 100) R_05: *(N_01, R_04) R_06: /(N_04, 100) R_07: *(R_00,
      R_06) R_08: +(R_05, R_07) R_09: /(N_08, 100) R_10: *(R_01, R_09) R_11: =(R_08,
      R_10) R_12: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the amount of the mixed solution
      N_03:
      - the concentration of the mixed solution
      N_04:
      - the concentration of 15 % hcl solution
      N_05:
      - the amount of the 40 % hcl solution
      N_06:
      - the concentration of the 40 % hcl solution
      N_08:
      - the concentration of the mixed solution
      X_00:
      - the amount of 15 % hcl solution
      X_01:
      - the amount of the mixed solution
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the volume of the first solution
      - the number of milliliters of the first kind of solution
      - the amount of the solution in the first case
      N_03:
      - the percentage of hcl in the first solution
      - the concentration of the first kind of solution
      - the concentration of the solution in the first case
      N_04:
      - the percentage of hcl in the second solution
      - the concentration of the second kind of solution
      - the concentration of the solution in the second case
      N_05:
      - the volume of the first solution
      - the number of milliliters of the first kind of solution
      - the amount of the solution in the first case
      N_06:
      - the percentage of hcl in the first solution
      - the concentration of the first kind of solution
      - the concentration of the solution in the first case
      N_08:
      - the percentage of hcl in the mixed solution of the first solution and the
        second solution
      - the concentration of the mixed solution
      - the concentration of the mixed solution
      X_00:
      - the volume of the second solution
      - the number of milliliters of the second kind of solution
      - the amount of the solution in the second case
      X_01:
      - the volume of the mixed solution of the first solution and the second solution
      - the number of milliliters of the mixed solution
      - the amount of the mixed solution
  info:
    answers:
    - s1: '90'
      s2: '150'
    item_id: 604cc853117d71c492a62ea9
    numbers:
      N_00: '1'
      N_01: '60'
      N_02: '1'
      N_03: '40'
      N_04: '15'
      N_05: '60'
      N_06: '40'
      N_07: '1'
      N_08: '25'
    split: null
    variables:
    - s1
    - s2
  text:
    numbers:
      shape:
      - 54
      target: __  0 __ __  1 __ __  2 __ __ __  3 __ __ __ __ __ __ __ __ __  4 __
        __ __ __ __ __ __ __ __ __  5 __ __  6 __ __ __ __  7 __ __  8 __ __ __ __
        __ __ __ __ __ __
    raw: 'a laboratory has 60 ml of a solution that is 40 % hc ##l acid . how many
      ml of 15 % hc ##l acid solution should be mixed with the 60 ml of 40 % acid
      to obtain a solution of 25 % hc ##l ?'
    snippets:
      shape:
      - 9
      - 15
      target:
      - a laboratory has 60 ml of a solution
      - a laboratory has 60 ml of a solution that is 40
      - 'a laboratory has 60 ml of a solution that is 40 % hc ##l'
      - '60 ml of a solution that is 40 % hc ##l acid . how many'
      - '##l acid . how many ml of 15 % hc ##l acid solution should be'
      - acid solution should be mixed with the 60 ml of 40 % acid to obtain
      - be mixed with the 60 ml of 40 % acid to obtain a solution of
      - 'ml of 40 % acid to obtain a solution of 25 % hc ##l ?'
      - '% acid to obtain a solution of 25 % hc ##l ?'
    tokens:
      shape:
      - 54
      target: '[CLS] a laboratory has 60 ml of a solution that is 40 % hc ##l acid
        . how many ml of 15 % hc ##l acid solution should be mixed with the 60 ml
        of 40 % acid to obtain a solution of 25 % hc ##l ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: /(R_00, N_03) R_02: /(R_00, N_04) R_03: +(R_01,
      R_02) R_04: =(N_02, R_03) R_05: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the hours it takes to travel
      N_03:
      - the supply of the current
      N_04:
      - the rate of the gasoline coming back with the current
      X_00:
      - the distance of the one - way gasoline
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the hours to drive on supply of gasoline
      - the traveling hour both against and with the current
      - the total number of hours the boat can travel
      N_03:
      - the speed of motorboat to travel against the current
      - the speed of the motorboat going out against the current
      - the speed of the boat when going out against the current
      N_04:
      - the speed of motorboat to travel to the current
      - the speed of the motorboat coming back with the current
      - the speed of the boat when going back with the current
      X_00:
      - the traveled distance
      - the traveling distance
      - the distance of one - way travel
  info:
    answers:
    - d: '48'
    item_id: 604cc853117d71c492a62f48
    numbers:
      N_00: '1'
      N_01: '1'
      N_02: '4'
      N_03: '20'
      N_04: '30'
    split: null
    variables:
    - d
  text:
    numbers:
      shape:
      - 54
      target: __  0 __ __ __  1  2  2  2 __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __  3 __ __ __ __ __ __ __ __ __ __ __ __  4 __ __ __ __
        __ __ __ __ __ __
    raw: 'a motor ##boat has a four - hour supply of gasoline . how far from the marina
      can it travel if the rate going out against the current is 20 mi / h and the
      rate coming back with the current is 30 mi / h ?'
    snippets:
      shape:
      - 5
      - 15
      target:
      - 'a motor ##boat has a four - hour'
      - 'a motor ##boat has a four - hour supply of gasoline .'
      - 'a motor ##boat has a four - hour supply of gasoline . how'
      - rate going out against the current is 20 mi / h and the rate coming
      - rate coming back with the current is 30 mi / h ?
    tokens:
      shape:
      - 54
      target: '[CLS] a motor ##boat has a four - hour supply of gasoline . how far
        from the marina can it travel if the rate going out against the current is
        20 mi / h and the rate coming back with the current is 30 mi / h ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(R_00, R_01) R_03: =(N_01,
      R_02) R_04: *(N_04, R_00) R_05: *(N_05, R_01) R_06: +(R_04, R_05) R_07: =(N_03,
      R_06) R_08: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the amount of the mixture
      N_03:
      - the cost of the mixture
      N_04:
      - the cost of the first kind of rock per ton
      N_05:
      - the cost of the second type of rock per ton
      X_00:
      - the amount of the crushed rock
      X_01:
      - the amount of the second kind of rock
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the total tons of a mixture
      - the amount of the mixture
      - the total amount of the mixture
      N_03:
      - the dollar cost of applying crushed rock in a construction job
      - the cost of the mixture
      - the total cost of a construction job
      N_04:
      - the dollar price per ton for certain rocks
      - the cost of one rock per ton
      - the dollar per ton of cheaper rock
      N_05:
      - the dollar price per ton for other rocks
      - the cost of the other rock per ton
      - the dollar per ton of expensive rock
      X_00:
      - the tons of the $ 30 per ton rocks in the mixture
      - the amount of one rock
      - the number of pounds of cheaper rock
      X_01:
      - the tons of the $ 40 per ton rocks in the mixture
      - the amount of the other rock
      - the number of pounds of expensive rock
  info:
    answers:
    - t1: '16'
      t2: '8'
    item_id: 604cc853117d71c492a63066
    numbers:
      N_00: '1'
      N_01: '24'
      N_02: '1'
      N_03: '800'
      N_04: '30'
      N_05: '40'
    split: null
    variables:
    - t1
    - t2
  text:
    numbers:
      shape:
      - 54
      target: __  0  1 __ __ __ __ __ __ __ __ __  2 __ __ __ __ __ __ __  3 __ __
        __ __ __ __ __ __ __ __  4 __ __ __ __  5 __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __
    raw: a 24 - ton mixture of crushed rock is needed in a construction job ; it will
      cost $ 800 . if the mixture is composed of rock costing $ 30 per ton and $ 40
      per ton , how many tons of each should be added ?
    snippets:
      shape:
      - 6
      - 15
      target:
      - a 24 - ton mixture of crushed rock
      - a 24 - ton mixture of crushed rock is
      - mixture of crushed rock is needed in a construction job ; it will cost $
      - construction job ; it will cost $ 800 . if the mixture is composed of
      - mixture is composed of rock costing $ 30 per ton and $ 40 per ton
      - costing $ 30 per ton and $ 40 per ton , how many tons of
    tokens:
      shape:
      - 54
      target: '[CLS] a 24 - ton mixture of crushed rock is needed in a construction
        job ; it will cost $ 800 . if the mixture is composed of rock costing $ 30
        per ton and $ 40 per ton , how many tons of each should be added ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(R_00, R_01) R_03: =(N_00,
      R_02) R_04: /(R_00, N_03) R_05: /(R_01, N_04) R_06: +(R_04, R_05) R_07: =(N_02,
      R_06) R_08: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the distance of the two trains
      N_02:
      - the total number of hours of the round trip
      N_03:
      - the speed of the city to go from city a
      N_04:
      - the speed of the rest of the way
      X_00:
      - the distance of the way
      X_01:
      - the distance of the way back of the way
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the sum of the distance driven by the first speed and the distance driven
        by the second speed
      - the distance sam drove from city a to city b
      - the total distance that sam drove
      N_02:
      - the sum of the number of hours driven by the first type of speed and the second
        type of speed
      - the duration of driving from city a to city b
      - the total driving hours
      N_03:
      - the first type of speed
      - the speed at part of the way
      - one driving speed
      N_04:
      - the second type of speed
      - the speed at the rest of the way
      - the other driving speed
      X_00:
      - the distance driven in the first type of speed
      - the distance traveled at 100km per hour
      - the distance that sam drove in one driving speed
      X_01:
      - the distance driven in the second type of speed
      - the distance traveled at 80km per hour
      - the distance that sam drove in the other driving speed
  info:
    answers:
    - d1: '300'
      d2: '200'
    item_id: 604cc853117d71c492a62e54
    numbers:
      N_00: '500'
      N_01: '1'
      N_02: '5.50000000000000'
      N_03: '100'
      N_04: '80'
    split: null
    variables:
    - d1
    - d2
  text:
    numbers:
      shape:
      - 54
      target: __ __ __  0 __ __ __  1 __ __ __ __  2  2  2 __ __ __ __ __ __ __ __
        __  3 __ __ __ __ __ __ __ __ __ __  4 __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __
    raw: sam drove 500 km from city a to city b in 5 . 5 hours . he drove part of
      the way at 100 km / h and the rest of the way at 80 km / h . how far did he
      drive at each speed ?
    snippets:
      shape:
      - 5
      - 15
      target:
      - sam drove 500 km from city a to city b
      - sam drove 500 km from city a to city b in 5 . 5
      - from city a to city b in 5 . 5 hours . he drove part
      - he drove part of the way at 100 km / h and the rest of
      - and the rest of the way at 80 km / h . how far did
    tokens:
      shape:
      - 54
      target: '[CLS] sam drove 500 km from city a to city b in 5 . 5 hours . he drove
        part of the way at 100 km / h and the rest of the way at 80 km / h . how far
        did he drive at each speed ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the ratio of the fraction of the students in the trumpet section to the fraction
        of the band
      N_01:
      - the ratio of the fraction of the students in the trumpet section to the fraction
        of the band
      X_00:
      - the ratio of the number of students in the band to the number of students
        in the trombone section
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the ratio of the trumpet section to the band
      - the fraction of the trumpet section in the band
      - the percentage of the trumpet section
      N_01:
      - the ratio of the trombone section to the band
      - the fraction of the trombone section in the band
      - the percentage of the trombone section
      X_00:
      - the ratio of both trumpet and trombone sections to the band
      - the fraction of trumpet or trombone section in the band
      - the total percentage of the trumpet section and the trombone section
  info:
    answers:
    - f: '0.625000000000000'
    item_id: 60f9186c90be09b72239ec36
    numbers:
      N_00: '0.500000000000000'
      N_01: '0.125000000000000'
    split: null
    variables:
    - f
  text:
    numbers:
      shape:
      - 54
      target: __  0  0  0 __ __ __ __ __ __ __ __ __ __ __ __  1  1  1 __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __
    raw: 0 . 5 of the students in the band are in the trumpet section . 0 . 125 of
      the students in the band are in the trombone section . what fraction of the
      students in the band are in either the trumpet section or the trombone section
      ?
    snippets:
      shape:
      - 2
      - 15
      target:
      - 0 . 5 of the students in the
      - band are in the trumpet section . 0 . 125 of the students in the
    tokens:
      shape:
      - 54
      target: '[CLS] 0 . 5 of the students in the band are in the trumpet section
        . 0 . 125 of the students in the band are in the trombone section . what fraction
        of the students in the band are in either the trumpet section or the trombone
        section ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: -(N_02, R_00) R_03: =(R_01,
      R_02) R_04: /(N_03, 100) R_05: *(R_01, R_04) R_06: +(R_00, R_05) R_07: /(N_06,
      100) R_08: *(N_02, R_07) R_09: =(R_06, R_08) R_10: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the volume of the original antifreeze
      N_03:
      - the percentage of antifreeze in the mixture before some of it is replaced
        with 100 % antifreeze
      N_04:
      - the percentage of antifreeze in the mixture of the first solution and the
        second solution
      N_06:
      - the percentage of antifreeze in the mixture
      X_00:
      - the volume of the replaced liquid
      X_01:
      - the amount of the remaining original solution after the replacement
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the amount of the original liquid
      - the liter capacity of a car radiator
      - the capacity of a radiator
      N_03:
      - the percentage of antifreeze in the original liquid
      - the density of an antifreeze
      - the concentration of antifreeze in the first
      N_06:
      - the percentage of antifreeze in the resulting mixture after some of it is
        replaced with 100 % antifreeze
      - the density of the total mixture
      - the concentration of the mixture antifreeze
      X_00:
      - the amount of the replaced liquid
      - the volume of the 100 % antifreeze to replace
      - the amount of antifreeze replaced
      X_01:
      - the amount of the remaining original liquid after the replacement
      - the volume of the antifreeze that is already inside
      - the amount of the remainder of the liquid
  info:
    answers:
    - r1: '5'
      r2: '1'
    item_id: 604cc853117d71c492a62d25
    numbers:
      N_00: '1'
      N_01: '1'
      N_02: '6'
      N_03: '40'
      N_04: '100'
      N_05: '1'
      N_06: '50'
    split: null
    variables:
    - r2
    - r1
  text:
    numbers:
      shape:
      - 54
      target: __  0 __ __ __ __ __  1  2 __ __ __ __ __ __ __ __ __ __ __ __ __  3
        __ __ __ __ __ __ __ __ __ __ __ __  4 __ __ __ __ __ __ __ __ __ __  5  6
        __ __ __ __ __ __
    raw: 'a car ra ##dia ##tor has a 6 - liter capacity . if the liquid in the ra
      ##dia ##tor is 40 % anti ##free ##ze , how much liquid must be replaced with
      100 % anti ##free ##ze to bring the mixture up to a 50 % solution ?'
    snippets:
      shape:
      - 7
      - 15
      target:
      - 'a car ra ##dia ##tor has a 6'
      - 'a car ra ##dia ##tor has a 6 - liter capacity . if the'
      - 'a car ra ##dia ##tor has a 6 - liter capacity . if the liquid'
      - 'liquid in the ra ##dia ##tor is 40 % anti ##free ##ze , how much'
      - 'how much liquid must be replaced with 100 % anti ##free ##ze to bring the'
      - '##ze to bring the mixture up to a 50 % solution ?'
      - to bring the mixture up to a 50 % solution ?
    tokens:
      shape:
      - 54
      target: '[CLS] a car ra ##dia ##tor has a 6 - liter capacity . if the liquid
        in the ra ##dia ##tor is 40 % anti ##free ##ze , how much liquid must be replaced
        with 100 % anti ##free ##ze to bring the mixture up to a 50 % solution ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(N_01, R_00) R_03: *(N_04,
      R_01) R_04: =(R_02, R_03) R_05: +(N_06, R_01) R_06: *(N_09, R_00) R_07: =(R_05,
      R_06) R_08: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the value of twice the first number minus the second number
      N_04:
      - the ratio of the second number to the first number
      N_06:
      - the value of twice the first number plus the second number
      N_09:
      - the ratio of the second number to the first number
      X_00:
      - the value of the first number
      X_01:
      - the value of the second number
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the added value to the first in the first equation
      - the value of twice the second minus the first
      - the value of twice the second number minus the first number
      N_04:
      - the value of the multiplier to the second number in the first equation that
        equaled add 7 to the first
      - a number in the phrase " twice the second "
      - a number in the phrase " twice "
      N_06:
      - the added value to the second in the second equation
      - the value of four times the first minus the second
      - the value of 4 times the first number minus the second number
      N_09:
      - the value of the multiplier to the first number in the second equation that
        equaled add 20 to the second
      - a number in the phrase " four times the first "
      - a number in the phrase " four "
      X_00:
      - the value of the first number
      - the value of the first number
      - the value of the first number
      X_01:
      - the value of the second number
      - the value of the second number
      - the value of the second number
  info:
    answers:
    - f: '6.71428571428571'
      s: '6.85714285714286'
    item_id: 604cc853117d71c492a62ff0
    numbers:
      N_00: '1'
      N_01: '7'
      N_02: '1'
      N_03: '1'
      N_04: '2'
      N_05: '2'
      N_06: '20'
      N_07: '2'
      N_08: '1'
      N_09: '4'
      N_10: '1'
    split: null
    variables:
    - f
    - s
  text:
    numbers:
      shape:
      - 54
      target: __ __ __ __  0 __ __ __ __ __ __ __  1 __ __  2  2 __ __  3 __ __ __  4
        __  5  5 __ __ __  6 __ __  7  7 __ __  8 __ __ __  9 __ __ 10 10 __ __ __
        __ __ __ __ __
    raw: i think of a pair of numbers . if i add 7 to the first , i obtain a number
      which is twice the second . if i add 20 to the second , i obtain a number which
      is four times the first . what are the numbers ?
    snippets:
      shape:
      - 11
      - 15
      target:
      - i think of a pair of numbers . if i add
      - pair of numbers . if i add 7 to the first , i obtain a
      - . if i add 7 to the first , i obtain a number which is
      - 7 to the first , i obtain a number which is twice the second .
      - ', i obtain a number which is twice the second . if i add 20'
      - obtain a number which is twice the second . if i add 20 to the
      - twice the second . if i add 20 to the second , i obtain a
      - . if i add 20 to the second , i obtain a number which is
      - 20 to the second , i obtain a number which is four times the first
      - ', i obtain a number which is four times the first . what are the'
      - a number which is four times the first . what are the numbers ?
    tokens:
      shape:
      - 54
      target: '[CLS] i think of a pair of numbers . if i add 7 to the first , i obtain
        a number which is twice the second . if i add 20 to the second , i obtain
        a number which is four times the first . what are the numbers ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: /(N_06, 100) R_02: *(R_00, R_01) R_03: +(N_04,
      R_02) R_04: =(N_02, R_03) R_05: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the total amount of salary from furniture
      N_04:
      - the monthly salary of the furniture
      N_06:
      - the percentage of commission on the amount of furniture
      X_00:
      - the number of sales
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the monthly salary in the first case
      - the amount of monthly salary in the first case
      - the amount of a fixed monthly salary
      N_04:
      - the base salary in the second case
      - the amount of basic monthly salary without commission in the second case
      - the amount of a basic monthly salary
      N_06:
      - the rate of commission on the amount of furniture sold in the second case
      - the commission rate in the second case
      - the rate of a commission
      X_00:
      - the amount of furniture needed to be sold for the amount of sales of the 2
        choices to be equal
      - the amount of furniture sold during the month
      - the amount of furniture
  info:
    answers:
    - f: '5000'
    item_id: 604cc853117d71c492a62c36
    numbers:
      N_00: '1'
      N_01: '1'
      N_02: '1800'
      N_03: '1'
      N_04: '1600'
      N_05: '1'
      N_06: '4'
      N_07: '2'
    split: null
    variables:
    - f
  text:
    numbers:
      shape:
      - 54
      target: __ __ __  0 __ __ __  1  2 __ __ __ __ __ __ __ __  3 __ __ __  4 __
        __  5  6 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __  7 __
        __ __ __ __ __ __
    raw: juliet has a choice between receiving an 1800 dollars monthly salary from
      furniture by design or a base salary of 1600 dollars and a 4 % commission on
      the amount of furniture she sells during the month . for what amount of sales
      will the 2 choices be equal ?
    snippets:
      shape:
      - 8
      - 15
      target:
      - juliet has a choice between receiving an 1800 dollars monthly
      - juliet has a choice between receiving an 1800 dollars monthly salary from
        furniture by
      - juliet has a choice between receiving an 1800 dollars monthly salary from
        furniture by design
      - monthly salary from furniture by design or a base salary of 1600 dollars and
        a
      - by design or a base salary of 1600 dollars and a 4 % commission on
      - a base salary of 1600 dollars and a 4 % commission on the amount of
      - base salary of 1600 dollars and a 4 % commission on the amount of furniture
      - for what amount of sales will the 2 choices be equal ?
    tokens:
      shape:
      - 54
      target: '[CLS] juliet has a choice between receiving an 1800 dollars monthly
        salary from furniture by design or a base salary of 1600 dollars and a 4 %
        commission on the amount of furniture she sells during the month . for what
        amount of sales will the 2 choices be equal ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(N_04, R_01) R_03: *(R_00,
      R_02) R_04: =(N_02, R_03) R_05: -(N_04, R_01) R_06: *(R_00, R_05) R_07: =(N_03,
      R_06) R_08: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the distance the rowing team can row with the current
      N_03:
      - the distance of traveling upstream
      N_04:
      - the speed of the rowing team in calm water
      X_00:
      - the amount of time the rowing team traveled in calm water
      X_01:
      - the rate of the current
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the amount of distance a rowing team can row with the current in the unit
        amount of time
      - the distance of rowing in the current direction
      - the distance that the rowing team can row downstream
      N_03:
      - the amount of distance a rowing team can row against the current in the unit
        amount of time
      - the distance of rowing against the current direction
      - the distance that the rowing team can row upstream
      N_04:
      - the rate of the rowing team in calm water
      - the speed of the rowing
      - the rate of the rowing team in calm water
      X_00:
      - the unit amount of time
      - the hour of the time
      - the rowing time
      X_01:
      - the rate of current
      - the speed of the current per hour
      - the rate of the current
  info:
    answers:
    - c: '5'
      t: '1'
    item_id: 604cc853117d71c492a62db7
    numbers:
      N_00: '1'
      N_01: '1'
      N_02: '25'
      N_03: '15'
      N_04: '20'
    split: null
    variables:
    - t
    - c
  text:
    numbers:
      shape:
      - 54
      target: __ __ __ __ __ __  0 __ __  1 __ __ __ __  2 __ __ __ __ __ __ __ __
        __ __ __  3 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __  4 __ __ __ __ __
        __ __ __ __ __ __
    raw: rowing with the current of a river , a rowing team can row 25 mi in the same
      amount of time it takes to row 15 mi against the current . the rate of the rowing
      team in calm water is 20 mph . find the rate of the current .
    snippets:
      shape:
      - 5
      - 15
      target:
      - rowing with the current of a river , a rowing team can row
      - with the current of a river , a rowing team can row 25 mi in
      - river , a rowing team can row 25 mi in the same amount of time
      - amount of time it takes to row 15 mi against the current . the rate
      - the rowing team in calm water is 20 mph . find the rate of the
    tokens:
      shape:
      - 54
      target: '[CLS] rowing with the current of a river , a rowing team can row 25
        mi in the same amount of time it takes to row 15 mi against the current .
        the rate of the rowing team in calm water is 20 mph . find the rate of the
        current . [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: *(N_01, R_00) R_03: *(N_03,
      R_01) R_04: +(R_02, R_03) R_05: =(N_08, R_04) R_06: +(R_00, R_01) R_07: =(N_06,
      R_06) R_08: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the price of an adult ticket
      N_03:
      - the price of an child ticket
      N_06:
      - the total number of tickets sold
      N_08:
      - the total tickets sold
      X_00:
      - the number of adult tickets sold
      X_01:
      - the number of child's tickets
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the price of an adult ticket in dollars
      - the cost of one adult ticket
      - the ticket cost for one adult
      N_03:
      - the price of a child ticket in dollars
      - the cost of one child ticket
      - the ticket cost for one child
      N_06:
      - the sum of the number of adult tickets sold and the number of child tickets
        sold
      - the total count of tickets sold
      - the total number of tickets sold
      N_08:
      - the sum of the number of dollars earned from selling adult tickets and the
        number of dollars earned from selling child tickets
      - the total revenue of tickets sold
      - the total cost of tickets sold
      X_00:
      - the number of adults tickets sold
      - the count of adult tickets sold
      - the number of adult tickets
      X_01:
      - the number of children tickets sold
      - the count of child tickets sold
      - the number of child tickets
  info:
    answers:
    - a: '500'
      c: '400'
    item_id: 604cc853117d71c492a62c53
    numbers:
      N_00: '1'
      N_01: '7'
      N_02: '1'
      N_03: '4'
      N_04: '1'
      N_05: '1'
      N_06: '900'
      N_07: '1'
      N_08: '5100'
    split: null
    variables:
    - a
    - c
  text:
    numbers:
      shape:
      - 54
      target: __  0 __ __ __  1 __ __  2 __ __  3 __ __  4 __ __ __ __ __  5 __ __  6
        __ __ __ __  7 __ __  8  8  8 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __
    raw: a movie theater charges 7 dollars for an adult and 4 dollars for a child
      ' s ticket . one night , 900 tickets were sold for a total of 5 , 100 dollars
      . how many adult tickets were sold ? how many child ' s tickets were sold ?
    snippets:
      shape:
      - 9
      - 15
      target:
      - a movie theater charges 7 dollars for an
      - a movie theater charges 7 dollars for an adult and 4 dollars
      - a movie theater charges 7 dollars for an adult and 4 dollars for a child
      - charges 7 dollars for an adult and 4 dollars for a child ' s ticket
      - for an adult and 4 dollars for a child ' s ticket . one night
      - for a child ' s ticket . one night , 900 tickets were sold for
      - ''' s ticket . one night , 900 tickets were sold for a total of'
      - night , 900 tickets were sold for a total of 5 , 100 dollars .
      - tickets were sold for a total of 5 , 100 dollars . how many adult
    tokens:
      shape:
      - 54
      target: '[CLS] a movie theater charges 7 dollars for an adult and 4 dollars
        for a child '' s ticket . one night , 900 tickets were sold for a total of
        5 , 100 dollars . how many adult tickets were sold ? how many child '' s tickets
        were sold ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_01, N_03) R_02: *(N_04, R_00) R_03: +(R_01,
      R_02) R_04: =(N_07, R_03) R_05: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the hourly pay of the first hour
      N_03:
      - the gross pay of the first hour
      N_04:
      - the hourly pay of the additional hour
      N_07:
      - the total pay of the job
      X_00:
      - the amount of overtime pay
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the standard hourly pay of an employee for the first 40 hours
      - the cost per hour in the first 40 hours
      - the basic wage of the employee per hour for the first 40 hours
      N_03:
      - the number of hours an employee can get the standard hourly pay
      - the hours of the first work
      - the amount of time worked for the basic wage
      N_04:
      - the additional hourly pay of an employee during overtime
      - the cost per hour in the additional hour
      - the extra wage of the employee per hour
      N_07:
      - the gross payment of an employee
      - the total cost of work
      - the total amount of the employee's pay
      X_00:
      - the number of hours working overtime
      - the hours of the additional work
      - the amount of overtime the employee worked
  info:
    answers:
    - o: '10.7500000000000'
    item_id: 604cc853117d71c492a630b9
    numbers:
      N_00: '1'
      N_01: '11.2500000000000'
      N_02: '1'
      N_03: '40'
      N_04: '16'
      N_05: '1'
      N_06: '144'
      N_07: '622'
    split: null
    variables:
    - o
  text:
    numbers:
      shape:
      - 54
      target: __  0 __ __ __ __  1  1  1 __ __ __ __  2  3 __ __ __  4 __ __ __ __
        __ __ __  5 __ __ __ __ __ __ __ __ __  6 __ __ __  7  7 __ __ __ __ __ __
        __ __ __ __ __ __
    raw: 'an employee is paid $ 11 . 25 per hour for the first 40 hours and $ 16 for
      each additional hour . during the first week on the job , the employee '' s
      gross pay was $ 62 ##2 . how many hours of overtime did the employee work ?'
    snippets:
      shape:
      - 8
      - 15
      target:
      - an employee is paid $ 11 . 25
      - an employee is paid $ 11 . 25 per hour for the first
      - 11 . 25 per hour for the first 40 hours and $ 16 for each
      - . 25 per hour for the first 40 hours and $ 16 for each additional
      - for the first 40 hours and $ 16 for each additional hour . during the
      - for each additional hour . during the first week on the job , the employee
      - 'the job , the employee '' s gross pay was $ 62 ##2 . how'
      - 'employee '' s gross pay was $ 62 ##2 . how many hours of overtime'
    tokens:
      shape:
      - 54
      target: '[CLS] an employee is paid $ 11 . 25 per hour for the first 40 hours
        and $ 16 for each additional hour . during the first week on the job , the
        employee '' s gross pay was $ 62 ##2 . how many hours of overtime did the
        employee work ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 13
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: /(N_02, 100) R_03: *(R_00,
      R_02) R_04: /(N_05, 100) R_05: *(R_01, R_04) R_06: +(R_03, R_05) R_07: =(N_07,
      R_06) R_08: *(N_04, R_00) R_09: -(R_08, R_01) R_10: =(N_03, R_09) R_11: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the total amount of money ashley invested
      N_02:
      - the interest rate of the first kind
      N_03:
      - the value of the amount of money ashley invested in the second kind minus
        the amount of money ashley invested
      N_04:
      - a number in the phrase " twice that amount of money "
      N_05:
      - the interest rate of the second kind
      N_07:
      - total earned in interest
      X_00:
      - the amount of money ashley invested in the first kind
      X_01:
      - the amount of money ashley invested in the second kind
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the interest rate of the first investment
      - the interest ratio at one part
      - the interest rate of 5 % investment
      N_03:
      - the value of 2 times the money invested in the first investment minus the
        money invested in the second investment
      - the value of 2 times some of the money at 5 % simple interest minus some of
        the money at 6. 5 % simple interest
      - the value of twice the amount of 5 % investment minus the amount of 6. 5 %
        investment
      N_04:
      - the multiplier for the money invested in the first investment
      - the coefficient of some of the money at 5 % simple interest
      - a number in the phrase " twice "
      N_05:
      - the interest rate of the second investment
      - the interest ratio at another part
      - the interest rate of 6. 5 % investment
      N_07:
      - the total interest earned from investment
      - the total interest
      - the total interest from the two investments
      X_00:
      - the money invested in the first investment
      - the amount of the money at 5 % simple interest
      - the amount of 5 % investment
      X_01:
      - the money invested in the second investment
      - the amount of the money at 6. 5 % simple interest
      - the amount of 6. 5 % investment
  info:
    answers:
    - i1: '1800'
      i2: '3200'
    item_id: 604cc853117d71c492a63062
    numbers:
      N_00: '5000'
      N_01: '1'
      N_02: '5'
      N_03: '400'
      N_04: '2'
      N_05: '6.50000000000000'
      N_06: '1'
      N_07: '298'
    split: null
    variables:
    - i1
    - i2
  text:
    numbers:
      shape:
      - 78
      target: __ __ __ __  0 __  1 __ __ __ __ __ __ __ __ __  2 __ __ __ __ __  3
        __ __  4 __ __ __  5  5  5 __ __ __  6 __ __ __ __ __  7 __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __
    raw: ashley won $ 5000 in a contest . she invested some of the money at 5 % simple
      interest and $ 400 less than twice that amount at 6 . 5 % . in one year , she
      earned $ 298 in interest . how much did she invest at each rate ?
    snippets:
      shape:
      - 8
      - 15
      target:
      - ashley won $ 5000 in a contest . she invested some
      - ashley won $ 5000 in a contest . she invested some of the
      - she invested some of the money at 5 % simple interest and $ 400 less
      - at 5 % simple interest and $ 400 less than twice that amount at 6
      - simple interest and $ 400 less than twice that amount at 6 . 5 %
      - 400 less than twice that amount at 6 . 5 % . in one year
      - at 6 . 5 % . in one year , she earned $ 298 in
      - in one year , she earned $ 298 in interest . how much did she
    tokens:
      shape:
      - 78
      target: '[CLS] ashley won $ 5000 in a contest . she invested some of the money
        at 5 % simple interest and $ 400 less than twice that amount at 6 . 5 % .
        in one year , she earned $ 298 in interest . how much did she invest at each
        rate ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 13
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: /(R_00, N_00) R_03: /(R_01,
      N_01) R_04: +(R_02, R_03) R_05: =(N_03, R_04) R_06: +(R_00, R_01) R_07: =(N_02,
      R_06) R_08: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the speed on the highway
      N_01:
      - the speed of the city
      N_02:
      - the distance of traveling on the highway
      N_03:
      - the number of gallons of gasoline recently drove
      X_00:
      - the distance of driving on the highway
      X_01:
      - the distance of driving on the city
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of miles the new car travels per gallon on the highway
      - the distance that the car can drive per gallon on the highway
      - the miles per gallon that his car gets on the highway
      N_01:
      - the number of miles the new car travels per gallon in the city
      - the distance that the car can drive per gallon in the city
      - the miles per gallon that his car gets in the city
      N_02:
      - the number of miles the new car drove on 11 gallons
      - the distance that the car drove on 11 gallons of gasoline
      - the total driving distance
      N_03:
      - the number of gallons of gasoline used for the new car to travel 365 miles
      - the amount of gasoline that the car needs to drive 365 miles
      - the total amount of gasoline used
      X_00:
      - the number of miles samuel drove on the highway
      - the distance that the car drove on the highway
      - the driving distance on the highway
      X_01:
      - the number of miles samuel drove in the city
      - the distance that the car drove in the city
      - the driving distance in the city
  info:
    answers:
    - c: '180'
      h: '185'
    item_id: 604cc853117d71c492a62ebc
    numbers:
      N_00: '37'
      N_01: '30'
      N_02: '365'
      N_03: '11'
    split: null
    variables:
    - h
    - c
  text:
    numbers:
      shape:
      - 78
      target: __ __ __ __ __ __ __ __ __  0 __ __ __ __ __ __ __  1 __ __ __ __ __
        __ __ __ __ __  2 __ __  3 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __
    raw: samuel has found that his new car gets 37 miles per gallon on the highway
      and 30 miles per gallon in the city . he recently drove 365 miles on 11 gallons
      of gasoline . how many miles did he drive on the highway ? how many miles did
      he drive in the city ?
    snippets:
      shape:
      - 4
      - 15
      target:
      - has found that his new car gets 37 miles per gallon on the highway and
      - miles per gallon on the highway and 30 miles per gallon in the city .
      - in the city . he recently drove 365 miles on 11 gallons of gasoline .
      - . he recently drove 365 miles on 11 gallons of gasoline . how many miles
    tokens:
      shape:
      - 78
      target: '[CLS] samuel has found that his new car gets 37 miles per gallon on
        the highway and 30 miles per gallon in the city . he recently drove 365 miles
        on 11 gallons of gasoline . how many miles did he drive on the highway ? how
        many miles did he drive in the city ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 13
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: *(N_01, R_00) R_03: *(N_01,
      R_01) R_04: +(R_02, R_03) R_05: =(N_02, R_04) R_06: -(R_00, R_01) R_07: =(N_03,
      R_06) R_08: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of hours each train traveled
      N_02:
      - the distance between the two trains after 10 hours
      N_03:
      - the value of the rate of the fast train minus the rate of the slow train
      X_00:
      - the rate of the fast train
      X_01:
      - the rate of the slow train
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of hours traveled in the opposite direction
      - the hours traveled by the two trains
      - the traveling hour
      N_02:
      - the distance between the two trains after 10 hours
      - the miles apart of the two trains after 10 hours
      - the distance between the two trains after traveling 10 hours in the opposite
        directions
      N_03:
      - the difference of the speed of the fast train and the speed of the slow train
      - the value of the first train's speed minus the second train's speed
      - the value of the rate of the faster train minus that of the slower train
      X_00:
      - the speed of the fast train traveling in the opposite direction of the slow
        train
      - the speed of the first train
      - the rate of the faster train
      X_01:
      - the speed of the slow train traveling in the opposite direction of the fast
        train
      - the speed of the second train
      - the rate of the slower train
  info:
    answers:
    - t1: '72.5000000000000'
      t2: '67.5000000000000'
    item_id: 604cc853117d71c492a62fff
    numbers:
      N_00: '2'
      N_01: '10'
      N_02: '1400'
      N_03: '5'
    split: null
    variables:
    - t1
    - t2
  text:
    numbers:
      shape:
      - 78
      target: __  0 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __  1 __ __
        __ __  2 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __  3 __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __
    raw: two trains started from the same station at the same time and traveled in
      opposite directions . after traveling 10 hours , they were 1400 miles apart
      . the rate of the fast train exceeded the rate of the slow train by 5 miles
      per hour . what is the rate of each train ?
    snippets:
      shape:
      - 4
      - 15
      target:
      - two trains started from the same station at
      - traveled in opposite directions . after traveling 10 hours , they were 1400
        miles apart
      - after traveling 10 hours , they were 1400 miles apart . the rate of the
      - the rate of the slow train by 5 miles per hour . what is the
    tokens:
      shape:
      - 78
      target: '[CLS] two trains started from the same station at the same time and
        traveled in opposite directions . after traveling 10 hours , they were 1400
        miles apart . the rate of the fast train exceeded the rate of the slow train
        by 5 miles per hour . what is the rate of each train ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 13
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: *(N_00, R_00) R_03: *(N_01,
      R_01) R_04: +(R_02, R_03) R_05: =(N_04, R_04) R_06: +(R_00, R_01) R_07: =(N_02,
      R_06) R_08: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of credits to play a red cards
      N_01:
      - the number of credits to use a blue cards
      N_02:
      - the number of cards to buy
      N_04:
      - the total number of credits
      X_00:
      - the number of red cards
      X_01:
      - the number of blue cards
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the credits worth of a red card
      - the credit of red cards
      - the number of credits from one red card
      N_01:
      - the credits worth of a blue card
      - the credit of blue cards
      - the number of credits from one blue card
      N_02:
      - the total number of cards to play the game
      - the number of total cards
      - the number of cards
      N_04:
      - the credits to buy all cards
      - the credit of the total cards
      - the total number of credits
      X_00:
      - the number of red cards bought
      - the number of red cards
      - the number of red cards
      X_01:
      - the number of blue cards bought
      - the number of blue cards
      - the number of blue cards
  info:
    answers:
    - b: '12'
      r: '8'
    item_id: 604cc853117d71c492a62c94
    numbers:
      N_00: '3'
      N_01: '5'
      N_02: '20'
      N_03: '1'
      N_04: '84'
    split: null
    variables:
    - r
    - b
  text:
    numbers:
      shape:
      - 78
      target: __ __ __ __ __  0 __ __ __ __ __ __ __  1 __ __ __ __ __ __ __  2 __
        __ __  3 __ __ __  4 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __
    raw: red cards are worth 3 credits , while blue cards are worth 5 credits . you
      need any combination of 20 cards to play a game . with 84 credits to buy cards
      , how many blue cards will you have when you play ? how many red cards will
      you have when you play ?
    snippets:
      shape:
      - 5
      - 15
      target:
      - red cards are worth 3 credits , while blue cards are worth
      - credits , while blue cards are worth 5 credits . you need any combination
        of
      - credits . you need any combination of 20 cards to play a game . with
      - any combination of 20 cards to play a game . with 84 credits to buy
      - cards to play a game . with 84 credits to buy cards , how many
    tokens:
      shape:
      - 78
      target: '[CLS] red cards are worth 3 credits , while blue cards are worth 5
        credits . you need any combination of 20 cards to play a game . with 84 credits
        to buy cards , how many blue cards will you have when you play ? how many
        red cards will you have when you play ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 13
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: *(N_02, R_00) R_03: =(R_01,
      R_02) R_04: *(N_03, R_01) R_05: *(N_04, R_00) R_06: +(R_04, R_05) R_07: =(N_05,
      R_06) R_08: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the ratio of the worth of the first stock to the worth of the second stock
      N_03:
      - the number of shares of the second stock
      N_04:
      - the number of shares of the second stock
      N_05:
      - the total worth of the two stocks
      X_00:
      - the number of shares of the first stock
      X_01:
      - the number of shares of the other stock
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the ratio of the price of a share of the more valuable stock to the price
        of a share of the less valuable stock
      - the ratio of the price of the valuable stock to the price of the other stock
      - the ratio of the value per share of the more valuable stock to that of the
        less valuable stock
      N_03:
      - the number of shares of the more valuable stock
      - the number of valuable stocks
      - the number of shares of the more valuable stock
      N_04:
      - the number of shares of the less valuable stock
      - the number of other stocks
      - the number of shares of the less valuable stock
      N_05:
      - the total value of the two stocks
      - the sum of the value of valuable stocks and the value of other stocks
      - the total value of all the stocks
      X_00:
      - the price of a share of the less valuable stock
      - the price of the other stocks
      - the unit cost of the less expensive stock
      X_01:
      - the price of a share of the more valuable stock
      - the price of the valuable stock
      - the unit value of the more valuable stock
  info:
    answers:
    - s1: '78'
      s2: '39'
    item_id: 604cc853117d71c492a62ccf
    numbers:
      N_00: '2'
      N_01: '1'
      N_02: '2'
      N_03: '14'
      N_04: '26'
      N_05: '2106'
    split: null
    variables:
    - s2
    - s1
  text:
    numbers:
      shape:
      - 78
      target: __ __ __  0 __ __ __  1 __ __ __ __ __  2 __ __ __ __ __ __ __ __ __
        __  3 __ __ __ __ __ __ __  4 __ __ __ __ __ __ __ __ __ __ __ __  5  5 __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __
    raw: 'matthew has two different stocks . one of the stocks is worth twice as much
      per share as the other . he has 14 shares of the more valuable stock and 26
      shares of the other stock . his total assets in stocks are 210 ##6 dollars .
      how much is the more expensive stock per share ?'
    snippets:
      shape:
      - 6
      - 15
      target:
      - matthew has two different stocks . one of the stocks
      - matthew has two different stocks . one of the stocks is worth twice as
      - . one of the stocks is worth twice as much per share as the other
      - share as the other . he has 14 shares of the more valuable stock and
      - shares of the more valuable stock and 26 shares of the other stock . his
      - '. his total assets in stocks are 210 ##6 dollars . how much is the'
    tokens:
      shape:
      - 78
      target: '[CLS] matthew has two different stocks . one of the stocks is worth
        twice as much per share as the other . he has 14 shares of the more valuable
        stock and 26 shares of the other stock . his total assets in stocks are 210
        ##6 dollars . how much is the more expensive stock per share ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 13
    tokens: 'R_00: __NEW_VAR(, ) R_01: /(N_00, N_01) R_02: /(N_00, N_02) R_03: +(R_01,
      R_02) R_04: *(R_00, R_03) R_05: =(N_03, R_04) R_06: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of dishes that they need to rinsed
      N_01:
      - the number of dishes that john can rinse the dishes
      N_02:
      - the number of minutes it takes for john to rinse the dishes
      N_03:
      - the number of dishes that john can rinsed
      X_00:
      - the number of minutes it takes for dishes to rinsed the dishes together
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of dishes that need to be rinsed
      - the number of dishes needed to be rinsed
      - the total number of dishes to be washed
      N_01:
      - the length of minutes for john to rinse the dishes all
      - the length of time for john to rinse all dishes by himself
      - the number of minutes it takes john to rinse the dishes alone
      N_02:
      - the length of minutes for his friend bob to rinse the dishes all
      - the length of time for bob to rinse all dishes by himself
      - the number of minutes it takes bob to rinse the dishes alone
      N_03:
      - the number of dishes that john and bob will rinse together
      - the number of dishes necessary to be rinsed
      - the number of dishes to be washed by john and bob
      X_00:
      - the length of minutes needed for them to rinse the dishes all together
      - the length of time to rinse all dishes with john and tim
      - the number of minutes it takes for john and bob to wash the dishes together
  info:
    answers:
    - h: '54'
    item_id: 60f9186c90be09b72239ecc9
    numbers:
      N_00: '810'
      N_01: '135'
      N_02: '90'
      N_03: '810'
    split: null
    variables:
    - h
  text:
    numbers:
      shape:
      - 78
      target: __ __ __  0  0 __ __ __ __ __ __ __ __ __ __ __ __ __ __  1 __ __ __
        __ __ __ __ __ __ __  2 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __  3  3 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __
    raw: 'there are 81 ##0 dishes that need to be ri ##nsed . john can ri ##nse them
      in 135 minutes by himself . it will take his friend bob 90 minutes to ri ##nse
      the same dishes . how long , in minutes , will it take them if they ri ##nse
      the 81 ##0 dishes together ?'
    snippets:
      shape:
      - 4
      - 15
      target:
      - 'there are 81 ##0 dishes that need to be ri'
      - '. john can ri ##nse them in 135 minutes by himself . it will take'
      - '. it will take his friend bob 90 minutes to ri ##nse the same dishes'
      - 'take them if they ri ##nse the 81 ##0 dishes together ?'
    tokens:
      shape:
      - 78
      target: '[CLS] there are 81 ##0 dishes that need to be ri ##nsed . john can
        ri ##nse them in 135 minutes by himself . it will take his friend bob 90 minutes
        to ri ##nse the same dishes . how long , in minutes , will it take them if
        they ri ##nse the 81 ##0 dishes together ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 13
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_01, N_03) R_02: +(N_05, R_01) R_03: =(R_00,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of bottles of mustard at the first table
      N_03:
      - the number of bottles of mustard at the second table
      N_05:
      - the number of bottles of mustard at the third table
      X_00:
      - the total number of bottles of mustard
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of bottles the waitress found at the first table
      - the number of bottles at the first table
      - the number of bottles at the first table
      N_03:
      - the number of bottles the waitress found at the second table
      - the number of bottles at the second table
      - the number of bottles at the second table
      N_05:
      - the number of bottles the waitress found of the third table
      - the number of bottles at the third table
      - the number of bottles at the third table
      X_00:
      - the total number of bottles the waitress found
      - the number of total bottles
      - the total bottles of mustard
  info:
    answers:
    - b: '0.875000000000000'
    item_id: 60f9186c90be09b72239ea93
    numbers:
      N_00: '1'
      N_01: '0.250000000000000'
      N_02: '1'
      N_03: '0.250000000000000'
      N_04: '2'
      N_05: '0.375000000000000'
      N_06: '3'
    split: null
    variables:
    - b
  text:
    numbers:
      shape:
      - 78
      target: __ __ __ __ __ __  0 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __  1  1  1
        __ __ __  2 __ __  3  3  3 __ __ __  4 __ __ __  5  5  5 __ __ __  6 __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __
    raw: before starting her shift , a waitress checks to make sure there is enough
      mustard for her customers . she finds 0 . 25 bottles at the first table , 0
      . 25 bottles at the second table , and 0 . 375 bottles at the third table .
      altogether , how many bottles of mustard does the waitress find ?
    snippets:
      shape:
      - 7
      - 15
      target:
      - before starting her shift , a waitress checks to make sure there is
      - mustard for her customers . she finds 0 . 25 bottles at the first table
      - finds 0 . 25 bottles at the first table , 0 . 25 bottles at
      - 25 bottles at the first table , 0 . 25 bottles at the second table
      - ', 0 . 25 bottles at the second table , and 0 . 375 bottles'
      - bottles at the second table , and 0 . 375 bottles at the third table
      - and 0 . 375 bottles at the third table . altogether , how many bottles
    tokens:
      shape:
      - 78
      target: '[CLS] before starting her shift , a waitress checks to make sure there
        is enough mustard for her customers . she finds 0 . 25 bottles at the first
        table , 0 . 25 bottles at the second table , and 0 . 375 bottles at the third
        table . altogether , how many bottles of mustard does the waitress find ?
        [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 13
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_02, R_00) R_02: +(N_01, R_01) R_03: *(N_04,
      R_00) R_04: +(N_03, R_03) R_05: =(R_02, R_04) R_06: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the cost of renting the room by caesar hall
      N_02:
      - the cost of each meal for venus hall
      N_03:
      - the cost of renting the room in dollars
      N_04:
      - the cost of each meal for venus hall
      X_00:
      - the number of guests when the two halls be the same
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the rent of caesar hall
      - the dollars charged to rent a room at caesar's
      - the number of dollars caesar's charges to rent the room
      N_02:
      - the price per meal at caesar hall
      - the dollars charged for each meal at caesar's
      - the price of a meal at caesar's
      N_03:
      - the rent of venus hall
      - the dollars charged to rent a room at venus hall
      - the number of dollars venus hall charges to rent the room
      N_04:
      - the price per meal at venus hall
      - the dollars charged for each meal at venus hall
      - the price of a meal at venus hall
      X_00:
      - the number of meals that makes the cost of the two halls the same
      - the number of meals to pay for
      - the number of meals for the costs of the two halls to be the same
  info:
    answers:
    - m: '60'
    item_id: 604cc852117d71c492a62c08
    numbers:
      N_00: '1'
      N_01: '800'
      N_02: '30'
      N_03: '500'
      N_04: '35'
      N_05: '2'
    split: null
    variables:
    - m
  text:
    numbers:
      shape:
      - 78
      target: __ __ __ __ __ __  0 __ __ __ __ __ __ __ __ __ __  1 __ __ __ __ __
        __  2 __ __ __ __ __ __ __ __  3 __ __ __ __ __ __  4 __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __  5 __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __
    raw: student council wants to rent a banquet hall for the prom . caesar ' s charges
      800 dollars to rent the room and 30 dollars for each meal . venus hall charges
      500 dollars to rent the room and 35 dollars for each meal . how many guests
      must attend the prom for the costs of the two halls to be the same ?
    snippets:
      shape:
      - 6
      - 15
      target:
      - student council wants to rent a banquet hall for the prom . caesar
      - the prom . caesar ' s charges 800 dollars to rent the room and 30
      - 800 dollars to rent the room and 30 dollars for each meal . venus hall
      - for each meal . venus hall charges 500 dollars to rent the room and 35
      - 500 dollars to rent the room and 35 dollars for each meal . how many
      - the prom for the costs of the two halls to be the same ?
    tokens:
      shape:
      - 78
      target: '[CLS] student council wants to rent a banquet hall for the prom . caesar
        '' s charges 800 dollars to rent the room and 30 dollars for each meal . venus
        hall charges 500 dollars to rent the room and 35 dollars for each meal . how
        many guests must attend the prom for the costs of the two halls to be the
        same ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 13
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(R_00, R_01) R_03: =(N_03,
      R_02) R_04: *(N_04, R_00) R_05: *(N_05, R_01) R_06: +(R_04, R_05) R_07: =(N_07,
      R_06) R_08: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_03:
      - the total number of legs of ticks and mosquitoes
      N_04:
      - the number of legs of ticks
      N_05:
      - the number of legs of mosquitoes and mosquitoes combined
      N_07:
      - the total number of legs
      X_00:
      - the number of tickes
      X_01:
      - the number of mosquitoes
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_03:
      - the total number of ticks and mosquitoes
      - the sum of the number of ticks and mosquitoes
      - the total of ticks and mosquitoes slapped
      N_04:
      - the number of legs of a tick
      - the number of legs ticks have
      - the legs of ticks
      N_05:
      - the number of legs of a mosquito
      - the number of legs mosquitoes have
      - the legs of mosquitoes
      N_07:
      - the total number of legs
      - the sum of the number of tick legs and mosquito legs
      - the total number of legs of all pests slapped
      X_00:
      - the number of ticks
      - the number of ticks
      - the number of ticks slapped
      X_01:
      - the number of mosquitoes
      - the number of mosquitoes
      - the number of mosquitos slapped
  info:
    answers:
    - m: '100'
      t: '80'
    item_id: 604cc853117d71c492a62cec
    numbers:
      N_00: '1'
      N_01: '1'
      N_02: '1'
      N_03: '180'
      N_04: '8'
      N_05: '6'
      N_06: '1'
      N_07: '1240'
    split: null
    variables:
    - t
    - m
  text:
    numbers:
      shape:
      - 78
      target: __  0 __ __ __ __ __ __  1 __ __ __ __ __ __ __  2 __ __  3 __ __ __
        __ __ __ __ __ __ __ __  4 __ __ __ __ __ __  5 __ __ __ __ __ __ __  6 __
        __  7  7 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __
    raw: 'a group of students went hiking in a wildlife sanctuary . during the hike
      , a total of 180 tick ##s and mosquito ##es were slapped . tick ##s have 8 legs
      , and mosquito ##es have 6 legs . if these pest ##s have a total of 124 ##0
      legs , how many mosquito ##es and how many tick ##s were slapped during the
      hike ?'
    snippets:
      shape:
      - 8
      - 15
      target:
      - a group of students went hiking in a
      - a group of students went hiking in a wildlife sanctuary . during the hike
        ,
      - 'wildlife sanctuary . during the hike , a total of 180 tick ##s and mosquito'
      - 'during the hike , a total of 180 tick ##s and mosquito ##es were slapped'
      - '##es were slapped . tick ##s have 8 legs , and mosquito ##es have 6'
      - '8 legs , and mosquito ##es have 6 legs . if these pest ##s have'
      - 'legs . if these pest ##s have a total of 124 ##0 legs , how'
      - 'these pest ##s have a total of 124 ##0 legs , how many mosquito ##es'
    tokens:
      shape:
      - 78
      target: '[CLS] a group of students went hiking in a wildlife sanctuary . during
        the hike , a total of 180 tick ##s and mosquito ##es were slapped . tick ##s
        have 8 legs , and mosquito ##es have 6 legs . if these pest ##s have a total
        of 124 ##0 legs , how many mosquito ##es and how many tick ##s were slapped
        during the hike ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 13
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_01, N_04) R_02: +(N_07, R_01) R_03: =(R_00,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of bottles of mustard at the first table
      N_04:
      - the number of bottles of mustard at the second table
      N_07:
      - the number of bottles of mustard at the third table
      X_00:
      - the total number of bottles of mustard of mustard
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the value of mustard bottle in the first table
      - the number of bottles the waitress found at the first table
      - the number of bottles at the first table
      N_04:
      - the value of mustard bottle in the second table
      - the number of bottles the waitress found at the second table
      - the number of bottles at the second table
      N_07:
      - the value of mustard bottle in the third table
      - the number of bottles the waitress found at the third table
      - the number of bottles at the third table
      X_00:
      - the total mustard bottle
      - the total number of bottles the waitress found
      - the total number of bottles
  info:
    answers:
    - b: '0.875000000000000'
    item_id: 60f9186c90be09b72239ec3c
    numbers:
      N_00: '1'
      N_01: '0.250000000000000'
      N_02: '1'
      N_03: '1'
      N_04: '0.250000000000000'
      N_05: '1'
      N_06: '2'
      N_07: '0.375000000000000'
      N_08: '1'
      N_09: '3'
    split: null
    variables:
    - b
  text:
    numbers:
      shape:
      - 78
      target: __ __ __ __ __ __  0 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __  1  1  1
        __  2 __ __ __  3 __ __  4  4  4 __  5 __ __ __  6 __ __ __  7  7  7 __  8
        __ __ __  9 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __
    raw: before starting her shift , a waitress checks to make sure there is enough
      mustard for her customers . she finds 0 . 25 of a bottle at the first table
      , 0 . 25 of a bottle at the second table , and 0 . 375 of a bottle at the third
      table . altogether , how many bottles of mustard does the waitress find ?
    snippets:
      shape:
      - 10
      - 15
      target:
      - before starting her shift , a waitress checks to make sure there is
      - mustard for her customers . she finds 0 . 25 of a bottle at the
      - . she finds 0 . 25 of a bottle at the first table , 0
      - . 25 of a bottle at the first table , 0 . 25 of a
      - a bottle at the first table , 0 . 25 of a bottle at the
      - first table , 0 . 25 of a bottle at the second table , and
      - . 25 of a bottle at the second table , and 0 . 375 of
      - bottle at the second table , and 0 . 375 of a bottle at the
      - table , and 0 . 375 of a bottle at the third table . altogether
      - . 375 of a bottle at the third table . altogether , how many bottles
    tokens:
      shape:
      - 78
      target: '[CLS] before starting her shift , a waitress checks to make sure there
        is enough mustard for her customers . she finds 0 . 25 of a bottle at the
        first table , 0 . 25 of a bottle at the second table , and 0 . 375 of a bottle
        at the third table . altogether , how many bottles of mustard does the waitress
        find ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 13
    tokens: 'R_00: __NEW_VAR(, ) R_01: /(N_00, N_01) R_02: /(N_03, R_00) R_03: =(R_01,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the height of the sears tower
      N_01:
      - the height of the sears tower
      N_03:
      - the height of the sears tower in the chicago tower
      X_00:
      - the approximate height of the sears tower
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - how tall sears tower is
      - the height of the sears tower
      - the height of the sears tower in chicago
      N_01:
      - how tall hancock center is
      - the height of the john hancock center
      - the height of the john hancock center in chicago
      N_03:
      - height of the sears tower replica
      - the height of the sears tower replica
      - the height of the sears tower as a small - scale replica
      X_00:
      - the height of hancock replica
      - the height of the john hancock replica
      - the height of the john hancock tower as a small - scale replica
  info:
    answers:
    - h: '2.33172413793103'
    item_id: 60f9186c90be09b72239ed9d
    numbers:
      N_00: '1450'
      N_01: '1127'
      N_02: '1'
      N_03: '3'
    split: null
    variables:
    - h
  text:
    numbers:
      shape:
      - 78
      target: __ __ __ __ __ __ __  0  0 __ __ __ __ __ __ __ __ __ __  1  1 __ __
        __ __ __ __ __ __ __  2 __ __ __ __ __ __ __ __ __ __ __ __ __  3 __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __
    raw: 'the sears tower in chicago is 145 ##0 feet tall . the john hancock center
      in chicago is 112 ##7 feet tall . suppose you are asked to build a small - scale
      replica of each . if you make the sears tower 3 meter tall , what would be the
      approximate height of the john hancock replica ? round your answer to the nearest
      hundred ##th .'
    snippets:
      shape:
      - 4
      - 15
      target:
      - 'the sears tower in chicago is 145 ##0 feet tall . the john hancock'
      - 'the john hancock center in chicago is 112 ##7 feet tall . suppose you are'
      - . suppose you are asked to build a small - scale replica of each .
      - . if you make the sears tower 3 meter tall , what would be the
    tokens:
      shape:
      - 78
      target: '[CLS] the sears tower in chicago is 145 ##0 feet tall . the john hancock
        center in chicago is 112 ##7 feet tall . suppose you are asked to build a
        small - scale replica of each . if you make the sears tower 3 meter tall ,
        what would be the approximate height of the john hancock replica ? round your
        answer to the nearest hundred ##th . [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 13
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: *(N_03, R_00) R_03: *(N_04,
      R_01) R_04: +(R_02, R_03) R_05: =(N_08, R_04) R_06: +(R_00, R_01) R_07: =(N_06,
      R_06) R_08: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_03:
      - the gallons of the first pump drain per hour
      N_04:
      - the gallons of the second pump drain per hour
      N_06:
      - the total hours used
      N_08:
      - the total hours used
      N_09:
      - the total gallons of the other pump
      N_10:
      - the gallons of the other pump drain per hour
      X_00:
      - the hours used for the 180 gallons used
      X_01:
      - the hours used for the other pump
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_03:
      - the number of gallons that the first pump can pump in an hour
      - the gallons per hour rate of a pump
      - the rate of one pump per hour
      N_04:
      - the number of gallons that the second pump can pump in an hour
      - the gallons per hour rate of another pump
      - the rate of the other pump per hour
      N_06:
      - the number of hours of water pumping
      - the hour duration of pumping
      - the hours past
      N_08:
      - the total number of gallons pumped
      - the total gallons pumped
      - the total amount pumped
      N_09:
      - the number of gallons that the first pump can pump in an hour
      - the gallons per hour rate of a pump
      - the rate of one pump per hour
      N_10:
      - the number of gallons that the second pump can pump in an hour
      - the gallons per hour rate of another pump
      - the rate of the other pump per hour
      X_00:
      - the number of hours pumped by the first pump
      - the pumping hour duration of the 180 gallons per hour pump
      - the hours that one pump is used
      X_01:
      - the number of hours pumped by the second pump
      - the pumping hour duration of the 250 gallons per hour pump
      - the hours that the other pump is used
  info:
    answers:
    - h1: '2.50000000000000'
      h2: '3.50000000000000'
    item_id: 604cc853117d71c492a62cb6
    numbers:
      N_00: '1'
      N_01: '2'
      N_02: '1'
      N_03: '180'
      N_04: '250'
      N_05: '1'
      N_06: '6'
      N_07: '1'
      N_08: '1325'
      N_09: '180'
      N_10: '250'
    split: null
    variables:
    - h1
    - h2
  text:
    numbers:
      shape:
      - 78
      target: __  0 __ __ __ __ __ __ __ __  1 __ __ __  2 __ __ __  3 __ __ __ __
        __ __ __  4 __ __ __ __ __  5 __ __  6 __ __ __ __  7 __ __  8  8 __ __ __
        __ __ __ __ __ __  9 __ __ __ __ __ __ __ __ __ __ __ __ 10 __ __ __ __ __
        __ __ __ __ __
    raw: 'a plum ##ber contractor decides to field - test two new pumps . one is rated
      at 180 gallons per hour and the other at 250 gallons per hour . over a period
      of 6 hours , she pumps a total of 132 ##5 gallons . how many hours were used
      by the 180 gallons per hour pump ? how many hours were used by the 250 gallons
      per hour pump ?'
    snippets:
      shape:
      - 11
      - 15
      target:
      - 'a plum ##ber contractor decides to field -'
      - '##ber contractor decides to field - test two new pumps . one is rated at'
      - field - test two new pumps . one is rated at 180 gallons per hour
      - new pumps . one is rated at 180 gallons per hour and the other at
      - gallons per hour and the other at 250 gallons per hour . over a period
      - at 250 gallons per hour . over a period of 6 hours , she pumps
      - per hour . over a period of 6 hours , she pumps a total of
      - 'period of 6 hours , she pumps a total of 132 ##5 gallons . how'
      - 'hours , she pumps a total of 132 ##5 gallons . how many hours were'
      - how many hours were used by the 180 gallons per hour pump ? how many
      - how many hours were used by the 250 gallons per hour pump ?
    tokens:
      shape:
      - 78
      target: '[CLS] a plum ##ber contractor decides to field - test two new pumps
        . one is rated at 180 gallons per hour and the other at 250 gallons per hour
        . over a period of 6 hours , she pumps a total of 132 ##5 gallons . how many
        hours were used by the 180 gallons per hour pump ? how many hours were used
        by the 250 gallons per hour pump ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 13
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: *(N_00, R_00) R_03: *(N_01,
      R_01) R_04: +(R_02, R_03) R_05: =(N_02, R_04) R_06: *(N_03, R_00) R_07: *(N_04,
      R_01) R_08: +(R_06, R_07) R_09: =(N_05, R_08) R_10: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of bags of bagels in the first case
      N_01:
      - the number of packages of cream cheese in the first case
      N_02:
      - the cost of the first case
      N_03:
      - the number of bags of bagels in the second
      N_04:
      - the number of packages of cream cheese in the second
      N_05:
      - the total cost of cream cheese in the second case
      X_00:
      - the cost of a bag of bagels
      X_01:
      - the cost of a package of cream cheese
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of bags of bagels bought on monday
      - the number of bags of bagels of the first set
      - the number of bags of bagels in one part
      N_01:
      - the number of packages of cream cheese bought on monday
      - the number of packages of cream cheese of the first set
      - the number of a package of cream in one part
      N_02:
      - the total cost of bagels and cream cheese bought on monday
      - the total cost of bagels and cream cheese of the first set
      - the sum of 2 bags of bagels and 3 packages of cream cheese
      N_03:
      - the number of bags of bagels bought on friday
      - the number of bags of bagels of the second set
      - the number of bags of bagels in the other part
      N_04:
      - the number of packages of cream cheese bought on friday
      - the number of packages of cream cheese of the second set
      - the number of a package of cream in the other part
      N_05:
      - the total cost of bagels and cream cheese bought on friday
      - the total cost of bagels and cream cheese of the second set
      - the sum of 4 bags of bagels and 3 packages of cream cheese
      X_00:
      - the price of a bag of bagels
      - the cost of a bagel
      - the cost of bags of bagels
      X_01:
      - the price of a package of cream cheese
      - the cost of a cream cheese package
      - the cost of packages of cream cheese
  info:
    answers:
    - b: '2.25000000000000'
      c: '2.50000000000000'
    item_id: 604cc853117d71c492a62c81
    numbers:
      N_00: '2'
      N_01: '3'
      N_02: '12.0000000000000'
      N_03: '4'
      N_04: '2'
      N_05: '14.0000000000000'
      N_06: '1'
      N_07: '1'
    split: null
    variables:
    - b
    - c
  text:
    numbers:
      shape:
      - 78
      target: __ __ __ __ __ __ __ __ __ __ __  0 __ __ __ __ __  1 __ __ __ __ __
        __  2  2  2 __ __ __ __ __ __ __ __ __ __  3 __ __ __ __ __  4 __ __ __ __
        __ __  5  5  5 __ __ __ __ __  6 __ __ __ __ __  7 __ __ __ __ __ __ __ __
        __ __ __ __ __
    raw: 'for monday morning '' s staff meeting , jim bought 2 bags of bag ##els and
      3 packages of cream cheese and paid 12 . 00 dollars . for friday '' s meeting
      , he bought 4 bags of bag ##els and 2 packages of cream cheese and paid 14 .
      00 dollars . how much do a bag of bag ##els and a package of cream cheese cost
      in dollars ?'
    snippets:
      shape:
      - 8
      - 15
      target:
      - ''' s staff meeting , jim bought 2 bags of bag ##els and 3 packages'
      - 'bought 2 bags of bag ##els and 3 packages of cream cheese and paid 12'
      - 3 packages of cream cheese and paid 12 . 00 dollars . for friday '
      - 'friday '' s meeting , he bought 4 bags of bag ##els and 2 packages'
      - 'bought 4 bags of bag ##els and 2 packages of cream cheese and paid 14'
      - 2 packages of cream cheese and paid 14 . 00 dollars . how much do
      - '. 00 dollars . how much do a bag of bag ##els and a package'
      - 'do a bag of bag ##els and a package of cream cheese cost in dollars'
    tokens:
      shape:
      - 78
      target: '[CLS] for monday morning '' s staff meeting , jim bought 2 bags of
        bag ##els and 3 packages of cream cheese and paid 12 . 00 dollars . for friday
        '' s meeting , he bought 4 bags of bag ##els and 2 packages of cream cheese
        and paid 14 . 00 dollars . how much do a bag of bag ##els and a package of
        cream cheese cost in dollars ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 13
    tokens: 'R_00: __NEW_VAR(, ) R_01: /(1, N_01) R_02: /(1, N_03) R_03: +(R_01, R_02)
      R_04: /(1, N_05) R_05: -(R_03, R_04) R_06: *(R_00, R_05) R_07: =(1, R_06) R_08:
      __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the hours consumed for the garden hose to fill the pool
      N_03:
      - the hours consumed for the garden hose to fill the pool
      N_05:
      - the hours consumed to fill the pool
      X_00:
      - the hours consumed to fill the pool open
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the time required for the pump to fill the pool
      - the number of hours it takes for the pump to fill the pool
      - the number of hours the pump takes to fill the pool
      N_03:
      - the time required for the garden hose to fill the pool
      - the number of hours it takes for a garden hose to fill the pool
      - the number of hours the garden hose takes to fill the pool
      N_05:
      - the hours to drain the pool
      - the number of hours it takes to drain the pool
      - the number of hours in which the pool is drained
      X_00:
      - the total hours required to fill the pool for the pump and the garden hose
      - the number of hours it takes for the pump and the garden hose to fill the
        pool together with the drain open
      - the number of hours the pump and the garden hose take to fill the pool with
        the drain open
  info:
    answers:
    - h: '7.05882352941176'
    item_id: 604cc853117d71c492a62f50
    numbers:
      N_00: '1'
      N_01: '6'
      N_02: '1'
      N_03: '10'
      N_04: '1'
      N_05: '8'
    split: null
    variables:
    - h
  text:
    numbers:
      shape:
      - 78
      target: __  0 __ __ __ __ __ __ __ __ __ __ __ __  1 __ __ __  2 __ __ __  3
        __ __ __ __ __ __ __ __ __  4 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __  5 __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __
    raw: 'a pool owner is trying to fill his pool . the pump takes 6 hr ##s . a garden
      hose takes 10 hours . he wants to fill it up in a hurry . so he turns on the
      pump and puts in the garden hose . unfortunately , he leaves the drain open
      , which will drain the pool in 8 hours . how long will it take to fill the pool
      ?'
    snippets:
      shape:
      - 6
      - 15
      target:
      - a pool owner is trying to fill his
      - 'fill his pool . the pump takes 6 hr ##s . a garden hose takes'
      - 'the pump takes 6 hr ##s . a garden hose takes 10 hours . he'
      - 'hr ##s . a garden hose takes 10 hours . he wants to fill it'
      - he wants to fill it up in a hurry . so he turns on the
      - ', which will drain the pool in 8 hours . how long will it take'
    tokens:
      shape:
      - 78
      target: '[CLS] a pool owner is trying to fill his pool . the pump takes 6 hr
        ##s . a garden hose takes 10 hours . he wants to fill it up in a hurry . so
        he turns on the pump and puts in the garden hose . unfortunately , he leaves
        the drain open , which will drain the pool in 8 hours . how long will it take
        to fill the pool ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 13
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_01, N_03) R_02: +(N_05, R_01) R_03: =(R_00,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the amount of peanuts mix
      N_03:
      - the amount of chocolate used
      N_05:
      - the amount of raisins in the mix
      X_00:
      - the total weight of trail mix
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of pounds of peanuts brandy used to make the trail mix
      - the pound of peanuts in trail mix
      - the number of peanuts used
      N_03:
      - the number of pounds of chocolate chips brandy used to make the trail mix
      - the pound of chocolate in train mix
      - the number of chocolate chips used
      N_05:
      - the number of pounds of raisins brandy used to make the trail mix
      - the pound of raisins in trail mix
      - the number of raisins used
      X_00:
      - the total number of pounds of the trail mix brandy made
      - the total pound of trail mix
      - the total amount of peanuts, chocolate chips, and raisins
  info:
    answers:
    - p: '0.416666666666667'
    item_id: 60f9186c90be09b72239e996
    numbers:
      N_00: '1'
      N_01: '0.166666666666667'
      N_02: '1'
      N_03: '0.166666666666667'
      N_04: '1'
      N_05: '0.0833333333333333'
      N_06: '1'
    split: null
    variables:
    - p
  text:
    numbers:
      shape:
      - 78
      target: __ __ __ __ __ __  0 __ __ __ __ __ __  1  1  1  1  1  1  1  1  1  1
        __  2 __ __ __ __  3  3  3  3  3  3  3  3  3  3 __  4 __ __ __ __ __ __  5  5  5  5  5  5  5  5  5  5  5
        __  6 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'brandy made trail mix for a backpack ##ing trip . she used 0 . 1666 ##66
      ##66 ##66 ##66 ##66 ##66 ##6 of a pound of peanuts , 0 . 1666 ##66 ##66 ##66
      ##66 ##66 ##66 ##6 of a pound of chocolate chips , and 0 . 08 ##33 ##33 ##33
      ##33 ##33 ##33 ##33 ##3 of a pound of rai ##sin ##s . how many pounds of trail
      mix did brandy make ?'
    snippets:
      shape:
      - 7
      - 15
      target:
      - 'brandy made trail mix for a backpack ##ing trip . she used 0'
      - 'a backpack ##ing trip . she used 0 . 1666 ##66 ##66 ##66 ##66 ##66'
      - '##66 ##66 ##66 ##66 ##66 ##6 of a pound of peanuts , 0 . 1666'
      - '##6 of a pound of peanuts , 0 . 1666 ##66 ##66 ##66 ##66 ##66'
      - '##66 ##66 ##66 ##66 ##66 ##6 of a pound of chocolate chips , and 0'
      - 'a pound of chocolate chips , and 0 . 08 ##33 ##33 ##33 ##33 ##33'
      - '##33 ##33 ##33 ##33 ##33 ##3 of a pound of rai ##sin ##s . how'
    tokens:
      shape:
      - 78
      target: '[CLS] brandy made trail mix for a backpack ##ing trip . she used 0
        . 1666 ##66 ##66 ##66 ##66 ##66 ##66 ##6 of a pound of peanuts , 0 . 1666
        ##66 ##66 ##66 ##66 ##66 ##66 ##6 of a pound of chocolate chips , and 0 .
        08 ##33 ##33 ##33 ##33 ##33 ##33 ##33 ##3 of a pound of rai ##sin ##s . how
        many pounds of trail mix did brandy make ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 13
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(R_00, R_01) R_03: =(N_02,
      R_02) R_04: *(N_03, R_00) R_05: *(N_04, R_01) R_06: +(R_04, R_05) R_07: =(N_05,
      R_06) R_08: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the total number of tickets sold
      N_03:
      - the cost of an adult ticket
      N_04:
      - the cost of a children's ticket
      N_05:
      - the total cost of tickets sold
      X_00:
      - the number of adult tickets sold
      X_01:
      - the number of children's tickets
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the total number of tickets sold
      - the total number of people
      - the total number of tickets sold
      N_03:
      - the price of an adult ticket
      - the cost of adult tickets
      - the ticket cost for one adult
      N_04:
      - the price of a children's ticket
      - the cost of the children's ticket
      - the ticket cost for one child
      N_05:
      - the total number of dollars earned by selling tickets
      - the total revenue of sold tickets
      - the total receipts for the day
      X_00:
      - the number of adult tickets sold
      - the number of adult tickets
      - the number of adult tickets
      X_01:
      - the number of children tickets sold
      - the number of children's tickets
      - the number of children's tickets
  info:
    answers:
    - a: '130'
      c: '392'
    item_id: 604cc853117d71c492a62ce6
    numbers:
      N_00: '1'
      N_01: '1'
      N_02: '522'
      N_03: '15'
      N_04: '8'
      N_05: '5086.00000000000'
    split: null
    variables:
    - a
    - c
  text:
    numbers:
      shape:
      - 78
      target: __ __ __ __ __ __ __ __ __ __ __ __ __  0 __ __ __ __ __ __ __ __ __  1
        __ __  2  2 __ __ __ __ __ __ __  3 __ __ __ __ __ __ __ __ __  4 __ __ __
        __ __ __ __ __ __ __ __  5  5  5  5 __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __
    raw: 'the owner of the most amazing circus was counting the money from one day
      '' s ticket sales . he knew that a total of 52 ##2 tickets were sold . adult
      tickets cost 15 dollars each , and children '' s tickets cost 8 dollars each
      . if the total receipts for the day were 50 ##86 . 00 dollars , how many adult
      tickets were sold ? how many children '' s tickets ?'
    snippets:
      shape:
      - 6
      - 15
      target:
      - amazing circus was counting the money from one day ' s ticket sales . he
      - 's ticket sales . he knew that a total of 52 ##2 tickets were sold'
      - '. he knew that a total of 52 ##2 tickets were sold . adult tickets'
      - tickets were sold . adult tickets cost 15 dollars each , and children ' s
      - ', and children '' s tickets cost 8 dollars each . if the total receipts'
      - 'the total receipts for the day were 50 ##86 . 00 dollars , how many'
    tokens:
      shape:
      - 78
      target: '[CLS] the owner of the most amazing circus was counting the money from
        one day '' s ticket sales . he knew that a total of 52 ##2 tickets were sold
        . adult tickets cost 15 dollars each , and children '' s tickets cost 8 dollars
        each . if the total receipts for the day were 50 ##86 . 00 dollars , how many
        adult tickets were sold ? how many children '' s tickets ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(1, R_00) R_03: =(R_01,
      R_02) R_04: +(R_00, R_01) R_05: =(N_02, R_04) R_06: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the sum of 2 consecutive integers
      X_00:
      - the first number
      X_01:
      - the second number
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the sum of the first integer and the second integer
      - the sum of two consecutive integers
      - the sum of 2 consecutive integers
      X_00:
      - the value of the first integer
      - the value of one integer
      - the first of 2 consecutive integers
      X_01:
      - the value of the second integer which 1 larger than the first integer
      - the value of the other integer
      - the second of 2 consecutive integers
  info:
    answers:
    - i1: '-53'
      i2: '-52'
    item_id: 604cc853117d71c492a62f74
    numbers:
      N_00: '2'
      N_01: '1'
      N_02: '-105'
    split: null
    variables:
    - i1
    - i2
  text:
    numbers:
      shape:
      - 23
      target: __ __  0 __ __ __  1 __ __  2  2 __ __ __ __ __ __ __ __ __ __ __ __
    raw: which 2 consecutive integers have a sum of - 105 ?
    snippets:
      shape:
      - 3
      - 15
      target:
      - which 2 consecutive integers have a sum of -
      - which 2 consecutive integers have a sum of - 105 ?
      - 2 consecutive integers have a sum of - 105 ?
    tokens:
      shape:
      - 23
      target: '[CLS] which 2 consecutive integers have a sum of - 105 ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of total bills
      N_01:
      - the number of bills nancy has
      X_00:
      - the total amount of money
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of five dollars bills nancy has
      - number of five dollars bills nancy has
      - the number of five - dollar bills
      N_01:
      - the value of each bill in dollars
      - how many dollars the bill is worth
      - the amount of money one five - dollar bill is
      X_00:
      - the value of nancy's money in dollars
      - the many dollars she has
      - the total amount of money
  info:
    answers:
    - m: '45'
    item_id: 60f9186c90be09b72239ef44
    numbers:
      N_00: '9'
      N_01: '5'
    split: null
    variables:
    - m
  text:
    numbers:
      shape:
      - 23
      target: __ __ __  0  1 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: nancy has 9 five dollars bills . how much money does she have ?
    snippets:
      shape:
      - 2
      - 15
      target:
      - nancy has 9 five dollars bills . how much money
      - nancy has 9 five dollars bills . how much money does
    tokens:
      shape:
      - 23
      target: '[CLS] nancy has 9 five dollars bills . how much money does she have
        ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_00, R_00) R_02: =(N_02, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - a number in the phrase " 7 times a number "
      N_02:
      - the value of 7 times the number minus 1. 47
      X_00:
      - the unknown number
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number multiplied with the number that results in " 1. 477 "
      - the number timed by an unknown number
      - the value " number " is multiplied by
      N_02:
      - the result of " - 7 " multiplied by the number
      - the result value of timing
      - the value of " - 7 " multiplied by " number "
      X_00:
      - the ratio of " 1. 477 " to " - 7 "
      - the unknown number
      - the value multiplied by " - 7 "
  info:
    answers:
    - n: '-0.211000000000000'
    item_id: 60f9186c90be09b72239e9a7
    numbers:
      N_00: '-7'
      N_01: '1'
      N_02: '1.47700000000000'
    split: null
    variables:
    - n
  text:
    numbers:
      shape:
      - 23
      target: __  0  0 __  1 __ __  2  2  2  2 __ __ __ __ __ __ __ __ __ __ __ __
    raw: '- 7 times a number is 1 . 47 ##7 . find the number .'
    snippets:
      shape:
      - 3
      - 15
      target:
      - '- 7 times a number is 1 .'
      - '- 7 times a number is 1 . 47 ##7 .'
      - '- 7 times a number is 1 . 47 ##7 . find the number'
    tokens:
      shape:
      - 23
      target: '[CLS] - 7 times a number is 1 . 47 ##7 . find the number . [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(25, N_00) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number quarters in a bundle
      X_00:
      - the total number of cents
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of quarters saved from washing cars
      - the number of saved quarters from washing cars
      - the number of quarters joan has saved from washing cars
      X_00:
      - the value of saved money in cents
      - the number of saved cents
      - the number of cents joan has
  info:
    answers:
    - c: '150'
    item_id: 60f9186c90be09b72239eed4
    numbers:
      N_00: '6'
    split: null
    variables:
    - c
  text:
    numbers:
      shape:
      - 23
      target: __ __ __ __  0 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: joan has saved 6 quarters from washing cars . how many cents does joan have
      ?
    snippets:
      shape:
      - 1
      - 15
      target:
      - joan has saved 6 quarters from washing cars . how many
    tokens:
      shape:
      - 23
      target: '[CLS] joan has saved 6 quarters from washing cars . how many cents
        does joan have ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(25, N_00) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number quarters in a bundle
      X_00:
      - the total value of the bundle of quarters
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of quarters saved from washing cars
      - the number of saved quarters from washing cars
      - the amount of money in quarters sara has saved from washing cars
      X_00:
      - the value of saved money in cents
      - the number of saved cents
      - the amount of money in cents sara has
  info:
    answers:
    - c: '275'
    item_id: 60f9186c90be09b72239eb5c
    numbers:
      N_00: '11'
    split: null
    variables:
    - c
  text:
    numbers:
      shape:
      - 23
      target: __ __ __ __  0 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: sara has saved 11 quarters from washing cars . how many cents does sara have
      ?
    snippets:
      shape:
      - 1
      - 15
      target:
      - sara has saved 11 quarters from washing cars . how many
    tokens:
      shape:
      - 23
      target: '[CLS] sara has saved 11 quarters from washing cars . how many cents
        does sara have ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_00, N_01) R_02: *(N_02, R_01) R_03: *(N_03,
      R_02) R_04: =(R_00, R_03) R_05: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the value of - 15 of the number minus - 15
      N_01:
      - the value of the first number minus the second number
      N_02:
      - the value of - 15 of the number minus - 15
      N_03:
      - the value of - 15 of the number minus - 1
      X_00:
      - the value of the first number
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the first number of the product
      - the first multiplied value for the product
      - the first number to multiply to the product
      N_01:
      - the second number of the product
      - the second multiplied value for the product
      - the second number to multiply to the product
      N_02:
      - the third number of the product
      - the third multiplied value for the product
      - the third number to multiply to the product
      N_03:
      - the fourth number of the product
      - the fourth multiplied value for the product
      - the fourth number to multiply to the product
      X_00:
      - the resulting product
      - the result of the product
      - the product of the four numbers
  info:
    answers:
    - r: '-120'
    item_id: 60f9186c90be09b72239ecfb
    numbers:
      N_00: '-2'
      N_01: '-15'
      N_02: '4'
      N_03: '-1'
    split: null
    variables:
    - r
  text:
    numbers:
      shape:
      - 23
      target: __ __ __ __ __  0  0 __  1  1 __  2 __ __  3  3 __ __ __ __ __ __ __
    raw: find the product of - 2 , - 15 , 4 , and - 1 .
    snippets:
      shape:
      - 4
      - 15
      target:
      - find the product of - 2 , - 15 , 4 ,
      - find the product of - 2 , - 15 , 4 , and - 1
      - of - 2 , - 15 , 4 , and - 1 .
      - ', - 15 , 4 , and - 1 .'
    tokens:
      shape:
      - 23
      target: '[CLS] find the product of - 2 , - 15 , 4 , and - 1 . [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of joan's books
      N_01:
      - the number of tom's books
      X_00:
      - the total number of books
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of books owned by joan
      - the number of joan's books
      - the number of books that joan has
      N_01:
      - the number of books owned by tom
      - the number of tom's books
      - the number of books that tom has
      X_00:
      - the total number of books
      - the number of all books
      - the number of books that they have
  info:
    answers:
    - b: '48'
    item_id: 60f9186c90be09b72239ed19
    numbers:
      N_00: '10'
      N_01: '38'
    split: null
    variables:
    - b
  text:
    numbers:
      shape:
      - 23
      target: __ __ __  0 __ __ __ __  1 __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: joan has 10 books . tom has 38 books . how many books do they have together
      ?
    snippets:
      shape:
      - 2
      - 15
      target:
      - joan has 10 books . tom has 38 books .
      - joan has 10 books . tom has 38 books . how many books do they
    tokens:
      shape:
      - 23
      target: '[CLS] joan has 10 books . tom has 38 books . how many books do they
        have together ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: *(N_02, R_00) R_03: -(R_02,
      R_01) R_04: =(N_01, R_03) R_05: +(R_00, R_01) R_06: =(N_03, R_05) R_07: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the value of 3 times another number minus the first number
      N_02:
      - a number in the phrase " 3 times another "
      N_03:
      - the sum of the two numbers
      X_00:
      - the value of another number
      X_01:
      - the value of another number
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the value of 3 times the second number minus the first number
      - the value of 3 times the second number minus the first number
      - the value of three times another number minus one number
      N_02:
      - the multiplier of the second number
      - a number in the phrase " 3 times another "
      - a number in the phrase " 3 times another "
      N_03:
      - the sum of the first number and the second number
      - the sum of the first and second numbers
      - the sum of the two numbers
      X_00:
      - the value of the second number
      - the second number
      - the value of another number
      X_01:
      - the value of the first number
      - the first number
      - the value of one number
  info:
    answers:
    - n1: '11'
      n2: '5'
    item_id: 604cc853117d71c492a62f31
    numbers:
      N_00: '1'
      N_01: '4'
      N_02: '3'
      N_03: '16'
    split: null
    variables:
    - n2
    - n1
  text:
    numbers:
      shape:
      - 23
      target: __  0 __ __  1 __ __  2 __ __ __ __ __ __  3 __ __ __ __ __ __ __ __
    raw: one number is 4 less than 3 times another . their sum is 16 . find the smaller
      .
    snippets:
      shape:
      - 4
      - 15
      target:
      - one number is 4 less than 3 times
      - one number is 4 less than 3 times another . their
      - one number is 4 less than 3 times another . their sum is 16
      - 3 times another . their sum is 16 . find the smaller .
    tokens:
      shape:
      - 23
      target: '[CLS] one number is 4 less than 3 times another . their sum is 16 .
        find the smaller . [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of geese in the marsh
      N_01:
      - the number of ducks in the marsh
      X_00:
      - the number of birds in the marsh
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of geese
      - the number of geese
      - the number of geese
      N_01:
      - the number of ducks
      - the number of ducks
      - the number of ducks
      X_00:
      - the total number of birds
      - the whole number of birds
      - the total number of geese and ducks
  info:
    answers:
    - b: '95'
    item_id: 60f9186c90be09b72239f1bf
    numbers:
      N_00: '58'
      N_01: '37'
    split: null
    variables:
    - b
  text:
    numbers:
      shape:
      - 23
      target: __ __ __  0 __ __  1 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: there were 58 geese and 37 ducks in the marsh . how many birds were in the
      marsh ?
    snippets:
      shape:
      - 2
      - 15
      target:
      - there were 58 geese and 37 ducks in the marsh
      - there were 58 geese and 37 ducks in the marsh . how many
    tokens:
      shape:
      - 23
      target: '[CLS] there were 58 geese and 37 ducks in the marsh . how many birds
        were in the marsh ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of tickets william starts with
      N_01:
      - the number of tickets william buys
      X_00:
      - the number of remaining tickets
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the initial number of tickets
      - number of tickets william starts with
      - the number of william's tickets
      N_01:
      - the additional number of tickets
      - number of tickets he buys
      - the number of tickets bought by william
      X_00:
      - the total number of tickets
      - the total number of tickets he has
      - the number of tickets held by william now
  info:
    answers:
    - t: '18'
    item_id: 60f9186c90be09b72239f0c2
    numbers:
      N_00: '15'
      N_01: '3'
    split: null
    variables:
    - t
  text:
    numbers:
      shape:
      - 23
      target: __ __ __ __  0 __ __ __ __  1 __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: william starts with 15 tickets . he buys 3 more . how many tickets does william
      end with ?
    snippets:
      shape:
      - 2
      - 15
      target:
      - william starts with 15 tickets . he buys 3 more .
      - starts with 15 tickets . he buys 3 more . how many tickets does william
    tokens:
      shape:
      - 23
      target: '[CLS] william starts with 15 tickets . he buys 3 more . how many tickets
        does william end with ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of pounds of oranges in the bag
      N_01:
      - the number of bags
      X_00:
      - the total number of pounds of oranges
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of pounds in each bag
      - the number of pounds of oranges in each bag
      - the number of oranges one bag holds
      N_01:
      - the number of bags
      - the number of bags
      - the total number of bags
      X_00:
      - the total number of oranges
      - the total number of pounds of oranges
      - the total number of oranges
  info:
    answers:
    - o: '1035'
    item_id: 60f9186c90be09b72239ea3b
    numbers:
      N_00: '23'
      N_01: '45'
    split: null
    variables:
    - o
  text:
    numbers:
      shape:
      - 23
      target: __ __ __ __  0 __ __ __ __ __ __ __ __ __ __ __ __ __  1 __ __ __ __
    raw: 'each bag contains 23 pounds of orange ##s . how many pounds of orange ##s
      are in 45 bags ?'
    snippets:
      shape:
      - 2
      - 15
      target:
      - 'each bag contains 23 pounds of orange ##s . how many'
      - 'many pounds of orange ##s are in 45 bags ?'
    tokens:
      shape:
      - 23
      target: '[CLS] each bag contains 23 pounds of orange ##s . how many pounds of
        orange ##s are in 45 bags ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(R_00, R_01) R_03: =(N_01,
      R_02) R_04: *(N_03, R_00) R_05: =(R_01, R_04) R_06: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the sum of the first number and the other number
      N_03:
      - the ratio of one number to the other number
      X_00:
      - the value of one number
      X_01:
      - the value of the other number
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the sum of the first number and the second number
      - the sum of two numbers
      - the sum of two numbers
      N_03:
      - the ratio of the second number to the first number
      - a number in the phrase " 3 times as large as the other number "
      - the ratio of the larger number to the smaller number
      X_00:
      - the value of the first number
      - the first number
      - the value of the smaller number
      X_01:
      - the value of the second number
      - the second number
      - the value of the larger number
  info:
    answers:
    - n1: '3.50000000000000'
      n2: '10.5000000000000'
    item_id: 604cc852117d71c492a62bfb
    numbers:
      N_00: '2'
      N_01: '14'
      N_02: '1'
      N_03: '3'
    split: null
    variables:
    - n1
    - n2
  text:
    numbers:
      shape:
      - 23
      target: __ __  0 __ __ __ __  1 __  2 __ __  3 __ __ __ __ __ __ __ __ __ __
    raw: find two numbers whose sum is 14 if one number is 3 times as large as the
      other number .
    snippets:
      shape:
      - 4
      - 15
      target:
      - find two numbers whose sum is 14 if one
      - find two numbers whose sum is 14 if one number is 3 times as
      - two numbers whose sum is 14 if one number is 3 times as large as
      - sum is 14 if one number is 3 times as large as the other number
    tokens:
      shape:
      - 23
      target: '[CLS] find two numbers whose sum is 14 if one number is 3 times as
        large as the other number . [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: -(R_00, R_01) R_03: =(N_00,
      R_02) R_04: +(R_00, R_01) R_05: =(N_01, R_04) R_06: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the value of craig's age minus his mother's age
      N_01:
      - the sum of the ages of craig and his mother
      X_00:
      - the age of craig
      X_01:
      - the age of his mother
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the value of the mother's age minus craig's age
      - the value of the age of the mother minus the age of craig
      - the value of the mother's age minus craig's age
      N_01:
      - the sum of their ages
      - the sum of the age of the mother and the age of craig
      - the sum of craig's and his mother's age
      X_00:
      - the mother's age
      - the age of the mother
      - the age of craig's mother
      X_01:
      - craig's age now
      - the age of craig
      - the age of craig
  info:
    answers:
    - c: '16'
      m: '40'
    item_id: 604cc853117d71c492a62e04
    numbers:
      N_00: '24'
      N_01: '56'
    split: null
    variables:
    - m
    - c
  text:
    numbers:
      shape:
      - 23
      target: __ __ __  0 __ __ __ __ __ __ __ __ __ __  1 __ __ __ __ __ __ __ __
    raw: craig is 24 years younger than his mother . together their ages total 56
      years . how is each person ?
    snippets:
      shape:
      - 2
      - 15
      target:
      - craig is 24 years younger than his mother . together
      - his mother . together their ages total 56 years . how is each person ?
    tokens:
      shape:
      - 23
      target: '[CLS] craig is 24 years younger than his mother . together their ages
        total 56 years . how is each person ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_01, N_02) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the cost of an ice cream
      N_02:
      - the number of ice cream cones bought
      X_00:
      - the cost of one ice cream cones
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - cost of an ice cream cone
      - the cost of an ice cream cone
      - the number of cents one ice cream cone costs
      N_02:
      - number of ice cream cones to buy
      - the number of ice cream cones
      - the number of ice cream cones
      X_00:
      - the total cost for the ice cream cones
      - the total cost of ice cream cones
      - the total number of cents for the ice cream cones
  info:
    answers:
    - t: '198'
    item_id: 60f9186c90be09b72239eb94
    numbers:
      N_00: '1'
      N_01: '99'
      N_02: '2'
    split: null
    variables:
    - t
  text:
    numbers:
      shape:
      - 23
      target: __ __ __ __ __  0 __ __ __ __  1 __ __ __ __ __  2 __ __ __ __ __ __
    raw: mrs . hilt bought an ice cream cone for 99 cents . how much would 2 ice cream
      cones cost ?
    snippets:
      shape:
      - 3
      - 15
      target:
      - mrs . hilt bought an ice cream cone for 99 cents .
      - hilt bought an ice cream cone for 99 cents . how much would 2 ice
      - for 99 cents . how much would 2 ice cream cones cost ?
    tokens:
      shape:
      - 23
      target: '[CLS] mrs . hilt bought an ice cream cone for 99 cents . how much would
        2 ice cream cones cost ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_00, N_02) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of calories in a candy bar
      N_02:
      - the number of candy bars
      X_00:
      - the total number of calories in all candy bars
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of calories in a candy bar
      - the calories per candy bar
      - the calory of a candy bar
      N_02:
      - the number of candy bars
      - the number of candy bars
      - the number of candy bars
      X_00:
      - the total number of candy bars
      - the total calories in the whole candy bars
      - the whole calories of candy bars
  info:
    answers:
    - c: '341'
    item_id: 60f9186c90be09b72239ecc0
    numbers:
      N_00: '31'
      N_01: '1'
      N_02: '11'
    split: null
    variables:
    - c
  text:
    numbers:
      shape:
      - 23
      target: __ __ __  0 __ __ __  1 __ __ __ __ __ __ __ __ __ __  2 __ __ __ __
    raw: 'there are 31 cal ##ories in a candy bar . how many cal ##ories are there
      in 11 candy bars ?'
    snippets:
      shape:
      - 3
      - 15
      target:
      - 'there are 31 cal ##ories in a candy bar .'
      - 'there are 31 cal ##ories in a candy bar . how many cal ##ories'
      - 'how many cal ##ories are there in 11 candy bars ?'
    tokens:
      shape:
      - 23
      target: '[CLS] there are 31 cal ##ories in a candy bar . how many cal ##ories
        are there in 11 candy bars ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_00, N_02) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of calories in a candy bar
      N_02:
      - the number of candy bars
      X_00:
      - the total number of calories in all candy bars
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of calories in a candy bar
      - the calories per candy bar
      - the calory of a candy bar
      N_02:
      - the number of candy bars
      - the number of candy bars
      - the number of candy bars
      X_00:
      - the total number of candy bars
      - the total calories in the whole candy bars
      - the whole calories of candy bars
  info:
    answers:
    - c: '24'
    item_id: 60f9186c90be09b72239ebe4
    numbers:
      N_00: '8'
      N_01: '1'
      N_02: '3'
    split: null
    variables:
    - c
  text:
    numbers:
      shape:
      - 23
      target: __ __ __  0 __ __ __  1 __ __ __ __ __ __ __ __ __ __  2 __ __ __ __
    raw: 'there are 8 cal ##ories in a candy bar . how many cal ##ories are there
      in 3 candy bars ?'
    snippets:
      shape:
      - 3
      - 15
      target:
      - 'there are 8 cal ##ories in a candy bar .'
      - 'there are 8 cal ##ories in a candy bar . how many cal ##ories'
      - 'how many cal ##ories are there in 3 candy bars ?'
    tokens:
      shape:
      - 23
      target: '[CLS] there are 8 cal ##ories in a candy bar . how many cal ##ories
        are there in 3 candy bars ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: -(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the initial number of bottle caps
      N_01:
      - the number of bottle caps shared
      X_00:
      - the number of bottle caps now
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the total number of bottle caps
      - the original number of bottle caps
      - the number of bottle caps marilyn starts with
      N_01:
      - the number of bottle caps given to nancy
      - the number of shared bottles
      - the number of bottle caps she shares with nancy
      X_00:
      - the number of bottle caps left
      - the total number of marilyn's bottle caps
      - the number of bottle caps she has at the end
  info:
    answers:
    - c: '15'
    item_id: 60f9186c90be09b72239eaa6
    numbers:
      N_00: '51'
      N_01: '36'
    split: null
    variables:
    - c
  text:
    numbers:
      shape:
      - 27
      target: __ __ __ __  0 __ __ __ __ __  1 __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __
    raw: marilyn starts with 51 bottle caps . she shares 36 with nancy . how many
      bottle caps does marilyn end with ?
    snippets:
      shape:
      - 2
      - 15
      target:
      - marilyn starts with 51 bottle caps . she shares 36 with
      - with 51 bottle caps . she shares 36 with nancy . how many bottle caps
    tokens:
      shape:
      - 27
      target: '[CLS] marilyn starts with 51 bottle caps . she shares 36 with nancy
        . how many bottle caps does marilyn end with ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of joan's blue balloons
      N_01:
      - the number of melanie's blue balloons
      X_00:
      - the total number of blue balloons
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of joan's blue balloons
      - the number of joan's blue balloons
      - the number of joan's blue balloons
      N_01:
      - the number of melanie's blue balloons
      - the number of melanie's blue balloons
      - the number of melanie's blue balloons
      X_00:
      - the total number of blue balloons
      - the number of joan's blue balloons and melanie's blue ballons
      - the total number of their balloons
  info:
    answers:
    - b: '81'
    item_id: 60f9186c90be09b72239e96e
    numbers:
      N_00: '40'
      N_01: '41'
    split: null
    variables:
    - b
  text:
    numbers:
      shape:
      - 27
      target: __ __ __  0 __ __ __ __ __  1 __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __
    raw: joan has 40 blue balloons . melanie has 41 blue balloons . how many blue
      balloons do they have in total ?
    snippets:
      shape:
      - 2
      - 15
      target:
      - joan has 40 blue balloons . melanie has 41 blue
      - has 40 blue balloons . melanie has 41 blue balloons . how many blue balloons
    tokens:
      shape:
      - 27
      target: '[CLS] joan has 40 blue balloons . melanie has 41 blue balloons . how
        many blue balloons do they have in total ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of pencils one child has
      N_01:
      - the number of children
      X_00:
      - the total number of pencils
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of pencils that each child has
      - the number of pencils each child has.
      - the number of pencils held by each child
      N_01:
      - the number of children
      - the number of children
      - the number of children
      X_00:
      - the whole number of pencils
      - the total number of pencils
      - the number of pencils in total
  info:
    answers:
    - p: '12'
    item_id: 60f9186c90be09b72239ea25
    numbers:
      N_00: '6'
      N_01: '2'
    split: null
    variables:
    - p
  text:
    numbers:
      shape:
      - 27
      target: __ __ __ __  0 __ __ __ __ __ __  1 __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __
    raw: 'each child has 6 pencil ##s . if there are 2 children , how many pencil
      ##s are there in total ?'
    snippets:
      shape:
      - 2
      - 15
      target:
      - 'each child has 6 pencil ##s . if there are 2'
      - '6 pencil ##s . if there are 2 children , how many pencil ##s are'
    tokens:
      shape:
      - 27
      target: '[CLS] each child has 6 pencil ##s . if there are 2 children , how many
        pencil ##s are there in total ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: -(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the starting number of marbles
      N_01:
      - the number of marbles shared
      X_00:
      - the number of marbles now
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the starting number of marbles
      - the number of starting marbles
      - number of marbles jack started with
      N_01:
      - the number of marbles shared
      - the number of shared marbles
      - number of marbles shared
      X_00:
      - the number of marbles at the end
      - the remaining number of marbles
      - the number of marbles left
  info:
    answers:
    - j: '29'
    item_id: 60f9186c90be09b72239e9f2
    numbers:
      N_00: '62'
      N_01: '33'
    split: null
    variables:
    - j
  text:
    numbers:
      shape:
      - 27
      target: __ __ __ __  0 __ __ __ __ __  1 __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __
    raw: 'jack starts with 62 marble ##s . he shares 33 with rebecca . how many marble
      ##s does jack end with ?'
    snippets:
      shape:
      - 2
      - 15
      target:
      - 'jack starts with 62 marble ##s . he shares 33 with'
      - 'with 62 marble ##s . he shares 33 with rebecca . how many marble ##s'
    tokens:
      shape:
      - 27
      target: '[CLS] jack starts with 62 marble ##s . he shares 33 with rebecca .
        how many marble ##s does jack end with ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: -(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of skittles that pamela has
      N_01:
      - the number of skittles given to karen
      X_00:
      - the rest number of skittles
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the initial number of skittles
      - the number of pamela's skittles
      - the number of skittles pamela has
      N_01:
      - the number of skittles given to karen
      - the number of skittles given to karen by pamela
      - the number of skittles she gave to karen
      X_00:
      - the number of skittles left
      - the number of skittles with pamela in the end
      - the number of skittles left
  info:
    answers:
    - r: '43'
    item_id: 60f9186c90be09b72239f231
    numbers:
      N_00: '50'
      N_01: '7'
    split: null
    variables:
    - r
  text:
    numbers:
      shape:
      - 27
      target: __ __ __  0 __ __ __ __ __ __  1 __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __
    raw: 'pamela has 50 ski ##ttle ##s . she gives 7 to karen . how many ski ##ttle
      ##s will pamela have ?'
    snippets:
      shape:
      - 2
      - 15
      target:
      - 'pamela has 50 ski ##ttle ##s . she gives 7'
      - '50 ski ##ttle ##s . she gives 7 to karen . how many ski ##ttle'
    tokens:
      shape:
      - 27
      target: '[CLS] pamela has 50 ski ##ttle ##s . she gives 7 to karen . how many
        ski ##ttle ##s will pamela have ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_00, R_00) R_02: *(N_01, R_00) R_03: +(R_01,
      R_02) R_04: =(N_02, R_03) R_05: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - a number in the phrase " 4 times the number "
      N_01:
      - a number in the phrase " 7 times the number "
      N_02:
      - 4 times the number added to the number
      X_00:
      - the value of the number
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - a number in the phrase " 4 times the number "
      - a number in the phrase " 4 times the number "
      - a number in the phrase " 4 "
      N_01:
      - a number in the phrase " 7 times the number "
      - a number in the phrase " 7 times the number "
      - a number in the phrase " 7 "
      N_02:
      - the sum of 4 times the number and 7 times the number
      - the sum of 4 times the number and 7 times the number
      - the sum of 4 times the number and 7 times the number
      X_00:
      - the number we are to find
      - the number we want to find
      - the value of the number
  info:
    answers:
    - n: '5'
    item_id: 604cc853117d71c492a62cfa
    numbers:
      N_00: '4'
      N_01: '7'
      N_02: '55'
    split: null
    variables:
    - n
  text:
    numbers:
      shape:
      - 27
      target: __ __  0 __ __ __ __ __ __  1 __ __ __ __ __ __ __  2 __ __ __ __ __
        __ __ __ __
    raw: when 4 times the number is added to 7 times the number , the result is 55
      . what is the number ?
    snippets:
      shape:
      - 3
      - 15
      target:
      - when 4 times the number is added to 7
      - 4 times the number is added to 7 times the number , the result is
      - times the number , the result is 55 . what is the number ?
    tokens:
      shape:
      - 27
      target: '[CLS] when 4 times the number is added to 7 times the number , the
        result is 55 . what is the number ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(12, R_00) R_02: =(N_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of muffins
      X_00:
      - the number of boxes needed
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of muffins
      - the number of total muffins
      - the number of muffins
      X_00:
      - the ratio of muffins to 12
      - the number of boxes containing 12 muffins at maximum
      - the number of boxes
  info:
    answers:
    - b: '8'
    item_id: 60f9186c90be09b72239e969
    numbers:
      N_00: '96'
    split: null
    variables:
    - b
  text:
    numbers:
      shape:
      - 27
      target: __ __ __  0 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __
    raw: 'mike has 96 mu ##ffin ##s , which he needs to box up into dozens . how many
      boxes does he need ?'
    snippets:
      shape:
      - 1
      - 15
      target:
      - 'mike has 96 mu ##ffin ##s , which he needs'
    tokens:
      shape:
      - 27
      target: '[CLS] mike has 96 mu ##ffin ##s , which he needs to box up into dozens
        . how many boxes does he need ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: /(R_00, R_01) R_03: /(N_01,
      N_02) R_04: =(R_02, R_03) R_05: +(R_00, R_01) R_06: =(N_03, R_05) R_07: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the numerator of the ratio of 8 to 3
      N_02:
      - the denominator of the ratio of 8 to 3
      N_03:
      - the sum of the two numbers
      X_00:
      - the first number
      X_01:
      - the second number
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the numerator of the ratio of the first number to the second number
      - the numerator of the ratio of one number to the other number
      - the numerator of the ratio of 8 to 3
      N_02:
      - the denominator of the ratio of the first number to the second number
      - the denominator of the ratio of one number to the other number
      - the denominator of the ratio of 8 to 3
      N_03:
      - the sum of the two numbers
      - the sum of the two numbers
      - the sum of the two numbers
      X_00:
      - the first number
      - the value of one number
      - the value of the larger number
      X_01:
      - the second number
      - the value of the other number
      - the value of the smaller number
  info:
    answers:
    - n1: '104'
      n2: '39'
    item_id: 604cc853117d71c492a62c9e
    numbers:
      N_00: '2'
      N_01: '8'
      N_02: '3'
      N_03: '143'
    split: null
    variables:
    - n1
    - n2
  text:
    numbers:
      shape:
      - 27
      target: __  0 __ __ __ __ __ __  1 __  2 __ __ __ __ __ __ __  3 __ __ __ __
        __ __ __ __
    raw: two numbers are in the ratio of 8 to 3 . if the sum of numbers is 143 , find
      the numbers .
    snippets:
      shape:
      - 4
      - 15
      target:
      - two numbers are in the ratio of 8
      - two numbers are in the ratio of 8 to 3 . if the sum of
      - are in the ratio of 8 to 3 . if the sum of numbers is
      - . if the sum of numbers is 143 , find the numbers .
    tokens:
      shape:
      - 27
      target: '[CLS] two numbers are in the ratio of 8 to 3 . if the sum of numbers
        is 143 , find the numbers . [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of boys went down down the slide
      N_01:
      - the number of boys who went down the slide additionally
      X_00:
      - the number of boys who went down the slide
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of boys went down the slide
      - the number of boys went down the slide
      - number of boys that went down the slide
      N_01:
      - the number of extra boys went down the slide
      - the number of new boys went down the slide
      - the additional number of boys who went down the slide
      X_00:
      - the total number of boys went down the slide
      - the number of all boys
      - the total number of boys who went down the slide
  info:
    answers:
    - b: '35'
    item_id: 60f9186c90be09b72239ef39
    numbers:
      N_00: '22'
      N_01: '13'
    split: null
    variables:
    - b
  text:
    numbers:
      shape:
      - 27
      target: __  0 __ __ __ __ __ __  1 __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __
    raw: 22 boys went down the slide . 13 more boys went down the slide . how many
      boys went down the slide ?
    snippets:
      shape:
      - 2
      - 15
      target:
      - 22 boys went down the slide . 13
      - 22 boys went down the slide . 13 more boys went down the slide .
    tokens:
      shape:
      - 27
      target: '[CLS] 22 boys went down the slide . 13 more boys went down the slide
        . how many boys went down the slide ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_01, R_00) R_02: +(N_00, R_01) R_03: *(N_04,
      R_00) R_04: -(N_03, R_03) R_05: =(R_02, R_04) R_06: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number equal to 3 times the number
      N_01:
      - the coefficient of the number in the second case
      N_03:
      - the value of nineteen's more than four times the number minus the number
      N_04:
      - the coefficient of the number
      X_00:
      - the original number
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the value of 166 minus three times a number minus four times the number
      - a number in the phrase " nineteen more than "
      - the value of the difference between 166 and three times the number minus four
        times the number
      N_01:
      - a number in the phrase " four times a number "
      - a number in the phrase " four times a number "
      - a number in the phrase " four times a number "
      N_03:
      - the value of four times the number plus 19 plus three times the number
      - a number in the phrase " the difference between 166 and three times the number
        "
      - the sum of nineteen more than four times the number and three times the number
      N_04:
      - a number in the phrase " three times the number "
      - a number in the phrase " three times the number "
      - a number in the phrase " three times the number "
      X_00:
      - the unknown number
      - the number which nineteen more than four times a number is equal to the difference
        between 166 and three times the number
      - the number we want to find
  info:
    answers:
    - n: '21'
    item_id: 604cc853117d71c492a62d8e
    numbers:
      N_00: '19'
      N_01: '4'
      N_02: '1'
      N_03: '166'
      N_04: '3'
    split: null
    variables:
    - n
  text:
    numbers:
      shape:
      - 27
      target: __  0 __ __  1 __  2 __ __ __ __ __ __ __  3 __  4 __ __ __ __ __ __
        __ __ __ __
    raw: nineteen more than four times a number is equal to the difference between
      166 and three times the number . find the number ?
    snippets:
      shape:
      - 5
      - 15
      target:
      - nineteen more than four times a number is
      - nineteen more than four times a number is equal to the
      - nineteen more than four times a number is equal to the difference between
      - number is equal to the difference between 166 and three times the number .
        find
      - equal to the difference between 166 and three times the number . find the
        number
    tokens:
      shape:
      - 27
      target: '[CLS] nineteen more than four times a number is equal to the difference
        between 166 and three times the number . find the number ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(R_00, R_01) R_03: =(N_01,
      R_02) R_04: *(N_03, R_01) R_05: +(R_00, R_04) R_06: =(N_04, R_05) R_07: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the sum of the two numbers
      N_03:
      - a number in the phrase " two times the other number "
      N_04:
      - the sum of two numbers
      X_00:
      - the value of one number
      X_01:
      - the value of the other number
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the sum of two numbers
      - the sum of the first number and the second number
      - the sum of two numbers
      N_03:
      - a number in the phrase " two times the other number "
      - the multiplier for the second number
      - a number in the phrase " two "
      N_04:
      - the value of the first number plus two times the second number
      - the sum of the first number and 2 times the second number
      - the sum of one number and 2 times the other number
      X_00:
      - the first number
      - the value of the first number
      - the value of one number
      X_01:
      - the second number
      - the value of the second number
      - the value of the other number
  info:
    answers:
    - n1: '27'
      n2: '15'
    item_id: 604cc853117d71c492a62da0
    numbers:
      N_00: '2'
      N_01: '42'
      N_02: '1'
      N_03: '2'
      N_04: '57'
    split: null
    variables:
    - n1
    - n2
  text:
    numbers:
      shape:
      - 27
      target: __ __ __ __  0 __ __  1 __  2 __ __  3 __ __ __ __ __  4 __ __ __ __
        __ __ __ __
    raw: the sum of two numbers is 42 . one number plus two times the other number
      is 57 . what are the numbers ?
    snippets:
      shape:
      - 5
      - 15
      target:
      - the sum of two numbers is 42 . one number plus
      - the sum of two numbers is 42 . one number plus two times the
      - sum of two numbers is 42 . one number plus two times the other number
      - numbers is 42 . one number plus two times the other number is 57 .
      - plus two times the other number is 57 . what are the numbers ?
    tokens:
      shape:
      - 27
      target: '[CLS] the sum of two numbers is 42 . one number plus two times the
        other number is 57 . what are the numbers ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(0.01, N_00) R_02: *(0.25, N_01) R_03: +(R_01,
      R_02) R_04: =(R_00, R_03) R_05: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of pennies pennies got for washing clothes
      N_01:
      - the number of quarters in washing
      X_00:
      - the total value of the bundle of clothes
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of pennies
      - the number of pennies sam got
      - the number of pennies that sam got for washing clothes
      N_01:
      - the number of quarters
      - the number of quarters sam got
      - the number of quarters that sam got for mowing lawns
      X_00:
      - the total amount of money
      - the total amount of money sam has
      - the number of dollars that sam has
  info:
    answers:
    - t: '1.84000000000000'
    item_id: 60f9186c90be09b72239f08c
    numbers:
      N_00: '9'
      N_01: '7'
    split: null
    variables:
    - t
  text:
    numbers:
      shape:
      - 27
      target: __ __ __  0 __ __ __ __ __ __  1 __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __
    raw: 'sam got 9 penn ##ies for washing clothes and 7 quarters for mo ##wing lawn
      ##s . how much money does sam have ?'
    snippets:
      shape:
      - 2
      - 15
      target:
      - 'sam got 9 penn ##ies for washing clothes and 7'
      - '9 penn ##ies for washing clothes and 7 quarters for mo ##wing lawn ##s .'
    tokens:
      shape:
      - 27
      target: '[CLS] sam got 9 penn ##ies for washing clothes and 7 quarters for mo
        ##wing lawn ##s . how much money does sam have ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_02) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of eggs in a box
      N_02:
      - the number of eggs inside the box
      X_00:
      - the total number of eggs
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of eggs in a box
      - the initial number of eggs in a box
      - the number of eggs in a box at first
      N_02:
      - the number of new eggs
      - the number of eggs put more inside a box by daniel
      - the number of eggs daniel puts inside
      X_00:
      - the number of all eggs
      - the total number of eggs in a box now
      - the number of eggs there are now
  info:
    answers:
    - c: '11'
    item_id: 60f9186c90be09b72239efec
    numbers:
      N_00: '7'
      N_01: '1'
      N_02: '4'
    split: null
    variables:
    - c
  text:
    numbers:
      shape:
      - 27
      target: __ __ __ __  0 __ __  1 __ __ __ __  2 __ __ __ __ __ __ __ __ __ __
        __ __ __ __
    raw: if there are 7 eggs in a box and daniel puts 4 more eggs inside , how many
      eggs are in the box ?
    snippets:
      shape:
      - 3
      - 15
      target:
      - if there are 7 eggs in a box and daniel puts
      - if there are 7 eggs in a box and daniel puts 4 more eggs
      - eggs in a box and daniel puts 4 more eggs inside , how many eggs
    tokens:
      shape:
      - 27
      target: '[CLS] if there are 7 eggs in a box and daniel puts 4 more eggs inside
        , how many eggs are in the box ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_01, R_00) R_02: =(N_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the total number of oranges
      N_01:
      - the number of boxes
      X_00:
      - the number of oranges in each box
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of oranges
      - the number of oranges louise stored in boxes
      - the total number of oranges
      N_01:
      - the number of boxes
      - the number of boxes
      - the total number of boxes
      X_00:
      - the number of oranges in each box
      - the number of oranges in each box
      - the number of oranges that go in one box
  info:
    answers:
    - p: '6'
    item_id: 60f9186c90be09b72239f0b1
    numbers:
      N_00: '42'
      N_01: '7'
    split: null
    variables:
    - p
  text:
    numbers:
      shape:
      - 27
      target: __ __ __  0 __ __ __ __ __ __ __ __ __  1 __ __ __ __ __ __ __ __ __
        __ __ __ __
    raw: 'louise has 42 orange ##s stored in boxes . if there are 7 boxes , how many
      orange ##s must go in each box ?'
    snippets:
      shape:
      - 2
      - 15
      target:
      - 'louise has 42 orange ##s stored in boxes . if'
      - 'stored in boxes . if there are 7 boxes , how many orange ##s must'
    tokens:
      shape:
      - 27
      target: '[CLS] louise has 42 orange ##s stored in boxes . if there are 7 boxes
        , how many orange ##s must go in each box ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of turnips keith grew
      N_01:
      - the number of turnips alyssa grew
      X_00:
      - the total number of turnips
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of turnips grown by keith
      - the number of turnips that keith grew
      - the number of turnips grown by keith
      N_01:
      - the number of turnips grown by alyssa
      - the number of turnips that alyssa grew
      - the number of turnips grown by alyssa
      X_00:
      - the total number of turnips
      - the number of turnips that they grew
      - the total number of turnips grown by keith and alyssa
  info:
    answers:
    - t: '15'
    item_id: 60f9186c90be09b72239ef76
    numbers:
      N_00: '6'
      N_01: '9'
    split: null
    variables:
    - t
  text:
    numbers:
      shape:
      - 27
      target: __ __ __  0 __ __ __ __ __ __  1 __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __
    raw: 'keith grew 6 turn ##ip ##s . alyssa grew 9 turn ##ip ##s . how many turn
      ##ip ##s did they grow in all ?'
    snippets:
      shape:
      - 2
      - 15
      target:
      - 'keith grew 6 turn ##ip ##s . alyssa grew 9'
      - '6 turn ##ip ##s . alyssa grew 9 turn ##ip ##s . how many turn'
    tokens:
      shape:
      - 27
      target: '[CLS] keith grew 6 turn ##ip ##s . alyssa grew 9 turn ##ip ##s . how
        many turn ##ip ##s did they grow in all ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 9
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_01) R_02: +(N_02, R_01) R_03: =(R_00,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of onions sara grew
      N_01:
      - the number of onions sally grew
      N_02:
      - the number of onions fred grew
      X_00:
      - the total number of onions they grew
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of onions grown by sara
      - the number of sara's onions
      - the number of onions grown by sara
      N_01:
      - the number of onions grown by sally
      - the number of sally's onions
      - the number of onions grown by sally
      N_02:
      - the number of onions grown by fred
      - the number of fred's onions
      - the number of onions grown by fred
      X_00:
      - the total number of onions
      - the whole number of onions
      - the total number of onions grown
  info:
    answers:
    - o: '18'
    item_id: 60f9186c90be09b72239eeeb
    numbers:
      N_00: '4'
      N_01: '5'
      N_02: '9'
    split: null
    variables:
    - o
  text:
    numbers:
      shape:
      - 27
      target: __ __ __  0 __ __ __ __  1 __ __ __ __ __  2 __ __ __ __ __ __ __ __
        __ __ __ __
    raw: sara grew 4 onions , sally grew 5 onions , and fred grew 9 onions . how many
      onions did they grow in all ?
    snippets:
      shape:
      - 3
      - 15
      target:
      - sara grew 4 onions , sally grew 5 onions ,
      - sara grew 4 onions , sally grew 5 onions , and fred grew 9 onions
      - grew 5 onions , and fred grew 9 onions . how many onions did they
    tokens:
      shape:
      - 27
      target: '[CLS] sara grew 4 onions , sally grew 5 onions , and fred grew 9 onions
        . how many onions did they grow in all ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_01, R_00) R_02: =(N_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the total number of apples
      N_01:
      - the number of people
      X_00:
      - the number of apples one classmate gets
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of apples harold split between 3 people
      - number of apples
      - the total number of apples
      N_01:
      - the number of people in harold's class
      - number of people in her class
      - the number of people
      X_00:
      - the number of apples each classmate got
      - the number of apples each person got
      - the number of apples each person got
  info:
    answers:
    - p: '5'
    item_id: 60f9186c90be09b72239f069
    numbers:
      N_00: '15'
      N_01: '3'
    split: null
    variables:
    - p
  text:
    numbers:
      shape:
      - 30
      target: __ __ __ __  0 __ __  1 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __
    raw: 'if harold split 15 apples between 3 people in her class and kept the left
      ##overs , how many apples did each classmate get ?'
    snippets:
      shape:
      - 2
      - 15
      target:
      - if harold split 15 apples between 3 people in her class
      - if harold split 15 apples between 3 people in her class and kept the
    tokens:
      shape:
      - 30
      target: '[CLS] if harold split 15 apples between 3 people in her class and kept
        the left ##overs , how many apples did each classmate get ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_00, R_00) R_02: +(1, R_00) R_03: *(N_03,
      R_02) R_04: -(R_01, R_03) R_05: =(N_04, R_04) R_06: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - a number in the phrase " one - third of its successor "
      N_03:
      - a number in the phrase " one - fourth of its successor "
      N_04:
      - the value of one - third of a number minus one - fourth of its successor
      X_00:
      - the value of the number
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - a number in the phrase " one - third of a number "
      - the coefficient of the number
      - a number in the phrase " one - third of a number "
      N_03:
      - a number in the phrase " one - fourth of its successor "
      - the coefficient of its successor
      - a number in the phrase " one - fourth of its successor "
      N_04:
      - the value of one - third of a number minus one - fourth of its successor
      - the value of one - third of a number minus one - fourth of its successor
      - the value of one - third of a number of two digits minus one - fourth of its
        successor
      X_00:
      - the original number to find
      - the value of the number
      - the value of the number
  info:
    answers:
    - n: '15'
    item_id: 604cc853117d71c492a630f4
    numbers:
      N_00: '0.333333333333333'
      N_01: '1'
      N_02: '2'
      N_03: '0.250000000000000'
      N_04: '1'
    split: null
    variables:
    - n
  text:
    numbers:
      shape:
      - 30
      target: __  0  0  0 __  1 __ __  2 __ __ __ __  3  3  3 __ __ __ __  4 __ __
        __ __ __ __ __ __ __
    raw: one - third of a number of two digits is greater than one - fourth of its
      successor by 1 . find the number .
    snippets:
      shape:
      - 5
      - 15
      target:
      - one - third of a number of two
      - one - third of a number of two digits is greater than
      - one - third of a number of two digits is greater than one - fourth
      - number of two digits is greater than one - fourth of its successor by 1
      - one - fourth of its successor by 1 . find the number .
    tokens:
      shape:
      - 30
      target: '[CLS] one - third of a number of two digits is greater than one - fourth
        of its successor by 1 . find the number . [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: /(1, N_01) R_02: /(1, N_02) R_03: +(R_01, R_02)
      R_04: *(R_00, R_03) R_05: =(1, R_04) R_06: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of hours ben can paint a fence
      N_02:
      - the number of hours taken for billy to paint a fence
      X_00:
      - the number of hours it takes to paint a fence if ben and billy both paint
        the fence together
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of hours it takes for ben to paint the fence
      - the hours it takes ben to paint a room
      - the number of hours in which ben can paint the fence
      N_02:
      - the number of hours it takes for billy to paint the fence
      - the hours it takes billy to paint a room
      - the number of hours in which billy can paint the fence
      X_00:
      - the number of hours it takes for ben and billy to paint the fence together
      - the hours of painting together
      - the number of hours in which ben and billy together can paint the fence
  info:
    answers:
    - h: '1.71428571428571'
    item_id: 604cc853117d71c492a62fc8
    numbers:
      N_00: '1'
      N_01: '3'
      N_02: '4'
    split: null
    variables:
    - h
  text:
    numbers:
      shape:
      - 30
      target: __ __ __ __  0 __ __  1 __ __ __ __ __  2 __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __
    raw: ben can paint a fence in 3 hours , and billy takes 4 hours . how long will
      it take them to paint together ?
    snippets:
      shape:
      - 3
      - 15
      target:
      - ben can paint a fence in 3 hours , and billy
      - ben can paint a fence in 3 hours , and billy takes 4 hours
      - in 3 hours , and billy takes 4 hours . how long will it take
    tokens:
      shape:
      - 30
      target: '[CLS] ben can paint a fence in 3 hours , and billy takes 4 hours .
        how long will it take them to paint together ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(R_00, R_01) R_03: =(N_01,
      R_02) R_04: *(N_03, R_01) R_05: -(R_04, R_00) R_06: =(N_02, R_05) R_07: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the sum of the two integers
      N_02:
      - the value of 5 times the larger integer minus the smaller integer
      N_03:
      - a number in the phrase " 5 times the larger "
      X_00:
      - the value of the smaller integer
      X_01:
      - the value of the larger integer
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the sum of the first number and the second number
      - the sum of the two integers
      - the sum of two integers
      N_02:
      - the value of 5 times the larger number minus the smaller number
      - the value of 5 times the larger integer minus the smaller integer
      - the value of five times the larger integer minus the smaller integer
      N_03:
      - the multiplier of the larger number
      - a number in the phrase " 5 times the larger "
      - a number in the phrase " 5 times the larger "
      X_00:
      - the value of the smaller number
      - the smaller integer
      - the value of the smaller integer
      X_01:
      - the value of the larger number
      - the larger integer
      - the value of the larger integer
  info:
    answers:
    - l: '2'
      s: '-1'
    item_id: 604cc853117d71c492a63051
    numbers:
      N_00: '2'
      N_01: '1'
      N_02: '11'
      N_03: '5'
    split: null
    variables:
    - s
    - l
  text:
    numbers:
      shape:
      - 30
      target: __ __ __ __  0 __ __  1 __ __ __ __ __ __  2 __ __  3 __ __ __ __ __
        __ __ __ __ __ __ __
    raw: the sum of two integers is 1 . if the smaller integer is 11 less than 5 times
      the larger , what are the integers ?
    snippets:
      shape:
      - 4
      - 15
      target:
      - the sum of two integers is 1 . if the smaller
      - the sum of two integers is 1 . if the smaller integer is 11
      - 1 . if the smaller integer is 11 less than 5 times the larger ,
      - the smaller integer is 11 less than 5 times the larger , what are the
    tokens:
      shape:
      - 30
      target: '[CLS] the sum of two integers is 1 . if the smaller integer is 11 less
        than 5 times the larger , what are the integers ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: /(N_03, 100) R_02: *(R_00, R_01) R_03: =(N_01,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the cost of the bracelet
      N_03:
      - the percentage of the increase from cost of the bracelet to the original cost
        of the bracelet
      X_00:
      - the original cost of the bracelet
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the increased amount
      - the increased amount of cost of the bracelet
      - the money that was marked up from cost
      N_03:
      - the percentage of increased amount to the original cost
      - increase rate of the cost of the bracelet
      - the rate of increase
      X_00:
      - the original cost
      - the cost of the bracelet before the increase
      - the original cost of the bracelet
  info:
    answers:
    - o: '350'
    item_id: 60f9186c90be09b72239f097
    numbers:
      N_00: '1'
      N_01: '175'
      N_02: '1'
      N_03: '50'
    split: null
    variables:
    - o
  text:
    numbers:
      shape:
      - 30
      target: __  0 __ __ __ __  1 __ __ __ __ __ __ __  2  3 __ __ __ __ __ __ __
        __ __ __ __ __ __ __
    raw: a bracelet was marked up 175 dollars from cost , which amounts to a 50 %
      increase . find the original cost of the bracelet .
    snippets:
      shape:
      - 4
      - 15
      target:
      - a bracelet was marked up 175 dollars from
      - a bracelet was marked up 175 dollars from cost , which amounts to
      - dollars from cost , which amounts to a 50 % increase . find the original
      - from cost , which amounts to a 50 % increase . find the original cost
    tokens:
      shape:
      - 30
      target: '[CLS] a bracelet was marked up 175 dollars from cost , which amounts
        to a 50 % increase . find the original cost of the bracelet . [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: -(R_00, R_01) R_03: =(N_00,
      R_02) R_04: +(R_00, R_01) R_05: =(N_01, R_04) R_06: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the value of jose's age minus maria's age
      N_01:
      - the sum of their ages
      X_00:
      - the age of jose
      X_01:
      - the age of maria
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the value of jose's age minus maria's age
      - the value of the age of jose minus the age of maria
      - the value of the age of jose minus that of maria
      N_01:
      - the sum of jose and maria's ages
      - the sum of their ages
      - the sum of their ages
      X_00:
      - the age of jose
      - the age of jose
      - the age of jose
      X_01:
      - the age of maria
      - the age of maria
      - the age of maria
  info:
    answers:
    - j: '26'
      m: '14'
    item_id: 604cc853117d71c492a62eae
    numbers:
      N_00: '12'
      N_01: '40'
    split: null
    variables:
    - j
    - m
  text:
    numbers:
      shape:
      - 30
      target: __ __ __  0 __ __ __ __ __ __ __ __ __ __ __  1 __ __ __ __ __ __ __
        __ __ __ __ __ __ __
    raw: jose is 12 years older than maria . the sum of their ages is 40 . how old
      is maria ? how old is jose ?
    snippets:
      shape:
      - 2
      - 15
      target:
      - jose is 12 years older than maria . the sum
      - . the sum of their ages is 40 . how old is maria ? how
    tokens:
      shape:
      - 30
      target: '[CLS] jose is 12 years older than maria . the sum of their ages is
        40 . how old is maria ? how old is jose ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_01, N_02) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of pizzas you buy
      N_02:
      - the number of slices one pizza has
      X_00:
      - the total number of slices
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of pizzas
      - the number of pizza
      - the number of pizzas
      N_02:
      - the number of slices per pizza
      - the number of slices per pizza
      - the number of slices for each pizza
      X_00:
      - the total number of slices
      - the total number of slices
      - the number of all slices
  info:
    answers:
    - s: '20'
    item_id: 60f9186c90be09b72239ec17
    numbers:
      N_00: '1'
      N_01: '5'
      N_02: '4'
    split: null
    variables:
    - s
  text:
    numbers:
      shape:
      - 30
      target: __ __ __ __ __  0 __ __ __ __ __  1 __ __ __ __ __ __  2 __ __ __ __
        __ __ __ __ __ __ __
    raw: 'your class is having a pizza party . you buy 5 pizza ##s . each pizza has
      4 slices . how many slices is that altogether ?'
    snippets:
      shape:
      - 3
      - 15
      target:
      - your class is having a pizza party . you buy 5 pizza
      - 'having a pizza party . you buy 5 pizza ##s . each pizza has 4'
      - '5 pizza ##s . each pizza has 4 slices . how many slices is that'
    tokens:
      shape:
      - 30
      target: '[CLS] your class is having a pizza party . you buy 5 pizza ##s . each
        pizza has 4 slices . how many slices is that altogether ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: -(R_00, R_01) R_03: =(N_01,
      R_02) R_04: *(N_04, R_01) R_05: *(N_07, R_00) R_06: -(R_04, R_05) R_07: =(N_06,
      R_06) R_08: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the value of the first number minus the second number
      N_04:
      - a number in the phrase " twice the first number "
      N_06:
      - the value of three times the first number minus 3 times the second number
      N_07:
      - a number in the phrase " 3 times the second "
      X_00:
      - the first number
      X_01:
      - the second number
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the value of the second number minus the first number
      - the value of the second number minus the first number
      - the value of another number minus one number
      N_04:
      - the multiplier for the first number
      - a number in the phrase " twice the first "
      - the coefficient of the one number
      N_06:
      - the value of 2 times the first number minus 3 times the second number
      - the value of twice the first number minus three times the second number
      - the value of 2 times one number minus 3 times another number
      N_07:
      - the multiplier for the second number
      - a number in the phrase " 3 times the second "
      - the coefficient of another number
      X_00:
      - the value of the second number
      - the value of the second number
      - the value of another number
      X_01:
      - the value of the first number
      - the value of the first number
      - the value of one number
  info:
    answers:
    - f: '-10'
      s: '-8'
    item_id: 604cc853117d71c492a62fc5
    numbers:
      N_00: '1'
      N_01: '2'
      N_02: '1'
      N_03: '2'
      N_04: '2'
      N_05: '1'
      N_06: '4'
      N_07: '3'
      N_08: '2'
    split: null
    variables:
    - s
    - f
  text:
    numbers:
      shape:
      - 30
      target: __  0 __ __  1 __ __  2  3 __ __  4 __  5 __  6 __ __  7 __ __  8  8
        __ __ __ __ __ __ __
    raw: one number is two less than a second number . twice the first is 4 more than
      3 times the second . what are the numbers ?
    snippets:
      shape:
      - 9
      - 15
      target:
      - one number is two less than a second
      - one number is two less than a second number . twice
      - one number is two less than a second number . twice the first is
      - one number is two less than a second number . twice the first is 4
      - two less than a second number . twice the first is 4 more than 3
      - than a second number . twice the first is 4 more than 3 times the
      - second number . twice the first is 4 more than 3 times the second .
      - twice the first is 4 more than 3 times the second . what are the
      - is 4 more than 3 times the second . what are the numbers ?
    tokens:
      shape:
      - 30
      target: '[CLS] one number is two less than a second number . twice the first
        is 4 more than 3 times the second . what are the numbers ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_02) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of birds that were sitting in the tree
      N_02:
      - the number of birds that flew up to the tree
      X_00:
      - the total number of birds that were sitting in the tree
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the initial number of birds
      - the number of birds sitting in a tree first time
      - the number of birds that were sitting in a tree
      N_02:
      - the additional number of birds
      - the number of birds flew up to the tree
      - the number of birds that flew up to the tree
      X_00:
      - the total number of birds
      - the total number of birds sitting in a tree altogether
      - the total number of birds
  info:
    answers:
    - b: '217'
    item_id: 60f9186c90be09b72239ef41
    numbers:
      N_00: '179'
      N_01: '1'
      N_02: '38'
    split: null
    variables:
    - b
  text:
    numbers:
      shape:
      - 30
      target: __  0 __ __ __ __  1 __ __  2 __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __
    raw: 179 birds were sitting in a tree . 38 more birds flew up to the tree . how
      many birds were there altogether in the tree ?
    snippets:
      shape:
      - 3
      - 15
      target:
      - 179 birds were sitting in a tree .
      - 179 birds were sitting in a tree . 38 more birds flew up
      - birds were sitting in a tree . 38 more birds flew up to the tree
    tokens:
      shape:
      - 30
      target: '[CLS] 179 birds were sitting in a tree . 38 more birds flew up to the
        tree . how many birds were there altogether in the tree ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(R_00, R_01) R_03: -(R_02,
      N_03) R_04: =(N_01, R_03) R_05: -(R_00, R_01) R_06: =(N_03, R_05) R_07: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the value of the first number minus the second number
      N_03:
      - the value of the first number minus the second number
      X_00:
      - the value of the first number
      X_01:
      - the value of the second number
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the value of the sum of the first and second number minus 1
      - the value of their sum minus the difference between two numbers
      - the value of the sum of two numbers minus 1
      N_03:
      - the value of the first number minus the second number
      - the value of one number minus the other number
      - the value of one number minus the other number
      X_00:
      - the first number
      - the value of one number
      - the value of one number
      X_01:
      - the second number
      - the value of the other number
      - the value of the other number
  info:
    answers:
    - n1: '3'
      n2: '2'
    item_id: 604cc853117d71c492a63050
    numbers:
      N_00: '2'
      N_01: '4'
      N_02: '1'
      N_03: '1'
      N_04: '2'
    split: null
    variables:
    - n1
    - n2
  text:
    numbers:
      shape:
      - 30
      target: __ __ __ __  0 __ __  1 __ __ __ __ __  2 __ __  3 __ __ __ __ __ __
        __ __ __  4 __ __ __
    raw: the difference between two numbers is 4 less than their sum . one number
      is 1 less than the other number . what are the two numbers ?
    snippets:
      shape:
      - 5
      - 15
      target:
      - the difference between two numbers is 4 less than their sum
      - the difference between two numbers is 4 less than their sum . one number
      - is 4 less than their sum . one number is 1 less than the other
      - than their sum . one number is 1 less than the other number . what
      - the other number . what are the two numbers ?
    tokens:
      shape:
      - 30
      target: '[CLS] the difference between two numbers is 4 less than their sum .
        one number is 1 less than the other number . what are the two numbers ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(R_00, R_01) R_03: =(N_01,
      R_02) R_04: *(N_02, R_00) R_05: -(R_04, R_01) R_06: =(N_03, R_05) R_07: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the sum of the two numbers
      N_02:
      - a number in the phrase " twice the smaller number "
      N_03:
      - the value of twice the smaller number minus the larger number
      X_00:
      - the smaller number
      X_01:
      - the larger number
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the sum of two numbers
      - the sum of the two numbers
      - the sum of the two numbers
      N_02:
      - a number in the phrase " twice the smaller number is three "
      - the coefficient of the smaller number on one part
      - a number in the phrase " twice the smaller number "
      N_03:
      - the value of 2 times the smaller number minus the larger number
      - the value of twice the smaller number minus the larger number
      - the value of twice the smaller number minus the larger number
      X_00:
      - the smaller number
      - the value of the smaller number
      - the value of the smaller number
      X_01:
      - the larger number
      - the value of the larger number
      - the value of the larger number
  info:
    answers:
    - l: '29'
      s: '16'
    item_id: 604cc853117d71c492a62e00
    numbers:
      N_00: '2'
      N_01: '45'
      N_02: '2'
      N_03: '3'
      N_04: '2'
    split: null
    variables:
    - s
    - l
  text:
    numbers:
      shape:
      - 30
      target: __ __ __ __  0 __ __  1 __  2 __ __ __ __  3 __ __ __ __ __ __ __ __
        __ __ __  4 __ __ __
    raw: the sum of two numbers is 45 . twice the smaller number is three more the
      larger number . what is the product of the two numbers ?
    snippets:
      shape:
      - 5
      - 15
      target:
      - the sum of two numbers is 45 . twice the smaller
      - the sum of two numbers is 45 . twice the smaller number is three
      - sum of two numbers is 45 . twice the smaller number is three more the
      - 45 . twice the smaller number is three more the larger number . what is
      - . what is the product of the two numbers ?
    tokens:
      shape:
      - 30
      target: '[CLS] the sum of two numbers is 45 . twice the smaller number is three
        more the larger number . what is the product of the two numbers ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: -(N_01, N_02) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of dimes sara had
      N_02:
      - the number of dimes borrowed by the sister
      X_00:
      - the number of dimes left now
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the initial number of dimes
      - the number of dimes in her bank
      - the number of dimes sara had
      N_02:
      - the number of dimes borrowed by the sister
      - the number of dimes that her sister borrowed
      - the number of dimes her sister borrowed
      X_00:
      - the number of dimes now
      - the number of her dimes now
      - the number of dimes sara has now
  info:
    answers:
    - r: '4'
    item_id: 60f9186c90be09b72239f0dd
    numbers:
      N_00: '4'
      N_01: '8'
      N_02: '4'
    split: null
    variables:
    - r
  text:
    numbers:
      shape:
      - 30
      target: __ __ __  0 __ __  1 __ __ __ __ __ __ __ __ __  2 __ __ __ __ __ __
        __ __ __ __ __ __ __
    raw: 'sara had 4 quarters and 8 dime ##s in her bank . her sister borrowed 4 dime
      ##s . how many dime ##s does sara have now ?'
    snippets:
      shape:
      - 3
      - 15
      target:
      - 'sara had 4 quarters and 8 dime ##s in her'
      - 'sara had 4 quarters and 8 dime ##s in her bank . her'
      - 'in her bank . her sister borrowed 4 dime ##s . how many dime ##s'
    tokens:
      shape:
      - 30
      target: '[CLS] sara had 4 quarters and 8 dime ##s in her bank . her sister borrowed
        4 dime ##s . how many dime ##s does sara have now ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_01, R_00) R_02: =(N_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the total number of candies
      N_01:
      - the number of groups
      X_00:
      - the number of candies in each group
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the total number of candies
      - the number of candies in kathy's candy collection
      - the number of candies in kathy's candy collection
      N_01:
      - the number of groups candies organized into
      - the number of candies for each organized group
      - the number of groups the candies are organized into
      X_00:
      - the number of candies in each group
      - the number of groups needed to organize all kathy's candies into
      - the number of candies in each group
  info:
    answers:
    - g: '3'
    item_id: 60f9186c90be09b72239f09f
    numbers:
      N_00: '30'
      N_01: '10'
    split: null
    variables:
    - g
  text:
    numbers:
      shape:
      - 30
      target: __ __ __  0 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __  1 __ __
        __ __ __ __ __ __ __
    raw: 'there are 30 candi ##es in kathy '' s candy collection . if the candi ##es
      are organized into 10 groups , how big is each group ?'
    snippets:
      shape:
      - 2
      - 15
      target:
      - 'there are 30 candi ##es in kathy '' s candy'
      - 'if the candi ##es are organized into 10 groups , how big is each group'
    tokens:
      shape:
      - 30
      target: '[CLS] there are 30 candi ##es in kathy '' s candy collection . if the
        candi ##es are organized into 10 groups , how big is each group ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: *(0.25, R_00) R_03: *(0.1,
      R_01) R_04: +(R_02, R_03) R_05: =(N_01, R_04) R_06: +(R_00, R_01) R_07: =(N_02,
      R_06) R_08: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the total value of coins
      N_02:
      - the total number of coins
      X_00:
      - the number of quarters
      X_01:
      - the number of dimes
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the total value of quarters and dimes
      - the sum of value of the quarters and the value of dimes
      - the total dollar amount the piggy bank contains
      N_02:
      - the total number of quarters and dimes
      - the sum of the number of quarters and the number of dimes
      - the total number of coins in the piggy bank
      X_00:
      - the number of quarters
      - the number of quarters
      - the number of quarters
      X_01:
      - the number of dimes
      - the number of the dimes
      - the number of dimes
  info:
    answers:
    - d: '35'
      q: '65'
    item_id: 604cc853117d71c492a630c3
    numbers:
      N_00: '1'
      N_01: '19.7500000000000'
      N_02: '100'
    split: null
    variables:
    - q
    - d
  text:
    numbers:
      shape:
      - 30
      target: __  0 __ __ __ __ __  1  1  1 __ __ __ __ __ __ __  2 __ __ __ __ __
        __ __ __ __ __ __ __
    raw: 'a pig ##gy bank contains $ 19 . 75 in quarters and dime ##s equal ##ing
      100 coins in all . how many dime ##s are there ?'
    snippets:
      shape:
      - 3
      - 15
      target:
      - 'a pig ##gy bank contains $ 19 .'
      - 'a pig ##gy bank contains $ 19 . 75 in quarters and dime ##s'
      - 'in quarters and dime ##s equal ##ing 100 coins in all . how many dime'
    tokens:
      shape:
      - 30
      target: '[CLS] a pig ##gy bank contains $ 19 . 75 in quarters and dime ##s equal
        ##ing 100 coins in all . how many dime ##s are there ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_01, R_00) R_02: =(N_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of books about school
      N_01:
      - the number of books about school
      X_00:
      - the total number of books
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the total number of books
      - the number of books about school and that of sports
      - the number of books lesha has
      N_01:
      - the number of books about school
      - the number of books about school
      - the number of books about school
      X_00:
      - the number of books about sports
      - the number of books about sports
      - the number of books not about school
  info:
    answers:
    - s: '208'
    item_id: 60f9186c90be09b72239ebdb
    numbers:
      N_00: '344'
      N_01: '136'
    split: null
    variables:
    - s
  text:
    numbers:
      shape:
      - 30
      target: __ __ __ __  0 __ __  1 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __
    raw: 'ie ##sha has 344 books . 136 are about school , and the rest are about sports
      . how many books about sports does ie ##sha have ?'
    snippets:
      shape:
      - 2
      - 15
      target:
      - 'ie ##sha has 344 books . 136 are about school ,'
      - 'ie ##sha has 344 books . 136 are about school , and the rest'
    tokens:
      shape:
      - 30
      target: '[CLS] ie ##sha has 344 books . 136 are about school , and the rest
        are about sports . how many books about sports does ie ##sha have ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of plums alyssa picked
      N_01:
      - the number of plums jason picked
      X_00:
      - the number of plums picked in all
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of plums picked by alyssa
      - the number of plums alyssa picked
      - the number of plums alyssa picked
      N_01:
      - the number of plums picked by jason
      - the number of plums jason picked
      - the number of plums jason picked
      X_00:
      - the number of plums picked by them in all
      - the whole number of plums picked
      - the number of plums picked by them
  info:
    answers:
    - p: '27'
    item_id: 60f9186c90be09b72239f1af
    numbers:
      N_00: '17'
      N_01: '10'
      N_02: '35'
    split: null
    variables:
    - p
  text:
    numbers:
      shape:
      - 30
      target: __ __ __  0 __ __ __ __ __ __  1 __ __ __ __ __  2 __ __ __ __ __ __
        __ __ __ __ __ __ __
    raw: 'alyssa picked 17 plum ##s , and jason picked 10 plum ##s . melanie picked
      35 pear ##s . how many plum ##s were picked in all ?'
    snippets:
      shape:
      - 3
      - 15
      target:
      - 'alyssa picked 17 plum ##s , and jason picked 10'
      - '17 plum ##s , and jason picked 10 plum ##s . melanie picked 35 pear'
      - 'picked 10 plum ##s . melanie picked 35 pear ##s . how many plum ##s'
    tokens:
      shape:
      - 30
      target: '[CLS] alyssa picked 17 plum ##s , and jason picked 10 plum ##s . melanie
        picked 35 pear ##s . how many plum ##s were picked in all ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: /(N_03, 100) R_02: *(R_00, R_01) R_03: -(R_00,
      R_02) R_04: =(N_00, R_03) R_05: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of dollars amy paid for a pair of running shoes
      N_03:
      - the percentage of a pair of running shoes
      X_00:
      - the regular price of a pair of running shoes
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the sale price of a pair of running shoes
      - the number of dollars amy paid for a pair of running shoes with discount
      - the price of a pair of running shoes during a 35 % sale
      N_03:
      - the discount rate of the pair of running shoes
      - the discount rate of the running shoes
      - the percentage of the discount compared to the regular price
      X_00:
      - the regular price of the pair of running shoes
      - the regular price of the running shoes
      - the regular price of the running shoes
  info:
    answers:
    - r: '74.5411764705882'
    item_id: 60f9186c90be09b72239ef5d
    numbers:
      N_00: '63.3600000000000'
      N_01: '1'
      N_02: '1'
      N_03: '15'
    split: null
    variables:
    - r
  text:
    numbers:
      shape:
      - 32
      target: __ __ __  0  0  0 __ __  1 __ __ __ __ __  2  3 __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __
    raw: amy paid 63 . 36 dollars for a pair of running shoes during a 15 % off sale
      . what is the regular price of the running shoes ?
    snippets:
      shape:
      - 4
      - 15
      target:
      - amy paid 63 . 36 dollars for a pair of
      - amy paid 63 . 36 dollars for a pair of running shoes during a 15
      - for a pair of running shoes during a 15 % off sale . what is
      - a pair of running shoes during a 15 % off sale . what is the
    tokens:
      shape:
      - 32
      target: '[CLS] amy paid 63 . 36 dollars for a pair of running shoes during a
        15 % off sale . what is the regular price of the running shoes ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of pounds of peanuts bought by kelly
      N_01:
      - the number of pounds of raisins kelly bought
      X_00:
      - the total number of pounds of snacks
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the pound weights of peanuts
      - the value of pounds of peanuts
      - the pounds of peanuts kelly bought
      N_01:
      - the pound weights of raisins
      - the value of pounds of raisins
      - the pounds of raisins kelly bought
      X_00:
      - the pound weights of peanuts and raisins
      - the total pounds of all snacks
      - the total pounds of snacks kelly bought
  info:
    answers:
    - s: '0.500000000000000'
    item_id: 60f9186c90be09b72239eae5
    numbers:
      N_00: '0.100000000000000'
      N_01: '0.400000000000000'
    split: null
    variables:
    - s
  text:
    numbers:
      shape:
      - 32
      target: __ __ __  0  0  0 __ __ __ __  1  1  1 __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __
    raw: 'kelly bought 0 . 1 pounds of peanuts and 0 . 4 pounds of rai ##sin ##s .
      how many pounds of snacks did she buy in all ?'
    snippets:
      shape:
      - 2
      - 15
      target:
      - kelly bought 0 . 1 pounds of peanuts and 0
      - '0 . 1 pounds of peanuts and 0 . 4 pounds of rai ##sin ##s'
    tokens:
      shape:
      - 32
      target: '[CLS] kelly bought 0 . 1 pounds of peanuts and 0 . 4 pounds of rai
        ##sin ##s . how many pounds of snacks did she buy in all ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(R_00, R_01) R_03: =(N_02,
      R_02) R_04: -(R_00, R_01) R_05: =(N_03, R_04) R_06: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the number of cars sold
      N_03:
      - the value of the number of cars minus the number of trucks
      X_00:
      - the number of cars sold
      X_01:
      - the number of trucks
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the number of cars and trucks an automobile dealer sold during a sale
      - the total number of cars and trucks sold
      - the total number of cars and trucks
      N_03:
      - the value of the number of cars sold minus the number of trucks sold
      - the value of the number of cars sold minus the number of trucks sold
      - the value of cars minus trucks
      X_00:
      - the number of sold cars
      - the number of cars sold
      - the number of cars
      X_01:
      - the number of sold trucks
      - the number of trucks sold
      - the number of trucks
  info:
    answers:
    - c: '48'
      t: '21'
    item_id: 604cc852117d71c492a62b3a
    numbers:
      N_00: '1'
      N_01: '1'
      N_02: '69'
      N_03: '27'
    split: null
    variables:
    - c
    - t
  text:
    numbers:
      shape:
      - 32
      target: __ __  0 __ __  1 __ __ __  2 __ __ __ __ __ __ __  3 __ __ __ __ __
        __ __ __ __ __ __ __ __ __
    raw: during a sale , an automobile dealer sold 69 cars and trucks . if she sold
      27 more cars than trucks , how many trucks did she sell ?
    snippets:
      shape:
      - 4
      - 15
      target:
      - during a sale , an automobile dealer sold 69
      - during a sale , an automobile dealer sold 69 cars and trucks
      - a sale , an automobile dealer sold 69 cars and trucks . if she sold
      - cars and trucks . if she sold 27 more cars than trucks , how many
    tokens:
      shape:
      - 32
      target: '[CLS] during a sale , an automobile dealer sold 69 cars and trucks
        . if she sold 27 more cars than trucks , how many trucks did she sell ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_00, N_01) R_02: *(N_02, R_00) R_03: +(R_01,
      R_02) R_04: =(N_04, R_03) R_05: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the cost of a soft drink
      N_02:
      - the number of candy bars
      N_04:
      - the total cost of a soft drink
      X_00:
      - the number of dollars spent
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of soft drinks bought
      - the number of soft drink
      - the number of soft drinks benny bought
      N_01:
      - the price of a soft drink
      - the cost of a soft drink
      - the cost to buy a soft drink in dollars
      N_02:
      - the number of candy bars bought
      - the number of candy bars
      - the number of candy bars he bought
      N_04:
      - the total cost of soft drinks and candy bars
      - the total cost
      - the total cost of money in dollars he spent
      X_00:
      - the price of a candy bar
      - the cost of a candy bar
      - the cost of each candy bar he bought
  info:
    answers:
    - c: '5'
    item_id: 60f9186c90be09b72239eb0e
    numbers:
      N_00: '1'
      N_01: '2'
      N_02: '5'
      N_03: '1'
      N_04: '27'
    split: null
    variables:
    - c
  text:
    numbers:
      shape:
      - 32
      target: __ __ __  0 __ __ __  1 __ __  2 __ __ __ __ __  3 __ __  4 __ __ __
        __ __ __ __ __ __ __ __ __
    raw: benny bought a soft drink for 2 dollars and 5 candy bars . he spent a total
      of 27 dollars . how much did each candy bar cost ?
    snippets:
      shape:
      - 5
      - 15
      target:
      - benny bought a soft drink for 2 dollars and 5
      - benny bought a soft drink for 2 dollars and 5 candy bars . he
      - a soft drink for 2 dollars and 5 candy bars . he spent a total
      - and 5 candy bars . he spent a total of 27 dollars . how much
      - bars . he spent a total of 27 dollars . how much did each candy
    tokens:
      shape:
      - 32
      target: '[CLS] benny bought a soft drink for 2 dollars and 5 candy bars . he
        spent a total of 27 dollars . how much did each candy bar cost ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_01, R_00) R_02: =(N_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of skittles
      N_01:
      - the number of people to split between 5 people
      X_00:
      - the amount of skittles each classmate can get
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of skittles victor split
      - number of skittles
      - the total number of skittles
      N_01:
      - the number of people in her class
      - number of people in her class
      - the number of people
      X_00:
      - the number of skittles each classmate gets
      - the number of skittles each person got
      - the number of skittles each person got
  info:
    answers:
    - p: '5'
    item_id: 60f9186c90be09b72239f0de
    numbers:
      N_00: '25'
      N_01: '5'
    split: null
    variables:
    - p
  text:
    numbers:
      shape:
      - 32
      target: __ __ __ __  0 __ __ __ __  1 __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __
    raw: 'if victor split 25 ski ##ttle ##s between 5 people in her class and kept
      the left ##overs , how many ski ##ttle ##s did each classmate get ?'
    snippets:
      shape:
      - 2
      - 15
      target:
      - 'if victor split 25 ski ##ttle ##s between 5 people in'
      - 'victor split 25 ski ##ttle ##s between 5 people in her class and kept the'
    tokens:
      shape:
      - 32
      target: '[CLS] if victor split 25 ski ##ttle ##s between 5 people in her class
        and kept the left ##overs , how many ski ##ttle ##s did each classmate get
        ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_01, N_02) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the cost of each chair
      N_02:
      - the number of chairs
      X_00:
      - the total amount of money in dollars
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the price of each chair
      - the number of dollars each chair
      - the amount of money one chair costs
      N_02:
      - the number of chairs
      - the number of chairs ellen bought
      - the total number of chairs bought
      X_00:
      - the whole price of chairs
      - the total cost of 12 chairs
      - the total amount of money spent on chairs
  info:
    answers:
    - c: '180'
    item_id: 60f9186c90be09b72239efb7
    numbers:
      N_00: '1'
      N_01: '15'
      N_02: '12'
    split: null
    variables:
    - c
  text:
    numbers:
      shape:
      - 32
      target: __ __ __ __  0 __ __ __ __ __ __ __ __ __  1 __ __ __ __ __ __ __ __
        __ __  2 __ __ __ __ __ __
    raw: ellen went to a garage sale to buy chairs . each chair costs 15 dollars .
      how much money did ellen spend on the 12 chairs she bought ?
    snippets:
      shape:
      - 3
      - 15
      target:
      - ellen went to a garage sale to buy chairs . each
      - to buy chairs . each chair costs 15 dollars . how much money did ellen
      - much money did ellen spend on the 12 chairs she bought ?
    tokens:
      shape:
      - 32
      target: '[CLS] ellen went to a garage sale to buy chairs . each chair costs
        15 dollars . how much money did ellen spend on the 12 chairs she bought ?
        [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_02) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of crayons in a box
      N_02:
      - the number of additional crayons
      X_00:
      - the total number of crayons
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of crayons in a box
      - the number of crayons in a box
      - the number of crayons in a box at first
      N_02:
      - the number of new crayons
      - the number of crayons put more inside a box by gerald
      - the number of crayons gerald puts inside
      X_00:
      - the number of all crayons
      - the total number of crayons in a box now
      - the total number of crayons there are now
  info:
    answers:
    - c: '13'
    item_id: 60f9186c90be09b72239ec7d
    numbers:
      N_00: '7'
      N_01: '1'
      N_02: '6'
    split: null
    variables:
    - c
  text:
    numbers:
      shape:
      - 32
      target: __ __ __ __  0 __ __ __ __  1 __ __ __ __  2 __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __
    raw: 'if there are 7 cr ##ayo ##ns in a box and gerald puts 6 more cr ##ayo ##ns
      inside , how many cr ##ayo ##ns are in the box ?'
    snippets:
      shape:
      - 3
      - 15
      target:
      - 'if there are 7 cr ##ayo ##ns in a box and'
      - 'there are 7 cr ##ayo ##ns in a box and gerald puts 6 more cr'
      - '##ns in a box and gerald puts 6 more cr ##ayo ##ns inside , how'
    tokens:
      shape:
      - 32
      target: '[CLS] if there are 7 cr ##ayo ##ns in a box and gerald puts 6 more
        cr ##ayo ##ns inside , how many cr ##ayo ##ns are in the box ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_01, R_00) R_02: *(N_02, R_01) R_03: +(N_00,
      R_00) R_04: =(R_02, R_03) R_05: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - tomas's age now
      N_01:
      - the age of tim
      N_02:
      - the ratio of tomas's age after unknown years to tim's age after unknown years
      X_00:
      - the number of years from now
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the age of tomas in the present
      - the age of tomas
      - the age of tomas
      N_01:
      - the age of tim in the present
      - the age of tim
      - the age of tim
      N_02:
      - the ratio of the age of tomas in the future to the age of tim in the future
      - a number in the phrase " in how many years will tomas's age be 4 times more
        than tim's "
      - the ratio of the future age of tomas to the future age of tim
      X_00:
      - the number of years into the future
      - the years in the future in order for tomas's age to be 4 times more than tim's
      - the years between the future and the now
  info:
    answers:
    - y: '3'
    item_id: 604cc853117d71c492a62f94
    numbers:
      N_00: '33'
      N_01: '6'
      N_02: '4'
    split: null
    variables:
    - y
  text:
    numbers:
      shape:
      - 32
      target: __ __ __ __ __ __  0 __ __ __ __  1 __ __ __ __ __ __ __ __ __ __ __  2
        __ __ __ __ __ __ __ __
    raw: tomas ' s age is 33 , and tim is 6 . in how many years will tomas ' s age
      be 4 times more than tim ' s ?
    snippets:
      shape:
      - 3
      - 15
      target:
      - tomas ' s age is 33 , and tim is 6 . in
      - age is 33 , and tim is 6 . in how many years will tomas
      - years will tomas ' s age be 4 times more than tim ' s ?
    tokens:
      shape:
      - 32
      target: '[CLS] tomas '' s age is 33 , and tim is 6 . in how many years will
        tomas '' s age be 4 times more than tim '' s ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_02, R_00) R_02: =(N_01, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of students on each school
      N_02:
      - the number of seats
      X_00:
      - the number of buses
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the total number of students
      - the number of students that take the trip
      - the number of students
      N_02:
      - the number of seats on each school bus
      - the number of seats on each school bus
      - the number of seats on each school bus
      X_00:
      - the number of buses needed
      - the number of buses needed to take the trip
      - the number of buses needed to take students
  info:
    answers:
    - b: '5'
    item_id: 60f9186c90be09b72239f08b
    numbers:
      N_00: '1'
      N_01: '45'
      N_02: '9'
      N_03: '2'
      N_04: '2'
    split: null
    variables:
    - b
  text:
    numbers:
      shape:
      - 32
      target: __ __ __ __ __  0 __ __ __ __ __  1 __ __  2 __ __ __ __  3  3 __ __  4
        __ __ __ __ __ __ __ __
    raw: the school is planning a field trip . there are 45 students and 9 seats on
      each school bus . how many buses are needed to take the trip ?
    snippets:
      shape:
      - 5
      - 15
      target:
      - the school is planning a field trip . there are 45 students
      - planning a field trip . there are 45 students and 9 seats on each school
      - trip . there are 45 students and 9 seats on each school bus . how
      - students and 9 seats on each school bus . how many buses are needed to
      - on each school bus . how many buses are needed to take the trip ?
    tokens:
      shape:
      - 32
      target: '[CLS] the school is planning a field trip . there are 45 students and
        9 seats on each school bus . how many buses are needed to take the trip ?
        [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: -(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of crayons
      N_01:
      - the number of crayons taken out of the drawer
      X_00:
      - the total number of crayons in the drawer
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - number of crayons in the drawer
      - the number of crayons in the drawer
      - the number of crayons in the drawer
      N_01:
      - number of crayons mary took
      - the number of crayons mary took out of the drawer
      - the number of crayons mary took out of the drawer
      X_00:
      - number of crayons left in the drawer
      - the number of crayons left in the drawer
      - the rest number of the crayons there are now
  info:
    answers:
    - r: '4'
    item_id: 60f9186c90be09b72239f040
    numbers:
      N_00: '7'
      N_01: '3'
    split: null
    variables:
    - r
  text:
    numbers:
      shape:
      - 32
      target: __ __ __  0 __ __ __ __ __ __ __ __ __  1 __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __
    raw: 'there are 7 cr ##ayo ##ns in the drawer . mary took 3 cr ##ayo ##ns out
      of the drawer . how many cr ##ayo ##ns are there now ?'
    snippets:
      shape:
      - 2
      - 15
      target:
      - 'there are 7 cr ##ayo ##ns in the drawer .'
      - '##ns in the drawer . mary took 3 cr ##ayo ##ns out of the drawer'
    tokens:
      shape:
      - 32
      target: '[CLS] there are 7 cr ##ayo ##ns in the drawer . mary took 3 cr ##ayo
        ##ns out of the drawer . how many cr ##ayo ##ns are there now ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(R_00, R_01) R_03: =(N_01,
      R_02) R_04: *(N_04, R_01) R_05: -(R_04, R_00) R_06: =(N_03, R_05) R_07: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the sum of 2 numbers
      N_03:
      - the value of twice the second number minus the first number
      N_04:
      - the multiplier for the second number
      X_00:
      - the value of the first number
      X_01:
      - the value of the second number
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the sum of 2 numbers
      - the sum of 2 numbers
      - the sum of 2 numbers
      N_03:
      - the value of 2 times the second number minus the first number
      - the value of twice the second number minus the first number
      - the value of the twice second number minus the first number
      N_04:
      - a number in the phrase " twice the second number "
      - the value multiplied by the second number
      - the coefficient of the second number
      X_00:
      - the first number
      - the first number
      - the value of the first number
      X_01:
      - the second number
      - the second number
      - the value of the second number
  info:
    answers:
    - f: '19'
      s: '31'
    item_id: 604cc853117d71c492a62c6b
    numbers:
      N_00: '2'
      N_01: '50'
      N_02: '1'
      N_03: '43'
      N_04: '2'
      N_05: '2'
    split: null
    variables:
    - f
    - s
  text:
    numbers:
      shape:
      - 32
      target: __ __ __ __  0 __ __  1 __ __  2 __ __  3 __ __  4 __  5 __ __ __ __
        __ __ __ __ __ __ __ __ __
    raw: the sum of 2 numbers is 50 . the first number is 43 less than twice the second
      number . find the smaller number . find the larger number .
    snippets:
      shape:
      - 6
      - 15
      target:
      - the sum of 2 numbers is 50 . the first number
      - the sum of 2 numbers is 50 . the first number is 43 less
      - of 2 numbers is 50 . the first number is 43 less than twice the
      - is 50 . the first number is 43 less than twice the second number .
      - the first number is 43 less than twice the second number . find the smaller
      - number is 43 less than twice the second number . find the smaller number .
    tokens:
      shape:
      - 32
      target: '[CLS] the sum of 2 numbers is 50 . the first number is 43 less than
        twice the second number . find the smaller number . find the larger number
        . [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(0.25, N_00) R_02: *(0.01, N_01) R_03: +(R_01,
      R_02) R_04: =(R_00, R_03) R_05: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of quarters found
      N_01:
      - the number of pennies found on the couch
      X_00:
      - the total number of money
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of quarters
      - the number of quarters alyssa found on her couch cushions
      - the number of quarters alyssa found on her couch
      N_01:
      - the number of pennies
      - the number of pennies alyssa found on her couch cushion
      - the number of pennies she found
      X_00:
      - the total value of quarters and pennies
      - the total amount of money alyssa has
      - the total amount of money alyssa has
  info:
    answers:
    - m: '3.07000000000000'
    item_id: 60f9186c90be09b72239ea2c
    numbers:
      N_00: '12'
      N_01: '7'
    split: null
    variables:
    - m
  text:
    numbers:
      shape:
      - 32
      target: __ __ __ __ __ __ __ __ __ __ __ __  0 __ __  1 __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __
    raw: 'as alyssa was searching through her couch cushions , she found 12 quarters
      and 7 penn ##ies on the couch . how much money in total does alyssa have ?'
    snippets:
      shape:
      - 2
      - 15
      target:
      - 'through her couch cushions , she found 12 quarters and 7 penn ##ies on the'
      - 'cushions , she found 12 quarters and 7 penn ##ies on the couch . how'
    tokens:
      shape:
      - 32
      target: '[CLS] as alyssa was searching through her couch cushions , she found
        12 quarters and 7 penn ##ies on the couch . how much money in total does alyssa
        have ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, R_00) R_02: =(N_01, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the length of hair before
      N_01:
      - the length of hair after the year
      X_00:
      - the length of hair removed by the year
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of original inches of isabella's hair
      - the original length of isabella's hair
      - the length of her hair
      N_01:
      - the number of inches of iysabella's hair by the end of the year
      - the length of isabella's hair by the end of the year
      - the length of her hair at the end of the year
      X_00:
      - the number of inches her hair grew
      - the number of inches of hair isabella grew over the year
      - the length of her hair that she grew
  info:
    answers:
    - d: '6'
    item_id: 60f9186c90be09b72239ee7e
    numbers:
      N_00: '18'
      N_01: '24'
    split: null
    variables:
    - d
  text:
    numbers:
      shape:
      - 32
      target: __ __ __ __ __ __  0 __ __ __ __ __ __ __ __ __ __ __ __ __  1 __ __
        __ __ __ __ __ __ __ __ __
    raw: isabella ' s hair is 18 inches long . by the end of the year , her hair is
      24 inches long . how much hair did she grow ?
    snippets:
      shape:
      - 2
      - 15
      target:
      - isabella ' s hair is 18 inches long . by the end of
      - of the year , her hair is 24 inches long . how much hair did
    tokens:
      shape:
      - 32
      target: '[CLS] isabella '' s hair is 18 inches long . by the end of the year
        , her hair is 24 inches long . how much hair did she grow ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: *(N_00, R_00) R_03: =(R_01,
      R_02) R_04: +(N_02, R_00) R_05: *(N_03, R_04) R_06: +(N_02, R_01) R_07: =(R_05,
      R_06) R_08: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the ratio of the present age of the father to the present age of the son
      N_02:
      - the number of years into the future
      N_03:
      - a number in the phrase " twice as older than a son "
      X_00:
      - the present age of the son
      X_01:
      - the present age of the father
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the ratio of the age of the father in the present to the son in the present
      - a number in the phrase " father is 5 times older than a son "
      - the ratio of the age of the father in the present to the age of the son in
        the present
      N_02:
      - the number of years into the future
      - the time passed to be the future
      - the value of the future minus the present
      N_03:
      - the ratio of the age of the father in the future to the son in the future
      - a number in the phrase " in 15 years father will be twice as older than the
        son "
      - the ratio of the age of the father in the future to the age of the son in
        the future
      X_00:
      - the age of the son in the present
      - the son's present age
      - the age of the son in the present
      X_01:
      - the age of the father in the present
      - the father's present age
      - the age of the father in the present
  info:
    answers:
    - f: '25'
      s: '5'
    item_id: 604cc853117d71c492a62ded
    numbers:
      N_00: '5'
      N_01: '1'
      N_02: '15'
      N_03: '2'
    split: null
    variables:
    - s
    - f
  text:
    numbers:
      shape:
      - 32
      target: __ __ __  0 __ __ __  1 __ __ __  2 __ __ __ __  3 __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __
    raw: father is 5 times older than a son . in 15 years father will be twice as
      older than the son . how old father at the present age .
    snippets:
      shape:
      - 4
      - 15
      target:
      - father is 5 times older than a son . in
      - father is 5 times older than a son . in 15 years father will
      - times older than a son . in 15 years father will be twice as older
      - . in 15 years father will be twice as older than the son . how
    tokens:
      shape:
      - 32
      target: '[CLS] father is 5 times older than a son . in 15 years father will
        be twice as older than the son . how old father at the present age . [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: -(N_00, N_02) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of pounds of fruit bought
      N_02:
      - the number of pounds of fruit bought
      X_00:
      - the number of pounds of fruit left
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the weight of fruits gordon bought for a class party in pounds
      - the number of pounds of fruit gordon bought
      - the amounts of pounds of gordon's fruit for a class party
      N_02:
      - the pound weight of fruits the class ate
      - the number of pounds of fruit the class ate
      - the amounts of pounds of the fruit eaten by the class students
      X_00:
      - the pound weight of left fruits
      - the number of pounds of fruit left
      - the amounts of pounds of the fruit left to gordon
  info:
    answers:
    - l: '1.22000000000000'
    item_id: 60f9186c90be09b72239ed89
    numbers:
      N_00: '3.42000000000000'
      N_01: '1'
      N_02: '2.20000000000000'
    split: null
    variables:
    - l
  text:
    numbers:
      shape:
      - 32
      target: __ __ __  0  0  0 __ __ __ __  1 __ __ __ __ __ __  2  2  2 __ __ __
        __ __ __ __ __ __ __ __ __
    raw: gordon bought 3 . 42 pounds of fruit for a class party . the class ate 2
      . 2 pounds of the fruit . how much fruit is left ?
    snippets:
      shape:
      - 3
      - 15
      target:
      - gordon bought 3 . 42 pounds of fruit for a
      - 3 . 42 pounds of fruit for a class party . the class ate 2
      - a class party . the class ate 2 . 2 pounds of the fruit .
    tokens:
      shape:
      - 32
      target: '[CLS] gordon bought 3 . 42 pounds of fruit for a class party . the
        class ate 2 . 2 pounds of the fruit . how much fruit is left ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of packs of cookies
      N_01:
      - the number of packs of noodles
      X_00:
      - the total number of packs of groceries
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of cookie packs
      - the number of packs of cookies lucy bought
      - the number of packs of cookies lucy bought
      N_01:
      - the number of noodle packs
      - the number of packs of noodles lucy bought
      - the number of packs of noodles she bought
      X_00:
      - the total number of packs
      - the total number of packs of groceries lucy bought
      - the total number of packs of groceries she bought in all
  info:
    answers:
    - g: '28'
    item_id: 60f9186c90be09b72239f096
    numbers:
      N_00: '12'
      N_01: '16'
    split: null
    variables:
    - g
  text:
    numbers:
      shape:
      - 32
      target: __ __ __ __ __ __ __ __ __ __  0 __ __ __ __  1 __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __
    raw: lucy went to the grocery store . she bought 12 packs of cookies and 16 packs
      of noodles . how many packs of groceries did she buy in all ?
    snippets:
      shape:
      - 2
      - 15
      target:
      - to the grocery store . she bought 12 packs of cookies and 16 packs of
      - she bought 12 packs of cookies and 16 packs of noodles . how many packs
    tokens:
      shape:
      - 32
      target: '[CLS] lucy went to the grocery store . she bought 12 packs of cookies
        and 16 packs of noodles . how many packs of groceries did she buy in all ?
        [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 15
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_02) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of houses in lincoln county
      N_02:
      - the number of houses built during a housing boom
      X_00:
      - the number of houses now
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - number of houses originally
      - the original number of houses in lincoln county
      - the original number of houses in lincoln county
      N_02:
      - number of houses built
      - the additional number of houses built on lincoln county
      - the number of houses developers built
      X_00:
      - the total number of houses
      - the total number of houses in lincoln county now
      - the total number of houses there are in lincoln county
  info:
    answers:
    - h: '118558'
    item_id: 60f9186c90be09b72239eba0
    numbers:
      N_00: '20817'
      N_01: '1'
      N_02: '97741'
    split: null
    variables:
    - h
  text:
    numbers:
      shape:
      - 36
      target: __ __ __ __  0  0 __ __ __ __ __ __  1 __ __ __ __ __  2  2  2 __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'there were originally 208 ##17 houses in lincoln county . during a housing
      boom , developers built 97 ##7 ##41 . how many houses are there now in lincoln
      county ?'
    snippets:
      shape:
      - 3
      - 15
      target:
      - 'there were originally 208 ##17 houses in lincoln county . during'
      - '##17 houses in lincoln county . during a housing boom , developers built
        97 ##7'
      - 'during a housing boom , developers built 97 ##7 ##41 . how many houses are'
    tokens:
      shape:
      - 36
      target: '[CLS] there were originally 208 ##17 houses in lincoln county . during
        a housing boom , developers built 97 ##7 ##41 . how many houses are there
        now in lincoln county ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 15
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_00, R_00) R_02: =(N_01, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of friends
      N_01:
      - the number of baseball cards you have
      X_00:
      - the number of baseball cards each friend gets
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of friends
      - the total number of friends
      - the total number of friends
      N_01:
      - the total number of baseball cards
      - the total number of baseball cards
      - the total number of baseball cards
      X_00:
      - the number of baseball cards shared equally for each friend
      - the number of baseball cards given to each friend
      - the number of baseball cards one friend gets
  info:
    answers:
    - p: '91'
    item_id: 60f9186c90be09b72239ed76
    numbers:
      N_00: '5'
      N_01: '455'
    split: null
    variables:
    - p
  text:
    numbers:
      shape:
      - 36
      target: __ __ __ __ __ __ __ __ __ __  0 __ __ __ __ __  1  1 __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'you want to give your baseball cards to your 5 best friends . you have 45
      ##5 baseball cards . how many would each get if you share them equally ?'
    snippets:
      shape:
      - 2
      - 15
      target:
      - 'to give your baseball cards to your 5 best friends . you have 45 ##5'
      - 'your 5 best friends . you have 45 ##5 baseball cards . how many would'
    tokens:
      shape:
      - 36
      target: '[CLS] you want to give your baseball cards to your 5 best friends .
        you have 45 ##5 baseball cards . how many would each get if you share them
        equally ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 15
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: /(N_01, 100) R_03: *(R_00,
      R_02) R_04: /(N_04, 100) R_05: *(N_02, R_04) R_06: +(R_03, R_05) R_07: /(N_06,
      100) R_08: *(R_01, R_07) R_09: =(R_06, R_08) R_10: +(N_02, R_00) R_11: =(R_01,
      R_10) R_12: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the concentration of the first kind of acid solution
      N_02:
      - the number of liters of the first kind of acid solution
      N_04:
      - the concentration of the first kind of acid solution
      N_06:
      - the concentration of the mixed kind of solution
      X_00:
      - the amount of liters of a 65 % acid solution
      X_01:
      - the amount of the mixed kind of solution
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the percentage of acid in the first solution
      - the concentration of 65 % acid solution
      - the concentration of a 65 % acid solution
      N_02:
      - the number of liters of the second solution
      - the amount of 20 % acid solution
      - the amount of a 20 % acid solution
      N_04:
      - the percentage of acid in the second solution
      - the concentration of 20 % acid solution
      - the concentration of a 20 % acid solution
      N_06:
      - the percentage of acid in the mixed solution of the first solution and the
        second solution
      - the concentration of mixed acid solution
      - the concentration of the mixed solution
      X_00:
      - the number of liters of the first solution
      - the amount of 65 % acid solution
      - the amount of a 65 % acid solution
      X_01:
      - the number of liters of the mixed solution of the first solution and the second
        solution
      - the amount of mixed acid solution
      - the amount of the mixed solution
  info:
    answers:
    - s1: '20'
      s2: '8'
    item_id: 604cc853117d71c492a630ec
    numbers:
      N_00: '1'
      N_01: '65'
      N_02: '12'
      N_03: '1'
      N_04: '20'
      N_05: '1'
      N_06: '38'
    split: null
    variables:
    - s2
    - s1
  text:
    numbers:
      shape:
      - 36
      target: __ __ __ __ __ __  0  1 __ __ __ __ __ __ __  2 __ __ __  3  4 __ __
        __ __ __  5  6 __ __ __ __ __ __ __ __
    raw: 'how many liter ##s of a 65 % acid solution must be added to 12 liter ##s
      of a 20 % acid solution to produce a 38 % acid solution ?'
    snippets:
      shape:
      - 7
      - 15
      target:
      - 'how many liter ##s of a 65 % acid solution must be added'
      - 'how many liter ##s of a 65 % acid solution must be added to'
      - '% acid solution must be added to 12 liter ##s of a 20 % acid'
      - 'be added to 12 liter ##s of a 20 % acid solution to produce a'
      - 'added to 12 liter ##s of a 20 % acid solution to produce a 38'
      - a 20 % acid solution to produce a 38 % acid solution ?
      - 20 % acid solution to produce a 38 % acid solution ?
    tokens:
      shape:
      - 36
      target: '[CLS] how many liter ##s of a 65 % acid solution must be added to 12
        liter ##s of a 20 % acid solution to produce a 38 % acid solution ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 15
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: __NEW_VAR(, ) R_03: *(10,
      R_00) R_04: +(R_01, R_03) R_05: =(R_02, R_04) R_06: -(R_01, R_00) R_07: =(N_01,
      R_06) R_08: *(N_04, R_02) R_09: *(10, R_01) R_10: +(R_00, R_09) R_11: -(R_08,
      R_10) R_12: =(N_03, R_11) R_13: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the value of the units digit minus the tens digit
      N_03:
      - the value of twice the original number minus the reversed number in one case
      N_04:
      - the coefficient of the original number
      X_00:
      - the value of the tens digit in the original number
      X_01:
      - the value of the units digit
      X_02:
      - the value of the original number
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the value of the units digit of a number minus the tens digit of a number
      - the value of the units digit minus the tens digit
      - the value of the unit digit minus tens digit
      N_03:
      - the value of twice the original number minus the reversed number
      - the value of 2 times the original number minus 10 times the units digit plus
        the tens digit
      - the value of twice the original number minus the reversed number
      N_04:
      - a number in the phrase " twice the original number "
      - a number in the phrase " twice the original number "
      - a number in the phrase " twice the original number "
      X_00:
      - the tens digit
      - the digit of the tens
      - the value of the tens digit
      X_01:
      - the units digit
      - the digit of the units
      - the value of the unit digit
      X_02:
      - the original number
      - the original number
      - the value of the original number
  info:
    answers:
    - o: '37'
      t: '3'
      u: '7'
    item_id: 604cc853117d71c492a62f5c
    numbers:
      N_00: '1'
      N_01: '4'
      N_02: '10'
      N_03: '1'
      N_04: '2'
    split: null
    variables:
    - t
    - u
    - o
  text:
    numbers:
      shape:
      - 36
      target: __ __ __ __ __  0 __ __  1 __ __ __  2 __ __ __ __ __ __ __ __ __ __
        __ __  3 __ __  4 __ __ __ __ __ __ __
    raw: the units digit of a number is 4 more than the tens digit . if the digits
      are reversed , the new number is 1 less than twice the original number .
    snippets:
      shape:
      - 5
      - 15
      target:
      - the units digit of a number is 4 more than the tens
      - the units digit of a number is 4 more than the tens digit . if
      - a number is 4 more than the tens digit . if the digits are reversed
      - are reversed , the new number is 1 less than twice the original number .
      - the new number is 1 less than twice the original number .
    tokens:
      shape:
      - 36
      target: '[CLS] the units digit of a number is 4 more than the tens digit . if
        the digits are reversed , the new number is 1 less than twice the original
        number . [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 15
    tokens: 'R_00: __NEW_VAR(, ) R_01: -(N_00, N_01) R_02: *(N_02, R_01) R_03: =(R_00,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of boxes of chocolate candy
      N_01:
      - the number of pieces of chocolate candy
      N_02:
      - the number of pieces for each box
      X_00:
      - the total number of pieces
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the initial number of boxes
      - the number of boxes
      - the number of boxes of chocolate candy adam bought
      N_01:
      - the number of boxes given to the brother
      - the number of boxes given
      - the number of boxes of chocolate candy gave to his little brother
      N_02:
      - the number of pieces inside each box
      - the pieces of chocolate candies in the box
      - the number of pieces inside each box
      X_00:
      - the total number of pieces
      - the quantity of remain pieces
      - the total number of pieces
  info:
    answers:
    - p: '36'
    item_id: 60f9186c90be09b72239e9d3
    numbers:
      N_00: '13'
      N_01: '7'
      N_02: '6'
    split: null
    variables:
    - p
  text:
    numbers:
      shape:
      - 36
      target: __ __ __  0 __ __ __ __ __ __  1 __ __ __ __ __ __ __ __ __  2 __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: adam bought 13 boxes of chocolate candy and gave 7 to his little brother
      . if each box has 6 pieces inside it , how many pieces did adam still have ?
    snippets:
      shape:
      - 3
      - 15
      target:
      - adam bought 13 boxes of chocolate candy and gave 7
      - 13 boxes of chocolate candy and gave 7 to his little brother . if each
      - little brother . if each box has 6 pieces inside it , how many pieces
    tokens:
      shape:
      - 36
      target: '[CLS] adam bought 13 boxes of chocolate candy and gave 7 to his little
        brother . if each box has 6 pieces inside it , how many pieces did adam still
        have ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 15
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: __NEW_VAR(, ) R_03: /(1,
      R_00) R_04: =(R_01, R_03) R_05: -(R_00, N_01) R_06: /(1, R_05) R_07: =(R_02,
      R_06) R_08: +(R_01, R_02) R_09: *(N_02, R_01) R_10: =(R_08, R_09) R_11: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the value of the reciprocal of the number minus the reciprocal of the number
      N_02:
      - the multiplier of the reciprocal of the seeking number
      X_00:
      - the seeking number
      X_01:
      - the units number
      X_02:
      - the value of the original number
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the value of the original number minus the lesser number
      - the value of a number minus another number
      - the value subtracted from the number
      N_02:
      - the ratio of the sum of the reciprocals of the original number and the lesser
        number to the reciprocal of the original number
      - the number of multiples making sum of the reciprocal of a number and the reciprocal
        of another number equal to the reciprocal of a number
      - the number the reciprocal of the number is multiplied by
      X_00:
      - the original number
      - the original number
      - the value in the phrase " original number "
      X_01:
      - the reciprocal of the original number
      - the reciprocal of a number
      - the reciprocal value of the number
      X_02:
      - the reciprocal of the lesser number
      - the reciprocal of another number
      - the reciprocal value of the number subtracted 6
  info:
    answers:
    - n: '7.20000000000000'
      r1: '0.138888888888889'
      r2: '0.833333333333333'
    item_id: 60f9186c90be09b72239eaea
    numbers:
      N_00: '1'
      N_01: '6'
      N_02: '7'
    split: null
    variables:
    - n
    - r1
    - r2
  text:
    numbers:
      shape:
      - 36
      target: __ __ __ __ __ __ __  0 __ __ __ __ __  1 __ __ __ __ __  2 __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: the sum of the reciprocal of a number and the reciprocal of 6 less than the
      number is 7 times the reciprocal of the original number . find the original
      number ?
    snippets:
      shape:
      - 3
      - 15
      target:
      - the sum of the reciprocal of a number and the reciprocal of 6 less
      - of a number and the reciprocal of 6 less than the number is 7 times
      - of 6 less than the number is 7 times the reciprocal of the original number
    tokens:
      shape:
      - 36
      target: '[CLS] the sum of the reciprocal of a number and the reciprocal of 6
        less than the number is 7 times the reciprocal of the original number . find
        the original number ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 15
    tokens: 'R_00: __NEW_VAR(, ) R_01: -(N_00, N_01) R_02: *(N_02, R_01) R_03: =(R_00,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of boxes of chocolate candy
      N_01:
      - the number of pieces of chocolate tom gave to his little brother
      N_02:
      - the number of pieces inside each box
      X_00:
      - the total number of pieces tom still bought
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the initial number of boxes
      - the number of boxes of chocolate candy tom bought
      - the boxes of chocolate candy tom bought
      N_01:
      - the number of boxes given to the brother
      - the number of boxes of chocolate candy gave to his little brother
      - the boxes of chocolate candy he gave to his little brother
      N_02:
      - the number of pieces inside each box
      - the number of pieces inside each box
      - the number of chocolate candies in each box
      X_00:
      - the total number of pieces
      - the total number of pieces
      - the number of chocolate candies tom still had
  info:
    answers:
    - p: '18'
    item_id: 60f9186c90be09b72239f0f8
    numbers:
      N_00: '14'
      N_01: '8'
      N_02: '3'
    split: null
    variables:
    - p
  text:
    numbers:
      shape:
      - 36
      target: __ __ __  0 __ __ __ __ __ __  1 __ __ __ __ __ __ __ __ __  2 __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: tom bought 14 boxes of chocolate candy and gave 8 to his little brother .
      if each box has 3 pieces inside it , how many pieces did tom still have ?
    snippets:
      shape:
      - 3
      - 15
      target:
      - tom bought 14 boxes of chocolate candy and gave 8
      - 14 boxes of chocolate candy and gave 8 to his little brother . if each
      - little brother . if each box has 3 pieces inside it , how many pieces
    tokens:
      shape:
      - 36
      target: '[CLS] tom bought 14 boxes of chocolate candy and gave 8 to his little
        brother . if each box has 3 pieces inside it , how many pieces did tom still
        have ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 15
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_01, R_00) R_02: *(N_02, R_01) R_03: +(N_00,
      R_00) R_04: =(R_02, R_03) R_05: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the age of mr. k
      N_01:
      - the age of his daughter
      N_02:
      - the ratio of the future age of klink to the future age of his daughter
      X_00:
      - the years between the future and the present year
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - mr. klinker's age now
      - the age of mr. klinker
      - the current age of mr. klinker
      N_01:
      - the daughter's age now
      - the age of his daughter
      - the current age of his daughter
      N_02:
      - the ratio of mr. klinker's age after unknown years to the daughter's age after
        unknown years
      - the ratio of the age of mr. klinker in the future to the age of his daughter
        in the future
      - the ratio of the future age of mr. klinker to that of his daughter
      X_00:
      - the number of years from now
      - the number of years to go to the future
      - the number of years between the future and now
  info:
    answers:
    - y: '15'
    item_id: 604cc853117d71c492a62ef7
    numbers:
      N_00: '35'
      N_01: '10'
      N_02: '2'
    split: null
    variables:
    - y
  text:
    numbers:
      shape:
      - 36
      target: __ __ __ __ __ __ __  0 __ __ __ __ __  1 __ __ __ __ __ __ __ __ __
        __ __ __  2 __ __ __ __ __ __ __ __ __
    raw: 'mr . k ##link ##er is 35 , and his daughter is 10 . in how many years will
      mr . k ##link ##er be twice as old as his daughter ?'
    snippets:
      shape:
      - 3
      - 15
      target:
      - 'mr . k ##link ##er is 35 , and his daughter is 10 .'
      - is 35 , and his daughter is 10 . in how many years will mr
      - 'will mr . k ##link ##er be twice as old as his daughter ?'
    tokens:
      shape:
      - 36
      target: '[CLS] mr . k ##link ##er is 35 , and his daughter is 10 . in how many
        years will mr . k ##link ##er be twice as old as his daughter ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 15
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of walnut trees currently in the park
      N_01:
      - the number of walnut trees will be planted today
      X_00:
      - the number of walnut trees planted more by the workers
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the current number of walnut trees
      - the number of walnut trees planted at first
      - the number of walnut trees currently in the park
      N_01:
      - the number of walnut trees planted
      - the number of trees planted additionally
      - the number of walnut trees that park workers will plant
      X_00:
      - the total number of walnut trees
      - the total number of trees planted
      - the number of walnut trees that the park will have
  info:
    answers:
    - w: '77'
    item_id: 60f9186c90be09b72239ef19
    numbers:
      N_00: '33'
      N_01: '44'
    split: null
    variables:
    - w
  text:
    numbers:
      shape:
      - 36
      target: __ __ __  0 __ __ __ __ __ __ __ __ __ __ __  1 __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: there are 33 walnut trees currently in the park . park workers will plant
      44 walnut trees today . how many walnut trees will the park have when the workers
      are finished ?
    snippets:
      shape:
      - 2
      - 15
      target:
      - there are 33 walnut trees currently in the park .
      - the park . park workers will plant 44 walnut trees today . how many walnut
    tokens:
      shape:
      - 36
      target: '[CLS] there are 33 walnut trees currently in the park . park workers
        will plant 44 walnut trees today . how many walnut trees will the park have
        when the workers are finished ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 15
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_02, N_03) R_02: *(N_01, R_01) R_03: =(R_00,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of parrots in the pet store
      N_02:
      - the number of parrots in the pet store
      X_00:
      - the total number of birds
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of bird cages
      - the number of bird cages
      - the number of bird cages
      N_02:
      - the number of parrots in each cage
      - the number of parrots in each cage
      - the number of parrots in each cage
      N_03:
      - the number of parakeets in each cage
      - the number of parakeets in each cage
      - the number of parakeets in each cage
      X_00:
      - the total number of birds
      - the whole number of birds
      - the number of all birds
  info:
    answers:
    - b: '48'
    item_id: 60f9186c90be09b72239eb9d
    numbers:
      N_00: '1'
      N_01: '6'
      N_02: '6'
      N_03: '2'
    split: null
    variables:
    - b
  text:
    numbers:
      shape:
      - 36
      target: __  0 __ __ __  1 __ __ __ __ __ __ __  2 __ __ __  3 __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'a pet store has 6 bird cages . if each cage has 6 parrot ##s and 2 para
      ##kee ##ts in it , how many birds does the pet store have total ?'
    snippets:
      shape:
      - 4
      - 15
      target:
      - a pet store has 6 bird cages .
      - a pet store has 6 bird cages . if each cage has
      - 'bird cages . if each cage has 6 parrot ##s and 2 para ##kee ##ts'
      - 'each cage has 6 parrot ##s and 2 para ##kee ##ts in it , how'
    tokens:
      shape:
      - 36
      target: '[CLS] a pet store has 6 bird cages . if each cage has 6 parrot ##s
        and 2 para ##kee ##ts in it , how many birds does the pet store have total
        ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 15
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: *(N_00, R_00) R_03: *(N_02,
      R_01) R_04: +(R_02, R_03) R_05: =(N_03, R_04) R_06: -(R_00, R_01) R_07: =(N_05,
      R_06) R_08: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - a number in the phrase " three times one number "
      N_02:
      - a number in the phrase " five times another number "
      N_03:
      - the sum of three times the first number and five times the second number
      N_05:
      - the value of the first number minus the second number
      X_00:
      - the first number
      X_01:
      - the second number
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the multiplier of the first number
      - the coefficient of one number
      - a number multiplied by the first number
      N_02:
      - the multiplier of the second number
      - the coefficient of another number
      - a number multiplied by the second number
      N_03:
      - the sum of 3 times the first number and 5 times the second number
      - the sum of three times one number and to five times another number
      - the sum of 3 times one number and 5 times another number
      N_05:
      - the value of the first number minus the second number
      - the value of the first number minus the second number
      - the value of one number minus another number
      X_00:
      - the value of the first number
      - the value of the first number
      - the value of one number
      X_01:
      - the value of the second number
      - the value of the second number
      - the value of another number
  info:
    answers:
    - f: '8'
      s: '6'
    item_id: 604cc853117d71c492a62e39
    numbers:
      N_00: '3'
      N_01: '1'
      N_02: '5'
      N_03: '54'
      N_04: '2'
      N_05: '2'
      N_06: '1'
      N_07: '1'
    split: null
    variables:
    - f
    - s
  text:
    numbers:
      shape:
      - 36
      target: __  0 __  1 __ __ __  2 __ __ __ __  3 __ __  4 __ __  5 __ __ __  6  6
        __  7 __ __ __ __ __ __ __ __ __ __
    raw: three times one number added to five times another number is 54 . the second
      number is two less than the first . use a system of equations to find the numbers
      .
    snippets:
      shape:
      - 8
      - 15
      target:
      - three times one number added to five times
      - three times one number added to five times another number
      - three times one number added to five times another number is 54 . the
      - added to five times another number is 54 . the second number is two less
      - times another number is 54 . the second number is two less than the first
      - is 54 . the second number is two less than the first . use a
      - second number is two less than the first . use a system of equations to
      - two less than the first . use a system of equations to find the numbers
    tokens:
      shape:
      - 36
      target: '[CLS] three times one number added to five times another number is
        54 . the second number is two less than the first . use a system of equations
        to find the numbers . [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 15
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of oak trees currently in the park
      N_01:
      - the number of oak trees will be planted today
      X_00:
      - the number of oak trees planted more by the workers
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the current number of oak trees
      - the number of oak trees currently in the park
      - the number of oak trees currently in the park
      N_01:
      - the number of oak trees planted
      - the number of oak trees park workers will plant today
      - the number of oak trees that park workers will plant
      X_00:
      - the total number of oak trees
      - the number of whole trees
      - the number of oak trees that the park will have
  info:
    answers:
    - w: '9'
    item_id: 60f9186c90be09b72239e977
    numbers:
      N_00: '5'
      N_01: '4'
    split: null
    variables:
    - w
  text:
    numbers:
      shape:
      - 36
      target: __ __ __  0 __ __ __ __ __ __ __ __ __ __ __  1 __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: there are 5 oak trees currently in the park . park workers will plant 4 oak
      trees today . how many oak trees will the park have when the workers are finished
      ?
    snippets:
      shape:
      - 2
      - 15
      target:
      - there are 5 oak trees currently in the park .
      - the park . park workers will plant 4 oak trees today . how many oak
    tokens:
      shape:
      - 36
      target: '[CLS] there are 5 oak trees currently in the park . park workers will
        plant 4 oak trees today . how many oak trees will the park have when the workers
        are finished ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 15
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the length of isha's pencil
      N_01:
      - the length of another pencil
      X_00:
      - the number of cubes
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of cubes of the first pencil
      - how long a pencil is
      - the number of length of cubes of isha's pencil
      N_01:
      - the number of cubes of the second pencil
      - how long the other pencil is
      - the number of length of cubes of isha's another pencil
      X_00:
      - the total number of cubes
      - the total length of two pencils
      - the sum of length of cubes of both pencils
  info:
    answers:
    - t: '24'
    item_id: 60f9186c90be09b72239f1db
    numbers:
      N_00: '12'
      N_01: '12'
    split: null
    variables:
    - t
  text:
    numbers:
      shape:
      - 36
      target: __ __ __ __ __ __ __  0 __ __ __ __ __ __ __ __ __ __ __  1 __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'is ##ha '' s pencil is 12 cube ##s long . if she gets another pencil that
      is 12 cube ##s long , how many cube ##s long are both pencil ##s ?'
    snippets:
      shape:
      - 2
      - 15
      target:
      - 'is ##ha '' s pencil is 12 cube ##s long . if she gets'
      - 'if she gets another pencil that is 12 cube ##s long , how many cube'
    tokens:
      shape:
      - 36
      target: '[CLS] is ##ha '' s pencil is 12 cube ##s long . if she gets another
        pencil that is 12 cube ##s long , how many cube ##s long are both pencil ##s
        ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 15
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, R_00) R_02: =(N_02, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of birds that were sitting in the tree
      N_02:
      - the total number of birds
      X_00:
      - the number of birds in the tree now
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the initial number of birds sitting in a tree
      - the number of birds sitting on the tree
      - the number of birds sitting in a tree
      N_02:
      - the total number of birds sitting in a tree
      - the number of birds after some birds flying up to the tree
      - the number of birds sitting in a tree after some more birds flew in
      X_00:
      - the number of additional birds that flew up the tree
      - the number of birds flying up to the tree
      - the number of birds which flew up to the tree
  info:
    answers:
    - f: '13'
    item_id: 60f9186c90be09b72239ef00
    numbers:
      N_00: '29'
      N_01: '1'
      N_02: '42'
    split: null
    variables:
    - f
  text:
    numbers:
      shape:
      - 36
      target: __  0 __ __ __ __  1 __ __ __ __ __ __ __ __ __ __ __ __ __  2 __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 29 birds were sitting in a tree . some more fly up to the tree . then there
      were 42 birds in the tree . how many more flew up to the tree ?
    snippets:
      shape:
      - 3
      - 15
      target:
      - 29 birds were sitting in a tree .
      - 29 birds were sitting in a tree . some more fly up to
      - to the tree . then there were 42 birds in the tree . how many
    tokens:
      shape:
      - 36
      target: '[CLS] 29 birds were sitting in a tree . some more fly up to the tree
        . then there were 42 birds in the tree . how many more flew up to the tree
        ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 15
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, R_00) R_02: =(N_02, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of birds that were sitting in the tree
      N_02:
      - the number of birds that were sitting to the tree
      X_00:
      - the value of the number of birds flew up to the tree
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of birds sitting on the tree
      - the number of birds that were originally sitting in a tree
      - the number of birds sitting in a tree
      N_02:
      - the number of birds after some birds flying up to the tree
      - the number of birds in the tree in the end
      - the number of birds sitting in a tree after some more birds flew in
      X_00:
      - the number of birds flying up to the tree
      - the number of birds that flew up to the tree
      - the number of birds which flew up to the tree
  info:
    answers:
    - f: '81'
    item_id: 60f9186c90be09b72239f216
    numbers:
      N_00: '231'
      N_01: '1'
      N_02: '312'
    split: null
    variables:
    - f
  text:
    numbers:
      shape:
      - 36
      target: __  0 __ __ __ __  1 __ __ __ __ __ __ __ __ __ __ __ __ __  2 __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 231 birds were sitting in a tree . some more fly up to the tree . then there
      were 312 birds in the tree . how many more flew up to the tree ?
    snippets:
      shape:
      - 3
      - 15
      target:
      - 231 birds were sitting in a tree .
      - 231 birds were sitting in a tree . some more fly up to
      - to the tree . then there were 312 birds in the tree . how many
    tokens:
      shape:
      - 36
      target: '[CLS] 231 birds were sitting in a tree . some more fly up to the tree
        . then there were 312 birds in the tree . how many more flew up to the tree
        ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 15
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of walnut trees currently in the park
      N_01:
      - the number of walnut trees planted by park workers
      X_00:
      - the number of walnut trees planted more by the workers
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the current number of walnut trees
      - the number of walnut trees currently in the park
      - the number of walnut trees currently in the park
      N_01:
      - the number of walnut trees planted
      - the number of walnut trees park workers will plant today
      - the number of walnut trees that park workers will plant
      X_00:
      - the total number of walnut trees
      - the number of whole trees
      - the number of walnut trees that the park will have
  info:
    answers:
    - w: '10'
    item_id: 60f9186c90be09b72239ed13
    numbers:
      N_00: '4'
      N_01: '6'
    split: null
    variables:
    - w
  text:
    numbers:
      shape:
      - 36
      target: __ __ __  0 __ __ __ __ __ __ __ __ __ __ __  1 __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: there are 4 walnut trees currently in the park . park workers will plant
      6 more walnut trees today . how many walnut trees will the park have when the
      workers are finished ?
    snippets:
      shape:
      - 2
      - 15
      target:
      - there are 4 walnut trees currently in the park .
      - the park . park workers will plant 6 more walnut trees today . how many
    tokens:
      shape:
      - 36
      target: '[CLS] there are 4 walnut trees currently in the park . park workers
        will plant 6 more walnut trees today . how many walnut trees will the park
        have when the workers are finished ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of popular trees currently in the park
      N_01:
      - the number of popular trees will be planted today
      X_00:
      - the total number of popular trees after today
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the current number of popular trees
      - the number of popular trees currently in the park
      - the number of popular trees currently in the park
      N_01:
      - the number of popular trees planted
      - the number of popular trees park workers will plant today
      - the number of popular trees that park workers will plant
      X_00:
      - the total number of popular trees
      - the number of whole trees
      - the number of popular trees that the park will have
  info:
    answers:
    - w: '98'
    item_id: 60f9186c90be09b72239ea07
    numbers:
      N_00: '25'
      N_01: '73'
    split: null
    variables:
    - w
  text:
    numbers:
      shape:
      - 39
      target: __ __ __  0 __ __ __ __ __ __ __ __ __ __ __  1 __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: there are 25 popular trees currently in the park . park workers will plant
      73 more popular trees today . how many popular trees will the park have when
      the workers are finished ?
    snippets:
      shape:
      - 2
      - 15
      target:
      - there are 25 popular trees currently in the park .
      - the park . park workers will plant 73 more popular trees today . how many
    tokens:
      shape:
      - 39
      target: '[CLS] there are 25 popular trees currently in the park . park workers
        will plant 73 more popular trees today . how many popular trees will the park
        have when the workers are finished ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_01) R_02: *(N_02, R_01) R_03: =(R_00,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of pages
      N_01:
      - the number of pages of reading homework homework
      N_02:
      - the number of problems on each page
      X_00:
      - the total number of problems
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of pages of math homework
      - the number of pages of isabel's math homework
      - the number of pages of math homework
      N_01:
      - the number of pages of reading homework
      - the number of pages of isabel's reading homework
      - the number of pages of reading homework
      N_02:
      - the number of problems that each page had
      - the number of problems on each page
      - the number of problems on each page
      X_00:
      - the number of problems in total
      - the total number of problems on all pages
      - the total number of problems
  info:
    answers:
    - p: '30'
    item_id: 60f9186c90be09b72239f0fe
    numbers:
      N_00: '2'
      N_01: '4'
      N_02: '5'
    split: null
    variables:
    - p
  text:
    numbers:
      shape:
      - 39
      target: __ __ __  0 __ __ __ __ __  1 __ __ __ __ __ __ __ __ __  2 __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: isabel had 2 pages of math homework and 4 pages of reading homework . if
      each page had 5 problems on it , how many problems did she have to complete
      in total ?
    snippets:
      shape:
      - 3
      - 15
      target:
      - isabel had 2 pages of math homework and 4 pages
      - had 2 pages of math homework and 4 pages of reading homework . if each
      - reading homework . if each page had 5 problems on it , how many problems
    tokens:
      shape:
      - 39
      target: '[CLS] isabel had 2 pages of math homework and 4 pages of reading homework
        . if each page had 5 problems on it , how many problems did she have to complete
        in total ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_01, R_00) R_02: =(N_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of people
      N_01:
      - the number of cars
      X_00:
      - the number of people on the each car
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the total number of people
      - the number of people
      - the number of people
      N_01:
      - the number of cars
      - the number of cars
      - the number of cars
      X_00:
      - the number of people per car
      - the number of people goes in each car
      - the number of people that go in each car
  info:
    answers:
    - p: '21'
    item_id: 60f9186c90be09b72239ef1a
    numbers:
      N_00: '63'
      N_01: '3'
    split: null
    variables:
    - p
  text:
    numbers:
      shape:
      - 39
      target: __  0 __ __ __ __ __ __ __ __ __  1 __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 63 people are going to the zoo . there are 3 cars to take people to the zoo
      . how many will go in each car if the same number goes in each car ?
    snippets:
      shape:
      - 2
      - 15
      target:
      - 63 people are going to the zoo .
      - going to the zoo . there are 3 cars to take people to the zoo
    tokens:
      shape:
      - 39
      target: '[CLS] 63 people are going to the zoo . there are 3 cars to take people
        to the zoo . how many will go in each car if the same number goes in each
        car ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_02, R_00) R_02: +(N_00, N_01) R_03: =(R_01,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of math problems
      N_01:
      - the number of spelling problems
      N_02:
      - the number of problems for amy to finish
      X_00:
      - the number of hours it takes to finish all the problems
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of math problems of homework
      - the number of math problems
      - the number of math problems
      N_01:
      - the number of spelling problems of homework
      - the number of spelling problems
      - the number of spelling problems
      N_02:
      - the number of solving problems in an hour
      - the number of problems amy can finish in an hour
      - the number of the problems to finish in an hour
      X_00:
      - the total hour for solving all problems
      - the total number of hours amy needs to finish all the problems
      - the hours it takes her to finish all the problems
  info:
    answers:
    - h: '6'
    item_id: 60f9186c90be09b72239eded
    numbers:
      N_00: '18'
      N_01: '6'
      N_02: '4'
      N_03: '1'
    split: null
    variables:
    - h
  text:
    numbers:
      shape:
      - 39
      target: __ __ __ __ __ __  0 __ __ __  1 __ __ __ __ __ __ __  2 __ __  3 __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: for homework , amy had 18 math problems and 6 spelling problems . if she
      can finish 4 problems in an hour , how long will it take her to finish all the
      problems ?
    snippets:
      shape:
      - 4
      - 15
      target:
      - for homework , amy had 18 math problems and 6 spelling problems .
      - ', amy had 18 math problems and 6 spelling problems . if she can finish'
      - spelling problems . if she can finish 4 problems in an hour , how long
      - if she can finish 4 problems in an hour , how long will it take
    tokens:
      shape:
      - 39
      target: '[CLS] for homework , amy had 18 math problems and 6 spelling problems
        . if she can finish 4 problems in an hour , how long will it take her to finish
        all the problems ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of watermelons we have
      N_01:
      - the number of watermelons we have
      X_00:
      - the number of watermelons taken out
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of seeds in a watermelon
      - the number of seeds per watermelon
      - the number of seeds each watermelon has
      N_01:
      - the number of watermelons
      - the number of watermelons
      - the number of watermelons we have
      X_00:
      - the total number of seeds
      - the total number of seeds in all watermelons
      - the total number of seeds we have
  info:
    answers:
    - s: '400'
    item_id: 60f9186c90be09b72239eae3
    numbers:
      N_00: '100'
      N_01: '4'
    split: null
    variables:
    - s
  text:
    numbers:
      shape:
      - 39
      target: __ __ __ __ __ __  0 __ __ __ __ __ __  1 __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'our water ##mel ##ons have 100 seeds each . if we have 4 water ##mel ##ons
      , how many seeds should there be when all seeds are taken out of the water ##mel
      ##ons ?'
    snippets:
      shape:
      - 2
      - 15
      target:
      - 'our water ##mel ##ons have 100 seeds each . if we have 4'
      - '100 seeds each . if we have 4 water ##mel ##ons , how many seeds'
    tokens:
      shape:
      - 39
      target: '[CLS] our water ##mel ##ons have 100 seeds each . if we have 4 water
        ##mel ##ons , how many seeds should there be when all seeds are taken out
        of the water ##mel ##ons ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_02) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the cost of a hotdog
      N_02:
      - the cost of a salad sara spent on for lunch
      X_00:
      - the total of the lunch bill
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the money that sara spent on a hotdog
      - the amounts of money spent on a hotdog by sara
      - the amount of money spent on a hotdog
      N_02:
      - the money that sara spent on a salad
      - the amounts of money spent on a salad by sara
      - the amount of money spent on a salad
      X_00:
      - the total of the lunch bill
      - the total amounts of money spent on the lunch by sara
      - the total amount of money spent on the hotdog and salad
  info:
    answers:
    - l: '10.4600000000000'
    item_id: 60f9186c90be09b72239f137
    numbers:
      N_00: '5.36000000000000'
      N_01: '1'
      N_02: '5.10000000000000'
      N_03: '1'
    split: null
    variables:
    - l
  text:
    numbers:
      shape:
      - 39
      target: __ __ __ __ __ __ __ __ __ __ __  0  0  0 __  1 __ __ __ __  2  2  2
        __  3 __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'sara got fast food for lunch . sara spent $ 5 . 36 on a hot ##dog and $
      5 . 1 on a salad . what was the total of the lunch bill ?'
    snippets:
      shape:
      - 4
      - 15
      target:
      - 'food for lunch . sara spent $ 5 . 36 on a hot ##dog and'
      - 'sara spent $ 5 . 36 on a hot ##dog and $ 5 . 1'
      - '36 on a hot ##dog and $ 5 . 1 on a salad . what'
      - '##dog and $ 5 . 1 on a salad . what was the total of'
    tokens:
      shape:
      - 39
      target: '[CLS] sara got fast food for lunch . sara spent $ 5 . 36 on a hot ##dog
        and $ 5 . 1 on a salad . what was the total of the lunch bill ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: /(1, N_02) R_02: /(1, N_03) R_03: +(R_01, R_02)
      R_04: *(R_00, R_03) R_05: =(1, R_04) R_06: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the number of hours taken for 1 painter to paint a room
      N_03:
      - the number of hours taken for another painter to paint a room
      X_00:
      - the hours consumed if they work together
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the duration for painting a room by a painter
      - the hours it takes a painter to paint a room
      - 1 painter's required time for a room expressed in hours
      N_03:
      - the duration for painting a room by another painter
      - the hours it takes another to paint a room
      - another painter's required time for a room expressed in hours
      X_00:
      - the duration for painting a room when two painters collaborate
      - the hours it takes tow painter to paint a room
      - the painting - required time for a room with 1 painter and another painter
        expressed in hours
  info:
    answers:
    - h: '5.45454545454545'
    item_id: 60f9186c90be09b72239ea57
    numbers:
      N_00: '1'
      N_01: '1'
      N_02: '12'
      N_03: '10'
    split: null
    variables:
    - h
  text:
    numbers:
      shape:
      - 39
      target: __  0 __ __ __  1 __ __  2 __ __ __ __ __ __ __ __ __ __  3 __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 1 painter can paint a room in 12 hours , and another can paint the same room
      in 10 hours . how long will it take to paint the room if they work together
      ?
    snippets:
      shape:
      - 4
      - 15
      target:
      - 1 painter can paint a room in 12
      - 1 painter can paint a room in 12 hours , and another
      - 1 painter can paint a room in 12 hours , and another can paint the
      - another can paint the same room in 10 hours . how long will it take
    tokens:
      shape:
      - 39
      target: '[CLS] 1 painter can paint a room in 12 hours , and another can paint
        the same room in 10 hours . how long will it take to paint the room if they
        work together ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_02, R_00) R_02: -(N_00, R_01) R_03: =(N_04,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of students on a trip
      N_02:
      - the number of buses
      N_04:
      - the number of students on car
      X_00:
      - the number of students on each bus
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the total number of students
      - the number of students on buses or a car
      - the number of students on a trip
      N_02:
      - the number of buses filled
      - the number of buses students filled with students
      - the number of buses filled with students
      N_04:
      - the number of students traveled by car
      - the number of students in the car
      - the number of students traveled by car
      X_00:
      - the number of students on each bus
      - the number of students on each bus
      - the number of students on each bus
  info:
    answers:
    - p: '53'
    item_id: 60f9186c90be09b72239edf6
    numbers:
      N_00: '375'
      N_01: '1'
      N_02: '7'
      N_03: '2'
      N_04: '4'
      N_05: '2'
    split: null
    variables:
    - p
  text:
    numbers:
      shape:
      - 39
      target: __ __ __ __  0 __ __ __  1 __ __ __ __ __ __  2  3 __ __ __ __  4 __
        __ __ __ __ __ __ __ __ __ __ __ __  5  5 __ __
    raw: on monday , 375 students went on a trip to the zoo . all 7 buses were filled
      , and 4 students had to travel by car . how many students were on each bus ?
    snippets:
      shape:
      - 6
      - 15
      target:
      - on monday , 375 students went on a trip to the
      - on monday , 375 students went on a trip to the zoo . all 7
      - a trip to the zoo . all 7 buses were filled , and 4 students
      - trip to the zoo . all 7 buses were filled , and 4 students had
      - all 7 buses were filled , and 4 students had to travel by car .
      - . how many students were on each bus ?
    tokens:
      shape:
      - 39
      target: '[CLS] on monday , 375 students went on a trip to the zoo . all 7 buses
        were filled , and 4 students had to travel by car . how many students were
        on each bus ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: /(N_01, 100) R_03: *(R_00,
      R_02) R_04: /(N_02, 100) R_05: *(R_01, R_04) R_06: +(R_03, R_05) R_07: /(N_05,
      100) R_08: *(N_03, R_07) R_09: =(R_06, R_08) R_10: +(R_00, R_01) R_11: =(N_03,
      R_10) R_12: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the concentration of the first solution
      N_02:
      - the concentration of the second solution
      N_03:
      - the amount of the mixed solution
      N_05:
      - the concentration of the mixed solution
      X_00:
      - the amount of the first solution
      X_01:
      - the amount of the second solution
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the percentage of alcohol one solution contains
      - the concentration of one solution
      - the percentage of alcohol in the first solution
      N_02:
      - the percentage of alcohol another solution contains
      - the concentration of another solution
      - the percentage of alcohol in the second solution
      N_03:
      - the total number of liters of mixed solution
      - the amount of mixed solution
      - the amount of the mixed solution
      N_05:
      - the percentage of alcohol mixed solution contains
      - the concentration of the mixed solution
      - the percentage of alcohol in the mixture
      X_00:
      - the number of liters of one solution
      - the amount of one solution
      - the amount of the first solution
      X_01:
      - the number of liters of another solution
      - the amount of another solution
      - the amount of the second solution
  info:
    answers:
    - s1: '2.50000000000000'
      s2: '7.50000000000000'
    item_id: 604cc853117d71c492a62d2d
    numbers:
      N_00: '1'
      N_01: '10'
      N_02: '30'
      N_03: '10'
      N_04: '1'
      N_05: '25'
    split: null
    variables:
    - s1
    - s2
  text:
    numbers:
      shape:
      - 39
      target: __  0 __ __  1 __ __ __ __ __ __  2 __ __ __ __ __ __ __ __ __ __ __
        __ __ __  3 __ __  4 __ __ __  5 __ __ __ __ __
    raw: 'one solution contains 10 % alcohol , while another contains 30 % alcohol
      . how many liter ##s of each should be mixed to give 10 l of a solution which
      is 25 % alcohol ?'
    snippets:
      shape:
      - 6
      - 15
      target:
      - one solution contains 10 % alcohol , while
      - one solution contains 10 % alcohol , while another contains 30
      - '10 % alcohol , while another contains 30 % alcohol . how many liter ##s'
      - of each should be mixed to give 10 l of a solution which is 25
      - be mixed to give 10 l of a solution which is 25 % alcohol ?
      - 10 l of a solution which is 25 % alcohol ?
    tokens:
      shape:
      - 39
      target: '[CLS] one solution contains 10 % alcohol , while another contains 30
        % alcohol . how many liter ##s of each should be mixed to give 10 l of a solution
        which is 25 % alcohol ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of dogwood tress currently in the park
      N_01:
      - the number of dogwood trees park workers will plant today
      X_00:
      - the total number of dogwood trees after today
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the current number of dogwood trees
      - the number of dogwood trees planted at first
      - the number of dogwood trees currently in the park
      N_01:
      - the number of dogwood trees planted
      - the number of trees planted additionally
      - the number of dogwood trees that park workers will plant
      X_00:
      - the total number of dogwood trees
      - the total number of trees planted
      - the number of dogwood trees that the park will have
  info:
    answers:
    - w: '83'
    item_id: 60f9186c90be09b72239eb42
    numbers:
      N_00: '34'
      N_01: '49'
    split: null
    variables:
    - w
  text:
    numbers:
      shape:
      - 39
      target: __ __ __  0 __ __ __ __ __ __ __ __ __ __ __ __  1 __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'there are 34 dog ##wood trees currently in the park . park workers will
      plant 49 dog ##wood trees today . how many dog ##wood trees will the park have
      when the workers are finished ?'
    snippets:
      shape:
      - 2
      - 15
      target:
      - 'there are 34 dog ##wood trees currently in the park'
      - 'the park . park workers will plant 49 dog ##wood trees today . how many'
    tokens:
      shape:
      - 39
      target: '[CLS] there are 34 dog ##wood trees currently in the park . park workers
        will plant 49 dog ##wood trees today . how many dog ##wood trees will the
        park have when the workers are finished ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_02, R_00) R_02: =(N_01, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of sheets of used paper in every box
      N_02:
      - the number of sheets of used paper in each box
      X_00:
      - the number of boxes containing sheets
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the total number of sheets
      - the number of used paper's sheets
      - the total number of sheets
      N_02:
      - the number of sheets per box
      - the number of sheets for each box can contain
      - the number of sheets in each box
      X_00:
      - the number of boxes
      - the ratio of used paper's sheets to the number of sheets for each box can
        contain
      - the number of boxes
  info:
    answers:
    - b: '7'
    item_id: 60f9186c90be09b72239eae6
    numbers:
      N_00: '1'
      N_01: '700'
      N_02: '100'
    split: null
    variables:
    - b
  text:
    numbers:
      shape:
      - 39
      target: __ __ __  0 __ __  1 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __  2 __ __ __ __ __ __ __ __ __ __ __
    raw: there was a stack of 700 sheets of used paper . lexie wants to place it in
      boxes for recycling . if every box can contain 100 sheets , how many boxes does
      lexie need ?
    snippets:
      shape:
      - 3
      - 15
      target:
      - there was a stack of 700 sheets of used paper
      - there was a stack of 700 sheets of used paper . lexie wants
      - recycling . if every box can contain 100 sheets , how many boxes does lexie
    tokens:
      shape:
      - 39
      target: '[CLS] there was a stack of 700 sheets of used paper . lexie wants to
        place it in boxes for recycling . if every box can contain 100 sheets , how
        many boxes does lexie need ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_01) R_02: +(N_02, R_01) R_03: -(R_02,
      N_03) R_04: =(R_00, R_03) R_05: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the amount of money johnny saved in september
      N_01:
      - the amount of money johnny saved in september
      N_02:
      - the amount of money johnny spent in november
      N_03:
      - the number of dollars johnny spent in a video game
      X_00:
      - the number of dollars johnny has now
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the amount of savings in september
      - the amount of money saved in september
      - the money that johnny saved in september
      N_01:
      - the amount of savings in october
      - the amount of money saved in october
      - the money that johnny saved in october
      N_02:
      - the amount of savings in november
      - the amount of money saved in november
      - the money that johnny saved in november
      N_03:
      - the amount spent on a video game
      - the amount of money spent
      - the money that johnny spent
      X_00:
      - the amount of savings left
      - the remaining amount of money
      - the money that johnny has left
  info:
    answers:
    - l: '67'
    item_id: 60f9186c90be09b72239efc5
    numbers:
      N_00: '30'
      N_01: '49'
      N_02: '46'
      N_03: '58'
      N_04: '1'
    split: null
    variables:
    - l
  text:
    numbers:
      shape:
      - 39
      target: __ __ __ __  0 __ __ __ __ __ __  1 __ __ __ __  2 __ __ __ __ __ __
        __  3 __  4 __ __ __ __ __ __ __ __ __ __ __ __
    raw: johnny saved $ 30 in september . he saved $ 49 in october and $ 46 in november
      . then johnny spent $ 58 on a video game . how much money does johnny have left
      ?
    snippets:
      shape:
      - 5
      - 15
      target:
      - johnny saved $ 30 in september . he saved $ 49
      - 30 in september . he saved $ 49 in october and $ 46 in november
      - saved $ 49 in october and $ 46 in november . then johnny spent $
      - in november . then johnny spent $ 58 on a video game . how much
      - . then johnny spent $ 58 on a video game . how much money does
    tokens:
      shape:
      - 39
      target: '[CLS] johnny saved $ 30 in september . he saved $ 49 in october and
        $ 46 in november . then johnny spent $ 58 on a video game . how much money
        does johnny have left ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: *(N_01, N_03) R_03: =(R_00,
      R_02) R_04: -(N_01, R_01) R_05: *(N_04, R_04) R_06: =(R_00, R_05) R_07: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the amount of the capacity of the pot
      N_03:
      - the speed of the brine
      N_04:
      - the concentration of the concentration of the concentration of the water
      X_00:
      - the number of liters of the water boiled
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - amount of brine in a pot
      - the number of liters of brine the pot contains
      - the amount of brine in liters a pot contains
      N_03:
      - current concentration rate of brine
      - the original concentration of the brine
      - the concentration of the brine in grams per liter
      N_04:
      - the wanted concentration of brine
      - the concentration of the boiled off brine
      - the target concentration in grams per liter
      X_00:
      - amount of total brine
      - the amount of the pure brine
      - the weight of salt inside brine in grams
      X_01:
      - amount of water that has to be boiled to get the concentration we want
      - the amount of water boiled off
      - the amount of water that should be boiled off to achieve the target concentration
  info:
    answers:
    - b1: '2.40000000000000'
      b2: '320'
    item_id: 60f9186c90be09b72239ed91
    numbers:
      N_00: '1'
      N_01: '4'
      N_02: '1'
      N_03: '80'
      N_04: '200'
    split: null
    variables:
    - b2
    - b1
  text:
    numbers:
      shape:
      - 39
      target: __  0 __ __  1 __ __ __ __ __ __  2 __ __  3 __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __  4 __ __ __ __ __
    raw: 'a pot contains 4 liter ##s of br ##ine at a concentration of 80 grams per
      liter . how much of the water should be boiled off to increase the concentration
      to 200 grams per liter ?'
    snippets:
      shape:
      - 5
      - 15
      target:
      - 'a pot contains 4 liter ##s of br'
      - 'a pot contains 4 liter ##s of br ##ine at a'
      - '4 liter ##s of br ##ine at a concentration of 80 grams per liter .'
      - 'of br ##ine at a concentration of 80 grams per liter . how much of'
      - boiled off to increase the concentration to 200 grams per liter ?
    tokens:
      shape:
      - 39
      target: '[CLS] a pot contains 4 liter ##s of br ##ine at a concentration of
        80 grams per liter . how much of the water should be boiled off to increase
        the concentration to 200 grams per liter ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_02, R_00) R_02: =(N_01, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of pages a book read
      N_02:
      - the number of days you read a book
      X_00:
      - the number of pages you have to finish
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of pages of a book
      - the number of pages in a book
      - the total pages
      N_02:
      - the number of days to finish the book
      - the days needed to finish the book
      - the number of days
      X_00:
      - the number of pages read for each night
      - the number of pages per day needed to finish the book
      - the number of pages you have to read each day
  info:
    answers:
    - p: '12'
    item_id: 60f9186c90be09b72239ea98
    numbers:
      N_00: '1'
      N_01: '120'
      N_02: '10'
    split: null
    variables:
    - p
  text:
    numbers:
      shape:
      - 39
      target: __ __ __ __  0 __ __  1 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __  2 __ __ __
    raw: you are reading a book with 120 pages . if you want to read the same number
      of pages each night , how many would you have to read each night to finish in
      10 days ?
    snippets:
      shape:
      - 3
      - 15
      target:
      - you are reading a book with 120 pages . if you
      - you are reading a book with 120 pages . if you want to read
      - to read each night to finish in 10 days ?
    tokens:
      shape:
      - 39
      target: '[CLS] you are reading a book with 120 pages . if you want to read the
        same number of pages each night , how many would you have to read each night
        to finish in 10 days ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_02) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the initial number of short trees
      N_02:
      - the number of short trees park workers will plant today
      X_00:
      - the additional number of short trees
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the current number of short trees
      - the number of short trees currently in the park
      - the number of short trees currently in the park
      N_02:
      - the number of short trees planted
      - the number of short trees park workers will plant today
      - the number of short trees that park workers will plant
      X_00:
      - the total number of short trees
      - the number of whole trees
      - the number of short trees that the park will have
  info:
    answers:
    - w: '217'
    item_id: 60f9186c90be09b72239ecf4
    numbers:
      N_00: '112'
      N_01: '119'
      N_02: '105'
    split: null
    variables:
    - w
  text:
    numbers:
      shape:
      - 39
      target: __ __ __  0 __ __ __  1 __ __ __ __ __ __ __ __ __ __ __  2 __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: there are 112 short trees and 119 tall trees currently in the park . park
      workers will plant 105 short trees today . how many short trees will the park
      have when the workers are finished ?
    snippets:
      shape:
      - 3
      - 15
      target:
      - there are 112 short trees and 119 tall trees currently
      - there are 112 short trees and 119 tall trees currently in the park .
      - the park . park workers will plant 105 short trees today . how many short
    tokens:
      shape:
      - 39
      target: '[CLS] there are 112 short trees and 119 tall trees currently in the
        park . park workers will plant 105 short trees today . how many short trees
        will the park have when the workers are finished ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_04, R_00) R_02: -(N_01, N_03) R_03: =(R_01,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of puppies in the pet store
      N_03:
      - the number of puppies sold
      N_04:
      - the number of puppies in each cage
      X_00:
      - the number of cages needed
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of puppies at the beginning
      - number of puppies
      - the number of puppies the pet store originally had
      N_03:
      - the number of puppies sold
      - number of puppies sold
      - the number of puppies they sold
      N_04:
      - the number of puppies per cage
      - number of puppies in each cage
      - the number of puppies they put in each cage
      X_00:
      - the number of cages necessary for the rest puppies
      - the ratio of the puppies left to the number of puppies in each cage
      - the number of cages they used
  info:
    answers:
    - c: '3'
    item_id: 60f9186c90be09b72239ed9b
    numbers:
      N_00: '1'
      N_01: '18'
      N_02: '1'
      N_03: '3'
      N_04: '5'
    split: null
    variables:
    - c
  text:
    numbers:
      shape:
      - 39
      target: __  0 __ __ __  1 __ __ __ __  2 __ __ __ __  3 __ __ __ __ __ __ __
        __ __ __  4 __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'a pet store had 18 pup ##pies . in one day , they sold 3 of them and put
      the rest into cages , with 5 in each cage . how many cages did they use ?'
    snippets:
      shape:
      - 5
      - 15
      target:
      - 'a pet store had 18 pup ##pies .'
      - 'a pet store had 18 pup ##pies . in one day ,'
      - 'store had 18 pup ##pies . in one day , they sold 3 of them'
      - . in one day , they sold 3 of them and put the rest into
      - put the rest into cages , with 5 in each cage . how many cages
    tokens:
      shape:
      - 39
      target: '[CLS] a pet store had 18 pup ##pies . in one day , they sold 3 of them
        and put the rest into cages , with 5 in each cage . how many cages did they
        use ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_04, R_00) R_02: -(N_01, N_03) R_03: =(R_01,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of puppies in the pet store
      N_03:
      - the number of puppies sold
      N_04:
      - the number of puppies in each cage
      X_00:
      - the number of cages needed
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of puppies at the beginning
      - the number of puppies the pet store originally had
      - the number of puppies they had
      N_03:
      - the number of puppies sold
      - the number of puppies they sold
      - the number of puppies they sold
      N_04:
      - the number of puppies per cage
      - the number of puppies they put in each cage
      - the number of puppies in each cage
      X_00:
      - the number of cages necessary for the rest puppies
      - the number of cages they used
      - the number of cages
  info:
    answers:
    - c: '8'
    item_id: 60f9186c90be09b72239f1e8
    numbers:
      N_00: '1'
      N_01: '56'
      N_02: '1'
      N_03: '24'
      N_04: '4'
    split: null
    variables:
    - c
  text:
    numbers:
      shape:
      - 44
      target: __  0 __ __ __  1 __ __ __ __  2 __ __ __ __  3 __ __ __ __ __ __ __
        __ __ __  4 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'a pet store had 56 pup ##pies . in one day , they sold 24 of them and put
      the rest into cages , with 4 in each cage . how many cages did they use ?'
    snippets:
      shape:
      - 5
      - 15
      target:
      - 'a pet store had 56 pup ##pies .'
      - 'a pet store had 56 pup ##pies . in one day ,'
      - 'store had 56 pup ##pies . in one day , they sold 24 of them'
      - . in one day , they sold 24 of them and put the rest into
      - put the rest into cages , with 4 in each cage . how many cages
    tokens:
      shape:
      - 44
      target: '[CLS] a pet store had 56 pup ##pies . in one day , they sold 24 of
        them and put the rest into cages , with 4 in each cage . how many cages did
        they use ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_04, R_00) R_02: -(N_01, N_03) R_03: =(R_01,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of puppies in the pet store
      N_03:
      - the number of puppies sold
      N_04:
      - the number of puppies in each cage
      X_00:
      - the number of cages
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of puppies at the beginning
      - number of puppies
      - the number of puppies the pet store originally had
      N_03:
      - the number of puppies sold
      - number of puppies sold
      - the number of puppies they sold
      N_04:
      - the number of puppies per cage
      - number of puppies in each cage
      - the number of puppies they put in each cage
      X_00:
      - the number of cages necessary for the rest puppies
      - the ratio of the puppies left to the number of puppies in each cage
      - the number of cages they used
  info:
    answers:
    - c: '5'
    item_id: 60f9186c90be09b72239ee1f
    numbers:
      N_00: '1'
      N_01: '81'
      N_02: '1'
      N_03: '41'
      N_04: '8'
    split: null
    variables:
    - c
  text:
    numbers:
      shape:
      - 44
      target: __  0 __ __ __  1 __ __ __ __  2 __ __ __ __  3 __ __ __ __ __ __ __
        __ __ __  4 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'a pet store had 81 pup ##pies . in one day , they sold 41 of them and put
      the rest into cages , with 8 in each cage . how many cages did they use ?'
    snippets:
      shape:
      - 5
      - 15
      target:
      - 'a pet store had 81 pup ##pies .'
      - 'a pet store had 81 pup ##pies . in one day ,'
      - 'store had 81 pup ##pies . in one day , they sold 41 of them'
      - . in one day , they sold 41 of them and put the rest into
      - put the rest into cages , with 8 in each cage . how many cages
    tokens:
      shape:
      - 44
      target: '[CLS] a pet store had 81 pup ##pies . in one day , they sold 41 of
        them and put the rest into cages , with 8 in each cage . how many cages did
        they use ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: /(N_00, R_00) R_03: /(N_00,
      R_01) R_04: -(R_02, R_03) R_05: =(N_03, R_04) R_06: -(R_01, R_00) R_07: =(N_02,
      R_06) R_08: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the distance of steve in miles
      N_02:
      - the speed of steve
      N_03:
      - the value of the speed of steve minus the speed of his vehicle
      X_00:
      - the speed of steve in miles per hour
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the length of the traveled miles
      - the traveling distance of steve
      - the distance steve traveled
      N_02:
      - the additional mile speed per hour
      - the expected additional speed to steve's real speed
      - how faster he has to go to take an hour less
      N_03:
      - the length of reduced time after adding more speed
      - the expected reduced time if steve accelerated the speed
      - how less it would have taken
      X_00:
      - the speed of the vehicle in miles per hour before adding more speed
      - the real speed of steve
      - the original speed
      X_01:
      - the speed of the vehicle in miles per hour after adding more speed
      - the expected speed of steve
      - the speed " 10 " faster than the original
  info:
    answers:
    - f: '50'
      s: '40'
    item_id: 60f9186c90be09b72239eadc
    numbers:
      N_00: '200'
      N_01: '1'
      N_02: '10'
      N_03: '1'
    split: null
    variables:
    - s
    - f
  text:
    numbers:
      shape:
      - 44
      target: __ __ __  0 __ __  1 __ __ __ __ __ __  2 __ __ __ __ __ __ __ __ __
        __  3 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: steve traveled 200 miles at a certain speed . had he gone 10 miles per hour
      faster , the trip would have taken 1 hour less . find the speed of his vehicle
      in miles per hour .
    snippets:
      shape:
      - 4
      - 15
      target:
      - steve traveled 200 miles at a certain speed . had
      - steve traveled 200 miles at a certain speed . had he gone 10
      - a certain speed . had he gone 10 miles per hour faster , the trip
      - faster , the trip would have taken 1 hour less . find the speed of
    tokens:
      shape:
      - 44
      target: '[CLS] steve traveled 200 miles at a certain speed . had he gone 10
        miles per hour faster , the trip would have taken 1 hour less . find the speed
        of his vehicle in miles per hour . [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: /(R_00, N_00) R_02: /(R_00, N_01) R_03: +(R_01,
      R_02) R_04: =(N_02, R_03) R_05: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the speed of sarah north
      N_01:
      - the speed of the round trip
      N_02:
      - the time consumed for the round trip
      X_00:
      - the distance of the one - way trip
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the speed of sarah walking north towards an area
      - the speed of sarah walking north
      - the rate when walking north
      N_01:
      - the speed of sarah returning back from an area
      - the speed of sarah returning
      - the rate when returning
      N_02:
      - the sum of the number of hours it took sarah to walk north towards an area
        and return back from an area
      - the number of hours sarah traveled in total
      - the total hours taken for the round trip
      X_00:
      - the distance between sarah and an area
      - the amount of distance sarah walked in one way
      - the distance of one - way walking
  info:
    answers:
    - d: '6'
    item_id: 604cc853117d71c492a62f00
    numbers:
      N_00: '3'
      N_01: '4'
      N_02: '3.50000000000000'
    split: null
    variables:
    - d
  text:
    numbers:
      shape:
      - 44
      target: __ __ __ __ __ __ __ __ __ __ __ __  0 __ __ __ __ __ __ __  1 __ __
        __ __ __ __ __ __ __ __ __ __ __  2  2  2 __ __ __ __ __ __ __
    raw: for her workout , sarah walks north at the rate of 3 mph and returns at the
      rate of 4 mph . how many miles did she walk if the round trip took 3 . 5 hours
      ?
    snippets:
      shape:
      - 3
      - 15
      target:
      - sarah walks north at the rate of 3 mph and returns at the rate of
      - mph and returns at the rate of 4 mph . how many miles did she
      - she walk if the round trip took 3 . 5 hours ?
    tokens:
      shape:
      - 44
      target: '[CLS] for her workout , sarah walks north at the rate of 3 mph and
        returns at the rate of 4 mph . how many miles did she walk if the round trip
        took 3 . 5 hours ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(R_00, R_01) R_03: =(N_01,
      R_02) R_04: -(R_00, R_01) R_05: =(N_02, R_04) R_06: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the total number of games
      N_02:
      - the value of the number of won games minus the number of lost games
      X_00:
      - the number of won games
      X_01:
      - the number of lost games
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of games the chicago white sox played
      - total number of games
      - the total number of games
      N_02:
      - the value of the number of games they won minus the number of games they lost
      - the value of won minus lost
      - the value of the number of the games they won minus that of the games they
        lost
      X_00:
      - the number of games they won
      - the number of won games
      - the number of games they won
      X_01:
      - the number of games they lost
      - the number of lost games
      - the number of games they lost
  info:
    answers:
    - l: '63'
      w: '99'
    item_id: 604cc853117d71c492a62cc4
    numbers:
      N_00: '2005'
      N_01: '162'
      N_02: '36'
    split: null
    variables:
    - w
    - l
  text:
    numbers:
      shape:
      - 44
      target: __ __ __  0 __ __ __ __ __ __ __ __ __ __  1 __ __ __ __  2 __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: during the 2005 major league baseball season , the chicago white sox played
      162 games . they won 36 more than they lost . how many games did they win ,
      and how many did they lose ?
    snippets:
      shape:
      - 3
      - 15
      target:
      - during the 2005 major league baseball season , the chicago
      - season , the chicago white sox played 162 games . they won 36 more than
      - sox played 162 games . they won 36 more than they lost . how many
    tokens:
      shape:
      - 44
      target: '[CLS] during the 2005 major league baseball season , the chicago white
        sox played 162 games . they won 36 more than they lost . how many games did
        they win , and how many did they lose ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_02, R_00) R_02: *(N_03, R_00) R_03: +(R_01,
      R_02) R_04: =(N_04, R_03) R_05: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the speed of the first car
      N_03:
      - the speed of the second car
      N_04:
      - the distance between the two cars after unknown hours
      X_00:
      - the number of hours of traveling in opposite directions after starting from
        the opposite directions
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the speed of the first car
      - the speed of one car in one direction
      - the speed of one car in one direction
      N_03:
      - the speed of the second car
      - the speed of the other car in the opposite direction
      - the speed of the other car in opposite directions
      N_04:
      - the final distance between the two cars
      - the amount of distance between two cars after the number of hours
      - the distance of the two cars
      X_00:
      - the number of hours of traveling in opposite directions after starting from
        the same town
      - the number of hours passed
      - the hours of time
  info:
    answers:
    - h: '2'
    item_id: 604cc853117d71c492a62dc4
    numbers:
      N_00: '2'
      N_01: '1'
      N_02: '70'
      N_03: '55'
      N_04: '250'
    split: null
    variables:
    - h
  text:
    numbers:
      shape:
      - 44
      target: __  0 __ __ __ __ __ __ __ __ __ __ __ __  1 __  2 __ __ __ __ __ __  3
        __ __ __ __ __ __ __ __ __ __ __  4 __ __ __ __ __ __ __ __
    raw: two cars leave town at the same time traveling in opposite directions . one
      travels 70 mi / h and the other 55 mi / h . in how many hours will they be 250
      miles apart ?
    snippets:
      shape:
      - 5
      - 15
      target:
      - two cars leave town at the same time
      - same time traveling in opposite directions . one travels 70 mi / h and the
      - traveling in opposite directions . one travels 70 mi / h and the other 55
      - 70 mi / h and the other 55 mi / h . in how many
      - in how many hours will they be 250 miles apart ?
    tokens:
      shape:
      - 44
      target: '[CLS] two cars leave town at the same time traveling in opposite directions
        . one travels 70 mi / h and the other 55 mi / h . in how many hours will they
        be 250 miles apart ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: -(N_00, N_04) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the original number of oranges in the box
      N_02:
      - the number of oranges in the box
      N_04:
      - the number of oranges susan takes out of the box
      X_00:
      - the number of oranges left in the box
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of oranges in the box
      - the number of oranges in the box
      - the initial number of oranges in the box
      N_04:
      - the number of oranges taken out of the box
      - the number of oranges that susan takes out of the box
      - the number of oranges removed from the box
      X_00:
      - the remaining number of oranges in the box
      - the number of oranges that are left in the box
      - the number of oranges left in the box
  info:
    answers:
    - c: '20'
    item_id: 60f9186c90be09b72239f00f
    numbers:
      N_00: '55'
      N_01: '1'
      N_02: '11'
      N_03: '1'
      N_04: '35'
    split: null
    variables:
    - c
  text:
    numbers:
      shape:
      - 44
      target: __ __ __  0 __ __ __  1 __ __ __ __  2 __ __ __  3 __ __ __ __  4 __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'there are 55 orange ##s in a box . deborah has 11 orange ##s in a bag .
      susan takes 35 orange ##s out of the box . how many orange ##s are left in the
      box ?'
    snippets:
      shape:
      - 5
      - 15
      target:
      - 'there are 55 orange ##s in a box . deborah'
      - 'there are 55 orange ##s in a box . deborah has 11 orange ##s'
      - '##s in a box . deborah has 11 orange ##s in a bag . susan'
      - '. deborah has 11 orange ##s in a bag . susan takes 35 orange ##s'
      - '##s in a bag . susan takes 35 orange ##s out of the box .'
    tokens:
      shape:
      - 44
      target: '[CLS] there are 55 orange ##s in a box . deborah has 11 orange ##s
        in a bag . susan takes 35 orange ##s out of the box . how many orange ##s
        are left in the box ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_00, R_00) R_02: +(N_02, N_03) R_03: =(R_01,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of sweaters nancy could wash
      N_02:
      - the number of shirts to be wash
      N_03:
      - the number of sweaters
      X_00:
      - the number of loads
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of clothes a washing machine can wash per load
      - the amount of clothing wash at a time
      - the number of clothing the washing machine can wash at once
      N_02:
      - the number of shirts
      - the number of shirts
      - the number of shirts to wash
      N_03:
      - the number of sweaters
      - the number of sweaters
      - the number of sweaters to wash
      X_00:
      - the number of loads
      - the number of loads have to do
      - the number of times to run the washing machine
  info:
    answers:
    - l: '3'
    item_id: 60f9186c90be09b72239f0f4
    numbers:
      N_00: '9'
      N_01: '1'
      N_02: '19'
      N_03: '8'
    split: null
    variables:
    - l
  text:
    numbers:
      shape:
      - 44
      target: __ __ __ __ __ __ __ __ __ __  0 __ __ __ __  1 __ __ __ __ __ __ __  2
        __ __  3 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'nancy '' s old washing machine could only wash 9 pieces of clothing at a
      time . if she had to wash 19 shirts and 8 sweater ##s , how many loads would
      she have to do ?'
    snippets:
      shape:
      - 4
      - 15
      target:
      - s old washing machine could only wash 9 pieces of clothing at a time .
      - only wash 9 pieces of clothing at a time . if she had to wash
      - 'time . if she had to wash 19 shirts and 8 sweater ##s , how'
      - 'she had to wash 19 shirts and 8 sweater ##s , how many loads would'
    tokens:
      shape:
      - 44
      target: '[CLS] nancy '' s old washing machine could only wash 9 pieces of clothing
        at a time . if she had to wash 19 shirts and 8 sweater ##s , how many loads
        would she have to do ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: /(1, N_01) R_02: /(1, N_02) R_03: +(R_01, R_02)
      R_04: *(R_00, R_03) R_05: =(1, R_04) R_06: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the hours sara can paint a house
      N_02:
      - the hours john can paint a house
      X_00:
      - the hours required if sara and john paint together
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of hours taken for sara to paint a house
      - the number of hours it takes for sara to paint the house
      - the hours consumed for sara to paint the house
      N_02:
      - the number of hours taken for john to do it
      - the number of hours it takes for john to paint the house
      - the hours consumed for john to paint the house
      X_00:
      - the number of hours taken if they work together
      - the number of hours it takes for sara and john to paint the house together
      - the hours to take when they work together
  info:
    answers:
    - h: '2.40000000000000'
    item_id: 604cc853117d71c492a63029
    numbers:
      N_00: '1'
      N_01: '4'
      N_02: '6'
    split: null
    variables:
    - h
  text:
    numbers:
      shape:
      - 44
      target: __ __ __ __ __  0 __ __  1 __ __ __ __ __ __ __ __ __ __  2 __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: if sara can paint a house in 4 hours , and john can paint the same house
      in 6 hours , how long will it take for both of them working together to paint
      the same house ?
    snippets:
      shape:
      - 3
      - 15
      target:
      - if sara can paint a house in 4 hours , and john
      - if sara can paint a house in 4 hours , and john can paint the
      - john can paint the same house in 6 hours , how long will it take
    tokens:
      shape:
      - 44
      target: '[CLS] if sara can paint a house in 4 hours , and john can paint the
        same house in 6 hours , how long will it take for both of them working together
        to paint the same house ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: /(N_02, 100) R_02: -(R_00, N_01) R_03: *(R_01,
      R_02) R_04: /(N_00, 100) R_05: *(R_00, R_04) R_06: -(R_03, R_05) R_07: =(N_04,
      R_06) R_08: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the price of a deck
      N_01:
      - the number of apples sold
      N_02:
      - the price of a game sold
      N_04:
      - the number of cents left to lizzie
      X_00:
      - the number of dollars sold
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the buying price of an apple in cents
      - the price of an apple lizzie bought in cents
      - the buying price of an apple in cents
      N_01:
      - the number of apples eaten before selling
      - the number of apples lizzie ate
      - the number of apples she ate
      N_02:
      - the selling price of an apple in cents
      - the price of an apple lizzie sold in cents
      - the selling price of an apple in cents
      N_04:
      - the amount of profit in dollars
      - the total amount of profit in dollars
      - the total profit in dollars
      X_00:
      - the number of apples bought
      - the total number of apples lizzie bought
      - the number of apples she bought before eating 2 of them
  info:
    answers:
    - a: '28'
    item_id: 604cc853117d71c492a62fb3
    numbers:
      N_00: '20'
      N_01: '2'
      N_02: '30'
      N_03: '1'
      N_04: '2.20000000000000'
    split: null
    variables:
    - a
  text:
    numbers:
      shape:
      - 44
      target: __ __ __ __ __ __  0 __ __ __ __  1 __ __ __ __ __ __ __ __  2 __ __
        __ __ __  3 __ __  4  4  4 __ __ __ __ __ __ __ __ __ __ __ __
    raw: lizzie bought several apples at 20 cents each , ate 2 of them , and sold
      the rest for 30 cents each . she made a profit of 2 . 20 . how many did she
      buy ?
    snippets:
      shape:
      - 5
      - 15
      target:
      - lizzie bought several apples at 20 cents each , ate 2 of them
      - apples at 20 cents each , ate 2 of them , and sold the rest
      - them , and sold the rest for 30 cents each . she made a profit
      - for 30 cents each . she made a profit of 2 . 20 . how
      - each . she made a profit of 2 . 20 . how many did she
    tokens:
      shape:
      - 44
      target: '[CLS] lizzie bought several apples at 20 cents each , ate 2 of them
        , and sold the rest for 30 cents each . she made a profit of 2 . 20 . how
        many did she buy ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: /(1, N_02) R_02: /(1, N_04) R_03: +(R_01, R_02)
      R_04: *(R_00, R_03) R_05: =(1, R_04) R_06: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the hours consumed for one water to drain a lake
      N_04:
      - the hours consumed for the newer model to drain the lake
      X_00:
      - the hours consumed if both pumps together
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the hours to drain a lake for one water pump
      - the hours of one pump's drain time
      - the hours for one water pump to drain the lake
      N_04:
      - the hours to drain a lake for a newer water pump
      - the hours of the new model's drain time
      - the hours for the newer model to drain the lake
      X_00:
      - the time to drain when combined
      - the hours of both pumps together drain time
      - the hours for both water pumps together to drain the lake
  info:
    answers:
    - h: '3.60000000000000'
    item_id: 604cc853117d71c492a62e47
    numbers:
      N_00: '1'
      N_01: '1'
      N_02: '9'
      N_03: '1'
      N_04: '6'
    split: null
    variables:
    - h
  text:
    numbers:
      shape:
      - 44
      target: __  0 __ __ __ __  1 __ __  2 __ __  3 __ __ __ __ __ __ __ __  4 __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: one water pump can drain a lake in 9 hours . a newer model can drain the
      same lake in 6 hours . how long does it take for both water pumps together to
      drain the lake ?
    snippets:
      shape:
      - 5
      - 15
      target:
      - one water pump can drain a lake in
      - one water pump can drain a lake in 9 hours . a newer
      - water pump can drain a lake in 9 hours . a newer model can drain
      - drain a lake in 9 hours . a newer model can drain the same lake
      - model can drain the same lake in 6 hours . how long does it take
    tokens:
      shape:
      - 44
      target: '[CLS] one water pump can drain a lake in 9 hours . a newer model can
        drain the same lake in 6 hours . how long does it take for both water pumps
        together to drain the lake ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: -(N_00, N_04) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of candies in the box
      N_02:
      - the number of candies in the box
      N_04:
      - the number of candies taken out of the box
      X_00:
      - the number of candies left
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of candies in a box
      - the number of candies in the box
      - the initial number of candies in the box
      N_04:
      - the number of candies taken out of the box
      - the number of candies taken out of the box
      - the number of candies removed from the box
      X_00:
      - the number of candies remaining in the box
      - the number of candies that are left in the box
      - the number of candies in the box left
  info:
    answers:
    - c: '82'
    item_id: 60f9186c90be09b72239ede7
    numbers:
      N_00: '88'
      N_01: '1'
      N_02: '18'
      N_03: '1'
      N_04: '6'
    split: null
    variables:
    - c
  text:
    numbers:
      shape:
      - 44
      target: __ __ __  0 __ __ __  1 __ __ __ __  2 __ __ __  3 __ __ __ __  4 __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'there are 88 candi ##es in a box . lisa has 18 candi ##es in a bag . diana
      takes 6 candi ##es out of the box . how many candi ##es are left in the box
      ?'
    snippets:
      shape:
      - 5
      - 15
      target:
      - 'there are 88 candi ##es in a box . lisa'
      - 'there are 88 candi ##es in a box . lisa has 18 candi ##es'
      - '##es in a box . lisa has 18 candi ##es in a bag . diana'
      - '. lisa has 18 candi ##es in a bag . diana takes 6 candi ##es'
      - '##es in a bag . diana takes 6 candi ##es out of the box .'
    tokens:
      shape:
      - 44
      target: '[CLS] there are 88 candi ##es in a box . lisa has 18 candi ##es in
        a bag . diana takes 6 candi ##es out of the box . how many candi ##es are
        left in the box ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: -(N_01, N_03) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the distance oscar's bus rides
      N_03:
      - the distance charlie's bus
      X_00:
      - the distance oscar's bus rides longer than jachary's
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the length of miles of oscar's bus ride to school
      - the distance of oscar's bus ride to school
      - the distance of oscar's bus ride to school in miles
      N_03:
      - the length of miles of charlie's bus ride to school
      - the distance of charlie's bus ride to school
      - the distance of charlie's bus ride in miles
      X_00:
      - the value of the length of miles of oscar's bus ride to school minus the length
        of miles of charlie's bus ride to school
      - the value of oscar's bus ride to school minus charlie's bus ride to school
      - the value of the distance of oscar's bus ride to school minus the distance
        of oscar's bus ride to school in miles
  info:
    answers:
    - d: '0.500000000000000'
    item_id: 60f9186c90be09b72239f0c9
    numbers:
      N_00: '2'
      N_01: '0.750000000000000'
      N_02: '2'
      N_03: '0.250000000000000'
      N_04: '2'
    split: null
    variables:
    - d
  text:
    numbers:
      shape:
      - 44
      target: __ __ __ __  0 __ __ __ __  1  1  1 __ __ __ __ __ __  2 __ __  3  3  3
        __ __ __ __ __ __ __ __ __  4 __ __ __ __ __ __ __ __ __ __
    raw: oscar ' s bus ride to school is 0 . 75 miles , and charlie ' s bus ride is
      0 . 25 miles . how much longer is oscar ' s bus ride than charlie ' s ?
    snippets:
      shape:
      - 5
      - 15
      target:
      - oscar ' s bus ride to school is 0 . 75
      - ''' s bus ride to school is 0 . 75 miles , and charlie '''
      - 75 miles , and charlie ' s bus ride is 0 . 25 miles .
      - and charlie ' s bus ride is 0 . 25 miles . how much longer
      - how much longer is oscar ' s bus ride than charlie ' s ?
    tokens:
      shape:
      - 44
      target: '[CLS] oscar '' s bus ride to school is 0 . 75 miles , and charlie ''
        s bus ride is 0 . 25 miles . how much longer is oscar '' s bus ride than charlie
        '' s ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(R_00, R_01) R_03: =(N_01,
      R_02) R_04: /(N_05, 100) R_05: *(R_00, R_04) R_06: /(N_07, 100) R_07: *(R_01,
      R_06) R_08: +(R_05, R_07) R_09: /(N_03, 100) R_10: *(N_01, R_09) R_11: =(R_08,
      R_10) R_12: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of litters of 8 % acid solution
      N_03:
      - the concentration of the 8 % acid solution
      N_05:
      - the concentration of the 10 % acid solution
      N_07:
      - the concentration of the 5 % acid solution
      X_00:
      - the amount of 10 % acid solution
      X_01:
      - the amount of 5 % acid solution
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the total volume of the mixed solution of the first solution and the second
        solution
      - the volume of an 8 % acid solution
      - the amount of the mixture of two solution
      N_03:
      - the total percentage of acid in the mixed solution of the first solution and
        the second solution
      - the density of the mixed acid solution
      - the concentration of the mixture of two solution
      N_05:
      - the percentage of acid in the first solution
      - the density of an acid solution
      - the concentration of 10 % solution
      N_07:
      - the percentage of acid in the second solution
      - the density of another acid solution
      - the concentration of 5 % solution
      X_00:
      - the volume of the first solution
      - the volume of the 10 % acid solution
      - the amount of 10 % solution
      X_01:
      - the volume of the second solution
      - the volume of the 5 % acid solution
      - the amount of 5 % solution
  info:
    answers:
    - s1: '1.20000000000000'
      s2: '0.800000000000000'
    item_id: 604cc853117d71c492a62e3e
    numbers:
      N_00: '1'
      N_01: '2'
      N_02: '1'
      N_03: '8'
      N_04: '1'
      N_05: '10'
      N_06: '1'
      N_07: '5'
    split: null
    variables:
    - s1
    - s2
  text:
    numbers:
      shape:
      - 44
      target: __  0 __ __ __ __  1 __ __  2  3 __ __ __ __ __  4  5 __ __ __ __  6  7
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'a chemist wishes to make 2 l of an 8 % acid solution by mixing a 10 % acid
      solution and a 5 % acid solution . how many litter ##s of each solution should
      the chemist use ?'
    snippets:
      shape:
      - 8
      - 15
      target:
      - a chemist wishes to make 2 l of
      - a chemist wishes to make 2 l of an 8 % acid solution
      - chemist wishes to make 2 l of an 8 % acid solution by mixing a
      - wishes to make 2 l of an 8 % acid solution by mixing a 10
      - an 8 % acid solution by mixing a 10 % acid solution and a 5
      - 8 % acid solution by mixing a 10 % acid solution and a 5 %
      - mixing a 10 % acid solution and a 5 % acid solution . how many
      - a 10 % acid solution and a 5 % acid solution . how many litter
    tokens:
      shape:
      - 44
      target: '[CLS] a chemist wishes to make 2 l of an 8 % acid solution by mixing
        a 10 % acid solution and a 5 % acid solution . how many litter ##s of each
        solution should the chemist use ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(R_00, R_01) R_03: =(N_01,
      R_02) R_04: *(N_04, R_01) R_05: -(R_00, R_04) R_06: =(N_03, R_05) R_07: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the sum of the number of home runs and the number of home runs
      N_03:
      - the value of the number of home runs the first player hit minus 2 times the
        number of home runs
      N_04:
      - the multiplier for the number of home runs
      X_00:
      - the number of home runs
      X_01:
      - the number of home runs
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the combined number of home runs
      - the number of home runs hit by two baseball players last season
      - the total number of home runs
      N_03:
      - the value of the number of home runs by the first player minus twice the number
        of home runs by the second player
      - the value of home runs hit by the first player minus 2 times the home runs
        hit by the second player
      - the value of the number of home runs by the first player minus twice the number
        of home runs by the second player
      N_04:
      - a number in the phrase " twice the number "
      - a number in the phrase " twice the number of home runs "
      - the value of the multiplier for the number of home runs by the second player
      X_00:
      - the number of home runs by the first player
      - the home runs hit by the first player
      - the number of home runs by the first player
      X_01:
      - the number of home runs by the second player
      - the home runs hit by the second player
      - the number of home runs by the second player
  info:
    answers:
    - p1: '55'
      p2: '24'
    item_id: 604cc853117d71c492a62f1f
    numbers:
      N_00: '2'
      N_01: '79'
      N_02: '1'
      N_03: '7'
      N_04: '2'
      N_05: '2'
    split: null
    variables:
    - p1
    - p2
  text:
    numbers:
      shape:
      - 44
      target: __  0 __ __ __  1 __ __ __ __ __ __ __  2 __ __  3 __ __ __ __  4 __
        __ __ __ __ __ __ __  5 __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: two baseball players hit 79 home runs combined last season . the first player
      hit 7 more home runs than twice the number of home runs hit by the second player
      . how many home runs did each player hit ?
    snippets:
      shape:
      - 6
      - 15
      target:
      - two baseball players hit 79 home runs combined
      - two baseball players hit 79 home runs combined last season . the
      - home runs combined last season . the first player hit 7 more home runs than
      - last season . the first player hit 7 more home runs than twice the number
      - player hit 7 more home runs than twice the number of home runs hit by
      - number of home runs hit by the second player . how many home runs did
    tokens:
      shape:
      - 44
      target: '[CLS] two baseball players hit 79 home runs combined last season .
        the first player hit 7 more home runs than twice the number of home runs hit
        by the second player . how many home runs did each player hit ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_01) R_02: -(R_01, R_00) R_03: =(N_02,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of cupries katie baked
      N_02:
      - the number of cupries katie had to take back home
      X_00:
      - the number of pastcakes she baked
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of cupcakes for the sale
      - the number of cupcakes
      - the number of cupcakes katie made
      N_01:
      - the number of cookies for the sale
      - the number of cookies
      - the number of cookies katie made
      N_02:
      - the number of pastries left after the sale
      - the number of pastries left
      - the number of pastries left
      X_00:
      - the number of pastries sold
      - the number of total pastries minus " 8 "
      - the number of pastries katie sold
  info:
    answers:
    - s: '4'
    item_id: 60f9186c90be09b72239f2a5
    numbers:
      N_00: '7'
      N_01: '5'
      N_02: '8'
    split: null
    variables:
    - s
  text:
    numbers:
      shape:
      - 44
      target: __ __ __ __ __ __ __ __ __ __ __ __ __ __ __  0 __ __ __ __  1 __ __
        __ __ __ __ __ __  2 __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'for the school ba ##ke sale , katie made past ##ries . she baked 7 cup ##cake
      ##s and 5 cookies . after the sale , she had 8 to take back home . how many
      past ##ries did she sell ?'
    snippets:
      shape:
      - 3
      - 15
      target:
      - 'katie made past ##ries . she baked 7 cup ##cake ##s and 5 cookies .'
      - 'she baked 7 cup ##cake ##s and 5 cookies . after the sale , she'
      - . after the sale , she had 8 to take back home . how many
    tokens:
      shape:
      - 44
      target: '[CLS] for the school ba ##ke sale , katie made past ##ries . she baked
        7 cup ##cake ##s and 5 cookies . after the sale , she had 8 to take back home
        . how many past ##ries did she sell ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(R_00, R_01) R_03: =(N_00,
      R_02) R_04: /(N_01, 100) R_05: *(R_00, R_04) R_06: /(N_02, 100) R_07: *(R_01,
      R_06) R_08: +(R_05, R_07) R_09: =(N_03, R_08) R_10: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the total invested dollars
      N_01:
      - the interest ratio of part 1
      N_02:
      - the interest ratio of part 2
      N_03:
      - the total interest
      N_04:
      - the interest ratio of part 1
      X_00:
      - the invested dollars of part 1
      X_01:
      - the invested dollars of part 2
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the total principal bob invested
      - the total amount of money bob invested
      - the total invested dollars
      N_01:
      - one interest rate
      - the interest rate of the first kind
      - the interest ratio at one part
      N_02:
      - another interest rate
      - the interest rate of the second kind
      - the interest ratio at another part
      N_03:
      - the total interest earned at the end of the year
      - the total amount of interest gained
      - the value of total interest
      N_04:
      - one interest rate
      - the interest rate of the first kind
      - the interest ratio at one part
      X_00:
      - the principal of the 18 % interest rate
      - the amount of money invested in the first kind
      - the invested dollars at one part
      X_01:
      - the principal of the 14 % interest rate
      - the amount of money invested in the second kind
      - the invested dollars at another part
  info:
    answers:
    - i1: '15000'
      i2: '7000'
    item_id: 604cc853117d71c492a62ec3
    numbers:
      N_00: '22000'
      N_01: '18'
      N_02: '14'
      N_03: '3360'
      N_04: '18'
    split: null
    variables:
    - i2
    - i1
  text:
    numbers:
      shape:
      - 48
      target: __ __ __ __  0  0  0 __ __ __  1 __ __ __ __  2 __ __ __ __ __ __ __
        __ __ __ __ __ __ __  3  3  3 __ __ __ __ __ __ __  4 __ __ __ __ __ __ __
    raw: bob invested $ 22 , 000 , part at 18 % and part at 14 % . if the total interest
      at the end of the year is $ 3 , 360 , how much did he invest at 18 % ?
    snippets:
      shape:
      - 5
      - 15
      target:
      - bob invested $ 22 , 000 , part at 18 %
      - $ 22 , 000 , part at 18 % and part at 14 % .
      - part at 18 % and part at 14 % . if the total interest at
      - the end of the year is $ 3 , 360 , how much did he
      - ', how much did he invest at 18 % ?'
    tokens:
      shape:
      - 48
      target: '[CLS] bob invested $ 22 , 000 , part at 18 % and part at 14 % . if
        the total interest at the end of the year is $ 3 , 360 , how much did he invest
        at 18 % ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_02) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the ratio of the number of the nails to the total number of nails
      N_01:
      - the ratio of the number of the nails to the total number of nails
      N_02:
      - the ratio of the number of nails to the total number of nails
      N_03:
      - the ratio of the number of nails to the total number of nails
      N_05:
      - the number of nails
      X_00:
      - the ratio of the number of the nails to the total number of nails
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the ratio of the 2d size nails to the hardware store's all nails
      - fraction of the nails that are size 2d
      - the fraction of the size 2d nails
      N_02:
      - the ratio of the 4d size nails to the hardware store's all nails
      - fraction of the nails that are size 4d
      - the fraction of the size 4d nails
      X_00:
      - the ratio of the 2d or 4d size nails to the hardware store's all nails
      - the total fraction of nails that are size 2d or 4d
      - the fraction of the nails which are either size 2d or 4d
  info:
    answers:
    - n: '0.750000000000000'
    item_id: 60f9186c90be09b72239efd2
    numbers:
      N_00: '0.250000000000000'
      N_01: '2'
      N_02: '0.500000000000000'
      N_03: '4'
      N_04: '2'
      N_05: '4'
    split: null
    variables:
    - n
  text:
    numbers:
      shape:
      - 48
      target: __ __ __ __ __ __  0  0  0 __ __ __ __ __  1 __ __ __  2  2  2 __ __
        __ __ __  3 __ __ __ __ __ __ __ __ __ __  4 __ __  5 __ __ __ __ __ __ __
    raw: at the hardware store , 0 . 25 of the nails are size 2 d , and 0 . 5 of the
      nails are size 4 d . what fraction of the nails are either size 2 d or 4 d ?
    snippets:
      shape:
      - 6
      - 15
      target:
      - at the hardware store , 0 . 25 of the nails are size
      - . 25 of the nails are size 2 d , and 0 . 5 of
      - nails are size 2 d , and 0 . 5 of the nails are size
      - . 5 of the nails are size 4 d . what fraction of the nails
      - fraction of the nails are either size 2 d or 4 d ?
      - nails are either size 2 d or 4 d ?
    tokens:
      shape:
      - 48
      target: '[CLS] at the hardware store , 0 . 25 of the nails are size 2 d , and
        0 . 5 of the nails are size 4 d . what fraction of the nails are either size
        2 d or 4 d ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_02, R_00) R_02: -(N_00, N_01) R_03: =(R_01,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of games kaleb started out
      N_01:
      - the number of games kaleb sold
      N_02:
      - the number of games kaleb sold
      X_00:
      - the number of boxes needed
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the starting number of games
      - the initial number of old games
      - the number of old games held by kaleb
      N_01:
      - the number of games sold
      - the number of old games sold
      - the number of games sold by kaleb
      N_02:
      - the number of games left packed in each box
      - the number of old games in each box
      - the number of games put into each box
      X_00:
      - the number of boxes used
      - the number of boxes
      - the number of boxes to pack all games
  info:
    answers:
    - b: '6'
    item_id: 60f9186c90be09b72239ef43
    numbers:
      N_00: '76'
      N_01: '46'
      N_02: '5'
    split: null
    variables:
    - b
  text:
    numbers:
      shape:
      - 48
      target: __ __ __ __ __ __ __ __ __ __ __ __ __ __  0 __ __  1 __ __ __ __ __
        __ __ __ __ __  2 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'ka ##le ##b was selling his old games . he started out with 76 but sold
      46 of them . he packed the rest up , putting 5 games into each box . how many
      boxes did he have to use ?'
    snippets:
      shape:
      - 3
      - 15
      target:
      - old games . he started out with 76 but sold 46 of them . he
      - he started out with 76 but sold 46 of them . he packed the rest
      - he packed the rest up , putting 5 games into each box . how many
    tokens:
      shape:
      - 48
      target: '[CLS] ka ##le ##b was selling his old games . he started out with 76
        but sold 46 of them . he packed the rest up , putting 5 games into each box
        . how many boxes did he have to use ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_01) R_02: -(R_01, R_00) R_03: =(N_02,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of cupries wendy baked
      N_02:
      - the number of cupries she baked
      X_00:
      - the number of pastcakes
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of cupcakes for the sale
      - the number of cupcakes baked by wendy
      - the number of cupcakes wendy made
      N_01:
      - the number of cookies for the sale
      - the number of cookies baked by wendy
      - the number of cookies wendy made
      N_02:
      - the number of pastries left after the sale
      - the value of the number of pastries baked by wendy minus the number of pastries
        sold
      - the number of pastries left
      X_00:
      - the number of pastries sold
      - the number of pastries sold
      - the number of pastries wendy sold
  info:
    answers:
    - s: '40'
    item_id: 60f9186c90be09b72239ea86
    numbers:
      N_00: '41'
      N_01: '31'
      N_02: '32'
    split: null
    variables:
    - s
  text:
    numbers:
      shape:
      - 48
      target: __ __ __ __ __ __ __ __ __ __ __ __ __ __ __  0 __ __ __ __  1 __ __
        __ __ __ __ __ __  2 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'for the school ba ##ke sale , wendy made past ##ries . she baked 41 cup
      ##cake ##s and 31 cookies . after the sale , she had 32 to take back home .
      how many past ##ries did she sell ?'
    snippets:
      shape:
      - 3
      - 15
      target:
      - 'wendy made past ##ries . she baked 41 cup ##cake ##s and 31 cookies .'
      - 'she baked 41 cup ##cake ##s and 31 cookies . after the sale , she'
      - . after the sale , she had 32 to take back home . how many
    tokens:
      shape:
      - 48
      target: '[CLS] for the school ba ##ke sale , wendy made past ##ries . she baked
        41 cup ##cake ##s and 31 cookies . after the sale , she had 32 to take back
        home . how many past ##ries did she sell ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_01) R_02: +(N_02, R_01) R_03: =(R_00,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of crayons in the drawer
      N_01:
      - the number of crayons on the desk
      N_02:
      - the number of crayons on the drawer
      X_00:
      - the total number of crayons
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of crayons in the drawer
      - the number of crayons in the drawer
      - the number of crayons in the drawer
      N_01:
      - the number of crayons on the desk
      - the number of crayons on the desk
      - the number of crayons on the desk
      N_02:
      - the number of crayons added on the desk
      - the number of new crayons on the desk
      - the number of crayons sam placed on the desk
      X_00:
      - the total number of crayons
      - the total number of crayons
      - the number of crayons now there in total
  info:
    answers:
    - c: '17'
    item_id: 60f9186c90be09b72239ea27
    numbers:
      N_00: '7'
      N_01: '6'
      N_02: '4'
      N_03: '8'
    split: null
    variables:
    - c
  text:
    numbers:
      shape:
      - 48
      target: __ __ __  0 __ __ __ __ __ __ __  1 __ __ __ __ __ __ __ __ __  2 __
        __ __ __  3 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'there are 7 cr ##ayo ##ns in the drawer and 6 cr ##ayo ##ns on the desk
      . sam placed 4 cr ##ayo ##ns and 8 scissors on the desk . how many cr ##ayo
      ##ns are now there in total ?'
    snippets:
      shape:
      - 4
      - 15
      target:
      - 'there are 7 cr ##ayo ##ns in the drawer and'
      - 'cr ##ayo ##ns in the drawer and 6 cr ##ayo ##ns on the desk .'
      - '##ns on the desk . sam placed 4 cr ##ayo ##ns and 8 scissors on'
      - 'sam placed 4 cr ##ayo ##ns and 8 scissors on the desk . how many'
    tokens:
      shape:
      - 48
      target: '[CLS] there are 7 cr ##ayo ##ns in the drawer and 6 cr ##ayo ##ns on
        the desk . sam placed 4 cr ##ayo ##ns and 8 scissors on the desk . how many
        cr ##ayo ##ns are now there in total ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(R_00, R_01) R_03: =(N_00,
      R_02) R_04: /(N_01, 100) R_05: *(R_00, R_04) R_06: /(N_02, 100) R_07: *(R_01,
      R_06) R_08: +(R_05, R_07) R_09: =(N_03, R_08) R_10: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the total invested dollars
      N_01:
      - the interest rate of part 1
      N_02:
      - the interest rate of part 2
      N_03:
      - the total interest
      N_04:
      - the interest rate of part 1
      X_00:
      - the invested dollars of part 1
      X_01:
      - the invested dollars of part 2
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the sum of the number of dollars invested in the first investment and the
        number of dollars invested in the second investment
      - the total amount of dollars invested
      - the amount of total investment in dollars
      N_01:
      - the interest rate of the first investment
      - the interest rate of the first kind
      - the annual interest rate in the first case
      N_02:
      - the interest rate of the second investment
      - the interest rate of the second kind
      - the annual interest rate in the second case
      N_03:
      - the sum of the yearly interest earned from the first investment and the yearly
        interest earned from the second investment
      - the total amount of money gained by interest
      - the amount of total interest after one year in dollars
      N_04:
      - the interest rate of the first investment
      - the interest rate of the first kind
      - the annual interest rate in the first case
      X_00:
      - the number of dollars invested in the first investment
      - the amount of money invested in the first kind
      - the amount of investment in the first case in dollars
      X_01:
      - the number of dollars invested in the second investment
      - the amount of money invested in the second kind
      - the amount of investment in the second case in dollars
  info:
    answers:
    - i1: '19000'
      i2: '12000'
    item_id: 604cc853117d71c492a62c1c
    numbers:
      N_00: '31000'
      N_01: '10'
      N_02: '1'
      N_03: '1390'
      N_04: '10'
    split: null
    variables:
    - i2
    - i1
  text:
    numbers:
      shape:
      - 48
      target: __ __ __  0  0  0 __ __ __ __  1 __ __ __ __  2 __ __ __ __ __ __ __
        __ __ __ __ __ __  3  3  3 __ __ __ __ __ __ __ __  4 __ __ __ __ __ __ __
    raw: janet invested 31 , 000 dollars , part at 10 % and part at 1 % . if the total
      interest at the end of the year is 1 , 390 dollars , how much did she invest
      at 10 % ?
    snippets:
      shape:
      - 5
      - 15
      target:
      - janet invested 31 , 000 dollars , part at 10
      - 31 , 000 dollars , part at 10 % and part at 1 % .
      - part at 10 % and part at 1 % . if the total interest at
      - at the end of the year is 1 , 390 dollars , how much did
      - ', how much did she invest at 10 % ?'
    tokens:
      shape:
      - 48
      target: '[CLS] janet invested 31 , 000 dollars , part at 10 % and part at 1
        % . if the total interest at the end of the year is 1 , 390 dollars , how
        much did she invest at 10 % ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_01) R_02: +(N_02, R_01) R_03: +(N_03,
      R_02) R_04: +(R_00, R_03) R_05: +(1, N_05) R_06: /(R_04, R_05) R_07: =(N_08,
      R_06) R_08: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the concentration of the first quiz
      N_01:
      - the concentration of the next quiz
      N_02:
      - the interest rate of the first quiz
      N_03:
      - the concentration of the next quiz
      N_05:
      - the number of math quizzes
      N_08:
      - the average interest rate of the second quiz
      X_00:
      - the number of dollars invested in the next quiz
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the first grade of beth's math quiz
      - the percentage of grades beth has on the first quiz
      - the score of the first math quiz
      N_01:
      - the second grade of beth's math quiz
      - the percentage of grades beth has on the second quiz
      - the score of the second math quiz
      N_02:
      - the third grade of beth's math quiz
      - the percentage of grades beth has on the third quiz
      - the score of the third math quiz
      N_03:
      - the fourth grade of beth's math quiz
      - the percentage of grades beth has on the fourth quiz
      - the score of the fourth math quiz
      N_05:
      - the number of math quizzes
      - the number of math quizzes
      - the number of math quizzes so far
      N_08:
      - the expected average grade of beth's math quiz
      - the average percentage of grades she needs
      - the average score of all five math quizzes
      X_00:
      - the expected grade to achieve average of 87
      - the percentage of grades of the last math quiz she needs
      - the score of the fifth math quiz
  info:
    answers:
    - l: '90'
    item_id: 60f9186c90be09b72239ee99
    numbers:
      N_00: '81'
      N_01: '88'
      N_02: '90'
      N_03: '86'
      N_04: '1'
      N_05: '4'
      N_06: '1'
      N_07: '1'
      N_08: '87'
    split: null
    variables:
    - l
  text:
    numbers:
      shape:
      - 48
      target: __ __ __ __ __ __  0 __ __  1 __ __  2 __ __ __  3 __ __ __  4  5 __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __  6 __ __  7  8 __ __ __ __ __
    raw: 'beth has the following grades 81 % , 88 % , 90 % , and 86 % on her first
      4 math quiz ##zes . what grade would she need on her next math quiz to have
      an average of an 87 % ?'
    snippets:
      shape:
      - 9
      - 15
      target:
      - beth has the following grades 81 % , 88 % , 90 %
      - has the following grades 81 % , 88 % , 90 % , and 86
      - grades 81 % , 88 % , 90 % , and 86 % on her
      - 88 % , 90 % , and 86 % on her first 4 math quiz
      - '% , and 86 % on her first 4 math quiz ##zes . what grade'
      - ', and 86 % on her first 4 math quiz ##zes . what grade would'
      - on her next math quiz to have an average of an 87 % ?
      - math quiz to have an average of an 87 % ?
      - quiz to have an average of an 87 % ?
    tokens:
      shape:
      - 48
      target: '[CLS] beth has the following grades 81 % , 88 % , 90 % , and 86 % on
        her first 4 math quiz ##zes . what grade would she need on her next math quiz
        to have an average of an 87 % ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: *(0.05, R_00) R_03: *(0.1,
      R_01) R_04: +(R_02, R_03) R_05: =(N_01, R_04) R_06: +(R_00, R_01) R_07: =(N_03,
      R_06) R_08: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the total value of nickels and dimes
      N_03:
      - the total number of nickels and dimes
      X_00:
      - the number of nickels
      X_01:
      - the number of dimes
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the total value of nickels and dimes
      - the total dollar worth of nickels and dimes
      - the total value of the nickels and the dimes
      N_03:
      - the total number of nickels and dimes
      - the total count of nickels and dimes
      - the number of nickels and dimes
      X_00:
      - the number of nickels
      - the count of nickels
      - the number of nickels
      X_01:
      - the number of dimes
      - the count of dimes
      - the number of dimes
  info:
    answers:
    - d: '144'
      n: '63'
    item_id: 604cc853117d71c492a62cab
    numbers:
      N_00: '1'
      N_01: '17.5500000000000'
      N_02: '1'
      N_03: '207'
    split: null
    variables:
    - n
    - d
  text:
    numbers:
      shape:
      - 48
      target: __  0 __ __  1  1  1 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __  2
        __ __  3 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'a child has 17 . 55 dollars worth of nickel ##s and dime ##s in her pig
      ##gy bank . there are a total of 207 coins . how many nickel ##s does she have
      ? how many dime ##s does she have ?'
    snippets:
      shape:
      - 4
      - 15
      target:
      - a child has 17 . 55 dollars worth
      - 'a child has 17 . 55 dollars worth of nickel ##s'
      - 'her pig ##gy bank . there are a total of 207 coins . how many'
      - 'bank . there are a total of 207 coins . how many nickel ##s does'
    tokens:
      shape:
      - 48
      target: '[CLS] a child has 17 . 55 dollars worth of nickel ##s and dime ##s
        in her pig ##gy bank . there are a total of 207 coins . how many nickel ##s
        does she have ? how many dime ##s does she have ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: *(N_04, R_00) R_03: *(N_04,
      R_01) R_04: +(R_02, R_03) R_05: =(N_01, R_04) R_06: -(R_00, R_01) R_07: =(N_03,
      R_06) R_08: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the distance between two trains
      N_03:
      - the value of the speed of the first train minus the rate of the second train
      N_04:
      - the number of hours each train traveled toward each other
      X_00:
      - the speed of the first train
      X_01:
      - the speed of the second train
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the distance between the towns
      - the distance between the towns
      - the distance between the two trains
      N_03:
      - the value of the speed of the first train minus the speed of the second train
      - the value of the speed of one train minus the speed of the other train
      - the value of the rate of one train minus that of the other train
      N_04:
      - the hours required for the trains meet
      - the hours it takes to meet
      - the hours for which the two trains will travel
      X_00:
      - the speed of the first train
      - the speed of the one train in one direction
      - the rate of one train
      X_01:
      - the speed of the second train
      - the speed of the other train in the opposite direction
      - the rate of the other train
  info:
    answers:
    - t1: '48'
      t2: '42'
    item_id: 604cc853117d71c492a62e5f
    numbers:
      N_00: '2'
      N_01: '450'
      N_02: '1'
      N_03: '6'
      N_04: '5'
    split: null
    variables:
    - t1
    - t2
  text:
    numbers:
      shape:
      - 48
      target: __  0 __ __ __ __ __ __ __ __ __ __ __ __ __ __  1 __ __ __  2 __ __  3
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __  4 __ __ __ __ __
    raw: two trains start toward each other on parallel tracks at the same time from
      towns 450 miles apart . one train travels 6 mph faster than the other train
      . what is the rate of each train if they meet in 5 hours ?
    snippets:
      shape:
      - 5
      - 15
      target:
      - two trains start toward each other on parallel
      - tracks at the same time from towns 450 miles apart . one train travels 6
      - time from towns 450 miles apart . one train travels 6 mph faster than the
      - 450 miles apart . one train travels 6 mph faster than the other train .
      - of each train if they meet in 5 hours ?
    tokens:
      shape:
      - 48
      target: '[CLS] two trains start toward each other on parallel tracks at the
        same time from towns 450 miles apart . one train travels 6 mph faster than
        the other train . what is the rate of each train if they meet in 5 hours ?
        [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_02) R_02: -(R_01, N_03) R_03: =(R_00,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of tickets jerry won
      N_02:
      - the number of skha's tickets
      N_03:
      - the number of tickets spent playing a moleha
      X_00:
      - the number of tickets left
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of tickets won from the 1st game
      - the number of tickets playing whack a mole earned by jerry
      - the number of tickets playing'whack a mole '
      N_02:
      - the number of tickets won from the second game
      - the number of tickets playing skee ball earned by jerry
      - the number of tickets playing'skee ball '
      N_03:
      - the number of spent tickets
      - the number of tickets used by jerry
      - the number of tickets he would spend
      X_00:
      - the number of remaining tickets
      - the number of tickets left to jerry
      - the final number of tickets left
  info:
    answers:
    - l: '34'
    item_id: 60f9186c90be09b72239eef7
    numbers:
      N_00: '29'
      N_01: '1'
      N_02: '17'
      N_03: '12'
      N_04: '1'
    split: null
    variables:
    - l
  text:
    numbers:
      shape:
      - 48
      target: __ __ __ __ __ __ __  0 __ __ __ __ __ __  1 __ __ __  2 __ __ __ __
        __ __ __ __ __ __ __  3 __ __ __ __  4 __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'at the arcade , jerry won 29 tickets playing '' w ##ha ##ck a mole '' and
      17 tickets playing '' sk ##ee ball . '' if he spent 12 of his tickets on a hat
      , how many tickets does jerry have left ?'
    snippets:
      shape:
      - 5
      - 15
      target:
      - 'at the arcade , jerry won 29 tickets playing '' w ##ha ##ck a'
      - '29 tickets playing '' w ##ha ##ck a mole '' and 17 tickets playing '''
      - 'w ##ha ##ck a mole '' and 17 tickets playing '' sk ##ee ball .'
      - '##ee ball . '' if he spent 12 of his tickets on a hat ,'
      - he spent 12 of his tickets on a hat , how many tickets does jerry
    tokens:
      shape:
      - 48
      target: '[CLS] at the arcade , jerry won 29 tickets playing '' w ##ha ##ck a
        mole '' and 17 tickets playing '' sk ##ee ball . '' if he spent 12 of his
        tickets on a hat , how many tickets does jerry have left ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_02, R_00) R_02: -(N_00, N_01) R_03: =(R_01,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of students trying out for the school's students
      N_01:
      - the number of groups
      N_02:
      - the number of groups
      X_00:
      - the number of students in each group
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the initial number of students
      - the number of students trying out for the team
      - the total number of students trying out
      N_01:
      - the number of students who did not get picked
      - the number of students who didn't get picked
      - the number of students not picked for the team
      N_02:
      - the number of groups for the rest of the students
      - the number of groups students were put into
      - the number groups
      X_00:
      - the number of people in each group
      - the number of students in each group
      - the number of students in one group
  info:
    answers:
    - g: '6'
    item_id: 60f9186c90be09b72239ee38
    numbers:
      N_00: '58'
      N_01: '10'
      N_02: '8'
    split: null
    variables:
    - g
  text:
    numbers:
      shape:
      - 48
      target: __ __ __  0 __ __ __ __ __ __ __ __ __ __ __ __ __  1 __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __  2 __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'there are 58 students trying out for the school '' s tri ##via teams . if
      10 of them didn '' t get picked for the team and the rest were put into 8 groups
      , how many students would be in each group ?'
    snippets:
      shape:
      - 3
      - 15
      target:
      - there are 58 students trying out for the school '
      - ''' s tri ##via teams . if 10 of them didn '' t get picked'
      - team and the rest were put into 8 groups , how many students would be
    tokens:
      shape:
      - 48
      target: '[CLS] there are 58 students trying out for the school '' s tri ##via
        teams . if 10 of them didn '' t get picked for the team and the rest were
        put into 8 groups , how many students would be in each group ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_02, R_00) R_02: +(N_00, R_01) R_03: *(N_03,
      R_00) R_04: =(R_02, R_03) R_05: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the amount of in dollars to manufacture a new game
      N_02:
      - the cost of the game
      N_03:
      - the cost of the board
      X_00:
      - the number of games to make a game
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the amount of money invested in equipment
      - the cost of the equipment
      - the total amount of the investment in equipment to manufacture a new board
        game.
      N_02:
      - the additional manufacture cost per game
      - the cost of manufacturing price for each game
      - the cost to manufacture one game
      N_03:
      - the selling price of a game
      - the cost of the selling price
      - the selling price of one game
      X_00:
      - the number of games made for the business to break even
      - the number of games
      - the number of games
  info:
    answers:
    - g: '600'
    item_id: 604cc853117d71c492a63060
    numbers:
      N_00: '10410'
      N_01: '1'
      N_02: '2.65000000000000'
      N_03: '20'
    split: null
    variables:
    - g
  text:
    numbers:
      shape:
      - 48
      target: __ __ __ __ __  0  0  0 __ __ __ __  1 __ __ __ __ __ __ __ __  2  2  2
        __ __ __ __ __ __  3 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: suppose you invest $ 10 , 410 in equipment to manufacture a new board game
      . each game costs $ 2 . 65 to manufacture and sells for $ 20 . how many games
      must you make and sell before your business breaks even ?
    snippets:
      shape:
      - 4
      - 15
      target:
      - suppose you invest $ 10 , 410 in equipment to manufacture a
      - 10 , 410 in equipment to manufacture a new board game . each game costs
      - board game . each game costs $ 2 . 65 to manufacture and sells for
      - 65 to manufacture and sells for $ 20 . how many games must you make
    tokens:
      shape:
      - 48
      target: '[CLS] suppose you invest $ 10 , 410 in equipment to manufacture a new
        board game . each game costs $ 2 . 65 to manufacture and sells for $ 20 .
        how many games must you make and sell before your business breaks even ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(R_00, R_01) R_03: =(N_01,
      R_02) R_04: *(N_02, R_00) R_05: *(N_03, R_01) R_06: +(R_04, R_05) R_07: =(N_04,
      R_06) R_08: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the total number of admissions
      N_02:
      - the admission cost for one adult
      N_03:
      - the admission cost for one child
      N_04:
      - the total receipts
      X_00:
      - the number of adult admissions
      X_01:
      - the number of child admissions
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the total number of attended people
      - the sum of the number of adults and the number of children
      - the total number of admission tickets
      N_02:
      - the admission price for adults
      - the admission cost for adults
      - the cost of adult tickets
      N_03:
      - the admission for children
      - the admission cost for children
      - the cost of the children's ticket
      N_04:
      - the total value of receipts
      - the total admission cost earned from adults and children
      - the total cost of tickets
      X_00:
      - the number of adults
      - the number of adults
      - the number of adults
      X_01:
      - the number of children
      - the number of children
      - the number of children
  info:
    answers:
    - a: '236'
      c: '342'
    item_id: 604cc853117d71c492a62fc7
    numbers:
      N_00: '1'
      N_01: '578'
      N_02: '2.00000000000000'
      N_03: '1.50000000000000'
      N_04: '985.000000000000'
    split: null
    variables:
    - a
    - c
  text:
    numbers:
      shape:
      - 48
      target: __ __ __ __  0 __ __ __  1  1 __ __ __ __  2  2  2 __ __ __ __  3  3  3
        __ __ __ __ __ __ __  4  4  4  4 __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'the attendance at a school concert was 57 ##8 . admission costs $ 2 . 00
      for adults and $ 1 . 50 for children . the receipts were $ 98 ##5 . 00 . how
      many adults and how many children attended the concert ?'
    snippets:
      shape:
      - 5
      - 15
      target:
      - 'the attendance at a school concert was 57 ##8 . admission'
      - 'the attendance at a school concert was 57 ##8 . admission costs $ 2 .'
      - 'was 57 ##8 . admission costs $ 2 . 00 for adults and $ 1'
      - 2 . 00 for adults and $ 1 . 50 for children . the receipts
      - 'for children . the receipts were $ 98 ##5 . 00 . how many adults'
    tokens:
      shape:
      - 48
      target: '[CLS] the attendance at a school concert was 57 ##8 . admission costs
        $ 2 . 00 for adults and $ 1 . 50 for children . the receipts were $ 98 ##5
        . 00 . how many adults and how many children attended the concert ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the amount of hair cut the next day
      N_01:
      - the amount of hair cut off next day
      X_00:
      - the total amount of hair cut
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of inches of hair cut off the first day
      - the length of hair cut off
      - the number of inches of hair cut off the first time
      N_01:
      - the number of inches of hair cut off the second day
      - the length of another hair cut off
      - the number of inches of hair cut off the second time
      X_00:
      - the total number of inches of hair cut off
      - the whole length of hair cut off
      - the total number of inches of hair cut off
  info:
    answers:
    - t: '0.875000000000000'
    item_id: 60f9186c90be09b72239ed44
    numbers:
      N_00: '0.375000000000000'
      N_01: '0.500000000000000'
    split: null
    variables:
    - t
  text:
    numbers:
      shape:
      - 48
      target: __ __ __ __ __ __ __ __  0  0  0 __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __  1  1  1 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: elizabeth went to the salon and had 0 . 375 inches of hair cut off . the
      next day she went back and asked for another 0 . 5 inches to be cut off . how
      much hair did she have cut off in all ?
    snippets:
      shape:
      - 2
      - 15
      target:
      - elizabeth went to the salon and had 0 . 375 inches of hair cut off
      - she went back and asked for another 0 . 5 inches to be cut off
    tokens:
      shape:
      - 48
      target: '[CLS] elizabeth went to the salon and had 0 . 375 inches of hair cut
        off . the next day she went back and asked for another 0 . 5 inches to be
        cut off . how much hair did she have cut off in all ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_02, R_00) R_02: +(N_00, N_01) R_03: =(R_01,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of pictures on the first step
      N_01:
      - the number of pictures on the third step
      N_02:
      - the number of albums containing the camera into her phone
      X_00:
      - the number of pictures in each of the other albums
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of pictures from the phone
      - the number of pictures from the phone
      - the number of pictures isabel uploaded from her phone to facebook
      N_01:
      - the number of pictures from the camera
      - the number of pictures from facebook
      - the number of pictures isabel uploaded from her camera to facebook
      N_02:
      - the number of albums
      - the number of albums sorted all pictures with the same amount
      - the number of albums with the same amount of pics
      X_00:
      - the number of pictures in each album
      - the number of pictures in each album
      - the number of pictures in each of the albums
  info:
    answers:
    - e: '2'
    item_id: 60f9186c90be09b72239f0d9
    numbers:
      N_00: '2'
      N_01: '4'
      N_02: '3'
    split: null
    variables:
    - e
  text:
    numbers:
      shape:
      - 48
      target: __ __ __  0 __ __ __ __ __  1 __ __ __ __ __ __ __ __ __ __ __ __ __  2
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'isabel uploaded 2 pictures from her phone and 4 from her camera to facebook
      . if she sorted the pic ##s into 3 different albums with the same amount of
      pic ##s in each album , how many pictures were in each of the albums ?'
    snippets:
      shape:
      - 3
      - 15
      target:
      - isabel uploaded 2 pictures from her phone and 4 from
      - uploaded 2 pictures from her phone and 4 from her camera to facebook . if
      - 'if she sorted the pic ##s into 3 different albums with the same amount of'
    tokens:
      shape:
      - 48
      target: '[CLS] isabel uploaded 2 pictures from her phone and 4 from her camera
        to facebook . if she sorted the pic ##s into 3 different albums with the same
        amount of pic ##s in each album , how many pictures were in each of the albums
        ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 12
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_01, R_00) R_02: =(N_02, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of balls in every bag
      N_02:
      - the total number of balls
      X_00:
      - the number of bags needed
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - number of balls each bag contains
      - the number of balls every bag can contain
      - the number of balls in one bag
      N_02:
      - number of balls haley has
      - the number of balls haley has
      - the total number of balls
      X_00:
      - the number of bags that will be used
      - the number of bags that will be used
      - the total number of bags needed
  info:
    answers:
    - b: '9'
    item_id: 60f9186c90be09b72239f15f
    numbers:
      N_00: '1'
      N_01: '4'
      N_02: '36'
    split: null
    variables:
    - b
  text:
    numbers:
      shape:
      - 48
      target: __  0 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __  1 __ __ __ __  2 __ __ __ __ __ __ __ __ __ __
    raw: a large bag of balls was kept under haley ' s bed . her mom placed the balls
      in bags for children in foster homes . if every bag can contain 4 balls and
      haley has 36 balls , how many bags will be used ?
    snippets:
      shape:
      - 3
      - 15
      target:
      - a large bag of balls was kept under
      - homes . if every bag can contain 4 balls and haley has 36 balls ,
      - can contain 4 balls and haley has 36 balls , how many bags will be
    tokens:
      shape:
      - 48
      target: '[CLS] a large bag of balls was kept under haley '' s bed . her mom
        placed the balls in bags for children in foster homes . if every bag can contain
        4 balls and haley has 36 balls , how many bags will be used ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: *(N_01, R_00) R_03: *(N_02,
      R_01) R_04: +(R_02, R_03) R_05: =(N_05, R_04) R_06: +(R_00, R_01) R_07: =(N_04,
      R_06) R_08: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the admission fee for a child
      N_02:
      - the admission fee for the park
      N_04:
      - the total number of people entered
      N_05:
      - the total receipt of the admission fee for children
      X_00:
      - the number of children admitted
      X_01:
      - the number of adults admitted
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the cost for a child ticket
      - the admission fee at an amusement park for one child
      - the admission fee for a child
      N_02:
      - the cost for an adult ticket
      - the admission fee at an amusement park for one adult
      - the admission fee for an adult
      N_04:
      - the number of children and adults entering the park
      - the total number of people
      - the total number of people
      N_05:
      - the total admission fees collected in dollars
      - the total amount of the admission fees
      - the total amount of the admission fees
      X_00:
      - the number of children attended
      - the number of children
      - the number of children
      X_01:
      - the number of adults attended
      - the number of adults
      - the number of adults
  info:
    answers:
    - a: '135'
      c: '180'
    item_id: 604cc852117d71c492a62b3d
    numbers:
      N_00: '1'
      N_01: '1.50000000000000'
      N_02: '4'
      N_03: '1'
      N_04: '315'
      N_05: '810'
    split: null
    variables:
    - c
    - a
  text:
    numbers:
      shape:
      - 55
      target: __ __ __ __ __  0 __ __ __  1  1  1 __ __ __ __  2 __ __ __ __ __  3
        __ __ __  4 __ __ __ __ __ __ __ __ __ __  5  5 __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __
    raw: 'the admission fee at an amusement park is 1 . 5 dollars for children and
      4 dollars for adults . on a certain day , 315 people entered the park , and
      the admission fees collected 81 ##0 dollars . how many children and adults were
      admitted ?'
    snippets:
      shape:
      - 6
      - 15
      target:
      - the admission fee at an amusement park is 1 . 5 dollars
      - admission fee at an amusement park is 1 . 5 dollars for children and 4
      - 1 . 5 dollars for children and 4 dollars for adults . on a certain
      - and 4 dollars for adults . on a certain day , 315 people entered the
      - adults . on a certain day , 315 people entered the park , and the
      - 'park , and the admission fees collected 81 ##0 dollars . how many children
        and'
    tokens:
      shape:
      - 55
      target: '[CLS] the admission fee at an amusement park is 1 . 5 dollars for children
        and 4 dollars for adults . on a certain day , 315 people entered the park
        , and the admission fees collected 81 ##0 dollars . how many children and
        adults were admitted ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(R_00, R_01) R_03: =(N_02,
      R_02) R_04: /(N_05, 100) R_05: *(R_00, R_04) R_06: /(N_07, 100) R_07: *(R_01,
      R_06) R_08: +(R_05, R_07) R_09: /(N_03, 100) R_10: *(N_02, R_09) R_11: =(R_08,
      R_10) R_12: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the amount of the mixed sugar solution
      N_03:
      - the concentration of the mixed sugar solution
      N_05:
      - the concentration of the first sugar solution
      N_07:
      - the concentration of the second sugar solution
      N_08:
      - the concentration of the first sugar solution
      N_09:
      - the concentration of the second sugar solution
      X_00:
      - the amount of the first sugar solution
      X_01:
      - the amount of the second sugar solution
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the total volume of the mixed solution of the first solution and the second
        solution
      - the number of ounces of sugar solution the pastry chef created
      - the amount of the 34 % mixed sugar solution
      N_03:
      - the percentage of sugar in the mixed solution of the first solution and the
        second solution
      - the concentration of the mixed sugar solution
      - the concentration of the 34 % mixed sugar solution
      N_05:
      - the percentage of sugar in the first solution
      - the concentration of the first kind of sugar solution
      - the concentration of the 20 % sugar solution
      N_07:
      - the percentage of sugar in the second solution
      - the concentration of the second kind of sugar solution
      - the concentration of the 40 % sugar solution
      N_08:
      - the percentage of sugar in the first solution
      - the concentration of the first kind of sugar solution
      - the concentration of the 20 % sugar solution
      N_09:
      - the percentage of sugar in the second solution
      - the concentration of the second kind of sugar solution
      - the concentration of the 40 % sugar solution
      X_00:
      - the volume of the first solution
      - the number of ounces of the first kind of sugar solution
      - the amount of the 20 % sugar solution
      X_01:
      - the volume of the second solution
      - the number of ounces of the second kind of sugar solution
      - the amount of the 40 % sugar solution
  info:
    answers:
    - s1: '15'
      s2: '35'
    item_id: 604cc853117d71c492a62f35
    numbers:
      N_00: '1'
      N_01: '1'
      N_02: '50'
      N_03: '34'
      N_04: '1'
      N_05: '20'
      N_06: '1'
      N_07: '40'
      N_08: '20'
      N_09: '40'
    split: null
    variables:
    - s1
    - s2
  text:
    numbers:
      shape:
      - 55
      target: __  0 __ __ __  1  2 __ __ __ __ __ __  3 __ __ __  4  5 __ __ __ __  6  7
        __ __ __ __ __ __ __ __  8 __ __ __ __ __ __ __ __  9 __ __ __ __ __ __ __
        __ __ __ __ __
    raw: a pastry chef created a 50 - ounce sugar solution that was 34 % sugar from
      a 20 % sugar solution and a 40 % sugar solution . how much of the 20 % sugar
      solution and how much of the 40 % sugar solution were used ?
    snippets:
      shape:
      - 10
      - 15
      target:
      - a pastry chef created a 50 - ounce
      - a pastry chef created a 50 - ounce sugar solution that was
      - a pastry chef created a 50 - ounce sugar solution that was 34
      - 50 - ounce sugar solution that was 34 % sugar from a 20 % sugar
      - solution that was 34 % sugar from a 20 % sugar solution and a 40
      - that was 34 % sugar from a 20 % sugar solution and a 40 %
      - from a 20 % sugar solution and a 40 % sugar solution . how much
      - a 20 % sugar solution and a 40 % sugar solution . how much of
      - sugar solution . how much of the 20 % sugar solution and how much of
      - sugar solution and how much of the 40 % sugar solution were used ?
    tokens:
      shape:
      - 55
      target: '[CLS] a pastry chef created a 50 - ounce sugar solution that was 34
        % sugar from a 20 % sugar solution and a 40 % sugar solution . how much of
        the 20 % sugar solution and how much of the 40 % sugar solution were used
        ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_03, R_00) R_02: +(N_00, N_02) R_03: =(R_01,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of tickets won
      N_02:
      - the number of tickets he won playing a piece of skee ball
      N_03:
      - the number of tickets for a piece of candy
      X_00:
      - the number of tickets he could buy
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of tickets won by playing'whack a mole '
      - the number of tickets for'whack a mole '
      - the number of tickets won by playing'whack a mole '
      N_02:
      - the number of tickets won by playing'skee ball '
      - the number of tickets for'skee ball. '
      - the number of tickets earned by playing'skee ball '
      N_03:
      - the number of tickets needed to buy the candy
      - the number of tickets for a candy
      - the number of tickets one candy costs
      X_00:
      - the number of candy that can be bought
      - the number of candies obtained by all tickets
      - the total number of candies
  info:
    answers:
    - c: '7'
    item_id: 60f9186c90be09b72239eefd
    numbers:
      N_00: '33'
      N_01: '1'
      N_02: '9'
      N_03: '6'
      N_04: '1'
    split: null
    variables:
    - c
  text:
    numbers:
      shape:
      - 55
      target: __ __ __ __ __ __ __ __ __  0 __ __ __ __ __ __  1 __ __ __  2 __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __  3 __  4 __ __ __ __ __ __ __
        __ __ __ __ __ __ __
    raw: 'while playing at the arcade , frank won 33 tickets playing '' w ##ha ##ck
      a mole '' and 9 tickets playing '' sk ##ee ball . '' if he was trying to buy
      candy that cost 6 tickets a piece , how many could he buy ?'
    snippets:
      shape:
      - 5
      - 15
      target:
      - 'playing at the arcade , frank won 33 tickets playing '' w ##ha ##ck a'
      - '33 tickets playing '' w ##ha ##ck a mole '' and 9 tickets playing '''
      - 'w ##ha ##ck a mole '' and 9 tickets playing '' sk ##ee ball .'
      - was trying to buy candy that cost 6 tickets a piece , how many could
      - to buy candy that cost 6 tickets a piece , how many could he buy
    tokens:
      shape:
      - 55
      target: '[CLS] while playing at the arcade , frank won 33 tickets playing ''
        w ##ha ##ck a mole '' and 9 tickets playing '' sk ##ee ball . '' if he was
        trying to buy candy that cost 6 tickets a piece , how many could he buy ?
        [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: *(N_00, R_00) R_03: *(N_01,
      R_01) R_04: +(R_02, R_03) R_05: *(N_03, N_04) R_06: =(R_04, R_05) R_07: +(R_00,
      R_01) R_08: =(N_03, R_07) R_09: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the cost of a box of red beads
      N_01:
      - the cost per box
      N_03:
      - the total number of boxes
      N_04:
      - the cost of the box per box
      X_00:
      - the number of boxes
      X_01:
      - the number of boxes
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the price of a box of red beads
      - the cost of red beads per box
      - the cost of red beads per box
      N_01:
      - the price of a box of yellow beads
      - the cost of yellow beads per box
      - the cost of yellow beads per box
      N_03:
      - the number of boxes of the mixture of beads
      - the number of boxes of beads to make
      - the number of total boxes
      N_04:
      - the price of a box of the mixture
      - the targeted cost of the beads per box
      - the average cost of beads per box
      X_00:
      - the number of boxes of red beads
      - the number of red bead boxes
      - the number of red beads boxes
      X_01:
      - the number of boxes of yellow beads
      - the number of yellow bead boxes
      - the number of yellow beads boxes
  info:
    answers:
    - r: '4'
      y: '6'
    item_id: 604cc853117d71c492a62e6a
    numbers:
      N_00: '1.30000000000000'
      N_01: '2.00000000000000'
      N_02: '1'
      N_03: '10'
      N_04: '1.72000000000000'
    split: null
    variables:
    - r
    - y
  text:
    numbers:
      shape:
      - 55
      target: __ __ __ __ __  0  0  0 __ __ __ __ __ __ __ __ __ __ __ __  1  1  1  2
        __ __ __ __ __ __ __ __ __ __ __ __ __  3 __ __ __ __ __  4  4  4 __ __ __
        __ __ __ __ __ __
    raw: red beads cost $ 1 . 30 per box . they are mixed with yellow beads that cost
      $ 2 . 00 a box . how many boxes of each color must be used to make 10 boxes
      of beads costing $ 1 . 72 per box ?
    snippets:
      shape:
      - 5
      - 15
      target:
      - red beads cost $ 1 . 30 per box . they are
      - mixed with yellow beads that cost $ 2 . 00 a box . how many
      - beads that cost $ 2 . 00 a box . how many boxes of each
      - each color must be used to make 10 boxes of beads costing $ 1 .
      - make 10 boxes of beads costing $ 1 . 72 per box ?
    tokens:
      shape:
      - 55
      target: '[CLS] red beads cost $ 1 . 30 per box . they are mixed with yellow
        beads that cost $ 2 . 00 a box . how many boxes of each color must be used
        to make 10 boxes of beads costing $ 1 . 72 per box ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_03, R_00) R_02: +(N_00, N_02) R_03: =(R_01,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of tickets ned won
      N_02:
      - the number of tickets ned won
      N_03:
      - the number of tickets for a piece of candy
      X_00:
      - the number of tickets he could buy
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of tickets won by playing'whack a mole '
      - the number of tickets for'whack a mole '
      - the number of tickets won by playing'whack a mole '
      N_02:
      - the number of tickets won by playing'skee ball '
      - the number of tickets for'skee ball. '
      - the number of tickets earned by playing'skee ball '
      N_03:
      - the number of tickets needed to buy the candy
      - the number of tickets for a candy
      - the number of tickets one candy costs
      X_00:
      - the number of candy that can be bought
      - the number of candies obtained by all tickets
      - the total number of candies
  info:
    answers:
    - c: '5'
    item_id: 60f9186c90be09b72239eb17
    numbers:
      N_00: '26'
      N_01: '1'
      N_02: '19'
      N_03: '9'
      N_04: '1'
    split: null
    variables:
    - c
  text:
    numbers:
      shape:
      - 55
      target: __ __ __ __ __ __ __ __ __  0 __ __ __ __ __ __  1 __ __ __  2 __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __  3 __  4 __ __ __ __ __ __ __
        __ __ __ __ __ __ __
    raw: 'while playing at the arcade , ned won 26 tickets playing '' w ##ha ##ck
      a mole '' and 19 tickets playing '' sk ##ee ball . '' if he was trying to buy
      candy that cost 9 tickets a piece , how many could he buy ?'
    snippets:
      shape:
      - 5
      - 15
      target:
      - 'playing at the arcade , ned won 26 tickets playing '' w ##ha ##ck a'
      - '26 tickets playing '' w ##ha ##ck a mole '' and 19 tickets playing '''
      - 'w ##ha ##ck a mole '' and 19 tickets playing '' sk ##ee ball .'
      - was trying to buy candy that cost 9 tickets a piece , how many could
      - to buy candy that cost 9 tickets a piece , how many could he buy
    tokens:
      shape:
      - 55
      target: '[CLS] while playing at the arcade , ned won 26 tickets playing '' w
        ##ha ##ck a mole '' and 19 tickets playing '' sk ##ee ball . '' if he was
        trying to buy candy that cost 9 tickets a piece , how many could he buy ?
        [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_03, R_00) R_02: +(N_00, N_02) R_03: =(R_01,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of tickets edward won
      N_02:
      - the number of tickets he won playing a piece of skee ball
      N_03:
      - the number of tickets he won playing a piece of candy
      X_00:
      - the total number of tickets he could buy
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of tickets from'whack a mole '
      - the number of tickets won by playing'whack a mole '
      - the number of tickets won by playing'whack a mole '
      N_02:
      - the number of tickets from'skee ball '
      - the number of tickets won by playing'skee ball '
      - the number of tickets earned by playing'skee ball '
      N_03:
      - the number of tickets to buy a candy
      - the number of tickets needed to buy the candy
      - the number of tickets one candy costs
      X_00:
      - the number of candies bought
      - the number of candy that can be bought
      - the total number of candies
  info:
    answers:
    - c: '2'
    item_id: 60f9186c90be09b72239f20f
    numbers:
      N_00: '3'
      N_01: '1'
      N_02: '5'
      N_03: '4'
      N_04: '1'
    split: null
    variables:
    - c
  text:
    numbers:
      shape:
      - 55
      target: __ __ __ __ __ __ __ __ __  0 __ __ __ __ __ __  1 __ __ __  2 __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __  3 __  4 __ __ __ __ __ __ __
        __ __ __ __ __ __ __
    raw: 'while playing at the arcade , edward won 3 tickets playing '' w ##ha ##ck
      a mole '' and 5 tickets playing '' sk ##ee ball . '' if he was trying to buy
      candy that cost 4 tickets a piece , how many could he buy ?'
    snippets:
      shape:
      - 5
      - 15
      target:
      - 'playing at the arcade , edward won 3 tickets playing '' w ##ha ##ck a'
      - '3 tickets playing '' w ##ha ##ck a mole '' and 5 tickets playing '''
      - 'w ##ha ##ck a mole '' and 5 tickets playing '' sk ##ee ball .'
      - was trying to buy candy that cost 4 tickets a piece , how many could
      - to buy candy that cost 4 tickets a piece , how many could he buy
    tokens:
      shape:
      - 55
      target: '[CLS] while playing at the arcade , edward won 3 tickets playing ''
        w ##ha ##ck a mole '' and 5 tickets playing '' sk ##ee ball . '' if he was
        trying to buy candy that cost 4 tickets a piece , how many could he buy ?
        [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(R_00, R_01) R_03: =(N_00,
      R_02) R_04: *(N_01, R_01) R_05: =(R_00, R_04) R_06: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the distance between your house and your mother
      N_01:
      - the ratio of the distance from your house to your house
      X_00:
      - the distance from your house's house's house
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the distance between your house and your mother's house
      - the sum of the distance between you and your house and the distance between
        you and your mother's house
      - the distance between you and your mother's house
      N_01:
      - the ratio of the distance from your house to the distance from your mother's
        house
      - the ratio of the distance between you and your house to the distance between
        you and your mother's house
      - a number in the phrase " twice as far from your house "
      X_00:
      - the distance from your house
      - the distance between you and your house
      - the distance between you and your house
      X_01:
      - the distance from your mother's house
      - the distance between you and your mother's house
      - the distance between you and your mother's home
  info:
    answers:
    - f: '156'
      t: '78'
    item_id: 604cc853117d71c492a62c6c
    numbers:
      N_00: '234'
      N_01: '2'
      N_02: '10'
    split: null
    variables:
    - f
    - t
  text:
    numbers:
      shape:
      - 55
      target: __ __ __ __ __ __ __ __ __ __ __ __  0 __ __ __ __ __ __ __  1 __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __  2 __
        __ __ __ __ __ __ __
    raw: you are traveling to your mother ' s house that is 234 miles away . if you
      are currently twice as far from your house as you are from your mother ' s house
      , how far have you traveled ? round to the nearest tenth mile .
    snippets:
      shape:
      - 3
      - 15
      target:
      - your mother ' s house that is 234 miles away . if you are currently
      - miles away . if you are currently twice as far from your house as you
      - you traveled ? round to the nearest tenth mile .
    tokens:
      shape:
      - 55
      target: '[CLS] you are traveling to your mother '' s house that is 234 miles
        away . if you are currently twice as far from your house as you are from your
        mother '' s house , how far have you traveled ? round to the nearest tenth
        mile . [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_02) R_02: +(N_03, R_01) R_03: =(R_00,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the cost of toy cars she bought in dollars
      N_02:
      - the cost of a skateboard she bought in dollars
      N_03:
      - the cost of a toy she bought in dollars
      X_00:
      - the total amount of money she spent on toys
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the price of toy cars
      - the cost of toy cars
      - the money that joan spent on toy cars
      N_02:
      - the price of a skateboard
      - the cost of a skateboard
      - the money that joan spent on a skateboard
      N_03:
      - the price of toy trucks
      - the cost of toy trucks
      - the money that joan spent on toy trucks
      X_00:
      - the total cost of toys bought
      - the total cost of the toys
      - the money that joan spent on toys in total
  info:
    answers:
    - t: '25.6200000000000'
    item_id: 60f9186c90be09b72239ee24
    numbers:
      N_00: '14.8800000000000'
      N_01: '1'
      N_02: '4.88000000000000'
      N_03: '5.86000000000000'
      N_04: '14.5500000000000'
    split: null
    variables:
    - t
  text:
    numbers:
      shape:
      - 55
      target: __ __ __ __ __ __ __  0  0  0 __  1 __ __ __ __  2  2  2 __ __ __ __
        __ __ __  3  3  3 __ __ __ __  4  4  4 __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __
    raw: 'joan bought toy cars for $ 14 . 88 , a skate ##board for $ 4 . 88 , and
      got toy trucks for $ 5 . 86 . she spent $ 14 . 55 on pants . in total , how
      much did joan spend on toys ?'
    snippets:
      shape:
      - 5
      - 15
      target:
      - 'joan bought toy cars for $ 14 . 88 , a skate ##board for'
      - 'cars for $ 14 . 88 , a skate ##board for $ 4 . 88'
      - '88 , a skate ##board for $ 4 . 88 , and got toy trucks'
      - ', and got toy trucks for $ 5 . 86 . she spent $ 14'
      - 5 . 86 . she spent $ 14 . 55 on pants . in total
    tokens:
      shape:
      - 55
      target: '[CLS] joan bought toy cars for $ 14 . 88 , a skate ##board for $ 4
        . 88 , and got toy trucks for $ 5 . 86 . she spent $ 14 . 55 on pants . in
        total , how much did joan spend on toys ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the amount of green peppers bought
      N_01:
      - the amount of red peppers
      X_00:
      - the total amount of peppers
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of pounds of green pepper the restaurant bought
      - the weight of green peppers
      - the amounts of green peppers bought by dale's vegetarian restaurant
      N_01:
      - the number of pounds of red peppers the restaurant bought
      - the weight of red peppers
      - the amounts of red peppers bought by dale's vegetarian restaurant
      X_00:
      - the total number of pounds of peppers the restaurant bought
      - the weight of green peppers and red peppers
      - the total amounts of peppers bought by dale's vegetarian restaurant
  info:
    answers:
    - p: '5.66666666666667'
    item_id: 60f9186c90be09b72239eac0
    numbers:
      N_00: '2.83333333333333'
      N_01: '2.83333333333333'
    split: null
    variables:
    - p
  text:
    numbers:
      shape:
      - 55
      target: __ __ __ __ __ __ __  0  0  0  0  0  0  0  0  0  0 __ __ __ __ __  1  1  1  1  1  1  1  1  1  1
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'dale '' s vegetarian restaurant bought 2 . 83 ##33 ##33 ##33 ##33 ##33 ##33
      ##35 pounds of green peppers and 2 . 83 ##33 ##33 ##33 ##33 ##33 ##33 ##35 pounds
      of red peppers . how many pounds of peppers did dale '' s vegetarian restaurant
      buy in all ?'
    snippets:
      shape:
      - 2
      - 15
      target:
      - 'dale '' s vegetarian restaurant bought 2 . 83 ##33 ##33 ##33 ##33 ##33'
      - '##33 ##35 pounds of green peppers and 2 . 83 ##33 ##33 ##33 ##33 ##33'
    tokens:
      shape:
      - 55
      target: '[CLS] dale '' s vegetarian restaurant bought 2 . 83 ##33 ##33 ##33
        ##33 ##33 ##33 ##35 pounds of green peppers and 2 . 83 ##33 ##33 ##33 ##33
        ##33 ##33 ##35 pounds of red peppers . how many pounds of peppers did dale
        '' s vegetarian restaurant buy in all ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_06, N_07) R_02: +(N_08, R_01) R_03: +(N_09,
      R_02) R_04: +(R_00, R_03) R_05: /(R_04, N_04) R_06: =(N_03, R_05) R_07: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the points for all quiz
      N_03:
      - the points you want to average
      N_05:
      - the number of quizzes you already took
      N_06:
      - the number of points for a quiz
      N_07:
      - the score of the second quiz
      N_08:
      - the number of points for all quiz
      N_09:
      - the number of quizzes you took for your final quiz
      X_00:
      - the number of your score
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_03:
      - the desired average score
      - the average number of points for all quizzes
      - the average point for 5 quizzes you want
      N_04:
      - the total number of quizzes
      - the number of quizzes
      - the number of quizzes
      N_06:
      - the score of the first quiz
      - the number of points at first quiz
      - the score of quiz 1
      N_07:
      - the score of the second quiz
      - the number of points at second quiz
      - the score of quiz 2
      N_08:
      - the score of the third quiz
      - the number of points at third quiz
      - the score of quiz 3
      N_09:
      - the score of the fourth quiz
      - the number of points at fourth quiz
      - the score of quiz 4
      X_00:
      - the score of the last quiz
      - the number of points at fifth quiz
      - the score of final quiz to reach your average
  info:
    answers:
    - l: '36'
    item_id: 60f9186c90be09b72239ed38
    numbers:
      N_00: '1'
      N_01: '40'
      N_02: '1'
      N_03: '35'
      N_04: '5'
      N_05: '4'
      N_06: '32'
      N_07: '38'
      N_08: '36'
      N_09: '33'
    split: null
    variables:
    - l
  text:
    numbers:
      shape:
      - 55
      target: __  0 __ __ __  1 __ __ __ __  2  3 __ __ __ __  4 __ __ __ __ __ __  5
        __ __ __ __ __  6 __  7 __  8 __ __  9 __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __
    raw: 'a quiz is worth 40 points . you want a 35 point average for all 5 quiz ##zes
      . you already took 4 quiz ##zes with scores of 32 , 38 , 36 , and 33 . what
      must your score be on your final quiz to reach your average ?'
    snippets:
      shape:
      - 10
      - 15
      target:
      - a quiz is worth 40 points . you
      - a quiz is worth 40 points . you want a 35 point
      - is worth 40 points . you want a 35 point average for all 5 quiz
      - 'worth 40 points . you want a 35 point average for all 5 quiz ##zes'
      - 'want a 35 point average for all 5 quiz ##zes . you already took 4'
      - '5 quiz ##zes . you already took 4 quiz ##zes with scores of 32 ,'
      - 'took 4 quiz ##zes with scores of 32 , 38 , 36 , and 33'
      - 'quiz ##zes with scores of 32 , 38 , 36 , and 33 . what'
      - with scores of 32 , 38 , 36 , and 33 . what must your
      - 32 , 38 , 36 , and 33 . what must your score be on
    tokens:
      shape:
      - 55
      target: '[CLS] a quiz is worth 40 points . you want a 35 point average for all
        5 quiz ##zes . you already took 4 quiz ##zes with scores of 32 , 38 , 36 ,
        and 33 . what must your score be on your final quiz to reach your average
        ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: -(R_00, N_02) R_02: =(N_03, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the amount of grain spilled
      N_03:
      - the amount of grain spilled into the water
      X_00:
      - the amount of grain spilled
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the tons of grain have spilled into the water
      - the amount of grain that have spilled
      - the amount of grain spilled into the water from the ship
      N_03:
      - the remaining tons of grain remain onboard
      - the amount of grain that remain onboard
      - the amount of grain remaining onboard
      X_00:
      - the originally contained tons of grain
      - the amount of grain that the ship originally contained
      - the total amount of grain that was on the ship
  info:
    answers:
    - w: '50870'
    item_id: 60f9186c90be09b72239efdb
    numbers:
      N_00: '1'
      N_01: '1'
      N_02: '49952'
      N_03: '918'
    split: null
    variables:
    - w
  text:
    numbers:
      shape:
      - 55
      target: __  0 __ __ __ __ __ __  1 __ __ __ __ __ __ __ __ __ __ __  2  2  2
        __ __ __ __ __ __ __ __ __ __  3  3 __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __
    raw: 'a ship full of grain crashes into a coral reef . by the time the ship is
      fixed , 49 ##9 ##52 tons of grain have spilled into the water . only 91 ##8
      tons of grain remain onboard . how many tons of grain did the ship originally
      contain ?'
    snippets:
      shape:
      - 4
      - 15
      target:
      - a ship full of grain crashes into a
      - a ship full of grain crashes into a coral reef . by the time the
      - 'the time the ship is fixed , 49 ##9 ##52 tons of grain have spilled'
      - 'have spilled into the water . only 91 ##8 tons of grain remain onboard .'
    tokens:
      shape:
      - 55
      target: '[CLS] a ship full of grain crashes into a coral reef . by the time
        the ship is fixed , 49 ##9 ##52 tons of grain have spilled into the water
        . only 91 ##8 tons of grain remain onboard . how many tons of grain did the
        ship originally contain ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(R_00, R_01) R_03: =(N_00,
      R_02) R_04: /(N_01, 100) R_05: *(R_00, R_04) R_06: /(N_02, 100) R_07: *(R_01,
      R_06) R_08: +(R_05, R_07) R_09: =(N_03, R_08) R_10: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the total amount of money invested
      N_01:
      - the interest rate of the first kind
      N_02:
      - the interest rate of the second kind
      N_03:
      - the total amount of interest gained
      N_05:
      - the interest rate of the first kind
      N_06:
      - the interest rate of the second kind
      X_00:
      - the amount of money invested in the first kind
      X_01:
      - the amount of money invested in the second kind
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the total number of dollars invested
      - amount of total dollars invested
      - the total invested dollars
      N_01:
      - the annual interest rate of the first investment
      - annual interest of the first kind of interest
      - the interest rate of the first part of invested dollars
      N_02:
      - the annual interest rate of the second investment
      - annual interest of the second kind of interest
      - the interest rate of the second part of invested dollar
      N_03:
      - the total number of dollars received as interest
      - the amount of interest received after one year
      - the total interest dollars
      N_05:
      - the annual interest rate of the first investment
      - annual interest of the first kind of interest
      - the interest rate of the first part of invested dollars
      N_06:
      - the annual interest rate of the second investment
      - annual interest of the second kind of interest
      - the interest rate of the second part of invested dollar
      X_00:
      - the number of dollars invested at 6 %
      - amount of money invested in the first interest
      - the first part of invested dollars
      X_01:
      - the number of dollars invested at 9 %
      - amount of money invested in the second interest
      - the second part of invested dollars
  info:
    answers:
    - i1: '7200'
      i2: '2800'
    item_id: 604cc852117d71c492a62b16
    numbers:
      N_00: '10000'
      N_01: '6'
      N_02: '9'
      N_03: '684'
      N_04: '1'
      N_05: '6'
      N_06: '9'
    split: null
    variables:
    - i1
    - i2
  text:
    numbers:
      shape:
      - 55
      target: __ __ __ __  0  0  0 __ __ __ __  1 __ __ __ __ __ __ __  2 __ __ __
        __ __ __ __  3  3 __ __ __ __  4 __ __ __ __ __ __ __ __  5 __ __ __ __ __  6
        __ __ __ __ __ __
    raw: 'suppose you invested 10 , 000 dollars , part at 6 % annual interest and
      the rest at 9 % annual interest . if you received 68 ##4 dollars in interest
      after one year , how much did you invest at 6 % annual interest and at 9 % annual
      interest ?'
    snippets:
      shape:
      - 7
      - 15
      target:
      - suppose you invested 10 , 000 dollars , part at 6
      - 10 , 000 dollars , part at 6 % annual interest and the rest at
      - '% annual interest and the rest at 9 % annual interest . if you received'
      - '% annual interest . if you received 68 ##4 dollars in interest after one
        year'
      - 'received 68 ##4 dollars in interest after one year , how much did you invest'
      - ', how much did you invest at 6 % annual interest and at 9 %'
      - at 6 % annual interest and at 9 % annual interest ?
    tokens:
      shape:
      - 55
      target: '[CLS] suppose you invested 10 , 000 dollars , part at 6 % annual interest
        and the rest at 9 % annual interest . if you received 68 ##4 dollars in interest
        after one year , how much did you invest at 6 % annual interest and at 9 %
        annual interest ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: *(N_00, R_00) R_03: *(N_01,
      R_01) R_04: =(R_02, R_03) R_05: +(R_00, R_01) R_06: =(N_02, R_05) R_07: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the speed of juan
      N_01:
      - the speed of juan
      N_02:
      - the total travel time
      X_00:
      - the time juan spent to work to work
      X_01:
      - the time juan spent to work to work
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the speed of juan driving to work
      - the average speed of juan going to work
      - the speed of the driving to work
      N_01:
      - the speed returning home
      - the average speed of juan returning home
      - the speed of the driving to return
      N_02:
      - the total travel time
      - the total number of hours juan traveled
      - the hours of total travel time
      X_00:
      - the time traveled to work
      - the number of hours it took for juan to go to work
      - the hours of driving to work
      X_01:
      - the time traveled returning from work
      - the number of hours it took for juan to return home
      - the hours of driving to return
  info:
    answers:
    - t1: '0.916666666666667'
      t2: '1.33333333333333'
    item_id: 604cc853117d71c492a630bd
    numbers:
      N_00: '22'
      N_01: '32'
      N_02: '2.25000000000000'
      N_03: '1'
    split: null
    variables:
    - t2
    - t1
  text:
    numbers:
      shape:
      - 55
      target: __ __ __ __ __ __ __ __ __ __ __ __ __  0 __ __ __ __ __ __ __ __ __  1
        __ __ __ __ __ __ __ __ __  2  2  2 __ __ __ __ __  3 __ __ __ __ __ __ __
        __ __ __ __ __ __
    raw: juan drives to work . because of traffic conditions , he averages 22 miles
      per hour . he returns home , averaging 32 miles per hour . the total travel
      time is 2 . 25 hours . write and solve an equation to find the time juan spends
      driving to work .
    snippets:
      shape:
      - 4
      - 15
      target:
      - because of traffic conditions , he averages 22 miles per hour . he returns
        home
      - hour . he returns home , averaging 32 miles per hour . the total travel
      - hour . the total travel time is 2 . 25 hours . write and solve
      - . 25 hours . write and solve an equation to find the time juan spends
    tokens:
      shape:
      - 55
      target: '[CLS] juan drives to work . because of traffic conditions , he averages
        22 miles per hour . he returns home , averaging 32 miles per hour . the total
        travel time is 2 . 25 hours . write and solve an equation to find the time
        juan spends driving to work . [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: -(N_01, N_03) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the length of the white line
      N_03:
      - the length of the white line
      X_00:
      - the value of the length of the white line minus the length of the blue line
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the inch length of the white line
      - the length of a white line
      - the length of the white line
      N_03:
      - the inch length of the blue line
      - the length of a blue line
      - the length of the blue line
      X_00:
      - the difference in inch length between the white and blue line
      - the value of the length of a white line minus the length of a blue line
      - the value of the length of the white line minus the length of the blue line
  info:
    answers:
    - d: '4.33333333333333'
    item_id: 60f9186c90be09b72239ece8
    numbers:
      N_00: '1'
      N_01: '7.66666666666667'
      N_02: '1'
      N_03: '3.33333333333333'
    split: null
    variables:
    - d
  text:
    numbers:
      shape:
      - 55
      target: __ __ __  0 __ __ __ __  1  1  1  1  1  1  1  1  1  1 __ __ __ __ __
        __  2 __ __ __ __  3  3  3  3  3  3  3  3  3  3 __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __
    raw: 'ezra drew a white line that was 7 . 66 ##66 ##66 ##66 ##66 ##66 ##66 ##7
      inches long . then he drew a blue line that was 3 . 333 ##33 ##33 ##33 ##33
      ##33 ##33 ##5 inches long . how much longer was the white line than the blue
      line ?'
    snippets:
      shape:
      - 4
      - 15
      target:
      - ezra drew a white line that was 7 . 66
      - 'ezra drew a white line that was 7 . 66 ##66 ##66 ##66 ##66 ##66'
      - '##7 inches long . then he drew a blue line that was 3 . 333'
      - 'he drew a blue line that was 3 . 333 ##33 ##33 ##33 ##33 ##33'
    tokens:
      shape:
      - 55
      target: '[CLS] ezra drew a white line that was 7 . 66 ##66 ##66 ##66 ##66 ##66
        ##66 ##7 inches long . then he drew a blue line that was 3 . 333 ##33 ##33
        ##33 ##33 ##33 ##33 ##5 inches long . how much longer was the white line than
        the blue line ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(R_00, R_01) R_03: =(N_00,
      R_02) R_04: /(R_00, R_01) R_05: /(N_01, N_02) R_06: =(R_04, R_05) R_07: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the minutes spent on aerobics per week
      N_01:
      - the numerator of the ratio of time spent on aerobics training to time spent
        on weight training
      N_02:
      - the denominator of the ratio of time spent on aerobics training to time spent
        on weight training
      X_00:
      - the minutes spent on aerobics per week
      X_01:
      - the minutes spent on weight training per week
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the total number of minutes spent on exercising
      - the amount of minutes kay spends exercising
      - the minutes per week she spends on exercising
      N_01:
      - the numerator of the ratio of time spent on aerobics to time spent on weight
        training
      - the numerator of the ratio of time spent on aerobics to time spent on weight
        training
      - the numerator of the ratio of time spent on aerobics to time spent on weight
        training
      N_02:
      - the denominator of the ratio of time spent on aerobics to time spent on weight
        training
      - the denominator of the ratio of time spent on aerobics to time spent on weight
        training
      - the denominator of the ratio of time spent on aerobics to time spent on weight
        training
      X_00:
      - the number of minutes spent on aerobics
      - the number of minutes spent on aerobics
      - the minutes per week spent on aerobics
      X_01:
      - the number of minutes spent on weight training
      - the number of minutes spent on weight training
      - the minutes per week spent on weight training
  info:
    answers:
    - a: '150'
      w: '100'
    item_id: 604cc852117d71c492a62bdf
    numbers:
      N_00: '250'
      N_01: '3'
      N_02: '2'
    split: null
    variables:
    - a
    - w
  text:
    numbers:
      shape:
      - 55
      target: __ __ __  0 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __  1 __  2 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __
    raw: 'kay spends 250 minutes per week exercising . her ratio of time spent on
      aero ##bic ##s to time spent on weight training is 3 to 2 . how many minutes
      per week does she spend on aero ##bic ##s ? how many minutes per week does she
      spend on weight training ?'
    snippets:
      shape:
      - 3
      - 15
      target:
      - kay spends 250 minutes per week exercising . her ratio
      - to time spent on weight training is 3 to 2 . how many minutes per
      - spent on weight training is 3 to 2 . how many minutes per week does
    tokens:
      shape:
      - 55
      target: '[CLS] kay spends 250 minutes per week exercising . her ratio of time
        spent on aero ##bic ##s to time spent on weight training is 3 to 2 . how many
        minutes per week does she spend on aero ##bic ##s ? how many minutes per week
        does she spend on weight training ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: *(N_01, R_00) R_03: =(R_01,
      R_02) R_04: +(R_00, R_01) R_05: =(N_02, R_04) R_06: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the ratio of the amount of red paint to the amount of white paint
      N_02:
      - the total amount of the paint
      X_00:
      - the amount of red paint
      X_01:
      - the amount of white paint
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the ratio of the amount of red paint to the amount of white paint
      - the ratio of the number of gallons of red paint to the number of gallons of
        white paint
      - the ratio of the amount of red paint needed to the amount of white paint needed
      N_02:
      - the total amount of red and white paint
      - the sum of the number of gallons of red paint and the number gallons of white
        paint
      - the total number of gallons of bobby's paint
      X_00:
      - the amount of white paint
      - the number of gallons of white paint
      - the number of gallons of white paint needed
      X_01:
      - the amount of red paint
      - the number of gallons of red paint
      - the number of gallons of red paint needed
  info:
    answers:
    - r: '60'
      w: '20'
    item_id: 604cc853117d71c492a63076
    numbers:
      N_00: '1'
      N_01: '3'
      N_02: '80'
    split: null
    variables:
    - w
    - r
  text:
    numbers:
      shape:
      - 55
      target: __ __ __ __ __ __ __ __  0 __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __  1 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __  2 __
        __ __ __ __ __ __ __
    raw: bobby ' s treatment paint store sells a special shade of pink paint which
      is made from red and white paint . the amount of red paint needed is three times
      the amount of white . how much of each kind is needed to make 80 gallons of
      bobby ' s paint .
    snippets:
      shape:
      - 3
      - 15
      target:
      - bobby ' s treatment paint store sells a special shade of pink paint which
        is
      - the amount of red paint needed is three times the amount of white . how
      - of each kind is needed to make 80 gallons of bobby ' s paint .
    tokens:
      shape:
      - 55
      target: '[CLS] bobby '' s treatment paint store sells a special shade of pink
        paint which is made from red and white paint . the amount of red paint needed
        is three times the amount of white . how much of each kind is needed to make
        80 gallons of bobby '' s paint . [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 15
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: /(N_04, 100) R_03: *(N_03,
      R_02) R_04: /(N_05, 100) R_05: *(R_00, R_04) R_06: +(R_03, R_05) R_07: /(N_02,
      100) R_08: *(R_01, R_07) R_09: =(R_06, R_08) R_10: +(N_03, R_00) R_11: =(R_01,
      R_10) R_12: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the density of the mixed solution
      N_03:
      - the volume of the 2 % solution
      N_04:
      - the density of 2 % solution
      N_05:
      - the density of 5 % solution
      N_06:
      - the density of the mixed solution
      N_07:
      - the density of 5 % solution
      X_00:
      - the volume of the 5 % solution
      X_01:
      - the volume of the 5 % solution
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the percentage of minoxidil in the mixed solution of the first solution and
        the second solution
      - the concentration of the mixed solution
      - the concentration of the mixed solution
      N_03:
      - the volume of the first solution
      - the number of milliliters of the first kind of solution
      - the amount of one solution
      N_04:
      - the percentage of minoxidil in the first solution
      - the concentration of the first kind of solution
      - the concentration of one solution
      N_05:
      - the percentage of minoxidil in the second solution
      - the concentration of the second kind of solution
      - the concentration of the other solution
      N_06:
      - the percentage of minoxidil in the mixed solution of the first solution and
        the second solution
      - the concentration of the mixed solution
      - the concentration of the mixed solution
      N_07:
      - the percentage of minoxidil in the second solution
      - the concentration of the second kind of solution
      - the concentration of the other solution
      X_00:
      - the volume of the second solution
      - the number of milliliters of the second kind of solution
      - the amount of the other solution
      X_01:
      - the volume of the mixed solution of the first solution and the second solution
      - the number of milliliters of the mixed solution
      - the amount of the mixed solution
  info:
    answers:
    - s1: '105'
      s2: '35'
    item_id: 604cc853117d71c492a62edd
    numbers:
      N_00: '1'
      N_01: '1'
      N_02: '3'
      N_03: '70'
      N_04: '2'
      N_05: '5'
      N_06: '3'
      N_07: '5'
    split: null
    variables:
    - s2
    - s1
  text:
    numbers:
      shape:
      - 101
      target: __  0 __ __ __ __ __ __ __  1 __ __ __  2 __ __ __ __ __ __ __ __ __
        __  3 __ __  4 __ __ __ __ __ __ __  5 __ __ __ __ __ __  6 __ __ __ __ __  7
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __
    raw: 'a ph ##arm ##ac ##ist wishes to mix a solution that is 3 % min ##ox ##idi
      ##l . she has on hand 70 ml of 2 % solution and wishes to add some 5 % solution
      to obtain the desired 3 % solution . how much 5 % solution should she add ?'
    snippets:
      shape:
      - 8
      - 15
      target:
      - 'a ph ##arm ##ac ##ist wishes to mix'
      - 'ph ##arm ##ac ##ist wishes to mix a solution that is 3 % min ##ox'
      - 'wishes to mix a solution that is 3 % min ##ox ##idi ##l . she'
      - '##idi ##l . she has on hand 70 ml of 2 % solution and wishes'
      - she has on hand 70 ml of 2 % solution and wishes to add some
      - '% solution and wishes to add some 5 % solution to obtain the desired 3'
      - 5 % solution to obtain the desired 3 % solution . how much 5 %
      - desired 3 % solution . how much 5 % solution should she add ?
    tokens:
      shape:
      - 101
      target: '[CLS] a ph ##arm ##ac ##ist wishes to mix a solution that is 3 % min
        ##ox ##idi ##l . she has on hand 70 ml of 2 % solution and wishes to add some
        5 % solution to obtain the desired 3 % solution . how much 5 % solution should
        she add ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 15
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: /(N_04, 100) R_03: *(R_00,
      R_02) R_04: +(R_01, R_03) R_05: /(N_11, 100) R_06: *(N_09, R_05) R_07: =(R_04,
      R_06) R_08: +(R_00, R_01) R_09: =(N_09, R_08) R_10: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the concentration of the mixed solution
      N_04:
      - the concentration of the first kind of solution
      N_06:
      - the concentration of the second kind of solution
      N_08:
      - the amount of the mixed solution
      N_09:
      - the amount of the mixed kind of solution
      N_11:
      - the concentration of the mixed kind of solution
      X_00:
      - the amount of the first kind of solution
      X_01:
      - the amount of the second kind of solution
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the percentage of whiskey in the mixture
      - the concentration of the mixed scotch
      - the concentration of a 40 % whiskey solution
      N_04:
      - the percentage of whiskey in the original solution
      - the concentration of one scotch
      - the concentration of a 30 % whiskey solution
      N_09:
      - the amount of the mixture of the solution and pure whiskey
      - the amount of the mixed scotch
      - the total amount of a 40 % whiskey solution
      N_11:
      - the percentage of whiskey in the mixture
      - the concentration of the mixed scotch
      - the concentration of a 40 % whiskey solution
      X_00:
      - the amount of the original solution
      - the amount of one scotch
      - the amount of a 30 % whiskey solution
      X_01:
      - the amount of pure whiskey added
      - the amount of pure whiskey to be mixed
      - the amount of pure whiskey
  info:
    answers:
    - p: '2'
      s: '12'
    item_id: 604cc853117d71c492a62fe2
    numbers:
      N_00: '1'
      N_01: '1'
      N_02: '40'
      N_03: '1'
      N_04: '30'
      N_05: '1'
      N_06: '100'
      N_07: '1'
      N_08: '12'
      N_09: '14'
      N_10: '1'
      N_11: '40'
    split: null
    variables:
    - s
    - p
  text:
    numbers:
      shape:
      - 101
      target: __  0 __ __ __ __  1  2 __ __ __ __ __ __ __ __ __ __  3  4 __ __  5  6
        __ __ __  7  8 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __  9 __ __ __ 10
        11 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __
    raw: 'a chemistry experiment calls for a 40 % scotch whiskey solution . if your
      pantry has only a 30 % and a 100 % solution of a 12 - year - old scotch , how
      much of each should be mixed to obtain 14 liter ##s of a 40 % for his favorite
      drink .'
    snippets:
      shape:
      - 12
      - 15
      target:
      - a chemistry experiment calls for a 40 %
      - a chemistry experiment calls for a 40 % scotch whiskey solution . if
      - a chemistry experiment calls for a 40 % scotch whiskey solution . if your
      - solution . if your pantry has only a 30 % and a 100 % solution
      - . if your pantry has only a 30 % and a 100 % solution of
      - pantry has only a 30 % and a 100 % solution of a 12 -
      - has only a 30 % and a 100 % solution of a 12 - year
      - '% and a 100 % solution of a 12 - year - old scotch ,'
      - and a 100 % solution of a 12 - year - old scotch , how
      - 'of each should be mixed to obtain 14 liter ##s of a 40 % for'
      - 'mixed to obtain 14 liter ##s of a 40 % for his favorite drink .'
      - 'to obtain 14 liter ##s of a 40 % for his favorite drink .'
    tokens:
      shape:
      - 101
      target: '[CLS] a chemistry experiment calls for a 40 % scotch whiskey solution
        . if your pantry has only a 30 % and a 100 % solution of a 12 - year - old
        scotch , how much of each should be mixed to obtain 14 liter ##s of a 40 %
        for his favorite drink . [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 15
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: /(1, R_00) R_03: /(1, R_01)
      R_04: +(R_02, R_03) R_05: *(N_00, R_04) R_06: =(1, R_05) R_07: /(1, R_00) R_08:
      *(N_03, R_07) R_09: /(1, R_01) R_10: *(N_04, R_09) R_11: +(R_08, R_10) R_12:
      =(N_05, R_11) R_13: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of hours taken for the larger pipe to fill a swimming pool
      N_03:
      - the number of hours taken for the larger pipe to fill a swimming pool
      N_04:
      - the number of hours taken for the larger pipe to fill a swimming pool
      N_05:
      - a number in the phrase " half the tank "
      X_00:
      - the number of hours taken if they fill the pool separately
      X_01:
      - the number of hours taken if they fill the pool separately
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the hours to fill a swimming pool using two pipes
      - the total number of hours it takes to fill the swimming pool using two pipes
      - the number of hours taken to fill the pool using two pipes
      N_03:
      - the hours to fill with a larger diameter pipe
      - the number of hours the pipe of larger diameter filled the swimming pool
      - the number of hours for which the larger pipe is used
      N_04:
      - the hours to fill with a smaller diameter pipe
      - the number of hours the pipe of smaller diameter filled the swimming pool
      - the number of hours for which the smaller pipe is used
      N_05:
      - the relative amount of how much the tank is filled if the larger pipe is used
        for 4 hours and the smaller for 9 hours
      - the percentage of the swimming pool filled using two pipes
      - the portion of the pool filled when the larger pipe and the smaller pipe are
        used for 4 hours and 9 hours respectively
      X_00:
      - the time for the larger pipe to fill the pool
      - the amount of time it takes for the pipe with a larger diameter to fill the
        swimming pool alone
      - the number of hours in which the larger pipe can fill the pool
      X_01:
      - the time for the smaller pipe to fill the pool
      - the amount of time it takes for the pipe with a smaller diameter to fill the
        swimming pool alone
      - the number of hours in which the smaller pipe can fill the pool
  info:
    answers:
    - t1: '20'
      t2: '30'
    item_id: 604cc853117d71c492a630d1
    numbers:
      N_00: '12'
      N_01: '1'
      N_02: '2'
      N_03: '4'
      N_04: '9'
      N_05: '0.500000000000000'
    split: null
    variables:
    - t1
    - t2
  text:
    numbers:
      shape:
      - 101
      target: __ __ __  0 __ __ __  1 __ __ __  2 __ __ __ __ __ __ __ __ __ __ __  3
        __ __ __ __ __ __ __ __  4 __ __ __  5 __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __
    raw: it takes 12 hours to fill a swimming pool using two pipes . if the pipe of
      larger diameter is used for 4 hours and the pipe with smaller diameter for 9
      hours , only half the tank is filled . how long would it take for each pipe
      to fill the pool separately ?
    snippets:
      shape:
      - 6
      - 15
      target:
      - it takes 12 hours to fill a swimming pool using
      - it takes 12 hours to fill a swimming pool using two pipes . if
      - hours to fill a swimming pool using two pipes . if the pipe of larger
      - pipe of larger diameter is used for 4 hours and the pipe with smaller diameter
      - and the pipe with smaller diameter for 9 hours , only half the tank is
      - smaller diameter for 9 hours , only half the tank is filled . how long
    tokens:
      shape:
      - 101
      target: '[CLS] it takes 12 hours to fill a swimming pool using two pipes . if
        the pipe of larger diameter is used for 4 hours and the pipe with smaller
        diameter for 9 hours , only half the tank is filled . how long would it take
        for each pipe to fill the pool separately ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 15
    tokens: 'R_00: __NEW_VAR(, ) R_01: /(R_00, N_01) R_02: /(R_00, N_02) R_03: +(R_01,
      R_02) R_04: =(N_03, R_03) R_05: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the speed of jim to school
      N_02:
      - the speed of jim home
      N_03:
      - the total time of his commute to school
      X_00:
      - the distance of his trip
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the average speed of riding to school
      - the speed of jim when going to school from home
      - the speed of jim riding his bike to school every morning
      N_02:
      - the average speed of riding back home
      - the speed of jim returning home from school
      - the miles per hour of jim riding home along the same route
      N_03:
      - the total number of hours of commuting
      - the sum of the number of hours for his commute
      - the total time of jim's commute in hours
      X_00:
      - the distance of riding to school
      - the distance between the school and jim's home
      - the distance traveled in miles to school
  info:
    answers:
    - d: '6'
    item_id: 604cc853117d71c492a62fa9
    numbers:
      N_00: '1'
      N_01: '15'
      N_02: '10'
      N_03: '1'
    split: null
    variables:
    - d
  text:
    numbers:
      shape:
      - 101
      target: __ __ __ __ __ __ __ __ __ __  0 __ __ __  1 __ __ __ __ __ __ __ __
        __ __ __ __  2 __ __ __ __ __ __ __ __ __ __ __ __ __  3 __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __
    raw: 'jim rides his bike to school every morning at an average speed of 15 miles
      per hour . he rides home along the same route at 10 miles per hour . if the
      total time of his com ##mute is 1 hour , how far , in miles , is jim '' s trip
      to work ?'
    snippets:
      shape:
      - 4
      - 15
      target:
      - his bike to school every morning at an average speed of 15 miles per hour
      - every morning at an average speed of 15 miles per hour . he rides home
      - rides home along the same route at 10 miles per hour . if the total
      - 'total time of his com ##mute is 1 hour , how far , in miles'
    tokens:
      shape:
      - 101
      target: '[CLS] jim rides his bike to school every morning at an average speed
        of 15 miles per hour . he rides home along the same route at 10 miles per
        hour . if the total time of his com ##mute is 1 hour , how far , in miles
        , is jim '' s trip to work ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 15
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(R_00, R_01) R_03: =(N_00,
      R_02) R_04: /(R_00, N_03) R_05: /(R_01, N_04) R_06: +(R_04, R_05) R_07: =(N_02,
      R_06) R_08: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of miles tom's home took
      N_02:
      - the value of the number of hours tom's home minus the number of hours tom's
        home traveled
      N_03:
      - the speed of tom's home
      N_04:
      - the speed of tom's home
      X_00:
      - the distance to the school
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the distance between home and school
      - the distance between tom's home and his school
      - the distance to the school from tom's home both walking and running
      N_02:
      - the total number of minutes of walking or running to school
      - the number of minutes it takes for tom to get to school
      - the time consumed for tom to get to school
      N_03:
      - the speed of walking
      - the speed of tom when he walks
      - the walking rate of tom
      N_04:
      - the speed of running
      - the speed of tom when he runs
      - the running rate of tom
      X_00:
      - the distance of walking
      - the amount of distance tom traveled by walking
      - the distance that tom walked
      X_01:
      - the distance of running
      - the amount of distance tom traveled by running
      - the distance that tom ran
  info:
    answers:
    - d1: '600'
      d2: '1200'
    item_id: 604cc853117d71c492a62d8c
    numbers:
      N_00: '1800'
      N_01: '1'
      N_02: '20'
      N_03: '70'
      N_04: '210'
    split: null
    variables:
    - d2
    - d1
  text:
    numbers:
      shape:
      - 101
      target: __ __ __ __ __ __  0 __ __ __ __ __  1 __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __  2 __ __ __ __ __ __ __ __ __ __  3 __ __ __ __ __  4
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __
    raw: tom ' s home is 1800 m from his school . one morning he walked part of the
      way and then ran the rest . if it took him 20 min or less to get to school and
      he walks 70 m / min and runs 210 m / min , how far did he run ?
    snippets:
      shape:
      - 5
      - 15
      target:
      - tom ' s home is 1800 m from his school . one morning
      - is 1800 m from his school . one morning he walked part of the way
      - the rest . if it took him 20 min or less to get to school
      - to get to school and he walks 70 m / min and runs 210 m
      - walks 70 m / min and runs 210 m / min , how far did
    tokens:
      shape:
      - 101
      target: '[CLS] tom '' s home is 1800 m from his school . one morning he walked
        part of the way and then ran the rest . if it took him 20 min or less to get
        to school and he walks 70 m / min and runs 210 m / min , how far did he run
        ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 15
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_01, N_02) R_02: +(N_03, R_01) R_03: +(N_04,
      R_02) R_04: +(R_00, R_03) R_05: /(R_04, N_00) R_06: =(N_08, R_05) R_07: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of animation projects in the first project
      N_02:
      - the number of points scored in the second project
      N_03:
      - the number of points scored in the third project
      N_04:
      - the number of points jason scored in the final project
      N_05:
      - the number of projects out of the fifth project
      N_08:
      - the average score of the five projects
      X_00:
      - the number of points in the fifth project
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the required number of animation projects
      - the number of projects
      - the number of animation projects submitted by jason
      N_01:
      - the point of the first project
      - his score in the first project
      - the score of the first project
      N_02:
      - the point of the second project
      - his score in the second project
      - the score of the second project
      N_03:
      - the point of the third project
      - his score in the third project
      - the score of the third project
      N_04:
      - the point of the fourth project
      - his score in the fourth project
      - the score of the fourth project
      N_08:
      - the objective average point of all projects
      - his average score
      - the target average score of 5 projects
      X_00:
      - the required point of the fifth project
      - his score in the fifth project
      - the score of the last project
  info:
    answers:
    - l: '92'
    item_id: 60f9186c90be09b72239eeb7
    numbers:
      N_00: '5'
      N_01: '82'
      N_02: '85'
      N_03: '78'
      N_04: '88'
      N_05: '100'
      N_06: '4'
      N_07: '5'
      N_08: '85'
    split: null
    variables:
    - l
  text:
    numbers:
      shape:
      - 101
      target: __ __ __ __ __  0 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __  1
        __  2 __  3 __ __  4 __ __ __  5 __  6 __ __ __ __ __ __ __ __ __  7 __ __
        __ __ __ __ __ __ __ __ __  8 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __
    raw: 'jason had to submit 5 animation projects as per his sy ##lla ##bus in the
      final semester ##s . he scored 82 , 85 , 78 , and 88 points out of 100 in 4
      projects . what should be his score in the fifth project so that the average
      of his projects is at least 85 ?'
    snippets:
      shape:
      - 9
      - 15
      target:
      - 'jason had to submit 5 animation projects as per his sy ##lla'
      - 'the final semester ##s . he scored 82 , 85 , 78 , and 88'
      - 'semester ##s . he scored 82 , 85 , 78 , and 88 points out'
      - . he scored 82 , 85 , 78 , and 88 points out of 100
      - 82 , 85 , 78 , and 88 points out of 100 in 4 projects
      - 78 , and 88 points out of 100 in 4 projects . what should be
      - and 88 points out of 100 in 4 projects . what should be his score
      - what should be his score in the fifth project so that the average of his
      - average of his projects is at least 85 ?
    tokens:
      shape:
      - 101
      target: '[CLS] jason had to submit 5 animation projects as per his sy ##lla
        ##bus in the final semester ##s . he scored 82 , 85 , 78 , and 88 points out
        of 100 in 4 projects . what should be his score in the fifth project so that
        the average of his projects is at least 85 ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 15
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: *(N_05, R_01) R_03: -(R_00,
      R_02) R_04: =(N_04, R_03) R_05: +(R_00, R_01) R_06: =(N_06, R_05) R_07: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the total number of games
      N_04:
      - the value of the number of won games minus twice the number of lost games
      N_05:
      - the value of the number of lost games minus the number of lost games
      N_06:
      - the number of the games twice the season
      X_00:
      - the number of won games
      X_01:
      - the number of lost games
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_04:
      - the value of the number of wins minus twice the number of loses
      - the value of won games by the mariners minus 2 times the lost games by the
        mariners
      - the value of the number of games the mariners won minus twice the number of
        games the mariners lost
      N_05:
      - a number in the phrase " twice as many games as "
      - a number in the phrase " twice as many games "
      - a number in the phrase " twice as many games as they lost "
      N_06:
      - the total number of games
      - the number of regular - season games
      - the total number of games the mariners played
      X_00:
      - the number of wins
      - the number of won games
      - the number of games the mariners won
      X_01:
      - the number of loses
      - the number of lost games
      - the number of games the mariners lost
  info:
    answers:
    - l: '46'
      w: '116'
    item_id: 604cc853117d71c492a62c31
    numbers:
      N_00: '2000'
      N_01: '1'
      N_02: '1906'
      N_03: '1'
      N_04: '24'
      N_05: '2'
      N_06: '162'
    split: null
    variables:
    - w
    - l
  text:
    numbers:
      shape:
      - 101
      target: __ __ __  0 __ __ __ __ __ __ __ __ __  1 __ __ __ __ __  2 __ __ __
        __ __ __  3 __ __ __ __ __  4 __ __  5 __ __ __ __ __ __ __ __ __  6 __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __
    raw: in the 2000 - 2001 baseball season , the seattle mariners tied a league record
      set by the 1906 chicago cubs for most wins in a season . the mariners won 24
      more than twice as many games as they lost . they played 162 regular - season
      games . how many wins and loses did the mariners have ?
    snippets:
      shape:
      - 7
      - 15
      target:
      - in the 2000 - 2001 baseball season , the seattle
      - baseball season , the seattle mariners tied a league record set by the 1906
        chicago
      - tied a league record set by the 1906 chicago cubs for most wins in a
      - 1906 chicago cubs for most wins in a season . the mariners won 24 more
      - in a season . the mariners won 24 more than twice as many games as
      - . the mariners won 24 more than twice as many games as they lost .
      - games as they lost . they played 162 regular - season games . how many
    tokens:
      shape:
      - 101
      target: '[CLS] in the 2000 - 2001 baseball season , the seattle mariners tied
        a league record set by the 1906 chicago cubs for most wins in a season . the
        mariners won 24 more than twice as many games as they lost . they played 162
        regular - season games . how many wins and loses did the mariners have ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 15
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: -(R_00, R_01) R_03: =(N_01,
      R_02) R_04: +(R_00, R_01) R_05: =(N_03, R_04) R_06: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the value of the number of hikers minus the number of bike riders
      N_03:
      - the total number of people
      X_00:
      - the number of hikers
      X_01:
      - the number of bike riders
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the value of the number of hikers minus the number of bike riders
      - the value of hikers minus bike riders
      - the value of the number of hikers minus the number of bike riders
      N_03:
      - the total number of people
      - total people at the park
      - the total number of hikers and bike riders
      X_00:
      - the number of hikers
      - the number of hikers
      - the number of hikers
      X_01:
      - the number of bike riders
      - the number of bike riders
      - the number of bike riders
  info:
    answers:
    - b: '249'
      h: '427'
    item_id: 604cc852117d71c492a62b8f
    numbers:
      N_00: '1'
      N_01: '178'
      N_02: '1'
      N_03: '676'
    split: null
    variables:
    - h
    - b
  text:
    numbers:
      shape:
      - 101
      target: __ __ __ __ __ __ __ __ __ __ __  0 __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __  1 __ __ __ __ __ __ __ __ __ __  2 __ __  3  3
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __
    raw: 'il ##ida went to min ##ne ##was ##ka state park one day this summer . all
      of the people at the park were either hiking or bike riding . there were 178
      more hike ##rs than bike riders . if there were a total of 67 ##6 people at
      the park , how many were hiking ? how many were riding their bikes ?'
    snippets:
      shape:
      - 4
      - 15
      target:
      - 'to min ##ne ##was ##ka state park one day this summer . all of the'
      - 'hiking or bike riding . there were 178 more hike ##rs than bike riders .'
      - 'than bike riders . if there were a total of 67 ##6 people at the'
      - '. if there were a total of 67 ##6 people at the park , how'
    tokens:
      shape:
      - 101
      target: '[CLS] il ##ida went to min ##ne ##was ##ka state park one day this
        summer . all of the people at the park were either hiking or bike riding .
        there were 178 more hike ##rs than bike riders . if there were a total of
        67 ##6 people at the park , how many were hiking ? how many were riding their
        bikes ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 15
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_02, R_00) R_02: +(N_01, R_01) R_03: *(N_04,
      R_00) R_04: +(N_03, R_03) R_05: =(R_02, R_04) R_06: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the cost of renting the room by caesar hall
      N_02:
      - the cost of each meal for venus hall
      N_03:
      - the cost of renting the room in dollars
      N_04:
      - the cost of each meal for venus hall
      X_00:
      - the number of guests when the 2 halls be the same
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the rent of caesar hall
      - the dollars charged to rent a room at caesar's
      - the charge to rent caesar's hall
      N_02:
      - the price per meal at caesar hall
      - the dollars charged for each meal at caesar's
      - the cost of each meal at caesar's hall
      N_03:
      - the rent of venus hall
      - the dollars charged to rent a room at venus hall
      - the charge to rent the venus hall
      N_04:
      - the price per meal at venus hall
      - the dollars charged for each meal at venus hall
      - the cost of each meal of the venus hall
      X_00:
      - the number of meals that makes the cost of the 2 halls the same
      - the number of meals to pay for
      - the number of the meal
  info:
    answers:
    - m: '60'
    item_id: 60f9186c90be09b72239f02f
    numbers:
      N_00: '1'
      N_01: '800'
      N_02: '30'
      N_03: '500'
      N_04: '35'
      N_05: '2'
    split: null
    variables:
    - m
  text:
    numbers:
      shape:
      - 101
      target: __ __ __ __ __ __  0 __ __ __ __ __ __ __ __ __ __  1 __ __ __ __ __
        __  2 __ __ __ __ __ __ __ __  3 __ __ __ __ __ __  4 __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __  5 __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __
    raw: student council wants to rent a banquet hall for the prom . caesar ' s charges
      800 dollars to rent the room and 30 dollars for each meal . venus hall charges
      500 dollars to rent the room and 35 dollars for each meal . how many guests
      must attend the prom for the costs of the 2 halls to be the same ?
    snippets:
      shape:
      - 6
      - 15
      target:
      - student council wants to rent a banquet hall for the prom . caesar
      - the prom . caesar ' s charges 800 dollars to rent the room and 30
      - 800 dollars to rent the room and 30 dollars for each meal . venus hall
      - for each meal . venus hall charges 500 dollars to rent the room and 35
      - 500 dollars to rent the room and 35 dollars for each meal . how many
      - the prom for the costs of the 2 halls to be the same ?
    tokens:
      shape:
      - 101
      target: '[CLS] student council wants to rent a banquet hall for the prom . caesar
        '' s charges 800 dollars to rent the room and 30 dollars for each meal . venus
        hall charges 500 dollars to rent the room and 35 dollars for each meal . how
        many guests must attend the prom for the costs of the 2 halls to be the same
        ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 15
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(R_00, R_01) R_03: =(N_01,
      R_02) R_04: *(N_04, R_00) R_05: *(N_05, R_01) R_06: +(R_04, R_05) R_07: *(N_01,
      N_02) R_08: =(R_06, R_07) R_09: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the sum of the number of pounds of the mixture of the first and second feed
      N_02:
      - the cost per pound of the mixture of the first and second feed
      N_04:
      - the cost per pound of the first feed
      N_05:
      - the cost per pound of the second feed
      X_00:
      - the number of pounds of the first feed
      X_01:
      - the number of pounds of the second feed
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of pounds of the mixed feed
      - the final mixed pounds of feed worth $ 0. 22 per pound
      - the amount of the mixed feed
      N_02:
      - the cost per pound of the mixed feed of the first feed and the second feed
      - the price per pound for the final mixed feed
      - the cost of the mixed feed per pound
      N_04:
      - the cost per pound of the first feed
      - the price per pound for one kind of feed
      - the cost of one feed per pound
      N_05:
      - the cost per pound of the second feed
      - the price per pound for another kind of feed
      - the cost of the other feed per pound
      X_00:
      - the number of pounds of the first feed
      - the pounds for the $ 0. 11 per pound feed
      - the amount of one feed
      X_01:
      - the number of pounds of the second feed
      - the pounds for the $ 0. 50 per pound feed
      - the amount of the other feed
  info:
    answers:
    - f1: '12.2051282051282'
      f2: '4.79487179487179'
    item_id: 604cc853117d71c492a62ff1
    numbers:
      N_00: '2'
      N_01: '17'
      N_02: '0.220000000000000'
      N_03: '1'
      N_04: '0.110000000000000'
      N_05: '0.500000000000000'
    split: null
    variables:
    - f1
    - f2
  text:
    numbers:
      shape:
      - 101
      target: __ __ __ __ __  0 __ __ __ __ __ __ __ __ __ __ __ __ __  1 __ __ __
        __ __  2  2  2 __ __ __ __  3 __ __ __  4  4  4 __ __ __ __ __ __  5  5  5
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __
    raw: 'tim and judy mix two kinds of feed for pe ##di ##gree dogs . they wish to
      make 17 pounds of feed worth $ 0 . 22 per pound by mixing one kind worth $ 0
      . 11 per pound with another worth $ 0 . 50 per pound . how many pounds of the
      cheaper kind should they use in the mix ?'
    snippets:
      shape:
      - 6
      - 15
      target:
      - 'tim and judy mix two kinds of feed for pe ##di ##gree'
      - '##gree dogs . they wish to make 17 pounds of feed worth $ 0 .'
      - make 17 pounds of feed worth $ 0 . 22 per pound by mixing one
      - 0 . 22 per pound by mixing one kind worth $ 0 . 11 per
      - pound by mixing one kind worth $ 0 . 11 per pound with another worth
      - 11 per pound with another worth $ 0 . 50 per pound . how many
    tokens:
      shape:
      - 101
      target: '[CLS] tim and judy mix two kinds of feed for pe ##di ##gree dogs .
        they wish to make 17 pounds of feed worth $ 0 . 22 per pound by mixing one
        kind worth $ 0 . 11 per pound with another worth $ 0 . 50 per pound . how
        many pounds of the cheaper kind should they use in the mix ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 15
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(R_00, R_01) R_03: =(N_00,
      R_02) R_04: /(N_04, 100) R_05: *(R_01, R_04) R_06: /(N_02, 100) R_07: *(R_00,
      R_06) R_08: -(R_05, R_07) R_09: =(N_06, R_08) R_10: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the total amount of investment
      N_02:
      - the profit rate of the 12 % bonds
      N_04:
      - the profit rate of the 12 % bonds
      N_05:
      - the profit rate of the 12 % bonds
      N_06:
      - the value of the amount of 12 % bonds minus the amount of investment
      N_07:
      - the profit rate of the second type of bonds
      N_08:
      - the profit rate of the 5 % investment
      X_00:
      - the amount of money invested in the first kind
      X_01:
      - the amount of investment in the second type of bonds
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the sum of the number of dollars invested in the first bond and the number
        of dollars invested in the second bond
      - the total invested dollars
      - the total amount of money invested in the two bonds
      N_02:
      - the interest rate of the first bond
      - the interest ratio on one bond
      - the profit rate of 5 % bonds
      N_04:
      - the interest rate of the second bond
      - the interest ratio on the other bond
      - the profit rate of 12 % bonds
      N_05:
      - the interest rate of the second bond
      - the interest ratio on the other bond
      - the profit rate of 12 % bonds
      N_06:
      - the value of the interest earned from the second bond minus the interest earned
        from the first bond
      - the value of the 12 % bonds profit minus 5 % bonds profit
      - the value of the profit from 12 % bonds minus that from 5 % bonds
      N_07:
      - the interest rate of the first bond
      - the interest ratio on one bond
      - the profit rate of 5 % bonds
      N_08:
      - the interest rate of the first bond
      - the interest ratio on one bond
      - the profit rate of 5 % bonds
      X_00:
      - the number of dollars invested in the first investment
      - the invested dollars in the one bond
      - the amount of money invested in 5 % bonds
      X_01:
      - the number of dollars invested in the second investment
      - the invested dollars in the other bond
      - the amount of money invested in 12 % bonds
  info:
    answers:
    - b1: '10500'
      b2: '7500'
    item_id: 604cc853117d71c492a62ee0
    numbers:
      N_00: '18000'
      N_01: '1'
      N_02: '5'
      N_03: '1'
      N_04: '12'
      N_05: '12'
      N_06: '885'
      N_07: '5'
      N_08: '5'
    split: null
    variables:
    - b2
    - b1
  text:
    numbers:
      shape:
      - 101
      target: __ __ __ __ __ __ __ __ __  0  0  0 __ __ __ __  1  2 __ __ __ __ __
        __ __ __ __  3  4 __ __ __ __ __ __ __ __  5 __ __ __ __  6  6 __ __ __ __
        __ __  7 __ __ __ __ __ __ __ __ __ __ __ __  8 __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __
    raw: 'mr . graham invested some of his $ 18 , 000 in bonds that made a 5 % profit
      and the rest in bonds that made a 12 % profit . if the profit on the 12 % bonds
      was $ 88 ##5 more than the profit on the 5 % bonds , how much did mr . graham
      invest in the 5 % bonds ?'
    snippets:
      shape:
      - 9
      - 15
      target:
      - . graham invested some of his $ 18 , 000 in bonds that made a
      - 18 , 000 in bonds that made a 5 % profit and the rest in
      - ', 000 in bonds that made a 5 % profit and the rest in bonds'
      - and the rest in bonds that made a 12 % profit . if the profit
      - the rest in bonds that made a 12 % profit . if the profit on
      - 'profit . if the profit on the 12 % bonds was $ 88 ##5 more'
      - 'on the 12 % bonds was $ 88 ##5 more than the profit on the'
      - '##5 more than the profit on the 5 % bonds , how much did mr'
      - did mr . graham invest in the 5 % bonds ?
    tokens:
      shape:
      - 101
      target: '[CLS] mr . graham invested some of his $ 18 , 000 in bonds that made
        a 5 % profit and the rest in bonds that made a 12 % profit . if the profit
        on the 12 % bonds was $ 88 ##5 more than the profit on the 5 % bonds , how
        much did mr . graham invest in the 5 % bonds ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 15
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: *(N_01, R_00) R_03: *(N_02,
      R_01) R_04: +(R_02, R_03) R_05: =(N_03, R_04) R_06: *(N_04, R_00) R_07: *(N_01,
      R_06) R_08: *(N_06, R_01) R_09: +(R_01, R_08) R_10: *(N_02, R_09) R_11: +(R_07,
      R_10) R_12: =(N_07, R_11) R_13: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of hours it took for the plane to travel by the plane
      N_02:
      - the number of hours it takes for the plane to travel by the ship
      N_03:
      - the distance between the plane and the ship
      N_04:
      - the ratio of the speed of the person to the speed of the ship
      N_06:
      - the value of the length of the plane minus the speed of the ship
      N_07:
      - the distance of traveling downstream
      X_00:
      - the length of the plane
      X_01:
      - the speed of the ship without the ship
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - a number in the phrase " a person traveling 4 hours by plane and 25 hours
        by ship covers 1580 miles "
      - the number of hours the person traveled by plane in the first case
      - the traveling hour by plane in the first case
      N_02:
      - the hours traveled by ship
      - the number of hours the person traveled by ship in the first case
      - the traveling hour by ship in the first case
      N_03:
      - the total distance traveled by the plane and ship
      - the total amount of distance the person traveled in the first case
      - the total traveling distance in the first case
      N_04:
      - a number in the phrase " if the speed of the plane had been half of the actual
        speed and the speed "
      - the ratio of the speed of the plane in the second case to the speed of the
        plane in the first case
      - a number in the phrase " half "
      N_06:
      - a number in the phrase " and the speed of the ship had been a quarter greater
        "
      - the value of the ship's speed in the second case minus the ship's speed in
        the first case divided by the first case's ship's speed
      - a number in the phrase " quarter "
      N_07:
      - the distance traveled when the ship's speed is quarter greater and the plane's
        speed is halved
      - the total amount of distance the person traveled in the second case in the
        same length of time in the first case
      - the traveling distance when the speed of the plane had been half and the speed
        of the ship had been a quarter greater
      X_00:
      - the speed of the plane
      - the speed of the plane in the first case
      - the speed of the plane in the first case
      X_01:
      - the speed of the ship
      - the speed of the ship in the first case
      - the speed of the ship in the first case
  info:
    answers:
    - p: '220'
      s: '28'
    item_id: 604cc853117d71c492a6308a
    numbers:
      N_00: '1'
      N_01: '4'
      N_02: '25'
      N_03: '1580'
      N_04: '0.500000000000000'
      N_05: '1'
      N_06: '0.250000000000000'
      N_07: '1315'
    split: null
    variables:
    - p
    - s
  text:
    numbers:
      shape:
      - 101
      target: __  0 __ __  1 __ __ __ __  2 __ __ __ __  3 __ __ __ __ __ __ __ __
        __ __  4 __ __ __ __ __ __ __ __ __ __ __ __  5  6 __ __ __ __ __ __ __ __  7  7
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __
    raw: 'a person traveling 4 hours by plane and 25 hours by ship covers 1580 miles
      . if the speed of the plane had been half of the actual speed and the speed
      of the ship had been a quarter greater , the person would have traveled only
      131 ##5 miles in the same length of time . find the speeds of the plane and
      the ship .'
    snippets:
      shape:
      - 8
      - 15
      target:
      - a person traveling 4 hours by plane and
      - a person traveling 4 hours by plane and 25 hours by
      - person traveling 4 hours by plane and 25 hours by ship covers 1580 miles .
      - plane and 25 hours by ship covers 1580 miles . if the speed of the
      - the speed of the plane had been half of the actual speed and the speed
      - the speed of the ship had been a quarter greater , the person would have
      - speed of the ship had been a quarter greater , the person would have traveled
      - ', the person would have traveled only 131 ##5 miles in the same length of'
    tokens:
      shape:
      - 101
      target: '[CLS] a person traveling 4 hours by plane and 25 hours by ship covers
        1580 miles . if the speed of the plane had been half of the actual speed and
        the speed of the ship had been a quarter greater , the person would have traveled
        only 131 ##5 miles in the same length of time . find the speeds of the plane
        and the ship . [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 15
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(R_00, R_01) R_03: =(N_01,
      R_02) R_04: /(N_05, 100) R_05: *(R_00, R_04) R_06: /(N_06, 100) R_07: *(R_01,
      R_06) R_08: +(R_05, R_07) R_09: =(N_08, R_08) R_10: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the total amount of investment
      N_05:
      - the interest rate of the government bond
      N_06:
      - the interest rate of the safer bond
      N_08:
      - the total amount of interest
      X_00:
      - the amount of investment in the junk fund
      X_01:
      - the amount of investment in the government fund
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the total amount invested in two funds
      - the total invested dollars
      - the amount of total investment
      N_05:
      - the interest rate on a junk bond fund
      - the interest ratio at junk fund
      - the annual interest rate in the first case
      N_06:
      - the interest rate on a government bond fund
      - the interest ratio at the government fund
      - the annual interest rate in the second case
      N_08:
      - the amount of interest in the year
      - total income dollars
      - the amount of total income
      X_00:
      - the amount invested in the junk bond fund
      - invested dollars at junk fund
      - the amount of investment in the first case
      X_01:
      - the amount invested in the government bond fund
      - invested dollars at the government fund
      - the amount of investment in the second case
  info:
    answers:
    - g: '6000'
      j: '4000'
    item_id: 604cc853117d71c492a62c32
    numbers:
      N_00: '1'
      N_01: '10000'
      N_02: '2'
      N_03: '1'
      N_04: '1'
      N_05: '11'
      N_06: '5'
      N_07: '2'
      N_08: '740'
    split: null
    variables:
    - j
    - g
  text:
    numbers:
      shape:
      - 101
      target: __  0 __ __  1  1  1 __ __ __ __  2 __ __ __ __  3 __ __ __ __ __  4
        __ __ __ __ __ __ __ __ __ __ __  5 __ __ __ __ __ __ __ __ __ __  6 __ __
        __ __ __ __ __ __ __ __  7 __ __  8 __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __
    raw: a total of 10 , 000 dollars was invested in two bond mutual funds , a junk
      bond fund , and a government bond fund . the junk fund is risky and yields 11
      % interest . the safer government bond fund yields only 5 % . the year ' s total
      income from the two investments was 740 dollars . how much was invested in each
      fund ?
    snippets:
      shape:
      - 9
      - 15
      target:
      - a total of 10 , 000 dollars was
      - a total of 10 , 000 dollars was invested in two
      - 10 , 000 dollars was invested in two bond mutual funds , a junk bond
      - invested in two bond mutual funds , a junk bond fund , and a government
      - ', a junk bond fund , and a government bond fund . the junk fund'
      - the junk fund is risky and yields 11 % interest . the safer government bond
      - the safer government bond fund yields only 5 % . the year ' s total
      - year ' s total income from the two investments was 740 dollars . how much
      - total income from the two investments was 740 dollars . how much was invested
        in
    tokens:
      shape:
      - 101
      target: '[CLS] a total of 10 , 000 dollars was invested in two bond mutual funds
        , a junk bond fund , and a government bond fund . the junk fund is risky and
        yields 11 % interest . the safer government bond fund yields only 5 % . the
        year '' s total income from the two investments was 740 dollars . how much
        was invested in each fund ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 15
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: *(N_00, R_00) R_03: *(N_01,
      R_01) R_04: +(R_02, R_03) R_05: =(N_02, R_04) R_06: *(N_03, R_00) R_07: *(N_04,
      R_01) R_08: +(R_06, R_07) R_09: =(N_05, R_08) R_10: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of doughnuts harold picked on monday
      N_01:
      - the number of large coffees harold picked
      N_02:
      - the total cost of coffees harold picked
      N_03:
      - the number of doughnuts melinda picked on tuesday
      N_04:
      - the number of large coffees harold picked
      N_05:
      - the total cost of coffees harold picked
      X_00:
      - the cost of a doughnut
      X_01:
      - the cost of a large coffee
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of the doughnuts harold picked up on monday
      - the number of harold's doughnuts
      - the number of doughnuts harold picked up
      N_01:
      - the number of large coffees harold picked up on monday
      - the number of harold's coffees
      - the number of coffees harold picked up
      N_02:
      - the total cost harold paid on monday
      - the paid dollar by harold
      - the total amount of money harold paid
      N_03:
      - the number of doughnuts melinda picked up on tuesday
      - the number of melinda's doughnuts
      - the number of doughnuts melinda picked up
      N_04:
      - the number of large coffees melinda picked up on tuesday
      - the number of melinda's coffees
      - the number of coffees melinda picked up
      N_05:
      - the total cost melinda paid on tuesday
      - the paid dollar by melinda
      - the total amount of money melinda paid
      X_00:
      - the price of a doughnut
      - the cost of the doughnut
      - the cost of a doughnut
      X_01:
      - the price of a large coffee
      - the cost of a coffee
      - the cost of a coffee
  info:
    answers:
    - c: '0.890000000000000'
      d: '0.450000000000000'
    item_id: 604cc852117d71c492a62b24
    numbers:
      N_00: '3'
      N_01: '4'
      N_02: '4.91000000000000'
      N_03: '5'
      N_04: '6'
      N_05: '7.59000000000000'
      N_06: '1'
      N_07: '1'
    split: null
    variables:
    - d
    - c
  text:
    numbers:
      shape:
      - 101
      target: __ __ __ __ __ __ __  0 __ __ __ __  1 __ __ __ __ __ __ __ __ __ __  2  2  2
        __ __ __ __ __ __ __ __  3 __ __ __ __  4 __ __ __ __ __ __ __ __ __ __  5  5  5
        __ __ __ __ __ __ __  6 __ __ __ __ __ __ __ __  7 __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'on monday , harold picked up three dough ##nut ##s and four large coffee
      ##s for the office staff . he paid 4 . 91 dollars . on tuesday , melinda picked
      up five dough ##nut ##s and six large coffee ##s for the office staff . she
      paid 7 . 59 dollars . what is the cost of one dough ##nut ? what is the cost
      of one large coffee ?'
    snippets:
      shape:
      - 8
      - 15
      target:
      - 'on monday , harold picked up three dough ##nut ##s and four large coffee'
      - 'picked up three dough ##nut ##s and four large coffee ##s for the office
        staff'
      - for the office staff . he paid 4 . 91 dollars . on tuesday ,
      - '. on tuesday , melinda picked up five dough ##nut ##s and six large coffee'
      - 'picked up five dough ##nut ##s and six large coffee ##s for the office staff'
      - for the office staff . she paid 7 . 59 dollars . what is the
      - 'dollars . what is the cost of one dough ##nut ? what is the cost'
      - '##nut ? what is the cost of one large coffee ?'
    tokens:
      shape:
      - 101
      target: '[CLS] on monday , harold picked up three dough ##nut ##s and four large
        coffee ##s for the office staff . he paid 4 . 91 dollars . on tuesday , melinda
        picked up five dough ##nut ##s and six large coffee ##s for the office staff
        . she paid 7 . 59 dollars . what is the cost of one dough ##nut ? what is
        the cost of one large coffee ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 15
    tokens: 'R_00: __NEW_VAR(, ) R_01: -(R_00, N_07) R_02: *(N_06, R_01) R_03: +(N_04,
      R_02) R_04: -(R_00, N_13) R_05: *(N_12, R_04) R_06: +(N_10, R_05) R_07: =(R_03,
      R_06) R_08: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_04:
      - the monthly fee of one plan
      N_05:
      - the monthly fee for one plan
      N_06:
      - the additional fee for each minute in the second plan
      N_07:
      - the number of minutes a plan has equal to the monthly fee
      N_10:
      - the monthly fee of one plan
      N_11:
      - the monthly fee for one plan
      N_12:
      - the additional fee for each minute in the second plan
      N_13:
      - the number of minutes it takes for the second plan to equal the monthly fee
      X_00:
      - the monthly fee
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_04:
      - the monthly fee of the first kind of plan for 500 minutes
      - the basic fee of one plan
      - the initial fee for the first 500 minutes of the first plan
      N_05:
      - the base number of minutes for the first kind of plan
      - the amount of time given for the basic fee of one plan
      - the number of minutes that the initial fee is paid for in the first plan
      N_06:
      - the additional fee of the first kind of plan per minute over the 500
      - the additional fee per minute of one plan over 500 minutes
      - the additional fee per minute of the first plan
      N_07:
      - the base number of minutes for the first kind of plan
      - the amount of time given for the basic fee of one plan
      - the number of minutes that the initial fee is paid for in the first plan
      N_10:
      - the monthly fee of the second kind of plan for 1000 minutes
      - the basic fee of the other plan
      - the initial fee for the first 1000 minutes of the second plan
      N_11:
      - the base number of minutes for the second kind of plan
      - the amount of time given for the basic fee of the other plan
      - the number of minutes that the initial fee is paid for in the second plan
      N_12:
      - the additional fee for the second kind of plan per minute over 1000
      - the additional fee per minute of the other plan over 1000 minutes
      - the additional fee per minute of the second plan
      N_13:
      - the base number of minutes for the second kind of plan
      - the amount of time given for the basic fee of the other plan
      - the number of minutes that the initial fee is paid for in the second plan
      X_00:
      - the total number of minutes the person has to use the phone for the monthly
        cost of each plan to be equal
      - the total time both plans are used for the monthly costs of them are equal
      - the number of minutes after which the monthly costs of the plans equal
  info:
    answers:
    - m: '2500.00000000000'
    item_id: 60f9186c90be09b72239ebec
    numbers:
      N_00: '1'
      N_01: '2'
      N_02: '1'
      N_03: '1'
      N_04: '50'
      N_05: '500'
      N_06: '0.350000000000000'
      N_07: '500'
      N_08: '2'
      N_09: '1'
      N_10: '75'
      N_11: '1000'
      N_12: '0.450000000000000'
      N_13: '1000'
    split: null
    variables:
    - m
  text:
    numbers:
      shape:
      - 101
      target: __  0 __ __ __ __  1 __ __ __ __  2 __  3 __ __ __  4 __ __  5 __ __  6  6  6
        __ __ __ __ __ __  7 __ __  8 __ __  9 __ __ __ 10 __ __ 11 __ __ 12 12 12
        __ __ __ __ __ __ 13 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: a person is choosing between 2 cellular phone plans . one has a monthly fee
      of 50 dollars for 500 minutes plus 0 . 35 dollars for each minute over the 500
      . the second plan has a monthly fee of 75 dollars for 1000 minutes plus 0 .
      45 dollars for each minute over the 1000 . after how many minutes used are the
      monthly costs of the plans equal ?
    snippets:
      shape:
      - 14
      - 15
      target:
      - a person is choosing between 2 cellular phone
      - a person is choosing between 2 cellular phone plans . one has a
      - choosing between 2 cellular phone plans . one has a monthly fee of 50 dollars
      - 2 cellular phone plans . one has a monthly fee of 50 dollars for 500
      - . one has a monthly fee of 50 dollars for 500 minutes plus 0 .
      - a monthly fee of 50 dollars for 500 minutes plus 0 . 35 dollars for
      - of 50 dollars for 500 minutes plus 0 . 35 dollars for each minute over
      - 35 dollars for each minute over the 500 . the second plan has a monthly
      - each minute over the 500 . the second plan has a monthly fee of 75
      - the 500 . the second plan has a monthly fee of 75 dollars for 1000
      - second plan has a monthly fee of 75 dollars for 1000 minutes plus 0 .
      - a monthly fee of 75 dollars for 1000 minutes plus 0 . 45 dollars for
      - of 75 dollars for 1000 minutes plus 0 . 45 dollars for each minute over
      - 45 dollars for each minute over the 1000 . after how many minutes used are
    tokens:
      shape:
      - 101
      target: '[CLS] a person is choosing between 2 cellular phone plans . one has
        a monthly fee of 50 dollars for 500 minutes plus 0 . 35 dollars for each minute
        over the 500 . the second plan has a monthly fee of 75 dollars for 1000 minutes
        plus 0 . 45 dollars for each minute over the 1000 . after how many minutes
        used are the monthly costs of the plans equal ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 15
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(R_00, R_01) R_03: =(N_02,
      R_02) R_04: *(N_03, R_00) R_05: *(N_04, R_01) R_06: +(R_04, R_05) R_07: =(N_05,
      R_06) R_08: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the total number of tickets sold
      N_03:
      - the price of a children's ticket
      N_04:
      - the cost of a children's ticket
      N_05:
      - the total value of sold tickets
      X_00:
      - the number of adult tickets sold
      X_01:
      - the number of children's tickets
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the sum of the number of adult tickets and the number of child tickets
      - the total number of tickets sold
      - the total number of tickets sold
      N_03:
      - the price of an adult ticket
      - the adult ticket price
      - the cost of an adult ticket
      N_04:
      - the price of a child ticket
      - the child ticket price
      - the cost of a children's ticket
      N_05:
      - the sum of the number of dollars earned from selling ticket adult tickets
        and selling child tickets
      - the total receipts for the performance
      - the total cost of the tickets sold
      X_00:
      - the number of adult tickets sold
      - the number of adults attended
      - the number of adult tickets
      X_01:
      - the number of child tickets sold
      - the number of children attended
      - the number of children's tickets
  info:
    answers:
    - a: '231'
      c: '519'
    item_id: 604cc853117d71c492a62f23
    numbers:
      N_00: '1'
      N_01: '1'
      N_02: '750'
      N_03: '7.50000000000000'
      N_04: '4.00000000000000'
      N_05: '3808.50000000000'
    split: null
    variables:
    - a
    - c
  text:
    numbers:
      shape:
      - 101
      target: __ __ __ __ __ __  0 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __  1 __ __  2 __ __ __ __ __ __ __ __ __ __ __ __ __  3  3  3 __ __  4  4  4
        __ __ __ __ __ __ __ __ __ __ __  5  5  5  5 __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __
    raw: 'you are the manager of a theater . on saturday morning , you are going over
      the ticket sales for friday evening . a total of 750 tickets were sold . the
      tickets for adults and children sold for $ 7 . 50 and $ 4 . 00 , respectively
      , and the receipts for the performance were $ 380 ##8 . 50 . however , your
      assistant manager did not record how many of each type of ticket were sold .
      from the information you have , can you determine how many of each type were
      so ?'
    snippets:
      shape:
      - 6
      - 15
      target:
      - you are the manager of a theater . on saturday morning , you
      - the ticket sales for friday evening . a total of 750 tickets were sold .
      - for friday evening . a total of 750 tickets were sold . the tickets for
      - for adults and children sold for $ 7 . 50 and $ 4 . 00
      - for $ 7 . 50 and $ 4 . 00 , respectively , and the
      - 'the receipts for the performance were $ 380 ##8 . 50 . however , your'
    tokens:
      shape:
      - 101
      target: '[CLS] you are the manager of a theater . on saturday morning , you
        are going over the ticket sales for friday evening . a total of 750 tickets
        were sold . the tickets for adults and children sold for $ 7 . 50 and $ 4
        . 00 , respectively , and the receipts for the performance were $ 380 ##8
        . 50 . however , your assistant manager did not record how many of each type
        of ticket were sold . from the information you have , can you determine how
        many of each type were so ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(10, R_00) R_02: =(N_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of cents fred has in cents
      X_00:
      - the number of dimes fred has
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of cents that he has in his bank
      - the amounts of fred's cents in fred's bank
      - the total number of cents
      X_00:
      - the number of dimes that he has
      - the amounts of fred's money in dollars
      - the total number of dimes
  info:
    answers:
    - d: '9'
    item_id: 60f9186c90be09b72239eff6
    numbers:
      N_00: '90'
    split: null
    variables:
    - d
  text:
    numbers:
      shape:
      - 31
      target: __ __ __  0 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __
    raw: 'fred has 90 cents in his bank . how many dime ##s does fred have ?'
    snippets:
      shape:
      - 1
      - 15
      target:
      - fred has 90 cents in his bank . how many
    tokens:
      shape:
      - 31
      target: '[CLS] fred has 90 cents in his bank . how many dime ##s does fred have
        ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of sam's books
      N_01:
      - the number of joan's books
      X_00:
      - the total number of books
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of books owned by sam
      - the number of sam's books
      - the number of books sam has
      N_01:
      - the number of books owned by joan
      - the number of joan's books
      - the number of books joan has
      X_00:
      - the total number of books
      - the number of all books
      - the total number of books sam and joan have
  info:
    answers:
    - b: '212'
    item_id: 60f9186c90be09b72239ef7c
    numbers:
      N_00: '110'
      N_01: '102'
    split: null
    variables:
    - b
  text:
    numbers:
      shape:
      - 31
      target: __ __ __  0 __ __ __ __  1 __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __
    raw: sam has 110 books . joan has 102 books . how many books do they have together
      ?
    snippets:
      shape:
      - 2
      - 15
      target:
      - sam has 110 books . joan has 102 books .
      - sam has 110 books . joan has 102 books . how many books do they
    tokens:
      shape:
      - 31
      target: '[CLS] sam has 110 books . joan has 102 books . how many books do they
        have together ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: -(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of apples ruth starts with
      N_01:
      - the number of apples she shares with peter
      X_00:
      - the number of apples now
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - number of apples ruth starts with
      - the number of ruth's apples
      - the number of apples ruth starts with
      N_01:
      - number of apples she shares with peter
      - the number of apples ruth shares with peter
      - the number of apples she shares with peter
      X_00:
      - the number of apples ruth ends with
      - the number of ruth's apples in the future
      - the number of apples ruth ends with
  info:
    answers:
    - r: '84'
    item_id: 60f9186c90be09b72239ef26
    numbers:
      N_00: '89'
      N_01: '5'
    split: null
    variables:
    - r
  text:
    numbers:
      shape:
      - 31
      target: __ __ __ __  0 __ __ __ __  1 __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __
    raw: ruth starts with 89 apples . she shares 5 with peter . how many apples does
      ruth end with ?
    snippets:
      shape:
      - 2
      - 15
      target:
      - ruth starts with 89 apples . she shares 5 with peter
      - starts with 89 apples . she shares 5 with peter . how many apples does
    tokens:
      shape:
      - 31
      target: '[CLS] ruth starts with 89 apples . she shares 5 with peter . how many
        apples does ruth end with ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(7, R_00) R_02: =(N_01, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of hamburgers sold
      X_00:
      - the number of hamburgers sold
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of sold hamburgers during last week
      - the number of hamburgers the restaurant sold last week
      - the total number of hamburgers sold last week
      X_00:
      - the ratio of sold hamburgers during last week to 7
      - the number of hamburgers the restaurant sold on average each day
      - the average number of hamburgers sold on one day
  info:
    answers:
    - e: '7'
    item_id: 60f9186c90be09b72239eec7
    numbers:
      N_00: '1'
      N_01: '49'
    split: null
    variables:
    - e
  text:
    numbers:
      shape:
      - 31
      target: __  0 __ __  1 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __
    raw: 'a restaurant sold 49 hamburger ##s last week . how many hamburger ##s on
      average were sold each day ?'
    snippets:
      shape:
      - 2
      - 15
      target:
      - 'a restaurant sold 49 hamburger ##s last week'
      - 'a restaurant sold 49 hamburger ##s last week . how many'
    tokens:
      shape:
      - 31
      target: '[CLS] a restaurant sold 49 hamburger ##s last week . how many hamburger
        ##s on average were sold each day ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_01, R_00) R_02: =(N_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of shirts
      N_01:
      - the number of green shirts
      X_00:
      - the number of green shirts
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of shirts composed with blue and green
      - the number of blue or green shirts
      - the total number of green and blue shirts
      N_01:
      - the number of blue shirts
      - the number of blue shirts
      - the number of blue shirts
      X_00:
      - the number of green shirts
      - the number of green shirts
      - the number of green shirts
  info:
    answers:
    - g: '17'
    item_id: 60f9186c90be09b72239ea2b
    numbers:
      N_00: '23'
      N_01: '6'
    split: null
    variables:
    - g
  text:
    numbers:
      shape:
      - 31
      target: __ __ __  0 __ __  1 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __
    raw: gavin has 23 shirts . 6 are blue the rest are green . how many green shirts
      does gavin have ?
    snippets:
      shape:
      - 2
      - 15
      target:
      - gavin has 23 shirts . 6 are blue the rest
      - gavin has 23 shirts . 6 are blue the rest are green .
    tokens:
      shape:
      - 31
      target: '[CLS] gavin has 23 shirts . 6 are blue the rest are green . how many
        green shirts does gavin have ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of boats
      N_01:
      - the number of people on each boat
      X_00:
      - the total number of people
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of boats
      - the number of boats in the lake
      - the number of boats in the lake
      N_01:
      - the number of people on each boat
      - the number of people in each boat
      - the number of people on each boat.
      X_00:
      - the number of total people on the boat
      - the total number of people in the lake
      - the total number of people on the boats
  info:
    answers:
    - p: '15'
    item_id: 60f9186c90be09b72239e9bb
    numbers:
      N_00: '5'
      N_01: '3'
    split: null
    variables:
    - p
  text:
    numbers:
      shape:
      - 31
      target: __  0 __ __ __ __ __ __ __ __ __  1 __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __
    raw: 5 boats are in the lake . each boat has 3 people . how many people are on
      boats in the lake ?
    snippets:
      shape:
      - 2
      - 15
      target:
      - 5 boats are in the lake . each
      - in the lake . each boat has 3 people . how many people are on
    tokens:
      shape:
      - 31
      target: '[CLS] 5 boats are in the lake . each boat has 3 people . how many people
        are on boats in the lake ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_02, R_00) R_02: =(N_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of students at a school
      N_02:
      - the number of students at each classroom
      X_00:
      - the number of classrooms at the school
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of students at a school
      - the total number of students at a school
      - the total number of students
      N_02:
      - the number of students for each classroom capacity
      - the number of students each classroom can hold
      - the number of students one classroom holds
      X_00:
      - the ratio of the number of students to classroom capacity
      - the number of classrooms needed at the school
      - the number of classrooms needed
  info:
    answers:
    - c: '32'
    item_id: 60f9186c90be09b72239ea88
    numbers:
      N_00: '960'
      N_01: '1'
      N_02: '30'
    split: null
    variables:
    - c
  text:
    numbers:
      shape:
      - 31
      target: __ __ __  0 __ __  1 __ __ __ __ __ __  2 __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __
    raw: there are 960 students at a school . if each classroom holds 30 students
      , how many classrooms are needed at the school ?
    snippets:
      shape:
      - 3
      - 15
      target:
      - there are 960 students at a school . if each
      - there are 960 students at a school . if each classroom holds 30
      - a school . if each classroom holds 30 students , how many classrooms are needed
    tokens:
      shape:
      - 31
      target: '[CLS] there are 960 students at a school . if each classroom holds
        30 students , how many classrooms are needed at the school ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(R_00, R_01) R_03: =(N_01,
      R_02) R_04: *(N_02, R_00) R_05: -(R_04, R_01) R_06: =(N_03, R_05) R_07: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the sum of two numbers
      N_02:
      - a number in the phrase " three "
      N_03:
      - the value of three times the smaller minus the larger number
      X_00:
      - the value of the smaller number
      X_01:
      - the value of the larger
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the sum of the smaller number and the larger number
      - the sum of the two numbers
      - the sum of two numbers
      N_02:
      - the multiplier of the smaller number
      - the value of the multiplier to the smaller number
      - a number in the phrase " three times the smaller "
      N_03:
      - the value of 3 times smaller number minus the larger number
      - the value of three times the smaller minus the larger
      - a value of three times the smaller number minus the larger
      X_00:
      - the value of the smaller number
      - the value of the smaller number
      - the value of the smaller number
      X_01:
      - the value of the larger number
      - the value of the larger number
      - the value of the larger number
  info:
    answers:
    - l: '65'
      s: '25'
    item_id: 604cc853117d71c492a62f30
    numbers:
      N_00: '2'
      N_01: '90'
      N_02: '3'
      N_03: '10'
    split: null
    variables:
    - s
    - l
  text:
    numbers:
      shape:
      - 31
      target: __ __ __ __  0 __ __  1 __  2 __ __ __ __  3 __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __
    raw: the sum of two numbers is 90 . three times the smaller is 10 more than the
      larger . find the larger number .
    snippets:
      shape:
      - 4
      - 15
      target:
      - the sum of two numbers is 90 . three times the
      - the sum of two numbers is 90 . three times the smaller is 10
      - sum of two numbers is 90 . three times the smaller is 10 more than
      - 90 . three times the smaller is 10 more than the larger . find the
    tokens:
      shape:
      - 31
      target: '[CLS] the sum of two numbers is 90 . three times the smaller is 10
        more than the larger . find the larger number . [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of mary's yellow marbles
      N_01:
      - the number of joan's yellow marbles
      X_00:
      - the total number of yellow marbles
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of marbles owned by mary
      - the number of mary's yellow marbles
      - the number of yellow marbles mary has
      N_01:
      - the number of marbles owned by joan
      - the number of joan's yellow marbles
      - the number of yellow marbles joan has
      X_00:
      - the total number of marbles
      - the total number of marbles
      - the number of yellow marbles they have in all
  info:
    answers:
    - m: '12'
    item_id: 60f9186c90be09b72239e9e9
    numbers:
      N_00: '9'
      N_01: '3'
    split: null
    variables:
    - m
  text:
    numbers:
      shape:
      - 31
      target: __ __ __  0 __ __ __ __ __ __  1 __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __
    raw: 'mary has 9 yellow marble ##s . joan has 3 yellow marble ##s . how many yellow
      marble ##s do they have in all ?'
    snippets:
      shape:
      - 2
      - 15
      target:
      - 'mary has 9 yellow marble ##s . joan has 3'
      - '9 yellow marble ##s . joan has 3 yellow marble ##s . how many yellow'
    tokens:
      shape:
      - 31
      target: '[CLS] mary has 9 yellow marble ##s . joan has 3 yellow marble ##s .
        how many yellow marble ##s do they have in all ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: *(N_01, R_00) R_03: =(R_01,
      R_02) R_04: +(R_00, R_01) R_05: =(N_02, R_04) R_06: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the ratio of the number of cows to the number of horses
      N_02:
      - the total number of animals
      X_00:
      - the number of horses
      X_01:
      - the number of cows
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the ratio of the number of cows to the number of horses
      - the ratio of the number of cows to the number of horses
      - the ratio of the number of cows to the number of horses
      N_02:
      - the total number of animals
      - the total number of cows and horses
      - the total number of animals
      X_00:
      - the number of raised horses
      - the number of horses
      - the number of horses
      X_01:
      - the number of raised cows
      - the number of cows
      - the number of cows
  info:
    answers:
    - c: '140'
      h: '28'
    item_id: 604cc852117d71c492a62b87
    numbers:
      N_00: '1'
      N_01: '5'
      N_02: '168'
    split: null
    variables:
    - h
    - c
  text:
    numbers:
      shape:
      - 31
      target: __  0 __ __ __  1 __ __ __ __ __ __ __ __ __ __  2 __ __ __ __ __ __
        __ __ __ __ __ __ __ __
    raw: 'a ranch ##er raises 5 times as many cows as horses . if he has 168 animals
      , how many cows does he have ?'
    snippets:
      shape:
      - 3
      - 15
      target:
      - 'a ranch ##er raises 5 times as many'
      - 'a ranch ##er raises 5 times as many cows as horses .'
      - cows as horses . if he has 168 animals , how many cows does he
    tokens:
      shape:
      - 31
      target: '[CLS] a ranch ##er raises 5 times as many cows as horses . if he has
        168 animals , how many cows does he have ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(R_00, R_01) R_03: =(N_01,
      R_02) R_04: *(N_02, R_00) R_05: *(N_04, R_01) R_06: +(R_04, R_05) R_07: =(N_06,
      R_06) R_08: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the sum of two positive integers
      N_02:
      - a number in the phrase " twice the first integer "
      N_04:
      - a number in the phrase " thrice the second integer "
      N_06:
      - the sum of twice the first integer and thrice the second integer
      X_00:
      - the first integer
      X_01:
      - the second integer
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the sum of the two positive integers
      - the sum of two positive integers
      - the sum of two positive intergers
      N_02:
      - a number in the phrase " twice the first "
      - a number in the phrase " twice the first integer "
      - a number in the phrase " twice the first integer "
      N_04:
      - a number in the phrase " thrice the second "
      - a number in the phrase " thrice the second integer "
      - a number in the phrase " thrice the second integer "
      N_06:
      - the value of twice the first integer plus thrice the second integer
      - the sum of 2 times the first integer and 3 times the second integer
      - the sum of twice the first integer and thrice the second integer
      X_00:
      - the first integer
      - the first integer
      - the value of the first integer
      X_01:
      - the second integer
      - the second integer
      - the value of the second integer
  info:
    answers:
    - f: '5'
      s: '4'
    item_id: 604cc853117d71c492a62f78
    numbers:
      N_00: '2'
      N_01: '9'
      N_02: '2'
      N_03: '1'
      N_04: '3'
      N_05: '2'
      N_06: '22'
    split: null
    variables:
    - f
    - s
  text:
    numbers:
      shape:
      - 31
      target: __ __ __ __  0 __ __ __  1 __  2 __  3 __ __  4  4 __  5 __ __  6 __
        __ __ __ __ __ __ __ __
    raw: 'the sum of two positive integers is 9 . twice the first integer plus th
      ##rice the second integer is 22 . determine the numbers .'
    snippets:
      shape:
      - 7
      - 15
      target:
      - the sum of two positive integers is 9 . twice the
      - the sum of two positive integers is 9 . twice the first integer plus th
      - 'of two positive integers is 9 . twice the first integer plus th ##rice the'
      - 'positive integers is 9 . twice the first integer plus th ##rice the second
        integer'
      - '9 . twice the first integer plus th ##rice the second integer is 22 .'
      - 'the first integer plus th ##rice the second integer is 22 . determine the
        numbers'
      - 'plus th ##rice the second integer is 22 . determine the numbers .'
    tokens:
      shape:
      - 31
      target: '[CLS] the sum of two positive integers is 9 . twice the first integer
        plus th ##rice the second integer is 22 . determine the numbers . [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(R_00, R_01) R_03: =(N_01,
      R_02) R_04: *(N_05, R_01) R_05: -(N_04, R_04) R_06: *(N_02, R_00) R_07: =(R_05,
      R_06) R_08: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the sum of the two numbers
      N_02:
      - a number in the phrase " twice the first number "
      N_04:
      - the sum of twice the first number and 3 times the second number
      N_05:
      - a number in the phrase " 3 times the second number "
      X_00:
      - the first number
      X_01:
      - the second number
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the sum of the two numbers
      - the sum of the two numbers
      - the sum of two numbers
      N_02:
      - a number in the phrase " twice the first number "
      - the value of the multiplier to the first number
      - the ratio of 3 times the second number subtracted from 280 to the first number
      N_04:
      - the sum of twice the first number and three times the second number
      - the sum of 3 times the second number and twice the first number
      - a number in the phrase " 280 "
      N_05:
      - a number in the phrase " 3 times the second number "
      - the value of the multiplier to the second
      - a number multiplied by the second number
      X_00:
      - the value of the first number
      - the value of the first number
      - the value of the first number
      X_01:
      - the value of the second number
      - the value of the second number
      - the value of the second number
  info:
    answers:
    - f: '125'
      s: '10'
    item_id: 604cc853117d71c492a62f9e
    numbers:
      N_00: '2'
      N_01: '135'
      N_02: '2'
      N_03: '1'
      N_04: '280'
      N_05: '3'
      N_06: '2'
    split: null
    variables:
    - f
    - s
  text:
    numbers:
      shape:
      - 31
      target: __ __ __ __  0 __ __  1 __  2 __  3 __ __  4 __  5 __ __  6 __ __ __
        __ __ __ __ __ __ __ __
    raw: the sum of two numbers is 135 . twice the first number equals 280 minus 3
      times the second number . what are the numbers ?
    snippets:
      shape:
      - 7
      - 15
      target:
      - the sum of two numbers is 135 . twice the first
      - the sum of two numbers is 135 . twice the first number equals 280
      - sum of two numbers is 135 . twice the first number equals 280 minus 3
      - two numbers is 135 . twice the first number equals 280 minus 3 times the
      - 135 . twice the first number equals 280 minus 3 times the second number .
      - twice the first number equals 280 minus 3 times the second number . what are
      - number equals 280 minus 3 times the second number . what are the numbers ?
    tokens:
      shape:
      - 31
      target: '[CLS] the sum of two numbers is 135 . twice the first number equals
        280 minus 3 times the second number . what are the numbers ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(R_00, R_01) R_03: =(N_01,
      R_02) R_04: *(N_02, R_00) R_05: -(R_04, R_01) R_06: =(N_05, R_05) R_07: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the sum of the two numbers
      N_02:
      - the coefficient of the other number
      N_05:
      - the value of twice the first number minus the second number
      X_00:
      - the value of one number
      X_01:
      - the value of the other number
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the sum of the first number and the second number
      - the sum of the two numbers
      - the sum of the two numbers
      N_02:
      - the multiplier for the first number
      - the coefficient of one number
      - a number in the phrase " twice of one of them "
      N_05:
      - the value of 2 times the first number minus the second number
      - the value of twice of one of them minus the other one
      - the value of twice the first number minus the second number
      X_00:
      - the value of the first number
      - the number of one number
      - the value of the first number
      X_01:
      - the value of the second number
      - the number of the other number
      - the value of the second number
  info:
    answers:
    - n1: '30'
      n2: '55'
    item_id: 604cc852117d71c492a62bd7
    numbers:
      N_00: '2'
      N_01: '85'
      N_02: '2'
      N_03: '1'
      N_04: '1'
      N_05: '5'
    split: null
    variables:
    - n1
    - n2
  text:
    numbers:
      shape:
      - 31
      target: __ __ __ __  0 __ __  1 __ __ __ __  2 __  3 __ __ __ __ __  4 __  5
        __ __ __ __ __ __ __ __
    raw: the sum of two numbers is 85 . the difference of twice of one of them and
      the other one is 5 . find both numbers .
    snippets:
      shape:
      - 6
      - 15
      target:
      - the sum of two numbers is 85 . the difference of
      - the sum of two numbers is 85 . the difference of twice of one
      - numbers is 85 . the difference of twice of one of them and the other
      - 85 . the difference of twice of one of them and the other one is
      - of one of them and the other one is 5 . find both numbers .
      - of them and the other one is 5 . find both numbers .
    tokens:
      shape:
      - 31
      target: '[CLS] the sum of two numbers is 85 . the difference of twice of one
        of them and the other one is 5 . find both numbers . [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: *(N_00, R_00) R_03: *(N_02,
      R_01) R_04: +(R_02, R_03) R_05: =(N_03, R_04) R_06: +(R_00, R_01) R_07: =(N_05,
      R_06) R_08: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the coefficient of the one number
      N_02:
      - the coefficient of another number
      N_03:
      - the sum of 2 times one number and 3 times another number
      N_05:
      - the sum of the two numbers
      X_00:
      - the value of one number
      X_01:
      - the value of another number
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the multiplier for the first number
      - a number in the phrase " eight times a number "
      - the coefficient of a number
      N_02:
      - the multiplier for the second number
      - a number in the phrase " five times another number "
      - the coefficient of another number
      N_03:
      - the sum of 8 times the first number and 5 times the second number
      - eight times a number plus five times another number
      - the value of eight times a number plus five times another number
      N_05:
      - the sum of the first number and the second number
      - the sum of two numbers
      - the sum of the two numbers
      X_00:
      - the value of the first number
      - the value of one number
      - the value of a number
      X_01:
      - the value of the second number
      - the value of another number
      - the value of another number
  info:
    answers:
    - n1: '-6'
      n2: '7'
    item_id: 604cc853117d71c492a62d40
    numbers:
      N_00: '8'
      N_01: '1'
      N_02: '5'
      N_03: '-13'
      N_04: '2'
      N_05: '1'
    split: null
    variables:
    - n1
    - n2
  text:
    numbers:
      shape:
      - 31
      target: __  0 __  1 __ __  2 __ __ __ __  3  3 __ __ __ __ __  4 __ __  5 __
        __ __ __ __ __ __ __ __
    raw: eight times a number plus five times another number is - 13 . the sum of
      the two numbers is 1 . what are the numbers ?
    snippets:
      shape:
      - 6
      - 15
      target:
      - eight times a number plus five times another
      - eight times a number plus five times another number is
      - eight times a number plus five times another number is - 13 .
      - number plus five times another number is - 13 . the sum of the two
      - '- 13 . the sum of the two numbers is 1 . what are the'
      - the sum of the two numbers is 1 . what are the numbers ?
    tokens:
      shape:
      - 31
      target: '[CLS] eight times a number plus five times another number is - 13 .
        the sum of the two numbers is 1 . what are the numbers ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: *(N_00, R_00) R_03: =(R_01,
      R_02) R_04: +(R_00, R_01) R_05: *(N_01, R_04) R_06: =(N_02, R_05) R_07: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the ratio of grant to francis
      N_01:
      - the ratio of grant to francis's age
      N_02:
      - the sum of their ages
      X_00:
      - the age of francis
      X_01:
      - the age of grant
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the ratio of the age grant to the age of francis
      - the ratio of the age of grant to the age of francis
      - the ratio of age of grant to that of francis
      N_01:
      - the ratio of 32 to the sum of the age of grant and the age of francis
      - the coefficient of the sum of their ages
      - a number in the phrase " one - third "
      N_02:
      - the numerator of the ratio of 32 to the sum of the age of grant and the age
        of francis
      - one - third of the sum of their ages
      - one - third of the sum of their ages
      X_00:
      - the age of francis
      - the age of francis
      - the age of francis
      X_01:
      - the age of grant
      - the age of grant
      - the age of grant
  info:
    answers:
    - f: '16'
      g: '80'
    item_id: 604cc853117d71c492a62eb6
    numbers:
      N_00: '5'
      N_01: '0.333333333333333'
      N_02: '32'
    split: null
    variables:
    - f
    - g
  text:
    numbers:
      shape:
      - 31
      target: __ __ __  0 __ __ __ __ __ __  1  1  1 __ __ __ __ __ __ __ __ __  2
        __ __ __ __ __ __ __ __
    raw: grant is five times as old as francis . one - third of the sum of their ages
      is equal to 32 . find their ages .
    snippets:
      shape:
      - 3
      - 15
      target:
      - grant is five times as old as francis . one
      - five times as old as francis . one - third of the sum of their
      - sum of their ages is equal to 32 . find their ages .
    tokens:
      shape:
      - 31
      target: '[CLS] grant is five times as old as francis . one - third of the sum
        of their ages is equal to 32 . find their ages . [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 10
    tokens: 'R_00: __NEW_VAR(, ) R_01: -(N_00, N_02) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the initial number of crayons
      N_01:
      - the number of crayons added
      N_02:
      - the number of crayons shared
      X_00:
      - the number of crayons now
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - number of crayons theresa has
      - the number of crayons theresa originally had
      - the number of crayons theresa has at first
      N_02:
      - number of crayons shared
      - the number of crayons theresa gave to nancy
      - the number of crayons she shares with nancy
      X_00:
      - the value of the number of crayons thersa has minus the number shared
      - the number of crayons theresa has now
      - the number of crayons theresa would have
  info:
    answers:
    - t: '19'
    item_id: 60f9186c90be09b72239ea6c
    numbers:
      N_00: '32'
      N_01: '12'
      N_02: '13'
    split: null
    variables:
    - t
  text:
    numbers:
      shape:
      - 31
      target: __ __ __  0 __ __ __ __ __ __  1 __ __ __ __ __ __  2 __ __ __ __ __
        __ __ __ __ __ __ __ __
    raw: 'theresa has 32 cr ##ayo ##ns . janice has 12 cr ##ayo ##ns . she shares
      13 with nancy . how many cr ##ayo ##ns will theresa have ?'
    snippets:
      shape:
      - 3
      - 15
      target:
      - 'theresa has 32 cr ##ayo ##ns . janice has 12'
      - '32 cr ##ayo ##ns . janice has 12 cr ##ayo ##ns . she shares 13'
      - '12 cr ##ayo ##ns . she shares 13 with nancy . how many cr ##ayo'
    tokens:
      shape:
      - 31
      target: '[CLS] theresa has 32 cr ##ayo ##ns . janice has 12 cr ##ayo ##ns .
        she shares 13 with nancy . how many cr ##ayo ##ns will theresa have ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 13
    tokens: 'R_00: __NEW_VAR(, ) R_01: -(N_00, N_02) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of plums
      N_02:
      - the number of plums she gave sam
      X_00:
      - the number of plums she has now
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of melanie's plums
      - the number of plums she picked
      - the initial number of plums picked by melanie
      N_02:
      - the number of plums given to sam by melanie
      - the number of plums she gave to sam
      - the number of plums given to sam from melanie
      X_00:
      - the number of plums remaining for melanie
      - the number of plums she has now
      - the number of plums left to melanie now
  info:
    answers:
    - p: '4'
    item_id: 60f9186c90be09b72239ecf1
    numbers:
      N_00: '7'
      N_01: '4'
      N_02: '3'
    split: null
    variables:
    - p
  text:
    numbers:
      shape:
      - 42
      target: __ __ __  0 __ __ __  1 __ __ __ __ __ __ __ __  2 __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'melanie picked 7 plum ##s and 4 orange ##s from the orchard . she gave 3
      plum ##s to sam . how many plum ##s does she have now ?'
    snippets:
      shape:
      - 3
      - 15
      target:
      - 'melanie picked 7 plum ##s and 4 orange ##s from'
      - 'melanie picked 7 plum ##s and 4 orange ##s from the orchard . she'
      - '##s from the orchard . she gave 3 plum ##s to sam . how many'
    tokens:
      shape:
      - 42
      target: '[CLS] melanie picked 7 plum ##s and 4 orange ##s from the orchard .
        she gave 3 plum ##s to sam . how many plum ##s does she have now ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 13
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: *(0.05, R_00) R_03: *(0.1,
      R_01) R_04: +(R_02, R_03) R_05: =(N_00, R_04) R_06: +(R_00, R_01) R_07: =(N_01,
      R_06) R_08: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the total value of nickels and dimes
      N_01:
      - the total number of nickels and dimes
      X_00:
      - the number of nickels
      X_01:
      - the number of dimes
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the total value of nickels and dimes
      - the total value of nickels and dimes
      - the total value of the coins
      N_01:
      - the total number of nickels and dimes
      - the total number of coins
      - the total number of coins
      X_00:
      - the number of nickels
      - the number of nickels
      - the number of nickels
      X_01:
      - the number of dimes
      - the number of dimes
      - the number of dimes
  info:
    answers:
    - d: '20'
      n: '30'
    item_id: 604cc853117d71c492a62fab
    numbers:
      N_00: '3.50000000000000'
      N_01: '50'
    split: null
    variables:
    - n
    - d
  text:
    numbers:
      shape:
      - 42
      target: __ __ __ __  0  0  0 __ __ __ __ __ __ __ __ __ __  1 __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'jill has $ 3 . 50 in nickel ##s and dime ##s . if she has 50 coins , how
      many of each type of coin does she have ?'
    snippets:
      shape:
      - 2
      - 15
      target:
      - 'jill has $ 3 . 50 in nickel ##s and dime'
      - 'and dime ##s . if she has 50 coins , how many of each type'
    tokens:
      shape:
      - 42
      target: '[CLS] jill has $ 3 . 50 in nickel ##s and dime ##s . if she has 50
        coins , how many of each type of coin does she have ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 13
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, R_00) R_02: =(N_01, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of bones that my dog dug
      N_01:
      - the total number of bones
      X_00:
      - the number of bones he had
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of bones acquired by digging
      - the number of bones he dug up
      - the number of bones dug up by my dog
      N_01:
      - the whole amount of bones
      - the number of bones he has in now
      - the total number of bones held by my dog
      X_00:
      - the starting amount of bones
      - the number of bones he starts with
      - the number of bones held by my dog at first
  info:
    answers:
    - s: '493'
    item_id: 60f9186c90be09b72239eb69
    numbers:
      N_00: '367'
      N_01: '860'
    split: null
    variables:
    - s
  text:
    numbers:
      shape:
      - 42
      target: __ __ __ __ __ __ __ __ __ __ __ __  0  0 __ __ __ __ __  1  1 __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'my dog had some bones . then , he dug up 36 ##7 bones . now he has 86 ##0
      bones . how many bones did he start with ?'
    snippets:
      shape:
      - 2
      - 15
      target:
      - 'bones . then , he dug up 36 ##7 bones . now he has 86'
      - '36 ##7 bones . now he has 86 ##0 bones . how many bones did'
    tokens:
      shape:
      - 42
      target: '[CLS] my dog had some bones . then , he dug up 36 ##7 bones . now he
        has 86 ##0 bones . how many bones did he start with ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 13
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: *(N_02, R_01) R_03: -(R_00,
      R_02) R_04: =(N_01, R_03) R_05: *(N_04, R_00) R_06: *(N_05, R_01) R_07: -(R_05,
      R_06) R_08: =(N_06, R_07) R_09: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the value of the larger number minus 3 times the smaller number
      N_02:
      - a number in the phrase " three times a smaller number "
      N_04:
      - a number in the phrase " twice the larger number "
      N_05:
      - a number in the phrase " three times a smaller number "
      N_06:
      - the value of twice the larger number minus three times the smaller number
      X_00:
      - the value of the larger number
      X_01:
      - the value of the smaller number
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the value of the larger number minus three times the smaller number
      - the value of the larger number minus three times the smaller number
      - the value of the larger number minus three times the smaller number
      N_02:
      - a number in the phrase " three times a smaller number "
      - a number in the phrase " three times a smaller number "
      - the constant that is multiplied by the smaller number in the first case
      N_04:
      - a number in the phrase " twice the larger number "
      - a number in the phrase " twice the larger number "
      - the constant that is multiplied by the larger number in the second case
      N_05:
      - a number in the phrase " three times the smaller number "
      - a number in the phrase " three times the smaller number "
      - the constant that is multiplied by the smaller number in the second case
      N_06:
      - the value of twice the larger number minus three times the smaller number
      - twice the larger number decreased by three times the smaller number
      - the value of twice the larger number minus three times the smaller number
      X_00:
      - the larger number
      - the value of the larger number
      - the value of the larger number
      X_01:
      - the smaller number
      - the value of the smaller number
      - the value of the smaller number
  info:
    answers:
    - l: '28'
      s: '8'
    item_id: 604cc853117d71c492a62d8f
    numbers:
      N_00: '1'
      N_01: '4'
      N_02: '3'
      N_03: '1'
      N_04: '2'
      N_05: '3'
      N_06: '32'
    split: null
    variables:
    - l
    - s
  text:
    numbers:
      shape:
      - 42
      target: __  0 __ __  1 __ __  2 __  3 __ __ __ __  4 __ __ __ __ __ __  5 __
        __ __ __ __ __ __ __  6 __ __ __ __ __ __ __ __ __ __ __
    raw: one number is 4 more than three times a smaller number . if twice the larger
      number is decreased by three times the smaller number , the result is 32 .
    snippets:
      shape:
      - 7
      - 15
      target:
      - one number is 4 more than three times
      - one number is 4 more than three times a smaller number
      - one number is 4 more than three times a smaller number . if twice
      - number is 4 more than three times a smaller number . if twice the larger
      - three times a smaller number . if twice the larger number is decreased by
        three
      - twice the larger number is decreased by three times the smaller number , the
        result
      - the smaller number , the result is 32 .
    tokens:
      shape:
      - 42
      target: '[CLS] one number is 4 more than three times a smaller number . if twice
        the larger number is decreased by three times the smaller number , the result
        is 32 . [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 13
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: -(R_00, N_00) R_03: =(R_01,
      R_02) R_04: +(N_01, R_00) R_05: +(N_01, R_01) R_06: +(R_04, R_05) R_07: =(N_02,
      R_06) R_08: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the value of the age of yoshi minus the age of his sister
      N_01:
      - the value of the future year minus now
      N_02:
      - the sum of their age
      X_00:
      - the age of yoshi
      X_01:
      - the age of yoshi
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the value of yoshi's age now minus the sister's age now
      - the value of yoshi's present age minus yoshi's sister's present age
      - a value of the age of yoshi today minus the age of his sister today
      N_01:
      - the number of years from now
      - a number in the phrase " six years from now, the sum of their age will be
        32 "
      - the number of years to go to the future
      N_02:
      - the sum of their age after six years
      - the sum of their ages of yoshi and his sister in the 6 years
      - the sum of their ages six years later
      X_00:
      - yoshi's age now
      - the present age of yoshi
      - the age of yoshi today
      X_01:
      - the sister's age now
      - the present age of his sister
      - the age of his sister today
  info:
    answers:
    - s: '4'
      y: '16'
    item_id: 604cc853117d71c492a62f10
    numbers:
      N_00: '12'
      N_01: '6'
      N_02: '32'
    split: null
    variables:
    - y
    - s
  text:
    numbers:
      shape:
      - 42
      target: __ __ __ __  0 __ __ __ __ __ __  1 __ __ __ __ __ __ __ __ __ __ __  2
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'yo ##shi is 12 years older than his sister . six years from now , the sum
      of their age will be 32 . find yo ##shi '' s present age .'
    snippets:
      shape:
      - 3
      - 15
      target:
      - 'yo ##shi is 12 years older than his sister . six'
      - 12 years older than his sister . six years from now , the sum of
      - 'the sum of their age will be 32 . find yo ##shi '' s present'
    tokens:
      shape:
      - 42
      target: '[CLS] yo ##shi is 12 years older than his sister . six years from now
        , the sum of their age will be 32 . find yo ##shi '' s present age . [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 13
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: __NEW_VAR(, ) R_03: *(10,
      R_00) R_04: +(R_01, R_03) R_05: =(R_02, R_04) R_06: +(R_00, R_01) R_07: =(N_02,
      R_06) R_08: *(N_04, R_00) R_09: -(R_08, R_02) R_10: =(N_03, R_09) R_11: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the sum of the two digits of the number
      N_03:
      - the value of 11 times the tens digit minus the value of the number
      N_04:
      - a number in the phrase " 11 "
      X_00:
      - the value of the ten's digit
      X_01:
      - the units digit
      X_02:
      - the value of the number
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the sum of the digits of a two - digit number
      - the sum of the tens'digit of the original number and the unit digit of the
        original number
      - the sum of the two digits of the number
      N_03:
      - the value of 11 times the tens digit minus the original number
      - the value of 11 times the tens'digit of the original number minus the original
        number
      - the value of 11 times the tens digit minus the number
      N_04:
      - a number in the phrase " 11 times the tens "
      - the multiplier of the tens'digit of the original number
      - a number in the phrase " 11 times the tens digit "
      X_00:
      - the tens digit
      - the value of the tens'digit of the original number
      - the tens unit of the number
      X_01:
      - the units digit
      - the value of the unit digit of the original number
      - the units digit of the number
      X_02:
      - the original number
      - the value of the original number
      - the value of the number
  info:
    answers:
    - o: '86'
      t: '8'
      u: '6'
    item_id: 604cc853117d71c492a6305c
    numbers:
      N_00: '2'
      N_01: '1'
      N_02: '14'
      N_03: '2'
      N_04: '11'
      N_05: '10'
    split: null
    variables:
    - t
    - u
    - o
  text:
    numbers:
      shape:
      - 42
      target: __ __ __ __ __  0 __ __  1 __ __  2 __ __ __ __ __ __ __  3 __ __  4
        __ __  5 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: the sum of the two digits of a number is 14 . the value of the number is
      2 less than 11 times the tens digit . what is the number ?
    snippets:
      shape:
      - 6
      - 15
      target:
      - the sum of the two digits of a number is 14 .
      - the sum of the two digits of a number is 14 . the value of
      - the two digits of a number is 14 . the value of the number is
      - . the value of the number is 2 less than 11 times the tens digit
      - of the number is 2 less than 11 times the tens digit . what is
      - is 2 less than 11 times the tens digit . what is the number ?
    tokens:
      shape:
      - 42
      target: '[CLS] the sum of the two digits of a number is 14 . the value of the
        number is 2 less than 11 times the tens digit . what is the number ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 13
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_00, R_00) R_02: -(R_00, R_01) R_03: +(N_01,
      R_02) R_04: =(N_02, R_03) R_05: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the weekly allowance of the family's allowance
      N_01:
      - the dollars spent to be washed
      N_02:
      - the dollars of the weekly car
      X_00:
      - the weekly allowance
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the ratio of spent money to alyssa's allowance for going to the movies
      - the ratio of spent allowance going to the movies to her allowance
      - the ratio of the amount of money spent on movies to the total amount of allowance
      N_01:
      - the number of dollars alyssa earned for washing the family car
      - the number of dollars alyssa washed the family car and earned after going
        to movies
      - the number of dollars earned after spending
      N_02:
      - the number of dollars alyssa ended with
      - the number of dollars alyssa ended with
      - the number of dollars left
      X_00:
      - the number of dollars of alyssa's weekly allowance
      - the number of dollars alyssa's allowance
      - the total amount of allowance
  info:
    answers:
    - a: '8'
    item_id: 60f9186c90be09b72239f1b5
    numbers:
      N_00: '0.500000000000000'
      N_01: '8'
      N_02: '12'
    split: null
    variables:
    - a
  text:
    numbers:
      shape:
      - 42
      target: __ __ __  0 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __  1 __ __ __
        __ __ __ __ __ __ __ __  2 __ __ __ __ __ __ __ __ __ __
    raw: alyssa spent half of her allowance going to the movies . she washed the family
      car and earned 8 dollars . what is her weekly allowance if she ended with 12
      dollars ?
    snippets:
      shape:
      - 3
      - 15
      target:
      - alyssa spent half of her allowance going to the movies
      - she washed the family car and earned 8 dollars . what is her weekly allowance
      - her weekly allowance if she ended with 12 dollars ?
    tokens:
      shape:
      - 42
      target: '[CLS] alyssa spent half of her allowance going to the movies . she
        washed the family car and earned 8 dollars . what is her weekly allowance
        if she ended with 12 dollars ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 13
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_01) R_02: *(N_02, R_01) R_03: =(R_00,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of pages
      N_01:
      - the number of pages of reading homework homework
      N_02:
      - the number of problems in each page
      X_00:
      - the total number of problems
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - number of pages of math homework
      - the number of pages of math homework
      - the number of pages of sarah's math homework
      N_01:
      - number of pages of reading homework
      - the number of pages of reading homework
      - the number of pages of sarah's reading homework
      N_02:
      - number of problems on each page
      - the number of problems that each page had
      - the number of problems on each page
      X_00:
      - total number of problems in total
      - the number of problems in total
      - the total number of problems on all pages
  info:
    answers:
    - p: '40'
    item_id: 60f9186c90be09b72239edc8
    numbers:
      N_00: '4'
      N_01: '6'
      N_02: '4'
    split: null
    variables:
    - p
  text:
    numbers:
      shape:
      - 42
      target: __ __ __  0 __ __ __ __ __  1 __ __ __ __ __ __ __ __ __  2 __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: sarah had 4 pages of math homework and 6 pages of reading homework . if each
      page had 4 problems on it , how many problems did she have to complete in total
      ?
    snippets:
      shape:
      - 3
      - 15
      target:
      - sarah had 4 pages of math homework and 6 pages
      - had 4 pages of math homework and 6 pages of reading homework . if each
      - reading homework . if each page had 4 problems on it , how many problems
    tokens:
      shape:
      - 42
      target: '[CLS] sarah had 4 pages of math homework and 6 pages of reading homework
        . if each page had 4 problems on it , how many problems did she have to complete
        in total ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 13
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_03, R_00) R_02: +(N_01, N_02) R_03: =(R_01,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of puppies in a pet shelter
      N_02:
      - the number of puppies needed to be adopted
      N_03:
      - the number of puppies in the pet shelter
      X_00:
      - the number of hours it takes to be adopted
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the initial number of puppies
      - the number of puppies in the beginning
      - the number of puppies a pet shelter had
      N_02:
      - the additional number of puppies
      - the number of puppies added
      - the number of puppies another pet shelter had
      N_03:
      - the number of puppies adopted per day
      - the number of puppies adopted per day
      - the number of puppies adopted per day
      X_00:
      - the number of days it takes for all the puppies to be adopted
      - the number of days for every puppy to be adopted
      - the number of days it would take for all of them to be adopted
  info:
    answers:
    - d: '9'
    item_id: 60f9186c90be09b72239ea8c
    numbers:
      N_00: '1'
      N_01: '2'
      N_02: '34'
      N_03: '4'
      N_04: '1'
    split: null
    variables:
    - d
  text:
    numbers:
      shape:
      - 42
      target: __  0 __ __ __  1 __ __ __ __  2 __ __ __ __ __  3 __ __  4 __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'a pet shelter had 2 pup ##pies when another 34 were brought in . if 4 pup
      ##pies a day are adopted , how long would it take for all of them to be adopted
      ?'
    snippets:
      shape:
      - 5
      - 15
      target:
      - 'a pet shelter had 2 pup ##pies when'
      - 'a pet shelter had 2 pup ##pies when another 34 were brought'
      - 'shelter had 2 pup ##pies when another 34 were brought in . if 4 pup'
      - 'another 34 were brought in . if 4 pup ##pies a day are adopted ,'
      - 'brought in . if 4 pup ##pies a day are adopted , how long would'
    tokens:
      shape:
      - 42
      target: '[CLS] a pet shelter had 2 pup ##pies when another 34 were brought in
        . if 4 pup ##pies a day are adopted , how long would it take for all of them
        to be adopted ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 13
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(R_00, R_01) R_03: =(N_00,
      R_02) R_04: /(N_01, 100) R_05: *(R_00, R_04) R_06: /(N_02, 100) R_07: *(R_01,
      R_06) R_08: +(R_05, R_07) R_09: =(N_03, R_08) R_10: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the total number of coins
      N_01:
      - the price of a coin
      N_02:
      - the price of a coin in the second case
      N_03:
      - the total value of pieces
      X_00:
      - the number of the first coin
      X_01:
      - the number of pieces of the second coin
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of coins
      - the number of coins
      - the total number of coins tom has
      N_01:
      - the face value of the 25 cent piece in cents
      - the cost of the 25 cent piece
      - the value of one coin in the first case in cents
      N_02:
      - the face value of the 10 cent piece in cents
      - the cost of the 10 cent piece
      - the value of one coin in the second case in cents
      N_03:
      - the sum of money in dollars
      - the total cost of the coins by dollars
      - the sum of money tom has in dollars
      X_00:
      - the number of 25 cent pieces
      - the number of the 25 cent piece
      - the number of coins in the first case
      X_01:
      - the number of 10 cent pieces
      - the number of the 10 cent piece
      - the number of coins in the second case
  info:
    answers:
    - p1: '12'
      p2: '17'
    item_id: 604cc853117d71c492a62f53
    numbers:
      N_00: '29'
      N_01: '25'
      N_02: '10'
      N_03: '5.45000000000000'
    split: null
    variables:
    - p2
    - p1
  text:
    numbers:
      shape:
      - 42
      target: __ __ __  0 __ __ __ __  1 __ __ __  2 __ __ __ __ __ __ __ __ __ __
        __  3  3  3 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: tom has 29 coins made up of 25 cent pieces and 10 cent pieces . the sum of
      money he has is $ 5 . 45 . how many of each coin does he have ?
    snippets:
      shape:
      - 4
      - 15
      target:
      - tom has 29 coins made up of 25 cent pieces
      - tom has 29 coins made up of 25 cent pieces and 10 cent pieces .
      - made up of 25 cent pieces and 10 cent pieces . the sum of money
      - sum of money he has is $ 5 . 45 . how many of each
    tokens:
      shape:
      - 42
      target: '[CLS] tom has 29 coins made up of 25 cent pieces and 10 cent pieces
        . the sum of money he has is $ 5 . 45 . how many of each coin does he have
        ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 13
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_02) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the initial number of short trees
      N_02:
      - the number of short trees will be planted today
      X_00:
      - the additional number of short trees
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the current number of short trees
      - the number of short trees planted at first
      - the number of short trees currently in the park
      N_02:
      - the number of short trees planted
      - the number of trees planted additionally
      - the number of short trees park workers will plant today
      X_00:
      - the total number of short trees
      - the total number of trees planted
      - the number of whole trees
  info:
    answers:
    - w: '12'
    item_id: 60f9186c90be09b72239f1a3
    numbers:
      N_00: '3'
      N_01: '6'
      N_02: '9'
    split: null
    variables:
    - w
  text:
    numbers:
      shape:
      - 42
      target: __ __ __  0 __ __ __  1 __ __ __ __ __ __ __ __ __ __ __  2 __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: there are 3 short trees and 6 tall trees currently in the park . park workers
      will plant 9 short trees today . how many short trees will the park have when
      the workers are finished ?
    snippets:
      shape:
      - 3
      - 15
      target:
      - there are 3 short trees and 6 tall trees currently
      - there are 3 short trees and 6 tall trees currently in the park .
      - the park . park workers will plant 9 short trees today . how many short
    tokens:
      shape:
      - 42
      target: '[CLS] there are 3 short trees and 6 tall trees currently in the park
        . park workers will plant 9 short trees today . how many short trees will
        the park have when the workers are finished ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 13
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_01) R_02: *(N_02, R_01) R_03: =(R_00,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of new chairs
      N_01:
      - the number of new tables
      N_02:
      - the number of new chairs
      X_00:
      - the total length of chairs
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of rachel's new chairs
      - number of new chairs
      - the number of new chairs for rachel's house
      N_01:
      - the number of rachel's new tables
      - number of new tables
      - the number of new tables for rachel's house
      N_02:
      - the length of minutes needed to put each piece of furniture
      - amount of time she spent on each piece of furniture
      - the length of time for spending on each piece of furniture putting it together
        in minutes
      X_00:
      - the whole minutes to finish putting all new furniture
      - the total amount of time it took her to put all the furniture together
      - the total length of time for spending on all furnitures putting them together
        in minutes
  info:
    answers:
    - m: '40'
    item_id: 60f9186c90be09b72239ebf8
    numbers:
      N_00: '7'
      N_01: '3'
      N_02: '4'
    split: null
    variables:
    - m
  text:
    numbers:
      shape:
      - 42
      target: __ __ __  0 __ __ __  1 __ __ __ __ __ __ __ __ __  2 __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: rachel bought 7 new chairs and 3 new tables for her house . if she spent
      4 minutes on each piece of furniture putting it together , how many minutes
      did it take her to finish ?
    snippets:
      shape:
      - 3
      - 15
      target:
      - rachel bought 7 new chairs and 3 new tables for
      - rachel bought 7 new chairs and 3 new tables for her house . if
      - for her house . if she spent 4 minutes on each piece of furniture putting
    tokens:
      shape:
      - 42
      target: '[CLS] rachel bought 7 new chairs and 3 new tables for her house . if
        she spent 4 minutes on each piece of furniture putting it together , how many
        minutes did it take her to finish ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 13
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_01) R_02: +(N_02, R_01) R_03: =(R_00,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of erasers in the drawer at first
      N_01:
      - the number of erasers on the desk
      N_02:
      - the number of erasers alyssa placed on the drawer
      X_00:
      - the number of erasers there now has
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of erasers in the drawer
      - the number of erasers in the drawer
      - the number of erasers in the drawer
      N_01:
      - the number of erasers on the desk
      - the number of erasers on the desk
      - the number of erasers on the desk
      N_02:
      - the number of erasers added on the desk
      - the number of erasers alyssa newly placed on the desk
      - the number of new erasers on the desk
      X_00:
      - the total number of erasers
      - the whole amount of erasers
      - the total number of erasers
  info:
    answers:
    - c: '117'
    item_id: 60f9186c90be09b72239f100
    numbers:
      N_00: '48'
      N_01: '30'
      N_02: '39'
      N_03: '45'
    split: null
    variables:
    - c
  text:
    numbers:
      shape:
      - 42
      target: __ __ __  0 __ __ __ __ __ __  1 __ __ __ __ __ __ __ __  2 __ __ __  3
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'there are 48 erase ##rs in the drawer and 30 erase ##rs on the desk . alyssa
      placed 39 erase ##rs and 45 rulers on the desk . how many erase ##rs are now
      there in total ?'
    snippets:
      shape:
      - 4
      - 15
      target:
      - 'there are 48 erase ##rs in the drawer and 30'
      - '48 erase ##rs in the drawer and 30 erase ##rs on the desk . alyssa'
      - '##rs on the desk . alyssa placed 39 erase ##rs and 45 rulers on the'
      - '. alyssa placed 39 erase ##rs and 45 rulers on the desk . how many'
    tokens:
      shape:
      - 42
      target: '[CLS] there are 48 erase ##rs in the drawer and 30 erase ##rs on the
        desk . alyssa placed 39 erase ##rs and 45 rulers on the desk . how many erase
        ##rs are now there in total ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 13
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(R_00, R_01) R_03: =(N_00,
      R_02) R_04: *(0.05, R_00) R_05: *(0.1, R_01) R_06: +(R_04, R_05) R_07: =(N_01,
      R_06) R_08: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the total number of nickels and dimes
      N_01:
      - the total value of nickels and dimes
      X_00:
      - the number of nickels
      X_01:
      - the number of dimes
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the total number of nickels and dimes
      - the sum of the number of nickels and the number of dimes
      - the number of nickels and dimes
      N_01:
      - the total value of nickels and dimes
      - the sum of the value of nickels and the value of dimes
      - the total value of nickels and dimes
      X_00:
      - the number of nickels
      - the number of nickels
      - the number of nickels
      X_01:
      - the number of dimes
      - the number of dimes
      - the number of dimes
  info:
    answers:
    - d: '22'
      n: '13'
    item_id: 604cc853117d71c492a63040
    numbers:
      N_00: '35'
      N_01: '2.85000000000000'
    split: null
    variables:
    - n
    - d
  text:
    numbers:
      shape:
      - 42
      target: __ __ __  0 __ __ __ __ __ __ __ __ __ __ __  1  1  1 __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'you have 35 nickel ##s and dime ##s . their total value is $ 2 . 85 . write
      the system of equations to find the number n of nickel ##s and the number of
      d dime ##s .'
    snippets:
      shape:
      - 2
      - 15
      target:
      - 'you have 35 nickel ##s and dime ##s . their'
      - '##s . their total value is $ 2 . 85 . write the system of'
    tokens:
      shape:
      - 42
      target: '[CLS] you have 35 nickel ##s and dime ##s . their total value is $
        2 . 85 . write the system of equations to find the number n of nickel ##s
        and the number of d dime ##s . [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 13
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: *(N_00, R_00) R_03: =(R_01,
      R_02) R_04: *(N_01, R_01) R_05: *(N_01, R_00) R_06: +(R_04, R_05) R_07: =(N_02,
      R_06) R_08: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - a number in the phrase " twice as fast as "
      N_01:
      - the minutes spent running for joe and pete
      N_02:
      - the distance between joe and pete after running
      X_00:
      - the running speed of pete
      X_01:
      - the running speed of joe
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the ratio of the speed of joe to the speed of pete
      - the ratio of the speed of joe to the speed of pete
      - the ratio of the speed of joe to that of pete
      N_01:
      - the number of minutes traveled
      - the minutes that joe and pete ran
      - the minutes for which they ran in opposite directions
      N_02:
      - the sum of the distance traveled by joe and pete who ran in the opposite direction
      - the distance between them
      - the distance between them after they ran in opposite directions
      X_00:
      - the speed of pete
      - the speed of pete in the opposite direction from joe
      - the speed of pete
      X_01:
      - the speed of joe
      - the speed of joe in the opposite direction from pete
      - the speed of joe
  info:
    answers:
    - j: '0.266666666666667'
      p: '0.133333333333333'
    item_id: 604cc853117d71c492a62e44
    numbers:
      N_00: '2'
      N_01: '40'
      N_02: '16'
    split: null
    variables:
    - p
    - j
  text:
    numbers:
      shape:
      - 42
      target: __ __ __ __  0 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __  1
        __ __ __ __ __ __ __ __  2 __ __ __ __ __ __ __ __ __
    raw: joe can run twice as fast as pete . they start at the same point and run
      in the opposite direction for 40 minutes . the distance between them is now
      16 km . how fast does joe run ?
    snippets:
      shape:
      - 3
      - 15
      target:
      - joe can run twice as fast as pete . they start
      - and run in the opposite direction for 40 minutes . the distance between them
        is
      - . the distance between them is now 16 km . how fast does joe run
    tokens:
      shape:
      - 42
      target: '[CLS] joe can run twice as fast as pete . they start at the same point
        and run in the opposite direction for 40 minutes . the distance between them
        is now 16 km . how fast does joe run ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 13
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_00, N_01) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of books each book has
      N_01:
      - the number of pages
      X_00:
      - the total number of pages
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of books
      - the number of books in the science fiction section
      - number of science fiction books
      N_01:
      - the number of pages in each book
      - the number of pages on each book
      - number of pages of each book
      X_00:
      - the total number of pages
      - the number of pages all the books have in total
      - the total number of pages of the books
  info:
    answers:
    - p: '3824'
    item_id: 60f9186c90be09b72239f08e
    numbers:
      N_00: '8'
      N_01: '478'
    split: null
    variables:
    - p
  text:
    numbers:
      shape:
      - 42
      target: __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __  0 __ __ __
        __ __ __  1  1 __ __ __ __ __ __ __ __ __ __ __ __ __ __
    raw: 'the library is divided into different sections for different types of books
      . the science fiction section has 8 books . if each book has 47 ##8 pages ,
      how many pages do all the books have in total ?'
    snippets:
      shape:
      - 2
      - 15
      target:
      - books . the science fiction section has 8 books . if each book has 47
      - '8 books . if each book has 47 ##8 pages , how many pages do'
    tokens:
      shape:
      - 42
      target: '[CLS] the library is divided into different sections for different
        types of books . the science fiction section has 8 books . if each book has
        47 ##8 pages , how many pages do all the books have in total ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: *(N_01, N_02) R_03: *(N_03,
      N_04) R_04: +(R_02, R_03) R_05: *(R_00, R_01) R_06: =(R_04, R_05) R_07: +(N_01,
      N_03) R_08: =(R_01, R_07) R_09: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of pounds of the raisins
      N_02:
      - the price of a pound of raisins
      N_03:
      - the number of pounds of granola
      N_04:
      - the price of a pound of gransins
      X_00:
      - the cost of a pound of raisins
      X_01:
      - the cost of the granola
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the amount of raisins
      - the number of pounds of raisins
      - the number of pounds of raisins used to make a trail mix
      N_02:
      - the price of a pound of raisins
      - the cost per pound of raisins
      - the cost of a pound of raisins
      N_03:
      - the amount of granola
      - the number of pounds of granola
      - the number of pounds of granola used to make a trail mix
      N_04:
      - the price of a pound of granola
      - the cost per pound of granola
      - the cost of a pound of granola
      X_00:
      - the price of a pound of the mixture
      - the cost per pound of the mixture
      - the cost of a pound of a trail mix
      X_01:
      - the amount of the mixture of raisins and granola
      - the number of pounds of the mixture
      - the number of pounds of a trail mix
  info:
    answers:
    - c: '5.46000000000000'
      m: '100'
    item_id: 60f9186c90be09b72239f0af
    numbers:
      N_00: '1'
      N_01: '10'
      N_02: '4.20000000000000'
      N_03: '90'
      N_04: '5.60000000000000'
    split: null
    variables:
    - c
    - m
  text:
    numbers:
      shape:
      - 79
      target: __ __ __ __ __ __ __  0 __ __ __ __  1 __ __ __ __ __ __ __  2  2  2
        __ __ __ __  3 __ __ __ __ __ __  4  4  4 __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __
    raw: 'find the cost per pound of a trail mix made from 10 pounds of rai ##sin
      ##s that costs 4 . 2 dollars per pound and 90 pounds of gran ##ola that costs
      5 . 6 dollars per pound .'
    snippets:
      shape:
      - 5
      - 15
      target:
      - find the cost per pound of a trail mix made from 10 pounds of
      - 'pound of a trail mix made from 10 pounds of rai ##sin ##s that costs'
      - 'pounds of rai ##sin ##s that costs 4 . 2 dollars per pound and 90'
      - '4 . 2 dollars per pound and 90 pounds of gran ##ola that costs 5'
      - '90 pounds of gran ##ola that costs 5 . 6 dollars per pound .'
    tokens:
      shape:
      - 79
      target: '[CLS] find the cost per pound of a trail mix made from 10 pounds of
        rai ##sin ##s that costs 4 . 2 dollars per pound and 90 pounds of gran ##ola
        that costs 5 . 6 dollars per pound . [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_01) R_02: -(R_01, N_02) R_03: =(R_00,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of pieces of candy that katie had
      N_01:
      - the number of pieces of candy that her sister had
      N_02:
      - the number of pieces of candy eaten by her sister
      X_00:
      - the number of pieces of candy they have
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of candy owned by katie
      - the number of katie's candies
      - the number of pieces of candy katie had
      N_01:
      - the number of candy owned by her sister
      - the number of her sister's candies
      - the number of pieces of candy katie's sister had
      N_02:
      - the number of candy eaten
      - the number of eaten candies
      - the number of pieces eaten
      X_00:
      - the total number of candy left
      - the number of candies they have left
      - the total number of pieces katie and katie's sister have now
  info:
    answers:
    - n: '23'
    item_id: 60f9186c90be09b72239ebea
    numbers:
      N_00: '8'
      N_01: '23'
      N_02: '8'
      N_03: '1'
    split: null
    variables:
    - n
  text:
    numbers:
      shape:
      - 79
      target: __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __  0 __ __ __ __ __ __
        __  1 __ __ __ __  2 __ __  3 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __
    raw: for halloween , katie and her sister combined the candy they received . katie
      had 8 pieces of candy while her sister had 23 . if they ate 8 pieces the first
      night , how many pieces do they have left ?
    snippets:
      shape:
      - 4
      - 15
      target:
      - the candy they received . katie had 8 pieces of candy while her sister had
      - pieces of candy while her sister had 23 . if they ate 8 pieces the
      - sister had 23 . if they ate 8 pieces the first night , how many
      - . if they ate 8 pieces the first night , how many pieces do they
    tokens:
      shape:
      - 79
      target: '[CLS] for halloween , katie and her sister combined the candy they
        received . katie had 8 pieces of candy while her sister had 23 . if they ate
        8 pieces the first night , how many pieces do they have left ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: -(N_01, R_00) R_02: =(N_02, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of buckets
      N_02:
      - the number of buckets left
      X_00:
      - the number of buckets
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the number of buckets in the beginning
      - the number of buckets of seed a farmer started the day with
      - number of buckets the farmer started with
      N_02:
      - the number of remaining buckets at finial
      - the number of buckets of seed after sowing seeds
      - number of buckets she has left
      X_00:
      - the number of missing buckets
      - the number of used buckets for sowing
      - the value of buckets the farmer started with minus the number of buckets left
  info:
    answers:
    - s: '2.75000000000000'
    item_id: 60f9186c90be09b72239f102
    numbers:
      N_00: '1'
      N_01: '8.75000000000000'
      N_02: '6'
    split: null
    variables:
    - s
  text:
    numbers:
      shape:
      - 79
      target: __  0 __ __ __ __ __  1  1  1 __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __  2 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __
    raw: 'a farmer started the day with 8 . 75 bucket ##s of seeds . after spending
      the morning so ##wing seeds , she now has 6 bucket ##s left . how many bucket
      ##s of seeds did the farmer so ##w ?'
    snippets:
      shape:
      - 3
      - 15
      target:
      - a farmer started the day with 8 .
      - 'a farmer started the day with 8 . 75 bucket ##s of seeds .'
      - 'so ##wing seeds , she now has 6 bucket ##s left . how many bucket'
    tokens:
      shape:
      - 79
      target: '[CLS] a farmer started the day with 8 . 75 bucket ##s of seeds . after
        spending the morning so ##wing seeds , she now has 6 bucket ##s left . how
        many bucket ##s of seeds did the farmer so ##w ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_02, R_00) R_02: +(N_00, N_01) R_03: =(R_01,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - number of pictures from tiffany's phone
      N_01:
      - number of pictures from her camera to facebook
      N_02:
      - number of albums camera uploaded
      X_00:
      - the number of pictures in each album
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of pictures from the phone
      - the number of pictures uploaded from her phone
      - the number of pictures tiffany uploaded from her phone to facebook
      N_01:
      - the number of pictures from facebook
      - the number of pictures uploaded from her camera
      - the number of pictures tiffany uploaded from her camera to facebook
      N_02:
      - the number of albums sorted all pictures with the same amount
      - the number of albums
      - the number of albums with the same amount of pics
      X_00:
      - the number of pictures in each album
      - the number of pictures in each of the albums
      - the number of pictures in each of the albums
  info:
    answers:
    - e: '4'
    item_id: 60f9186c90be09b72239f199
    numbers:
      N_00: '7'
      N_01: '13'
      N_02: '5'
    split: null
    variables:
    - e
  text:
    numbers:
      shape:
      - 79
      target: __ __ __  0 __ __ __ __ __  1 __ __ __ __ __ __ __ __ __ __ __ __ __  2
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __
    raw: 'tiffany uploaded 7 pictures from her phone and 13 from her camera to facebook
      . if she sorted the pic ##s into 5 different albums with the same amount of
      pic ##s in each album , how many pictures were in each of the albums ?'
    snippets:
      shape:
      - 3
      - 15
      target:
      - tiffany uploaded 7 pictures from her phone and 13 from
      - uploaded 7 pictures from her phone and 13 from her camera to facebook . if
      - 'if she sorted the pic ##s into 5 different albums with the same amount of'
    tokens:
      shape:
      - 79
      target: '[CLS] tiffany uploaded 7 pictures from her phone and 13 from her camera
        to facebook . if she sorted the pic ##s into 5 different albums with the same
        amount of pic ##s in each album , how many pictures were in each of the albums
        ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: *(N_03, R_00) R_02: +(N_00, N_02) R_03: =(R_01,
      R_02) R_04: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of tickets luke won
      N_02:
      - the number of tickets luke won
      N_03:
      - the number of tickets for a piece of candy
      X_00:
      - the number of tickets he could buy
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of tickets from'whack a mole '
      - the number of tickets won by playing'whack a mole '
      - the number of tickets won by playing'whack a mole '
      N_02:
      - the number of tickets from'skee ball '
      - the number of tickets won by playing'skee ball '
      - the number of tickets earned by playing'skee ball '
      N_03:
      - the number of tickets to buy a candy
      - the number of tickets needed to buy the candy
      - the number of tickets one candy costs
      X_00:
      - the number of candies bought
      - the number of candy that can be bought
      - the total number of candies
  info:
    answers:
    - c: '5'
    item_id: 60f9186c90be09b72239eb7b
    numbers:
      N_00: '2'
      N_01: '1'
      N_02: '13'
      N_03: '3'
      N_04: '1'
    split: null
    variables:
    - c
  text:
    numbers:
      shape:
      - 79
      target: __ __ __ __ __ __ __ __ __  0 __ __ __ __ __ __  1 __ __ __  2 __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __  3 __  4 __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __
    raw: 'while playing at the arcade , luke won 2 tickets playing '' w ##ha ##ck
      a mole '' and 13 tickets playing '' sk ##ee ball . '' if he was trying to buy
      candy that cost 3 tickets a piece , how many could he buy ?'
    snippets:
      shape:
      - 5
      - 15
      target:
      - 'playing at the arcade , luke won 2 tickets playing '' w ##ha ##ck a'
      - '2 tickets playing '' w ##ha ##ck a mole '' and 13 tickets playing '''
      - 'w ##ha ##ck a mole '' and 13 tickets playing '' sk ##ee ball .'
      - was trying to buy candy that cost 3 tickets a piece , how many could
      - to buy candy that cost 3 tickets a piece , how many could he buy
    tokens:
      shape:
      - 79
      target: '[CLS] while playing at the arcade , luke won 2 tickets playing '' w
        ##ha ##ck a mole '' and 13 tickets playing '' sk ##ee ball . '' if he was
        trying to buy candy that cost 3 tickets a piece , how many could he buy ?
        [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: +(N_00, N_02) R_02: =(R_00, R_01) R_03: __DONE(,
      )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the amount of hair cut the next day
      N_02:
      - the amount of hair cut off next day
      X_00:
      - the whole amount of hair cut
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of inches of hair cut off the first day
      - the length of hair cut off
      - the number of inches of hair cut off the first time
      N_02:
      - the number of inches of hair cut off the second day
      - the length of another hair cut off
      - the number of inches of hair cut off the second time
      X_00:
      - the total number of inches of hair cut off
      - the whole length of hair cut off
      - the total number of inches of hair cut off
  info:
    answers:
    - t: '0.875000000000000'
    item_id: 60f9186c90be09b72239ec6e
    numbers:
      N_00: '0.375000000000000'
      N_01: '1'
      N_02: '0.500000000000000'
      N_03: '1'
    split: null
    variables:
    - t
  text:
    numbers:
      shape:
      - 79
      target: __ __ __ __ __ __ __ __  0  0  0 __  1 __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __  2  2  2 __  3 __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __
    raw: elizabeth went to the salon and had 0 . 375 of an inch of hair cut off .
      the next day she went back and asked for another 0 . 5 of an inch to be cut
      off . how much hair did she have cut off in all ?
    snippets:
      shape:
      - 4
      - 15
      target:
      - elizabeth went to the salon and had 0 . 375 of an inch of hair
      - salon and had 0 . 375 of an inch of hair cut off . the
      - she went back and asked for another 0 . 5 of an inch to be
      - asked for another 0 . 5 of an inch to be cut off . how
    tokens:
      shape:
      - 79
      target: '[CLS] elizabeth went to the salon and had 0 . 375 of an inch of hair
        cut off . the next day she went back and asked for another 0 . 5 of an inch
        to be cut off . how much hair did she have cut off in all ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: *(N_03, R_00) R_03: *(N_04,
      R_01) R_04: +(R_02, R_03) R_05: =(N_02, R_04) R_06: +(R_00, R_01) R_07: =(N_06,
      R_06) R_08: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the total value of bills
      N_03:
      - the value of 20 - dollar bills
      N_04:
      - the cost of 50 - dollar bills
      N_06:
      - the total number of bills
      N_07:
      - the value of 20 - dollar bills
      N_08:
      - the value of 50 - dollar bills
      X_00:
      - the number of 20 - dollar bills
      X_01:
      - the number of 50 - dollar bills
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - the sum of the value of the first type of bill and the second type of bill
      - the value of a check to be cashed
      - the total value of the bills
      N_03:
      - the value of the first type of bill
      - the value of a dollars bill
      - the value of a 20 - dollar bill
      N_04:
      - the value of the second type of bill
      - the value of another dollars bill
      - the value of a 50 - dollar bill
      N_06:
      - the sum of the number of the first type of bill and the second type of bill
      - the total number of bills given
      - the number of the bills
      N_07:
      - the value of the first type of bill
      - the value of a dollars bill
      - the value of a 20 - dollar bill
      N_08:
      - the value of the second type of bill
      - the value of another dollars bill
      - the value of a 50 - dollar bill
      X_00:
      - the number of the first type of bills
      - the number of 20 - dollars bills given
      - the number of the 20 - dollar bills
      X_01:
      - the number of the second type of bills
      - the number of 50 - dollars bills given
      - the number of the 50 - dollar bills
  info:
    answers:
    - b1: '12'
      b2: '3'
    item_id: 604cc853117d71c492a62c8e
    numbers:
      N_00: '1'
      N_01: '1'
      N_02: '390'
      N_03: '20'
      N_04: '50'
      N_05: '1'
      N_06: '15'
      N_07: '20'
      N_08: '50'
    split: null
    variables:
    - b1
    - b2
  text:
    numbers:
      shape:
      - 79
      target: __ __ __  0 __ __ __ __  1  2 __ __ __  3 __ __ __ __  4 __ __ __ __
        __ __ __ __ __  5 __ __  6 __ __ __ __  7 __ __ __ __ __ __ __ __ __  8 __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __
    raw: kerry asked a bank teller to cash a 390 dollars check using 20 - dollar bills
      and 50 - dollar bills . if the teller gave her a total of 15 bills , how many
      20 - dollar bills did she get ? how many 50 - dollar bills ?
    snippets:
      shape:
      - 9
      - 15
      target:
      - kerry asked a bank teller to cash a 390 dollars
      - kerry asked a bank teller to cash a 390 dollars check using 20 - dollar
      - asked a bank teller to cash a 390 dollars check using 20 - dollar bills
      - to cash a 390 dollars check using 20 - dollar bills and 50 - dollar
      - check using 20 - dollar bills and 50 - dollar bills . if the teller
      - bills . if the teller gave her a total of 15 bills , how many
      - the teller gave her a total of 15 bills , how many 20 - dollar
      - total of 15 bills , how many 20 - dollar bills did she get ?
      - bills did she get ? how many 50 - dollar bills ?
    tokens:
      shape:
      - 79
      target: '[CLS] kerry asked a bank teller to cash a 390 dollars check using 20
        - dollar bills and 50 - dollar bills . if the teller gave her a total of 15
        bills , how many 20 - dollar bills did she get ? how many 50 - dollar bills
        ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(R_00, R_01) R_03: =(N_02,
      R_02) R_04: *(N_03, R_01) R_05: =(R_00, R_04) R_06: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the number of children in the whole group
      N_02:
      - the number of children in the whole group
      N_03:
      - the ratio of the number of children to the number of adults
      X_00:
      - the number of children
      X_01:
      - the number of children
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_02:
      - total number of children and adults
      - total number of people in the group
      - the total number of children and adults in the group
      N_03:
      - the ratio of the number of children to the number of adults
      - the ratio of children to adults
      - the ratio of the number of children to adults
      X_00:
      - the number of children
      - the number of children
      - the number of children
      X_01:
      - the number of adults
      - the number of adults
      - the number of adults
  info:
    answers:
    - a: '40'
      c: '80'
    item_id: 604cc852117d71c492a62b65
    numbers:
      N_00: '6'
      N_01: '1'
      N_02: '120'
      N_03: '2'
    split: null
    variables:
    - c
    - a
  text:
    numbers:
      shape:
      - 79
      target: __ __  0 __ __ __  1 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __  2 __ __ __ __ __ __ __ __  3 __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __
    raw: the 6 th graders from an elementary school are going to celebrate the end
      of the year by going to the local pizza parlor . there are 120 in the whole
      group , and there are twice as many children as adults in the group . how many
      children are there ?
    snippets:
      shape:
      - 4
      - 15
      target:
      - the 6 th graders from an elementary school are
      - the 6 th graders from an elementary school are going to celebrate the
      - the local pizza parlor . there are 120 in the whole group , and there
      - the whole group , and there are twice as many children as adults in the
    tokens:
      shape:
      - 79
      target: '[CLS] the 6 th graders from an elementary school are going to celebrate
        the end of the year by going to the local pizza parlor . there are 120 in
        the whole group , and there are twice as many children as adults in the group
        . how many children are there ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: __NEW_VAR(, ) R_03: -(R_00,
      R_01) R_04: =(N_01, R_03) R_05: +(R_02, R_02) R_06: =(N_04, R_05) R_07: *(R_01,
      R_02) R_08: *(R_00, R_02) R_09: +(R_07, R_08) R_10: *(N_04, N_06) R_11: =(R_09,
      R_10) R_12: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the value of the cost of a bag of peanuts minus the worth of a bag of cashews
      N_04:
      - the number of bags of a mixture of peanuts and cashews
      N_06:
      - the cost of the mixture per bag
      X_00:
      - the cost of a bag of peanuts
      X_01:
      - the cost of a bagews
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_01:
      - the value of the price of a bag of cashews minus the price of a bag of peanuts
      - value of the worth of a bag of cashews minus the worth of a bag of peanuts
      - the value of the cost of a bag of cashews minus the cost of a bag of peanuts
      N_04:
      - the total number of bags of the mixture of two nuts
      - the total bags of a mixture to make
      - the total number of mixture bags
      N_06:
      - the price of a bag of the mixture
      - the worth per bag of mixed bags
      - the cost of one mixture bag
      X_00:
      - the price of a bag of cashews
      - the cashews worth per bag
      - the cost of a bag of cashews
      X_01:
      - the price of a bag of peanuts
      - the peanuts worth per bag
      - the cost of a bag of peanuts
      X_02:
      - the number of bags when an equal amount of peanuts and cashews are used
      - the cashew bags or either peanut bags used to make the mixture
      - the total number of cashew bags or peanut bags where the number of those two
        bags are equal
  info:
    answers:
    - b: '20'
      c: '1.20000000000000'
      p: '0.900000000000000'
    item_id: 604cc853117d71c492a62d61
    numbers:
      N_00: '1'
      N_01: '0.300000000000000'
      N_02: '1'
      N_03: '1'
      N_04: '40'
      N_05: '1'
      N_06: '1.05000000000000'
      N_07: '1'
    split: null
    variables:
    - c
    - p
    - b
  text:
    numbers:
      shape:
      - 79
      target: __  0 __ __ __ __ __  1  1  1 __ __  2 __ __ __ __ __ __  3 __ __ __
        __ __ __ __ __ __ __ __ __  4 __ __  5 __ __ __ __  6  6  6 __ __ __ __ __
        __  7 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __
    raw: 'a bag of peanuts is worth 0 . 30 less than a bag of cash ##ew ##s . an equal
      amount of peanuts and cash ##ew ##s are used to make 40 bags of a mixture that
      sells for 1 . 05 per bag . how much is a bag of cash ##ew ##s worth ?'
    snippets:
      shape:
      - 8
      - 15
      target:
      - a bag of peanuts is worth 0 .
      - a bag of peanuts is worth 0 . 30 less than a bag of
      - 'is worth 0 . 30 less than a bag of cash ##ew ##s . an'
      - 'a bag of cash ##ew ##s . an equal amount of peanuts and cash ##ew'
      - 'cash ##ew ##s are used to make 40 bags of a mixture that sells for'
      - are used to make 40 bags of a mixture that sells for 1 . 05
      - bags of a mixture that sells for 1 . 05 per bag . how much
      - '05 per bag . how much is a bag of cash ##ew ##s worth ?'
    tokens:
      shape:
      - 79
      target: '[CLS] a bag of peanuts is worth 0 . 30 less than a bag of cash ##ew
        ##s . an equal amount of peanuts and cash ##ew ##s are used to make 40 bags
        of a mixture that sells for 1 . 05 per bag . how much is a bag of cash ##ew
        ##s worth ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: *(N_03, R_00) R_03: *(N_04,
      R_01) R_04: +(R_02, R_03) R_05: *(N_06, N_07) R_06: =(R_04, R_05) R_07: +(R_00,
      R_01) R_08: =(N_06, R_07) R_09: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_03:
      - the cost of the first coffee per kg
      N_04:
      - the cost of the second coffee in dollars
      N_06:
      - the total amount of the mixed coffee
      N_07:
      - the cost of the mixed coffee per kg
      X_00:
      - the amount of the first coffee kind
      X_01:
      - the amount of the second coffee
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_03:
      - the price of a pound of first - grade coffee
      - the price of one coffee selling price
      - the price per kg of the first type of coffee
      N_04:
      - the price of a pound of second - grade coffee
      - the price of another coffee selling price
      - the price per kg of the second type of coffee
      N_06:
      - the amount of the mixture of 2 grades
      - the total amount of the final mixture
      - the number of kgs of the mixture
      N_07:
      - the price of a pound of the mixture
      - the selling price of the final mixture
      - the price per kg of the mixture
      X_00:
      - the amount of first - grade coffee
      - the kg of the mixture consisting coffee selling at 8 dollars per kilogram
      - the number of kgs of the first type of coffee
      X_01:
      - the amount of second - grade coffee
      - the kg of the mixture consisting coffee selling at 10 dollars per kilogram
      - the number of kgs of the second type of coffee
  info:
    answers:
    - c1: '75'
      c2: '125'
    item_id: 604cc853117d71c492a630c1
    numbers:
      N_00: '1'
      N_01: '2'
      N_02: '1'
      N_03: '8'
      N_04: '10'
      N_05: '2'
      N_06: '200'
      N_07: '8.75000000000000'
    split: null
    variables:
    - c2
    - c1
  text:
    numbers:
      shape:
      - 79
      target: __  0 __ __ __  1 __ __ __ __  2 __ __  3 __ __ __ __ __ __  4 __ __
        __ __ __ __ __ __ __  5 __ __ __ __ __ __ __  6 __ __ __ __ __ __ __ __ __  7  7  7
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __
    raw: a wholesale outlet has 2 grades of coffee , one selling at 8 $ / kg & the
      other 10 $ / kg . sam wants to mix the 2 grades together . he wants to make
      200 kg of the mixture & sell it for $ 8 . 75 / kg . how much of each grade should
      be mixed ?
    snippets:
      shape:
      - 8
      - 15
      target:
      - a wholesale outlet has 2 grades of coffee
      - a wholesale outlet has 2 grades of coffee , one selling at
      - outlet has 2 grades of coffee , one selling at 8 $ / kg &
      - grades of coffee , one selling at 8 $ / kg & the other 10
      - 8 $ / kg & the other 10 $ / kg . sam wants to
      - kg . sam wants to mix the 2 grades together . he wants to make
      - grades together . he wants to make 200 kg of the mixture & sell it
      - the mixture & sell it for $ 8 . 75 / kg . how much
    tokens:
      shape:
      - 79
      target: '[CLS] a wholesale outlet has 2 grades of coffee , one selling at 8
        $ / kg & the other 10 $ / kg . sam wants to mix the 2 grades together . he
        wants to make 200 kg of the mixture & sell it for $ 8 . 75 / kg . how much
        of each grade should be mixed ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: /(N_03, 100) R_03: *(R_00,
      R_02) R_04: /(N_04, 100) R_05: *(R_01, R_04) R_06: +(R_03, R_05) R_07: =(N_06,
      R_06) R_08: +(R_00, R_01) R_09: =(N_05, R_08) R_10: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_03:
      - the price of a souvenirs
      N_04:
      - the cost of the second type of souvenirs
      N_05:
      - the total number of souvenirs distributed
      N_06:
      - the total cost of souvenirs distributed
      N_07:
      - the price of a 20uvenirs
      N_08:
      - the cost of the second type of souvenirs
      X_00:
      - the cost of the first souvenirs
      X_01:
      - the cost of the second souvenirs
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_03:
      - the unit cost of the first type of souvenir in cents
      - the cost of one type of souvenir in cents
      - the unit cost of one type of souvenir in cents
      N_04:
      - the unit cost of the second type of souvenir in cents
      - the cost of the other type of souvenir in cents
      - the unit cost of the other type of souvenir in cents
      N_05:
      - the sum of the number of the first type of souvenirs and the number of the
        second type of souvenirs
      - the total number of souvenirs
      - the total number of souvenirs
      N_06:
      - the sum of the cost of the first type of souvenirs in dollars and the cost
        of the second type of souvenirs in dollars
      - the total cost of souvenirs
      - the total cost of souvenirs in dollars
      N_07:
      - the unit cost of the first type of souvenir in cents
      - the cost of one type of souvenir in cents
      - the unit cost of one type of souvenir in cents
      N_08:
      - the unit cost of the second type of souvenir in cents
      - the cost of the other type of souvenir in cents
      - the unit cost of the other type of souvenir in cents
      X_00:
      - the number of the first type of souvenirs
      - the number of one type of souvenirs
      - the number of one type of souvenirs
      X_01:
      - the number of the second type of souvenirs
      - the number of the other type of souvenirs
      - the number of the other type of souvenirs
  info:
    answers:
    - s1: '600'
      s2: '400'
    item_id: 604cc853117d71c492a62c78
    numbers:
      N_00: '1000'
      N_01: '2'
      N_02: '1'
      N_03: '20'
      N_04: '25'
      N_05: '1000'
      N_06: '220'
      N_07: '20'
      N_08: '25'
    split: null
    variables:
    - s1
    - s2
  text:
    numbers:
      shape:
      - 79
      target: __ __ __  0 __ __ __ __ __ __  1 __ __ __ __ __ __ __  2 __ __  3 __
        __ __ __ __ __ __ __  4 __ __ __  5  5 __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __  6 __ __ __ __ __  7 __ __  8 __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __
    raw: 'at its grand opening , the guthrie market distributed two different types
      of so ##uven ##irs . one type cost 20 cents each , and the other type cost 25
      cents each . one thousand so ##uven ##irs were distributed in all . if the cost
      of these so ##uven ##irs was 220 dollars , how many of 20 cents and 25 cents
      so ##uven ##irs were distributed ?'
    snippets:
      shape:
      - 9
      - 15
      target:
      - at its grand opening , the guthrie market distributed two
      - 'grand opening , the guthrie market distributed two different types of so
        ##uven ##irs .'
      - 'different types of so ##uven ##irs . one type cost 20 cents each , and'
      - 'so ##uven ##irs . one type cost 20 cents each , and the other type'
      - 'each , and the other type cost 25 cents each . one thousand so ##uven'
      - 'other type cost 25 cents each . one thousand so ##uven ##irs were distributed
        in'
      - 'cost of these so ##uven ##irs was 220 dollars , how many of 20 cents'
      - 'was 220 dollars , how many of 20 cents and 25 cents so ##uven ##irs'
      - ', how many of 20 cents and 25 cents so ##uven ##irs were distributed ?'
    tokens:
      shape:
      - 79
      target: '[CLS] at its grand opening , the guthrie market distributed two different
        types of so ##uven ##irs . one type cost 20 cents each , and the other type
        cost 25 cents each . one thousand so ##uven ##irs were distributed in all
        . if the cost of these so ##uven ##irs was 220 dollars , how many of 20 cents
        and 25 cents so ##uven ##irs were distributed ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: *(N_04, R_00) R_03: *(N_06,
      R_01) R_04: +(R_02, R_03) R_05: =(N_08, R_04) R_06: +(R_00, R_01) R_07: =(N_12,
      R_06) R_08: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_04:
      - the hours of rain in the first storm
      N_06:
      - the time for the second storm to make the first storm
      N_08:
      - the total amount of rain in the two storms
      N_12:
      - the sum of the rate of the first storm and the rate of the second storm
      X_00:
      - the rate of the first storm
      X_01:
      - the rate of the second storm
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_04:
      - the number of hours the first storm lasted
      - the duration for the first storm
      - the time for which the first storm lasted
      N_06:
      - the number of hours the second storm lasted
      - the duration for the second storm
      - the time for which the second storm lasted
      N_08:
      - the sum of the volume of rain from the first storm and the volume of rain
        from the second storm
      - the total milliliters of rain from the two rainstorms
      - the total amount of rain
      N_12:
      - the sum of the volume of rain per hour of the first storm and the volume of
        rain per hour of the second storm
      - the sum of the two rainfall rates
      - the sum of each rate of the two storms
      X_00:
      - the volume of rain per hour of the first storm
      - the rainfall rate of the first storm
      - the rate of rainfall in the first storm
      X_01:
      - the volume of rain per hour of the second storm
      - the rainfall rate of the second storm
      - the rate of rainfall in the second storm
  info:
    answers:
    - s1: '20'
      s2: '35'
    item_id: 604cc852117d71c492a62bf5
    numbers:
      N_00: '2'
      N_01: '1'
      N_02: '1'
      N_03: '1'
      N_04: '20'
      N_05: '2'
      N_06: '40'
      N_07: '1'
      N_08: '1800'
      N_09: '1'
      N_10: '2'
      N_11: '2'
      N_12: '55'
    split: null
    variables:
    - s1
    - s2
  text:
    numbers:
      shape:
      - 79
      target: __  0 __ __ __ __ __  1 __ __  2 __ __ __ __  3 __ __  4 __ __ __ __  5
        __ __  6 __ __ __  7 __ __  8 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __  9 __ 10 __ __ __ __ __ __ 11 __ __ 12 __ __ __ __ __ __ __
        __ __ __ __ __
    raw: 'two rains ##torm ##s occurred in one week in a certain area . the first
      storm lasted 20 hours , and the second storm lasted 40 hours , for a total of
      1800 mill ##ili ##ters of rain . what was the rate of rainfall in mill ##ili
      ##ters per hour for the first and second storms if the sum of the two rates
      was 55 mill ##ili ##ters per hour ?'
    snippets:
      shape:
      - 13
      - 15
      target:
      - 'two rains ##torm ##s occurred in one week'
      - 'two rains ##torm ##s occurred in one week in a certain area . the'
      - '##torm ##s occurred in one week in a certain area . the first storm lasted'
      - week in a certain area . the first storm lasted 20 hours , and the
      - certain area . the first storm lasted 20 hours , and the second storm lasted
      - storm lasted 20 hours , and the second storm lasted 40 hours , for a
      - hours , and the second storm lasted 40 hours , for a total of 1800
      - 'second storm lasted 40 hours , for a total of 1800 mill ##ili ##ters of'
      - '40 hours , for a total of 1800 mill ##ili ##ters of rain . what'
      - 'mill ##ili ##ters per hour for the first and second storms if the sum of'
      - '##ters per hour for the first and second storms if the sum of the two'
      - 'second storms if the sum of the two rates was 55 mill ##ili ##ters per'
      - 'the sum of the two rates was 55 mill ##ili ##ters per hour ?'
    tokens:
      shape:
      - 79
      target: '[CLS] two rains ##torm ##s occurred in one week in a certain area .
        the first storm lasted 20 hours , and the second storm lasted 40 hours , for
        a total of 1800 mill ##ili ##ters of rain . what was the rate of rainfall
        in mill ##ili ##ters per hour for the first and second storms if the sum of
        the two rates was 55 mill ##ili ##ters per hour ? [SEP]'
- answer_generated: []
  correct: false
  eqn_generated:
    shape:
    - 1
    tokens: ''
  equation:
    shape:
    - 14
    tokens: 'R_00: __NEW_VAR(, ) R_01: __NEW_VAR(, ) R_02: +(R_00, R_01) R_03: =(N_00,
      R_02) R_04: *(N_01, R_00) R_05: *(N_02, R_01) R_06: +(R_04, R_05) R_07: =(N_03,
      R_06) R_08: __DONE(, )'
  expl_generated: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the total number of acres of land to raise corn and wheat
      N_01:
      - the cost of cultivating corn per acre
      N_02:
      - the cost of wheat per acre in the first case
      N_03:
      - the total amount of money that can be used to raise corn and wheat
      X_00:
      - the number of acres of corn
      X_01:
      - the number of acres of wheat
  explanation: !!python/object/apply:collections.defaultdict
    args:
    - *id001
    dictitems:
      N_00:
      - the total area of land for cultivating corn and wheat
      - the acres of land allotted for the johnson farm
      - the total extent of the land of the johnson farm in acre
      N_01:
      - the cost of cultivating corn per acre
      - the cost for cultivating corn
      - the cost of cultivating corn per acre
      N_02:
      - the cost of cultivating wheat per acre
      - the cost for cultivating wheat
      - the cost of cultivating wheat per acre
      N_03:
      - the amount of dollars available for cultivating
      - total funds available
      - the total cost available for cultivating crops
      X_00:
      - the number of acres of cultivating corn
      - the amount of acres of corn
      - the extent of the land for cultivating corn in acre
      X_01:
      - the number of acres of cultivating wheat
      - the amount of acres of wheat
      - the extent of the land for cultivating wheat in acre
  info:
    answers:
    - c: '300'
      w: '200'
    item_id: 604cc853117d71c492a62c49
    numbers:
      N_00: '500'
      N_01: '42'
      N_02: '30'
      N_03: '18600'
    split: null
    variables:
    - c
    - w
  text:
    numbers:
      shape:
      - 79
      target: __ __ __ __ __  0 __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __  1 __ __ __ __  2 __ __ __ __ __ __ __ __ __ __  3  3  3 __ __ __
        __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __ __
        __ __ __ __ __ __
    raw: 'the johnson farm has 500 acres of land allotted for cult ##ivating corn
      and wheat . the cost of cult ##ivating corn and wheat is 42 dollars for corn
      and 30 dollars for wheat per acre . mr . johnson has 18 , 600 dollars available
      for cult ##ivating these crops . if he used all the land and entire budget ,
      how many acres of corn and how many acres of wheat should he plant ?'
    snippets:
      shape:
      - 4
      - 15
      target:
      - 'the johnson farm has 500 acres of land allotted for cult ##ivating'
      - 'of cult ##ivating corn and wheat is 42 dollars for corn and 30 dollars for'
      - wheat is 42 dollars for corn and 30 dollars for wheat per acre . mr
      - 'per acre . mr . johnson has 18 , 600 dollars available for cult ##ivating'
    tokens:
      shape:
      - 79
      target: '[CLS] the johnson farm has 500 acres of land allotted for cult ##ivating
        corn and wheat . the cost of cult ##ivating corn and wheat is 42 dollars for
        corn and 30 dollars for wheat per acre . mr . johnson has 18 , 600 dollars
        available for cult ##ivating these crops . if he used all the land and entire
        budget , how many acres of corn and how many acres of wheat should he plant
        ? [SEP]'
var: -1.356164383561644
